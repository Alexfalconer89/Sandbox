{"job":{"components":{"197124":{"id":197124,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-2064,"y":-256,"width":32,"height":32,"inputConnectorIDs":[197135],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Log FS Feeds End"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"insert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect\nCURRENT_TIMESTAMP::timestamp_ntz\n,'${Database}'\n,'BUILD'\n,'SMA FS FEEDS OUT'\n,'BUILD'\n,'FINISHED'\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"197125":{"id":197125,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-2544,"y":-256,"width":32,"height":32,"inputConnectorIDs":[197133],"outputSuccessConnectorIDs":[197134],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Log FS Feeds Start"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"insert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect\nCURRENT_TIMESTAMP::timestamp_ntz\n,'${Database}'\n,'BUILD'\n,'SMA FS FEEDS OUT'\n,'BUILD'\n,'STARTED'\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"197129":{"id":197129,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-2384,"y":-256,"width":32,"height":32,"inputConnectorIDs":[197134],"outputSuccessConnectorIDs":[197128],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Create Extract Tables"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nProgram           : Nestle SMA Faststats\nAuthor            : John Moreland\nClient Name       : Nestle\nJob Number        :\nStandard Machine  : Kognitio\nAmendment History : v01 - JM 20180919 - Created\n\n******************************************************************************************/\n\n/******************************************************************************************\n                                         FASTSTATS\n******************************************************************************************/\n\nalter warehouse set warehouse_size = 'Small';\n\n-- Create BV Lookup table for Questions\ncreate or replace table ${Database}.temp.sma_bv_fs_bazaar_question as\nselect distinct cid,\nmax(bv_pro) as bv_pro,\nmax(bv_advance) as bv_advance,\nmax(bv_organic) as bv_organic\nfrom (select distinct cid,\ncase when question ilike '%PRO%' then 1 else 0 end as bv_pro,\ncase when question ilike '%ADVANCE%' then 1 else 0 end as bv_advance,\ncase when question ilike '%ORGANIC%' then 1 else 0 end as bv_organic\nfrom ${Database}.live.cid_question where question_id in (select question_id from ${Database}.db.ref_question where question ilike '%overall rating%' and question ilike '%SMA%' and question not ilike '%small%')\nunion\nselect distinct cid,\ncase when question ilike '%PRO%' then 1 else 0 end as bv_pro,\ncase when question ilike '%ADVANCE%' then 1 else 0 end as bv_advance,\ncase when question ilike '%ORGANIC%' then 1 else 0 end as bv_organic\nfrom ${Database}.live.cid_brand_question where question_id in (select question_id from ${Database}.db.ref_question where question ilike '%overall rating%' and question ilike '%SMA%' and question not ilike '%small%')\n)\ngroup by 1\norder by cid;\n\ncreate or replace table ${Database}.temp.sma_fs_cid_all\nas\nselect\n    cs.cid,\n    cast(0 as int) as fid,\n    cs.hid,\n    cs.bbw_urn,\n    cs.name_urn,\n    cs.gender,\n    cs.postcode,\n    cs.postal_sector,\n    cs.postal_area,\n    case when lower(cs.live_joinedsource) regexp '(.*)(roi|mummypages|babyfairie)(.*)' then 'Ireland' else cs.country end as country,\n    cs.mailable,\n    cs.emailable,\n    cast(0 as int) as phoneable,\n    cast(0 as int) as smsable,\n    cs.mailable_ignoring_dp,\n    cs.emailable_ignoring_dp,\n    cast(0 as int) as phoneable_ignoring_dp,\n    cast(0 as int) as smsable_ignoring_dp,\n    case when lower(cs.live_joinedsource) regexp '(.*)(roi|mummypages|babyfairie)(.*)' or cs.country = 'Ireland' then cs.mailable else 0 end as mailable_ie,\n    case when lower(cs.live_joinedsource) regexp '(.*)(roi|mummypages|babyfairie)(.*)' or cs.country = 'Ireland' then cs.emailable else 0 end as emailable_ie,\n    cs.mailable_ignoring_name_address,\n    cast(0 as int) as baby_elegance,\n    cast('' as varchar) as name_urn_to_mail,\n    cast('' as varchar) as name_urn_to_email,\n    cast('' as varchar) as name_urn_to_phone,\n    cast('' as varchar) as name_urn_to_sms,\n    cs.name_urn_to_mail_ignoring_dp,\n    cs.name_urn_to_email_ignoring_dp,\n    cast('' as varchar) as name_urn_to_phone_ignoring_dp,\n    cast('' as varchar) as name_urn_to_sms_ignoring_dp,\n    cast('' as varchar) as name_urn_to_mail_ie,\n    cast('' as varchar) as name_urn_to_email_ie,\n    cs.source_careline,\n    cs.source_nestle,\n    cs.source_fanfinders,\n    cs.source_mums_baby,\n    cs.source_mummypages,\n    cs.source_leadgeneration,\n    cs.source_mfm_website,\n    cs.source_her,\n    cs.source_moac,\n    cs.source_moac_date,\n    cs.dp_optin_raw,\n    cast('' as varchar) as userid,\n    cast('' as varchar) as webid,\n    cs.umbraco_user_id,\n    cs.first_regdate as first_registration,\n    cs.first_joinedsource as first_joinedreference,\n    cs.live_joinedsource as live_joinedreference,\n    cs.live_name_urn,\n    cs.member_status,\n    cs.live_regdate as member_status_date,\n    cs.core_status,\n    cs.email_cluster,\n    cs.Email_Cluster_New,\n    cs.children_under_3,\n    cs.child_under_27w,\n    cs.due_date_char,\n    cs.pregnancy_status,\n    cs.member,\n    cs.core,\n    cs.password_reset,\n    cs.subject_line,\n    cs.live_reg_cost as reg_cost,\n    cs.partnersite,\n    coalesce(cc.mailable,0) as mailable_cerelac,\n    coalesce(cc.emailable,0) as emailable_cerelac,\n    cast(0 as int) as phoneable_cerelac,\n    cast(0 as int) as smsable_cerelac,\n    coalesce(cc.mailable_ignoring_dp,0) as mailable_ignoring_dp_cerelac,\n    coalesce(cc.emailable_ignoring_dp,0) as emailable_ignoring_dp_cerelac,\n    cast(0 as int) as phoneable_ignoring_dp_cerelac,\n    cast(0 as int) as smsable_ignoring_dp_cerelac,\n    case when cc.country = 'Ireland' then coalesce(cc.mailable,0) else 0 end as mailable_ie_cerelac,\n    case when cc.country = 'Ireland' then coalesce(cc.emailable,0) else 0 end as emailable_ie_cerelac,\n    case when cc.country = 'Ireland' then coalesce(cc.mailable_ignoring_dp,0) else 0 end as mailable_ignoring_dp_ie_cerelac,\n    case when cc.country = 'Ireland' then coalesce(cc.emailable_ignoring_dp,0) else 0 end as emailable_ignoring_dp_ie_cerelac,\n    cast(0 as int) as mailable_ignoring_name_address_cerelac,\n    cast('' as varchar) as name_urn_to_mail_cerelac,\n    cast('' as varchar) as name_urn_to_email_cerelac,\n    cast('' as varchar) as name_urn_to_phone_cerelac,\n    cast('' as varchar) as name_urn_to_sms_cerelac,\n    coalesce(cc.name_urn_to_mail_ignoring_dp,'') as name_urn_to_mail_ignoring_dp_cerelac,\n    coalesce(cc.name_urn_to_email_ignoring_dp,'') as name_urn_to_email_ignoring_dp_cerelac,\n    cast('' as varchar) as name_urn_to_phone_ignoring_dp_cerelac,\n    cast('' as varchar) as name_urn_to_sms_ignoring_dp_cerelac,\n    cast('' as varchar) as name_urn_to_mail_ie_cerelac,\n    cast('' as varchar) as name_urn_to_email_ie_cerelac,\n    case when cc.country = 'Ireland' then coalesce(cc.name_urn_to_mail_ignoring_dp,'') else '' end as name_urn_to_mail_ignoring_dp_ie_cerelac,\n    case when cc.country = 'Ireland' then coalesce(cc.name_urn_to_email_ignoring_dp,'') else '' end as name_urn_to_email_ignoring_dp_ie_cerelac,\n    cc.cerelac_total_orders,\n    cc.cerelac_first_order_date,\n    cc.cerelac_last_order_date,\n    cc.cerelac_total_spend,\n    cc.cerelac_aov,\n    cc.cerelac_total_items,\n    cc.cerelac_avg_items_per_order,\n    cc.cerelac_website,\n    cc.cerelac_webshop,\n    cast(1 as int) as sma_flag,\n    cs.thirdparty,\n    case when na.account_created < na.last_login then 1 else 0 end as login_since_reg,\n    cast('SMA' as varchar(30)) as source,\n    cs.babyfair_date,\n    cs.babyfair_ticket,\n    cs.mothers_day_date,\n    na.domain_country as domaincountry,\n    cs.last_active_date,\n    cs.stage_indicator,\n    cs.shopmium_stage_indicator,\n    cs.welcome_pack_claimdate,\n    substr(cs.thirdparty_url,1,255) as thirdparty_url_a,\n    substr(cs.thirdparty_url,256,255) as thirdparty_url_b,\n    substr(cs.thirdparty_url,511,255) as thirdparty_url_c,\n    substr(cs.thirdparty_url,766,255) as thirdparty_url_d,\n\tcoalesce(bv_pro,0) as bv_pro,\n\tcoalesce(bv_advance,0) as bv_advance,\n\tcoalesce(bv_organic,0) as bv_organic,\n    coalesce(little_steps_flag,0) as little_steps_flag\nfrom ${Database}.live.cid_sma cs\nleft join ${Database}.live.cid_cerelac cc on cc.cid = cs.cid\nleft join ${Database}.temp.sma_bv_fs_bazaar_question bvq on cs.cid = bvq.cid\nleft join (\n              select\n                  *,\n                  row_number() over(partition by name_urn order by source_date desc) as row_num\n              from ${Database}.db.names_attributes\n          ) na on cs.live_name_urn = na.name_urn\n              and na.row_num = 1;\n\n\ncreate or replace table ${Database}.temp.sma_fs_cid_children\nas\nselect\n    cid,\n    cast(0 as int) as child_number,\n    coalesce(case when lower(child_name) regexp '.*[a-z].*' and child_name <> '' then child_name else '' end,'') as child_name,\n    coalesce(case when lower(gender) not regexp '(.*)(boy|femail|girl|male)(.*)' then '' else gender end,'') as child_gender,\n    dob as child_dob,\n    case\n        when auto_promoted = 1 then 'True'\n        when auto_promoted = 0 then 'False'\n        else ''\n    end as child_auto_promoted,\n    case\n        when child_stage_now in ('S1','S2','S3','S4','S5','S6','S7') then replace(child_stage_now,'S','Stage ')\n        when child_stage_now in ('T1','T2','T3') then 'Pregnancy'\n        else 'No Stage'\n    end as child_stage,\n    case\n        when child_stage_reg in ('S1','S2','S3','S4','S5','S6','S7') then replace(child_stage_reg,'S','Stage ')\n        when child_stage_reg in ('T1','T2','T3') then 'Pregnancy ' || child_stage_reg\n        when child_stage_reg = 'Pre' then 'Pre Pregnancy'\n        else 'No Stage'\n    end as child_stage_at_registration,\n    comms_programme as programme,\n    comms_subprogramme as subprogramme,\n    comms_programme_description as programme_description,\n    comms_duedate as programme_comm_due,\n    live_flag\nfrom ${Database}.live.dependant;\n\n\ncreate or replace table ${Database}.temp.sma_fs_cid_details_all\nas\nselect\n    cs.cid,\n    cs.hid,\n    cs.name_urn,\n    trim(cs.title)||' '||trim(cs.firstname)||' '||trim(cs.lastname) as name,\n    cs.title,\n    cs.firstname,\n    cs.lastname,\n    cs.salutation,\n    cs.salutation_firstname as firstname_salutation,\n    cs.add1,\n    cs.add2,\n    cs.add3,\n    cs.add4,\n    cs.add5,\n    cs.town,\n    cs.county,\n    cs.country,\n    cs.postcode,\n    cs.email,\n    cs.email as email_ignoring_dp_and_supps,\n    cs.name_urn as name_urn_ignoring_dp_and_supps,\n    cs.email as email_ignoring_dp_and_badname,\n    cs.name_urn as name_urn_ignoring_dp_and_badname,\n    cast(0 as int) as bad_name,\n    cast('' as varchar) as phone_home,\n    cast('' as varchar) as phone_mobile,\n    cast('' as varchar) as ie_county,\n    trim(cc.title)||' '||trim(cc.firstname)||' '||trim(cc.lastname) as name_cerelac,\n    cc.title as title_cerelac,\n    cc.firstname as firstname_cerelac,\n    cc.lastname as lastname_cerelac,\n    cc.salutation as salutation_cerelac,\n    cc.salutation_firstname as firstname_salutation_cerelac,\n    cc.add1 as add1_cerelac,\n    cc.add2 as add2_cerelac,\n    cc.add3 as add3_cerelac,\n    cc.add4 as add4_cerelac,\n    cc.add5 as add5_cerelac,\n    cc.town as town_cerelac,\n    cc.county as county_cerelac,\n    cc.country as country_cerelac,\n    cc.postcode as postcode_cerelac,\n    cs.email as email_cerelac,\n    cast(0 as int) as bad_name_cerelac,\n    cast('' as varchar) as phone_home_cerelac,\n    cast('' as varchar) as phone_mobile_cerelac,\n    cast('' as varchar) as ie_county_cerelac\nfrom ${Database}.live.cid_details_sma cs\nleft join ${Database}.live.cid_details_cerelac cc on cc.cid = cs.cid;\n\n\ncreate or replace table ${Database}.temp.sma_fs_hid\nas\nselect distinct\n    hid\nfrom ${Database}.live.cid_sma;\n\n\ncreate or replace table ${Database}.temp.sma_fs_comms_hist\nas\nselect\n    ch.cid,\n    chl.programme_id,\n    chl.programme_name,\n    chl.campaign_id,\n    chl.campaign_name,\n    chl.promotion_id,\n    chl.promotion_name,\n    chl.cell_id,\n    chl.cell_name,\n    chl.pack_id,\n    chl.pack_name,\n    ch.communication_date\nfrom ${Database}.live.sma_comms_hist ch\njoin ${Database}.live.sma_comms_hist_lookup chl on chl.pack_id = ch.pack_id;\n\n\ninsert into ${Database}.db.sma_ecrm_reengagement_segmentation\n(\n    bbw_urn,\n    gender,\n    re_engagement,\n    eng_split\n)\nselect\n    eng.bbw_urn,\n    gender,\n    re_engagement,\n    decode(ntile(2) over (partition by gender, re_engagement order by random()),1,'E',2,'BC') as eng_split\nfrom (\n         select\n             c.bbw_urn,\n             c.gender,\n             comms_programme,\n             case\n                 when comms_programme = 'Antenatal' and en.open_lastdate > dateadd(day,-75,current_date()) and en.open_lastdate <= dateadd(day,-60,current_date()) then 'R3'\n                 when comms_programme = 'Postnatal' and en.open_lastdate > dateadd(day,-105,current_date()) and en.open_lastdate <= dateadd(day,-90,current_date()) then 'R3'\n                 when comms_programme = 'Antenatal' and en.open_lastdate > dateadd(day,-105,current_date()) and en.open_lastdate <= dateadd(day,-90,current_date()) then 'R6'\n                 when comms_programme = 'Postnatal' and en.open_lastdate > dateadd(day,-150,current_date()) and en.open_lastdate <= dateadd(day,-135,current_date()) then 'R6'\n                 when comms_programme = 'Antenatal' and en.open_lastdate is null and cast(c.live_regdate as date) > dateadd(day,-75,current_date()) and cast(c.live_regdate as date) <= dateadd(day,-60,current_date()) then 'R3'\n                 when comms_programme = 'Postnatal' and en.open_lastdate is null and cast(c.live_regdate as date) > dateadd(day,-105,current_date()) and cast(c.live_regdate as date) <= dateadd(day,-90,current_date()) then 'R3'\n                 when comms_programme = 'Antenatal' and en.open_lastdate is null and cast(c.live_regdate as date) > dateadd(day,-105,current_date()) and cast(c.live_regdate as date) <= dateadd(day,-90,current_date()) then 'R6'\n                 when comms_programme = 'Postnatal' and en.open_lastdate is null and cast(c.live_regdate as date) > dateadd(day,-150,current_date()) and cast(c.live_regdate as date) <= dateadd(day,-135,current_date()) then 'R6'\n             else 'NR' end as re_engagement\n         from ${Database}.live.cid_sma c\n         left join ${Database}.live.sma_engagement_levels en on c.cid = en.cid\n         left join ${Database}.live.dependant dep on en.cid = dep.cid and live_flag = '1' and comms_duedate > current_date\n    ) eng\nleft join ( select\n       b.bbw_urn, \n       left(split_part(ecrm_pack_id,'|',3),2) as seg, \n       case when right(left(split_part(ecrm_pack_id,'|',1),2),1) = 'A' then 'Antenatal'\n            when right(left(split_part(ecrm_pack_id,'|',1),2),1) = 'P' then 'Postnatal'\n            end as stage,\n           row_number() over(partition by b.bbw_urn order by event_timestamp desc) as row_num\n     from ${Database}.db.adestra_events_sma a\n     join ${Database}.live.xref_name_urn b on a.email = b.email\n    where left(split_part(ecrm_pack_id,'|',3),2) in ('R3','R6') and campaign_name in ('SMA_Baby_Toddler_ecrm','SMA_Antenatal_ecrm','SMA_Newborn_ecrm') and event_name ilike '%sent%'\n    ) exc on eng.bbw_urn = exc.bbw_urn and eng.comms_programme = exc.stage and eng.re_engagement = exc.seg and exc.row_num = 1\nwhere eng.re_engagement <> 'NR'\n    and eng.bbw_urn not in (select bbw_urn from ${Database}.db.sma_ecrm_reengagement_segmentation)\n    and exc.bbw_urn is null;\n    \ndelete from ${Database}.db.sma_ecrm_reengagement_segmentation\nwhere bbw_urn not in (\n                         select\n                             eng.bbw_urn\n                         from (\n                                  select\n                                      c.bbw_urn,\n                                      c.gender,\n                                      comms_programme,\n                                      case\n                                          when comms_programme = 'Antenatal' and en.open_lastdate > dateadd(day,-75,current_date()) and en.open_lastdate <= dateadd(day,-60,current_date()) then 'R3'\n                                          when comms_programme = 'Postnatal' and en.open_lastdate > dateadd(day,-105,current_date()) and en.open_lastdate <= dateadd(day,-90,current_date()) then 'R3'\n                                          when comms_programme = 'Antenatal' and en.open_lastdate > dateadd(day,-105,current_date()) and en.open_lastdate <= dateadd(day,-90,current_date()) then 'R6'\n                                          when comms_programme = 'Postnatal' and en.open_lastdate > dateadd(day,-150,current_date()) and en.open_lastdate <= dateadd(day,-135,current_date()) then 'R6'\n                                          when comms_programme = 'Antenatal' and en.open_lastdate is null and cast(c.live_regdate as date) > dateadd(day,-75,current_date()) and cast(c.live_regdate as date) <= dateadd(day,-60,current_date()) then 'R3'\n                                          when comms_programme = 'Postnatal' and en.open_lastdate is null and cast(c.live_regdate as date) > dateadd(day,-105,current_date()) and cast(c.live_regdate as date) <= dateadd(day,-90,current_date()) then 'R3'\n                                          when comms_programme = 'Antenatal' and en.open_lastdate is null and cast(c.live_regdate as date) > dateadd(day,-105,current_date()) and cast(c.live_regdate as date) <= dateadd(day,-90,current_date()) then 'R6'\n                                          when comms_programme = 'Postnatal' and en.open_lastdate is null and cast(c.live_regdate as date) > dateadd(day,-150,current_date()) and cast(c.live_regdate as date) <= dateadd(day,-135,current_date()) then 'R6'\n                                      else 'NR' end as re_engagement\n                                  from ${Database}.live.cid_sma c\n                                  left join ${Database}.live.sma_engagement_levels en on c.cid = en.cid\n                                  left join ${Database}.live.dependant dep on en.cid = dep.cid and live_flag = '1' and comms_duedate > current_date\n                              ) eng\n                         left join ( select\n                                      b.bbw_urn, \n                                      left(split_part(ecrm_pack_id,'|',3),2) as seg, \n                                      case when right(left(split_part(ecrm_pack_id,'|',1),2),1) = 'A' then 'Antenatal'\n                                           when right(left(split_part(ecrm_pack_id,'|',1),2),1) = 'P' then 'Postnatal'\n                                      end as stage,\n                                      row_number() over(partition by b.bbw_urn order by event_timestamp desc) as row_num\n                                    from ${Database}.db.adestra_events_sma a\n                                    join ${Database}.live.xref_name_urn b on a.email = b.email\n                                    where left(split_part(ecrm_pack_id,'|',3),2) in ('R3','R6') and campaign_name in ('SMA_Baby_Toddler_ecrm','SMA_Antenatal_ecrm','SMA_Newborn_ecrm') and event_name ilike '%sent%'\n                                    ) exc on eng.bbw_urn = exc.bbw_urn and eng.comms_programme = exc.stage and eng.re_engagement = exc.seg and exc.row_num = 1\n                         where eng.re_engagement <> 'NR'\n                         --and eng.bbw_urn not in (select bbw_urn from ${Database}.db.sma_ecrm_reengagement_segmentation)\n                         and exc.bbw_urn is null\n                     );\n\n\nalter warehouse set warehouse_size = 'Large';\n\n--NPP09760 Purina Module addition - exclude people known to have pets\ncreate or replace table ${Database}.temp.sma_ecrm_purina_mod_exclude_1\nas\nselect distinct\n    cid\nfrom \n    ${Database}.live.cid_pet\n;\n\n--NPP09760 Purina Module addition - exclude people who have already read module (will be sent in first email they are applicable for)\ncreate or replace table ${Database}.temp.sma_ecrm_purina_mod_exclude_2\nas\nselect distinct\n    xe.cid\n--select distinct aes.campaign_name   \n--select distinct aes.event_name  \nfrom ${Database}.db.adestra_events_sma aes\njoin ${Database}.live.xref_email xe on aes.email = xe.email\nwhere\n    aes.campaign_name in ('SMA_Antenatal_ecrm','SMA_Newborn_ecrm','SMA_Baby_Toddler_ecrm')\n    and event_name in ('read','click','form_builder_click','form_builder_submit','webversion_click')\n    and event_timestamp >= to_date('2022-06-30')\n;\n\ncreate or replace table ${Database}.temp.sma_fs_ecrm_programme_content\nas\nselect distinct\n    trim(ch.comms_programme_description)||'_'||to_char(att.bbw_urn) as bbw_urn_ecrm,\n    att.cid,\n    ch.comms_programme_description,\n    ch.comms_duedate,\n    case when att.re_engagement = 'NR' then decode(ntile(2) over(partition by ch.comms_programme_description, ch.comms_duedate, att.re_engagement, att.gender order by 1),1,subject_a,subject_b)\n         else decode(ntile(2) over(partition by ch.comms_programme_description, ch.comms_duedate, att.re_engagement, att.gender order by 1),1,subject_a,subject_b) end as ecrm_subject,\n    att.country as ecrm_country,\n    case when ecrm.stage = 'Antenatal' and (right(att.re_engagement,2) = 'BC' or right(att.re_engagement,1) = 'E') and att.gender in ('F','X') then 'Not long now, '||case when att.firstname <> ''then att.firstname else 'mummy' end||' and bump!'\n         when ecrm.stage = 'Antenatal' and (right(att.re_engagement,2) = 'BC' or right(att.re_engagement,1) = 'E') and att.gender = 'M' then 'Not long now, '||case when att.firstname <> ''then att.firstname else 'daddy' end||' and bump!'\n         when ecrm.stage = 'Newborn' and (right(att.re_engagement,2) = 'BC' or right(att.re_engagement,1) = 'E') then 'Welcome to the world little one ❤'\n         when ecrm.stage = 'Baby' and (right(att.re_engagement,2) = 'BC' or right(att.re_engagement,1) = 'E') and att.gender in ('F','X') then 'Hello there, '||case when att.firstname <> ''then att.firstname else 'mummy' end||'! How''s it going?'\n         when ecrm.stage = 'Baby' and (right(att.re_engagement,2) = 'BC' or right(att.re_engagement,1) = 'E') and att.gender = 'M' then 'Hello there, '||case when att.firstname <> ''then att.firstname else 'daddy' end||'! How''s it going?'\n    else ecrm.preheader end as ecrm_preheader,\n    ecrm.header as ecrm_header_text,\n    case when ecrm.stage = 'Antenatal' then (40 - cast(week_month as int)) else 0 end as ecrm_weeks_pregnant,\n    0 as ecrm_days_pregnant,\n    ecrm.header_image_name as ecrm_stage,\n    ecrm.hero_image_name as ecrm_hero_image,\n    case\n        when att.country = 'UK' and hero_link_image > '' then hero_link_image\n        when att.country = 'UK' and hero_link_gif > '' then hero_link_gif\n        when att.country = 'ROI' and hero_link_roi_image > '' then hero_link_roi_image\n        when att.country = 'ROI' and hero_link_roi_gif > '' then hero_link_roi_gif\n        else ''\n    end as ecrm_hero_link,\n    ecrm.hero_link_label as ecrm_hero_link_label,\n    ecrm.salut_copy_seg1 as ecrm_intro_text_a,\n    ecrm.salut_copy_seg2 as ecrm_intro_text_b,\n    ecrm.salut_cta as ecrm_intro_link_text,\n    decode(att.country,'UK',salut_link,'ROI',salut_link_roi) as ecrm_intro_link,\n    ecrm.salut_link_label as ecrm_intro_link_label,\n    ecrm.art_1_header as ecrm_article_1_title,\n    case when att.country = 'ROI' and art_1_copy_roi_seg1 > '' then art_1_copy_roi_seg1 else ecrm.art_1_copy_seg1 end as ecrm_article_1_text_1a,\n    case when att.country = 'ROI' and art_1_copy_roi_seg1 > '' then art_1_copy_roi_seg2 else ecrm.art_1_copy_seg2 end as ecrm_article_1_text_1b,\n    case when att.country = 'ROI' and art_1_copy_roi_seg1 > '' then '' else ecrm.art_1_copy_seg3 end as ecrm_article_1_text_1c,\n    ecrm.art_1_cta as ecrm_article_1_link_text,\n    decode(att.country,'UK',art_1_link,'ROI',art_1_link_roi) as ecrm_article_1_link,\n    ecrm.art_1_link_label as ecrm_article_1_link_label,\n    ecrm.art_2_header as ecrm_article_2_title,\n    case when att.country = 'ROI' and art_2_copy_roi > '' then art_2_copy_roi else ecrm.art_2_copy_seg1 end as ecrm_article_2_text_1a,\n    case when att.country = 'ROI' and art_2_copy_roi > '' then '' else ecrm.art_2_copy_seg2 end as ecrm_article_2_text_1b,\n    ecrm.art_2_cta as ecrm_article_2_link_text,\n    decode(att.country,'UK',art_2_link,'ROI',art_2_link_roi) as ecrm_article_2_link,\n    ecrm.art_2_link_label as ecrm_article_2_link_label,\n    ecrm.tfy_image_name_1 as ecrm_tip_image_1,\n    ecrm.tfy_sub_header_1 as ecrm_tip_title_1,\n    ecrm.tfy_copy_1_seg1 as ecrm_tip_text_1_a,\n    ecrm.tfy_copy_1_seg2 as ecrm_tip_text_1_b,\n    ecrm.tfy_cta_1 as ecrm_link_text_1,\n    decode(att.country,'UK',tfy_link_1_image,'ROI',tfy_link_roi_1_image) as ecrm_tip_1a_link,\n    decode(att.country,'UK',tfy_link_1_button,'ROI',tfy_link_roi_1_button) as ecrm_tip_1b_link,\n    ecrm.tfy_link_label_1 as ecrm_tip_1_link_label,\n    ecrm.tfy_image_name_2 as ecrm_tip_image_2,\n    ecrm.tfy_sub_header_2 as ecrm_tip_title_2,\n    ecrm.tfy_copy_2_seg1 as ecrm_tip_text_2_a,\n    ecrm.tfy_copy_2_seg2 as ecrm_tip_text_2_b,\n    ecrm.tfy_cta_2 as ecrm_link_text_2,\n    decode(att.country,'UK',tfy_link_2_image,'ROI',tfy_link_roi_2_image) as ecrm_tip_2a_link,\n    decode(att.country,'UK',tfy_link_2_button,'ROI',tfy_link_roi_2_button) as ecrm_tip_2b_link,\n    ecrm.tfy_link_label_2 as ecrm_tip_2_link_label,\n    ecrm.prod_header as ecrm_product_title,\n    ecrm.prod_image_name as ecrm_product_image,\n    decode(att.country,'UK',prod_link_1,'ROI',prod_link_1_roi) as ecrm_product_image_link,\n    ecrm.prod_link_label_1 as ecrm_product_image_link_label,\n    ecrm.prod_copy_1 as ecrm_product_text,\n    decode(att.country,'UK',prod_link_2,'ROI',prod_link_2_roi) as ecrm_product_link_1,\n    ecrm.prod_link_label_2 as ecrm_product_link_label_1,\n    decode(att.country,'UK',prod_link_3,'ROI',prod_link_3_roi) as ecrm_product_link_2,\n    ecrm.prod_link_label_3 as ecrm_product_link_label_2,\n    ecrm.prod_icon_1 as ecrm_product_icon_1,\n    ecrm.prod_sub_header_1 as ecrm_product_icon_1_title,\n    ecrm.prod_copy_2 as ecrm_product_icon_1_text,\n    ecrm.prod_icon_2 as ecrm_product_icon_2,\n    ecrm.prod_sub_header_2 as ecrm_product_icon_2_title,\n    ecrm.prod_copy_3 as ecrm_product_icon_2_text,\n    ecrm.prod_icon_3 as ecrm_product_icon_3,\n    ecrm.prod_sub_header_3 as ecrm_product_icon_3_title,\n    ecrm.prod_copy_4 as ecrm_product_icon_3_text,\n    ecrm.prod_note_copy as ecrm_product_note_copy ,\n    ecrm.rewards_header as ecrm_rewards_title,\n    ecrm.rewards_copy_seg1 as ecrm_rewards_text_a,\n    ecrm.rewards_copy_value as ecrm_rewards_value,\n    ecrm.rewards_copy_seg2 as ecrm_rewards_text_b,\n    ecrm.rewards_copy_seg3 as ecrm_rewards_text_c,\n    ecrm.rewards_cta as ecrm_rewards_link_text,\n    ecrm.ces_header as ecrm_careline_title,\n    ecrm.ces_copy as ecrm_careline_text,\n     case when att.country = 'UK' then ecrm.B2B_HEADER  else '' end as ecrm_b2b_title_1,\n     case when att.country = 'UK' then ecrm.B2B_IMAGE_NAME_1 else '' end as  ecrm_b2b_image_1,\n     case when att.country = 'UK' then ecrm.B2B_COPY         else '' end as  ecrm_b2b_text_1_a,\n     case when att.country = 'UK' then ecrm.B2B_CTA          else '' end as  ecrm_b2b_link_text_1,\n     case when att.country = 'UK' then ecrm.B2B_LINK_LABEL_1 else '' end as ecrm_b2b_1_link_label,\n     case when att.country = 'UK' then concat( ecrm.B2B_LINK_1 , ecrm.B2B_UTM_IMAGE_1) else '' end as ecrm_b2b_1a_link,\n     case when att.country = 'UK' then concat( ecrm.B2B_LINK_1 , ecrm.B2B_UTM_BUTTON_1) else '' end as ecrm_b2b_1b_link,\n     case when att.country = 'UK' then ecrm.B2B_COPY_2       else '' end as  ecrm_b2b_text_2_a,\n     case when att.country = 'UK' then ecrm.B2B_IMAGE_NAME_2 else '' end as ecrm_b2b_image_2,\n     case when att.country = 'UK' then ecrm.B2B_LINK_LABEL_2 else '' end as ecrm_b2b_2_link_label,\n     case when att.country = 'UK' then concat( ecrm.B2B_LINK_2 , ecrm.B2B_UTM_IMAGE_2) else '' end as ecrm_b2b_2a_link,\n     case when att.country = 'UK' then ecrm.B2B_IMAGE_NAME_3 else '' end as ecrm_b2b_image_3 ,\n    case when att.country = 'UK' then ecrm.B2B_LINK_LABEL_3 else '' end as ecrm_b2b_3_link_label,\n    case when att.country = 'UK' then concat( ecrm.B2B_LINK_3 , ecrm.B2B_UTM_IMAGE_3) else '' end as ecrm_b2b_3a_link,   \n    ecrm.important_copy_seg1 as ecrm_important_notice_1a,\n    ecrm.important_copy_seg2 as ecrm_important_notice_1b,\n    ecrm.important_copy_seg3 as ecrm_important_notice_2a,\n    ecrm.important_copy_seg4 as ecrm_important_notice_2b,\n    ecrm.important_copy_seg5 as ecrm_important_notice_3a,\n    decode(att.country,'UK',ecrm.ztc_code_uk,'ROI',ztc_code_roi) as ecrm_ztc_code,\n    '' as thirdparty_reg_url_a,\n    '' as thirdparty_reg_url_b,\n    '' as thirdparty_reg_url_c,\n    '' as thirdparty_reg_url_d,\n    replace(replace(ecrm.comms_programme_description, 'Month ','M'),'Week ','W')||'|'||trim(att.country)||'|'||ecrm.re_engagement||'|'||att.gender||'|'||ecrm.contacted_careline||'|'||ecrm.rewards_member||'|'||decode(ecrm.covid,'No COVID Version','NCV',left(ecrm.covid,1))||'|'||case when att.re_engagement = 'NR' then 'B' else decode(ntile(2) over(partition by ch.comms_programme_description, ch.comms_duedate, att.re_engagement, att.gender order by 1),1,'A','B') end as ecrm_pack_id,\n    case when att.country = 'UK' then replace(replace(replace(ecrm.comms_programme_description,'Week A','ANTENATAL WEEK '),'Week P','POST WEEK '),'Month P','POST MONTH ')\n                ||'|'||ecrm.re_engagement||'|'||trim(decode(att.gender,'M','Male','F','Female','X','Unknown'))||'|'||trim(decode(ecrm.contacted_careline, 'Y', 'Contacted Careline L12M', 'N', 'Not Contacted Careline L12M'))\n                ||'|'||trim(decode(ecrm.rewards_member, 'Y', 'Rewards Member', 'N', 'Not Rewards Member'))||'|'||trim(decode(ecrm.covid,'N','No','Y','Yes',ecrm.covid))\n                ||'|'||'Subject Line '||case when att.re_engagement = 'NR' then decode(ntile(2) over(partition by ch.comms_programme_description, ch.comms_duedate, att.re_engagement, att.gender order by 1),1,'A','B') else decode(ntile(2) over(partition by ch.comms_programme_description, ch.comms_duedate, att.re_engagement, att.gender order by 1),1,'A','B') end\n        when att.country = 'ROI' then replace(replace(replace(ecrm.comms_programme_description,'Week A','ANTENATAL WEEK '),'Week P','POST WEEK '),'Month P','POST MONTH ')||' '||att.country\n                ||'|'||ecrm.re_engagement||'|'||trim(decode(att.gender,'M','Male','F','Female','X','Unknown'))||'|'||trim(decode(ecrm.contacted_careline, 'Y', 'Contacted Careline L12M', 'N', 'Not Contacted Careline L12M'))\n                ||'|'||trim(decode(ecrm.rewards_member, 'Y', 'Rewards Member', 'N', 'Not Rewards Member'))||'|'||trim(decode(ecrm.covid,'N','No','Y','Yes',ecrm.covid))\n                ||'|'||'Subject Line '||case when att.re_engagement = 'NR' then decode(ntile(2) over(partition by ch.comms_programme_description, ch.comms_duedate, att.re_engagement, att.gender order by 1),1,'A','B') else decode(ntile(2) over(partition by ch.comms_programme_description, ch.comms_duedate, att.re_engagement, att.gender order by 1),1,'A','B') end end as ecrm_pack_name,\n    case when x1.cid is null and x2.cid is null then 'Y' else 'N' end as ecrm_purina       --NPP09760 Purina Module addition (06/2022)\nfrom (\n         select distinct\n             c.cid,\n             c.bbw_urn,\n             c.gender,\n             cda.firstname,\n             case when lower(c.country) regexp '.*ireland.*' then 'ROI' else 'UK' end as country,\n             case when en.bbw_urn is null then 'NR' else en.re_engagement||'-'||en.eng_split end as re_engagement,\n             case when ca.contact_date >= add_months(current_date,-12) then 'Y' else 'N' end as contacted_careline,\n             case when sh.cid is not null then 'Y' else 'N' end as rewards_member\n         from ${Database}.live.cid_sma c\n         left join ${Database}.temp.sma_fs_cid_details_all cda on c.cid = cda.cid\n         left join (\n                       select\n                           cid,\n                           max(to_date(contact_date,'DD/MM/YYYY')) as contact_date\n                       from ${Database}.live.cid_sma_careline\n                       group by cid\n                   ) ca on c.cid = ca.cid\n         left join ${Database}.live.sma_shopmium_rewards sh on c.cid = sh.cid\n         left join ${Database}.db.sma_ecrm_reengagement_segmentation en on c.bbw_urn = en.bbw_urn\n     ) att\ninner join (\n               select distinct\n                   cid,\n                   comms_programme_description,\n                   first_value(comms_duedate) over(partition by cid, comms_programme_description order by comms_duedate) as comms_duedate\n               from ${Database}.live.dependant\n               where live_flag = 1\n                   and comms_programme_description is not null\n                   and comms_duedate is not null\n           ) ch on att.cid = ch.cid\nleft join ${Database}.db.sma_ecrm_content_matrix ecrm on trim(att.re_engagement) = trim(ecrm.re_engagement)\n                                                     and trim(case when trim(att.gender) = 'X' then 'F' else trim(att.gender) end) = trim(ecrm.gender)\n                                                     and trim(att.contacted_careline) = trim(ecrm.contacted_careline)\n                                                     and trim(att.rewards_member) = trim(ecrm.rewards_member)\n                                                     and trim(ch.comms_programme_description) = trim(ecrm.comms_programme_description)\n                                                     and trim(ecrm.covid) in ('N','No COVID Version')\n--Purina module exclusions\nleft join ${Database}.temp.sma_ecrm_purina_mod_exclude_1 x1 on att.cid = x1.cid\nleft join ${Database}.temp.sma_ecrm_purina_mod_exclude_2 x2 on att.cid = x2.cid\n;\n\nalter warehouse set warehouse_size = 'Xsmall';\n\n   /******************************************************************************************\n                                             FINISH PROC\n   ******************************************************************************************/\n\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"197130":{"id":197130,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":-2224,"y":-256,"width":32,"height":32,"inputConnectorIDs":[197128],"outputSuccessConnectorIDs":[197135],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SMA Faststats Extract"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SMA Faststats Extract"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"197131":{"id":197131,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-2720,"y":-256,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[197133],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"197128":{"id":197128,"sourceID":197129,"targetID":197130},"197134":{"id":197134,"sourceID":197125,"targetID":197129},"197135":{"id":197135,"sourceID":197130,"targetID":197124}},"failureConnectors":{},"unconditionalConnectors":{"197133":{"id":197133,"sourceID":197131,"targetID":197125}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{},"variables":{},"grids":{}},"info":{"name":"Output for SMA FS","description":"","type":"ORCHESTRATION","tag":"32b377e8-17a8-490d-a714-854b530ec5eb"}}