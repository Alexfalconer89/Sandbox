{"job":{"components":{"196436":{"id":196436,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-640,"y":-32,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[196483],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Start","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196437":{"id":196437,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1032749985,"x":-498,"y":-25,"width":32,"height":32,"inputConnectorIDs":[196483],"outputSuccessConnectorIDs":[196444],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"check for new records"}}}},"visible":true},"2":{"slot":2,"name":"SQL Query","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"select count(*) new_rec_cnt from ${Database}.staging.pragmatica_api_snowpipe"}}}},"visible":true},"3":{"slot":3,"name":"Scalar Variable Mapping","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"New_Record_Count"},"2":{"slot":2,"type":"STRING","value":"NEW_REC_CNT"}}}},"visible":true},"4":{"slot":4,"name":"Database","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":false},"5":{"slot":5,"name":"Target Table","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"6":{"slot":6,"name":"Table Columns","elements":{},"visible":false},"7":{"slot":7,"name":"Schema","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":false},"10":{"slot":10,"name":"Limit","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"100"}}}},"visible":false},"11":{"slot":11,"name":"Order By","elements":{},"visible":false},"12":{"slot":12,"name":"Sort","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Ascending"}}}},"visible":false},"13":{"slot":13,"name":"Filter Conditions","elements":{},"visible":false},"14":{"slot":14,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"AND"}}}},"visible":false},"20":{"slot":20,"name":"Basic / Advanced","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Advanced"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196440":{"id":196440,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-256,"y":-32,"width":32,"height":32,"inputConnectorIDs":[196449],"outputSuccessConnectorIDs":[196448],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"JSON Processing"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"create or replace table ${Database}.staging.nuk_reg_prag_api_load\nas\nselect\n     fromfile\n\t,insert_datetime\n\t,replace(jsontext:\"Address 1\",'\"','')\t\t\tas add1\n    ,replace(jsontext:\"Address 2\",'\"','')\t\t\tas add2\n    ,replace(jsontext:\"Address 3\",'\"','')\t\t\tas add3\n    ,replace(jsontext:\"Address 4\",'\"','')\t\t\tas add4\n    ,replace(jsontext:\"Address 5\",'\"','')\t\t\tas add5\n    ,replace(jsontext:\"Brand\",'\"','')\t\t\t    as brand\n    ,replace(jsontext:\"Country\",'\"','') \t\t    as country\n    ,replace(jsontext:\"Custom1\",'\"','') \t\t    as custom1\n    ,replace(jsontext:\"Custom2\",'\"','') \t\t    as custom2\n    ,replace(jsontext:\"Email Address\",'\"','')\t    as email\n    ,replace(jsontext:\"End Date\",'\"','')\t        as end_date\n    ,replace(jsontext:\"Forename\",'\"','')\t        as forename\n    ,replace(jsontext:\"GigyaCallID\",'\"','')\t        as gigyacallid\n    ,replace(jsontext:\"Mobile\",'\"','')\t            as mobile\n    ,replace(jsontext:\"OptIn\",'\"','')\t            as optin\n    ,replace(jsontext:\"Promotion\",'\"','')\t        as promotion\n    ,replace(jsontext:\"Registration Date\",'\"','')\tas reg_date\n    ,replace(jsontext:\"Site URL\",'\"','')\t        as site_url\n    ,replace(jsontext:\"Start Date\",'\"','')\t        as start_date\n    ,replace(jsontext:\"Surname\",'\"','')\t            as surname\n    ,replace(jsontext:\"Title\",'\"','')               as title\n    ,replace(jsontext:\"URN\",'\"','')\t                as urn\nfrom ${Database}.staging.pragmatica_api_snowpipe\nwhere fromfile ilike '%nestle_api_prag_prod.json' and replace(jsontext:\"URN\",'\"','') not in (select URN from ${Database}.db.nuk_prag_api_records)\n;\n\n--keep all pragmatica promotions data accessible in a db table\ninsert into ${Database}.db.nuk_prag_api_records\nselect\n     jsontext:\"URN\"\t                as urn\n\t,jsontext:\"GigyaCallID\"\t        as gigyacallid\n    ,jsontext:\"Registration Date\"\tas reg_date\n    ,jsontext:\"Title\"\t            as title\n    ,jsontext:\"Forename\"\t        as forename\n    ,jsontext:\"Surname\"\t            as surname\n\t,jsontext:\"Address 1\"\t\t\tas add1\n    ,jsontext:\"Address 2\"\t\t\tas add2\n    ,jsontext:\"Address 3\"\t\t\tas add3\n    ,jsontext:\"Address 4\"\t\t\tas add4\n    ,jsontext:\"Address 5\"\t\t\tas add5\n    ,jsontext:\"Country\"\t\t\t    as country\n    ,jsontext:\"Email Address\"\t    as email\n    ,jsontext:\"Mobile\"\t            as mobile\n    ,jsontext:\"OptIn\"\t            as optin\n    ,jsontext:\"Brand\"\t\t\t    as brand\n    ,jsontext:\"Promotion\"\t        as promotion\n    ,jsontext:\"Start Date\"\t        as start_date\n    ,jsontext:\"End Date\"\t        as end_date\n    ,jsontext:\"Custom1\"\t            as custom1\n    ,jsontext:\"Custom2\"\t            as custom2\n    ,jsontext:\"Site URL\"\t        as site_url\n    ,fromfile\n    ,insert_datetime\nfrom ${Database}.staging.pragmatica_api_snowpipe\nwhere fromfile ilike '%nestle_api_prag_prod.json' and replace(jsontext:\"URN\",'\"','') not in (select URN from ${Database}.db.nuk_prag_api_records)\n;\n\n-- keep all raw api body request data\ninsert into ${Database}.db.api_raw_all select * from ${Database}.staging.pragmatica_api_snowpipe where fromfile ilike '%nestle_api_prag_prod.json' and fromfile not in (select fromfile from ${Database}.db.api_raw_all);"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196441":{"id":196441,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-136,"y":-28,"width":32,"height":32,"inputConnectorIDs":[196448],"outputSuccessConnectorIDs":[196445],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"map to db"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--mapping for names\nmerge into ${Database}.db.names a\n    using \n    (\n      select \n          cast(cast(row_number() over(order by 1) as int) + nvl((select max(bbw_urn) from ${Database}.db.names),0) as int) as bbw_urn\n          ,'NUK_REG_PRAG|'||brand||'|'||trim(split_part(promotion,'-',1))||'|'||trim(urn) as name_urn\n          ,trim(urn) as urn\n          ,trim(gigyaCallId) as gigyaCallId\n          ,to_date(left(reg_date,10),'YYYY-MM-DD') as reg_date\n          ,trim(title)    as title   \n          ,trim(forename) as forename\n          ,trim(surname)  as surname \n          ,trim(add1)     as add1    \n          ,trim(add2)     as add2    \n          ,trim(add3)     as add3    \n          ,trim(add4)     as add4    \n          ,trim(add5)     as add5  \n          ,trim(country)  as country\n          ,trim(email)    as email   \n          ,trim(mobile)   as mobile  \n          ,trim(fromfile) as filename\n          ,trim(brand)    as brand\n          ,trim(promotion) as promotion\n       from  ${Database}.staging.nuk_reg_prag_api_load\n    )b on        a.name_urn = b.name_urn \n                       and  a.reg_date = b.reg_date\n                       and  a.firstname = b.forename\n                       and  a.lastname  = b.surname\n                       and  a.email = b.email\n                       and  a.phone_mobile = b.mobile\n                       and  a.source = 'NUK_REG_PRAG'\n                       and  a.add1 = b.add1\n                       and  a.add2 = b.add2\n                       and  a.add3 = b.add3\n                       and  a.add4 = b.add4\n                       and  a.add5 = b.add5\n                       and  a.country = b.country\n    when not matched then insert\n    (\n       bbw_urn\n     , name_urn\n     , reg_date\n     , data_date\n     , title\n     , firstname\n     , lastname\n     , job_title\n     , company\n     , add1\n     , add2\n     , add3\n     , add4\n     , add5\n     , add6\n     , add7\n     , city\n     , state\n     , postcode\n     , country\n     , region\n     , dob\n     , gender\n     , phone_work\n     , phone_mobile\n     , phone_home\n     , phone_fax\n     , email\n     , www\n     , fullname\n     , initials\n     , source\n     , source_file\n     , source_urn\n     , source_date\n     , source_data_controller_id\n     , source_brand_id\n    )\n    values\n    (\n          b.bbw_urn\n         ,b.name_urn\n         ,to_date(left(b.reg_date,10),'YYYY-MM-DD')\n         ,to_date(left(b.reg_date,10),'YYYY-MM-DD')\n         ,b.title\n         ,b.forename\n         ,b.surname\n         ,''\n         ,''\n         ,b.add1\n         ,b.add2\n         ,b.add3\n         ,b.add4\n         ,b.add5\n         ,''\n         ,''\n         ,''\n         ,''\n         ,''\n         ,b.country\n         ,''\n         ,cast(null as date)\n         ,''\n         ,''\n         ,b.mobile\n         ,''\n         ,''\n         ,b.email\n         ,''\n         ,''\n         ,''\n         ,'NUK_REG_PRAG'\n         ,b.filename\n         ,case\n              when b.gigyaCallId = '' then b.urn\n              else b.gigyaCallId\n          end\n         ,current_date\n         ,case when lower(brand) in ('purina','breed selector') then (select data_controller_id from ${Database}.db.ref_data_controller where data_controller like 'Nestl_ Purina Petcare (UK) Ltd') \n               when lower(brand) in ('purelife','buxton') then (select data_controller_id from ${Database}.db.ref_data_controller where data_controller like 'Nestl_ Waters UK Ltd') \n               when lower(brand) in ('maggi','mezeast','nescafe','rowntrees','milkybar','aero','smarties','kitkat','nestle confectionery') then (select data_controller_id from ${Database}.db.ref_data_controller where data_controller like 'Nestl_ UK Ltd') \n               when lower(brand) in ('meritene','nhsc') then (select data_controller_id from ${Database}.db.ref_data_controller where data_controller like 'Vitaflo (International) Ltd') \n               when lower(brand) in ('sma baby','cerelac','carnation') then (select data_controller_id from ${Database}.db.ref_data_controller where data_controller like 'Nestl_ UK Ltd') \n               else (select data_controller_id from ${Database}.db.ref_data_controller where data_controller like 'Nestl_ UK Ltd')\n               end\n         ,case when lower(brand) in ('buxton') then (select brand_id from ${Database}.db.ref_brand where brand = 'Buxton')\n               when lower(brand) in ('purelife') then (select brand_id from ${Database}.db.ref_brand where brand = 'Pure Life')\n               when lower(brand) in ('nestle confectionery') then cast(null as int)\n               when lower(brand) in ('kitkat') then (select brand_id from ${Database}.db.ref_brand where brand = 'Kit Kat')\n               when lower(brand) in ('smarties') then (select brand_id from ${Database}.db.ref_brand where brand = 'Smarties')\n               when lower(brand) in ('aero') then (select brand_id from ${Database}.db.ref_brand where brand = 'Aero')\n               when lower(brand) in ('milkybar') then (select brand_id from ${Database}.db.ref_brand where brand = 'Milky bar')\n               when lower(brand) in ('rowntrees') then (select brand_id from ${Database}.db.ref_brand where brand = 'Rowntrees')\n               when lower(brand) in ('nescafe') then (select brand_id from ${Database}.live.ref_brand where brand = 'Nescafe')\n               when lower(brand) in ('mezeast') then (select brand_id from ${Database}.live.ref_brand where brand = 'MezEast')\n               when lower(brand) in ('maggi') then (select brand_id from ${Database}.live.ref_brand where brand = 'Maggi')\n               when lower(brand) in ('meritene') then (select brand_id from ${Database}.live.ref_brand where lower(brand) = 'meritene')\n               when lower(brand) in ('nhsc') then (select brand_id from ${Database}.live.ref_brand where brand = 'Nestle Health Science Professionals')  \n               when lower(brand) in ('purina') then (select brand_id from ${Database}.live.ref_brand where brand = 'Purina Masterbrand')\n               when lower(brand) in ('breed selector') then (select brand_id from ${Database}.live.ref_brand where brand = 'Breed Selector')\n               when lower(brand) in ('sma baby') then (select brand_id from ${Database}.live.ref_brand where brand = 'SMA')\n               when lower(brand) in ('cerelac') then (select brand_id from ${Database}.live.ref_brand where brand = 'Cerelac')\n               when lower(brand) in ('carnation') then (select brand_id from ${Database}.live.ref_brand where brand = 'Carnation')\n               end\n    );\n    \n \n\n--mapping for names_attributes\nmerge into ${Database}.db.names_attributes a\n    using \n    (\n      select \n          'NUK_REG_PRAG|'||brand||'|'||trim(split_part(promotion,'-',1))||'|'||trim(urn)  as name_urn\n          ,to_date(left(reg_date,10),'YYYY-MM-DD') as data_date\n          ,trim(brand)||' '|| trim(promotion) as REGISTRATION_CAMPAIGN\n          ,trim(site_url) as landing_url_reg\n          ,trim(gigyaCallId) as gigyaCallId\n          ,trim(urn) as urn\n          ,trim(fromfile) as filename\n       from  ${Database}.staging.nuk_reg_prag_api_load\n    )b on        a.name_urn = b.name_urn \n                       and  a.data_date = b.data_date\n                       and  a.REGISTRATION_CAMPAIGN = b.REGISTRATION_CAMPAIGN\n                       and  a.landing_url_reg  = b.landing_url_reg\n\n    when not matched then insert\n    (\n       name_urn\n     , data_date\n     , REGISTRATION_CAMPAIGN\n     , landing_url_reg\n     , source\n     , source_file\n     , source_urn\n     , source_date\n    )\n    values\n    (\n           name_urn\n         , data_date\n         , REGISTRATION_CAMPAIGN\n         , landing_url_reg\n         ,'NUK_REG_PRAG'\n         ,b.filename\n         ,case\n              when b.gigyaCallId = '' then b.urn\n              else b.gigyaCallId\n          end\n         ,current_date\n    );\n    \n--mapping for names_dp\ninsert into ${Database}.db.names_dp\n    (\n        name_urn,\n        data_controller_id,\n        brand_id,\n        data_date,\n        dp_date,\n        dp_mailable,\n        dp_emailable,\n        dp_phoneable,\n        dp_smsable,\n        dp_infantmilk,\n        dp_elegance,\n        dp_newsletter,\n        opt_in_1,\n        opt_in_2,\n        source,\n        source_file,\n        source_urn,\n        source_date\n    )\n    select\n        'NUK_REG_PRAG|'||brand||'|'||trim(split_part(promotion,'-',1))||'|'||trim(urn) as name_urn\n         ,case when lower(brand) in ('purina','breed selector') then (select data_controller_id from ${Database}.db.ref_data_controller where data_controller like 'Nestl_ Purina Petcare (UK) Ltd') \n               when lower(brand) in ('purelife','buxton') then (select data_controller_id from ${Database}.db.ref_data_controller where data_controller like 'Nestl_ Waters UK Ltd') \n               when lower(brand) in ('maggi','mezeast','nescafe','rowntrees','milkybar','aero','smarties','kitkat','nestle confectionery') then (select data_controller_id from ${Database}.db.ref_data_controller where data_controller like 'Nestl_ UK Ltd') \n               when lower(brand) in ('meritene','nhsc') then (select data_controller_id from ${Database}.db.ref_data_controller where data_controller like 'Vitaflo (International) Ltd') \n               when lower(brand) in ('sma baby','cerelac','carnation') then (select data_controller_id from ${Database}.db.ref_data_controller where data_controller like 'Nestl_ UK Ltd') \n               else (select data_controller_id from ${Database}.db.ref_data_controller where data_controller like 'Nestl_ UK Ltd')\n               end\n         ,case when lower(brand) in ('buxton') then (select brand_id from ${Database}.db.ref_brand where brand = 'Buxton')\n               when lower(brand) in ('purelife') then (select brand_id from ${Database}.db.ref_brand where brand = 'Pure Life')\n               when lower(brand) in ('nestle confectionery') then cast(null as int)\n               when lower(brand) in ('kitkat') then (select brand_id from ${Database}.db.ref_brand where brand = 'Kit Kat')\n               when lower(brand) in ('smarties') then (select brand_id from ${Database}.db.ref_brand where brand = 'Smarties')\n               when lower(brand) in ('aero') then (select brand_id from ${Database}.db.ref_brand where brand = 'Aero')\n               when lower(brand) in ('milkybar') then (select brand_id from ${Database}.db.ref_brand where brand = 'Milky bar')\n               when lower(brand) in ('rowntrees') then (select brand_id from ${Database}.db.ref_brand where brand = 'Rowntrees')\n               when lower(brand) in ('nescafe') then (select brand_id from ${Database}.live.ref_brand where brand = 'Nescafe')\n               when lower(brand) in ('mezeast') then (select brand_id from ${Database}.live.ref_brand where brand = 'MezEast')\n               when lower(brand) in ('maggi') then (select brand_id from ${Database}.live.ref_brand where brand = 'Maggi')\n               when lower(brand) in ('meritene') then (select brand_id from ${Database}.live.ref_brand where lower(brand) = 'meritene')\n               when lower(brand) in ('nhsc') then (select brand_id from ${Database}.live.ref_brand where brand = 'Nestle Health Science Professionals')  \n               when lower(brand) in ('purina') then (select brand_id from ${Database}.live.ref_brand where brand = 'Purina Masterbrand')\n               when lower(brand) in ('breed selector') then (select brand_id from ${Database}.live.ref_brand where brand = 'Breed Selector')\n               when lower(brand) in ('sma baby') then (select brand_id from ${Database}.live.ref_brand where brand = 'SMA')\n               when lower(brand) in ('cerelac') then (select brand_id from ${Database}.live.ref_brand where brand = 'Cerelac')\n               when lower(brand) in ('carnation') then (select brand_id from ${Database}.live.ref_brand where brand = 'Carnation')\n               end\n        , current_date()\n        , to_date(left(reg_date,10),'YYYY-MM-DD')\n        , case when optin = 'True' then 1\n               when optin = 'False' then 0\n               end\n        , case when optin = 'True' then 1\n               when optin = 'False' then 0\n               end\n        , cast(null as tinyint)\n        , cast(null as tinyint)\n        , cast(null as tinyint)\n        , cast(null as tinyint)\n        , cast(null as tinyint)\n        , case when optin = 'True' then 1\n               when optin = 'False' then 0\n               end\n        , case when optin = 'True' then 1\n               when optin = 'False' then 0\n               end\n        , 'NUK_REG_PRAG'\n        , trim(fromfile)\n        , trim(urn)\n        , current_date()\n     from  ${Database}.staging.nuk_reg_prag_api_load b\n     where fromfile not in (select source_file from ${Database}.db.names_dp where source = 'NUK_REG_PRAG');"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196442":{"id":196442,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":-384,"y":-27,"width":32,"height":32,"inputConnectorIDs":[196444],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[196449],"outputFalseConnectorIDs":[196482],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"If new records"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Simple"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"New_Record_Count"},"2":{"slot":2,"type":"STRING","value":"Is"},"3":{"slot":3,"type":"STRING","value":"Greater than"},"4":{"slot":4,"type":"STRING","value":"0"}}}},"visible":true},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196443":{"id":196443,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1946388514,"x":-249,"y":71,"width":32,"height":32,"inputConnectorIDs":[196482],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"No new pragmatica promotions records"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196446":{"id":196446,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":32,"y":-32,"width":32,"height":32,"inputConnectorIDs":[196445],"outputSuccessConnectorIDs":[196450],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Cleanup and Update"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"-- delete from api table where record inserted into the history table (so not pulled next load)\ndelete \nfrom ${Database}.staging.pragmatica_api_snowpipe\nwhere fromfile in (select fromfile from ${Database}.db.api_raw_all)\n;\n\n--clear out staging table\ntruncate ${Database}.staging.nuk_reg_prag_api_load\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196447":{"id":196447,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1946388514,"x":176,"y":-32,"width":32,"height":32,"inputConnectorIDs":[196450],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Pragmatica Load Success"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"196444":{"id":196444,"sourceID":196437,"targetID":196442},"196445":{"id":196445,"sourceID":196441,"targetID":196446},"196448":{"id":196448,"sourceID":196440,"targetID":196441},"196450":{"id":196450,"sourceID":196446,"targetID":196447}},"failureConnectors":{},"unconditionalConnectors":{"196483":{"id":196483,"sourceID":196436,"targetID":196437}},"trueConnectors":{"196449":{"id":196449,"sourceID":196442,"targetID":196440}},"falseConnectors":{"196482":{"id":196482,"sourceID":196442,"targetID":196443}},"iterationConnectors":{},"noteConnectors":{},"notes":{},"variables":{"New_Record_Count":{"definition":{"name":"New_Record_Count","type":"DECIMAL","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""}},"grids":{}},"info":{"name":"Pragmatica Load","description":"Automated API Pragmatica Load","type":"ORCHESTRATION","tag":"8d22e1af-58e0-4fe5-8bca-26ecfeba4f1d"}}