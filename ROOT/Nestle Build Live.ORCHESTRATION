{"job":{"components":{"196017":{"id":196017,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-976,"y":-192,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[196076],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196020":{"id":196020,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":515156205,"x":-864,"y":-96,"width":32,"height":32,"inputConnectorIDs":[196079],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End Failure 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196021":{"id":196021,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-2007585549,"x":-144,"y":-192,"width":32,"height":32,"inputConnectorIDs":[196059],"outputSuccessConnectorIDs":[196051],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Dedupe 1"}}}},"visible":true},"2":{"slot":2,"name":"Database","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${Database}"}}}},"visible":true},"3":{"slot":3,"name":"Schema","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"TEMP"}}}},"visible":true},"4":{"slot":4,"name":"CodeToRun","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"do not need to set"}}}},"visible":true},"5":{"slot":5,"name":"MatchCodeColumn","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"MATCH_CODE"}}}},"visible":true},"6":{"slot":6,"name":"MatchLevel","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"C"}}}},"visible":true},"7":{"slot":7,"name":"DedupeCode","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196022":{"id":196022,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1032749985,"x":-768,"y":-192,"width":32,"height":32,"inputConnectorIDs":[196076],"outputSuccessConnectorIDs":[196100],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Check GA Uniqueness"}}}},"visible":true},"2":{"slot":2,"name":"SQL Query","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SELECT count(*)-count(distinct supp_urn) as checkga from ${Database}.db.supps_goneaway\n"}}}},"visible":true},"3":{"slot":3,"name":"Scalar Variable Mapping","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"GA_Unique"},"2":{"slot":2,"type":"STRING","value":"CHECKGA"}}}},"visible":true},"4":{"slot":4,"name":"Database","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":false},"5":{"slot":5,"name":"Target Table","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"6":{"slot":6,"name":"Table Columns","elements":{},"visible":false},"7":{"slot":7,"name":"Schema","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":false},"10":{"slot":10,"name":"Limit","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"100"}}}},"visible":false},"11":{"slot":11,"name":"Order By","elements":{},"visible":false},"12":{"slot":12,"name":"Sort","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Ascending"}}}},"visible":false},"13":{"slot":13,"name":"Filter Conditions","elements":{},"visible":false},"14":{"slot":14,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"AND"}}}},"visible":false},"20":{"slot":20,"name":"Basic / Advanced","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Advanced"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196023":{"id":196023,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":-768,"y":-96,"width":32,"height":32,"inputConnectorIDs":[196100],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[196072],"outputFalseConnectorIDs":[196079],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"If 0"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Simple"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"GA_Unique"},"2":{"slot":2,"type":"STRING","value":"Is"},"3":{"slot":3,"type":"STRING","value":"Equal to"},"4":{"slot":4,"type":"STRING","value":"0"}}}},"visible":true},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196024":{"id":196024,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":1958428686,"x":192,"y":-192,"width":32,"height":32,"inputConnectorIDs":[196066],"outputSuccessConnectorIDs":[196052],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Family GM"}}}},"visible":true},"2":{"slot":2,"name":"Database","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${Database}"}}}},"visible":true},"3":{"slot":3,"name":"InputTable","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"vw_familymatchpairs"}}}},"visible":true},"4":{"slot":4,"name":"Loop","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"0"}}}},"visible":true},"5":{"slot":5,"name":"OutputTable","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"familymatchpairsgrouped"}}}},"visible":true},"6":{"slot":6,"name":"Schema","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"TEMP"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196025":{"id":196025,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":-512,"y":-192,"width":32,"height":32,"inputConnectorIDs":[196096],"outputSuccessConnectorIDs":[196062],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Nestle Names Cleaned"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Nestle Names Cleaned"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196026":{"id":196026,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-32,"y":-192,"width":32,"height":32,"inputConnectorIDs":[196051],"outputSuccessConnectorIDs":[196053],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Log Dedupe and Distinct Pairs"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"insert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect\nCURRENT_TIMESTAMP::timestamp_ntz\n,'${Database}'\n,'BUILD'\n,'Dedupe'\n,'SCRIPT'\n,'FINISHED'\n;\n\ncreate or replace table ${Database}.temp.customermatchpairs as \nselect distinct td_bbw_urn, t_bbw_urn,'' as match_type\nfrom ${Database}.temp.c_matchpairs;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196027":{"id":196027,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":1958428686,"x":96,"y":-192,"width":32,"height":32,"inputConnectorIDs":[196053],"outputSuccessConnectorIDs":[196060],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Customer GM"}}}},"visible":true},"2":{"slot":2,"name":"Database","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${Database}"}}}},"visible":true},"3":{"slot":3,"name":"InputTable","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"CustomerMatchPairs"}}}},"visible":true},"4":{"slot":4,"name":"Loop","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"0"}}}},"visible":true},"5":{"slot":5,"name":"OutputTable","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"customermatchpairsgrouped"}}}},"visible":true},"6":{"slot":6,"name":"Schema","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"TEMP"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196028":{"id":196028,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":320,"y":-192,"width":32,"height":32,"inputConnectorIDs":[196063],"outputSuccessConnectorIDs":[196055],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc 7 Post Cust Dedupe"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nKognitio Program  : Nestle Names Post Cust Dedupe\nAuthor            : Lindsay Timms\nClient Name       : Nestle\nJob Number        : \nStandard Machine  : Kognitio\nAmendment History : v01 - LT 20161216 - Created\n******************************************************************************************/\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 7 Post Dedupe'\n, \t\t'SCRIPT'\n, \t\t'STARTED'\n;\n\n\n/******************************************************************************************\n                                     NAMES POST DEDUPE\n******************************************************************************************/\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_names_post_cust_dedupe',\n    '*************************',\n    '*************************',\n    'start of script',\n    CURRENT_TIMESTAMP::timestamp_ntz ;  \n\ndrop table if exists ${Database}.temp.customermatchpairs_graphmap_merge;\n\nCREATE OR REPLACE TABLE ${Database}.temp.customermatchpairs_graphmap_merge \nas\nselect gmap.bbw_urn as cu_bbw_urn, \n    mingrp.dupe_cmp_bbw_urn as cu_customer_id\nfrom ${Database}.temp.customermatchpairsgrouped gmap\ninner join \n    (\n        select group_urn,\n            min(bbw_urn) as dupe_cmp_bbw_urn \n        from ${Database}.temp.customermatchpairsgrouped\n        group by group_urn\n    ) mingrp on mingrp.group_urn = gmap.group_urn;\n \nalter warehouse set warehouse_size = 'Large';\n \n--  update input table\nupdate ${Database}.temp.ram_names set c_id = 0;\n\n\nupdate ${Database}.temp.ram_names nm\nset nm.c_id = cu_customer_id\nfrom ${Database}.temp.customermatchpairs_graphmap_merge t\nwhere nm.bbw_urn = t.cu_bbw_urn;\n\n\nupdate ${Database}.temp.ram_names \nset c_id = bbw_urn\nwhere c_id = 0;\n\n\nCREATE OR REPLACE TABLE ${Database}.temp.familymatchpairs_graphmap_merge \nas\nselect gmap.bbw_urn as cu_bbw_urn, \n    mingrp.dupe_cmp_bbw_urn as cu_family_id\nfrom ${Database}.temp.familymatchpairsgrouped gmap\ninner join \n    (\n        select group_urn,\n            min(bbw_urn) as dupe_cmp_bbw_urn \n        from ${Database}.temp.familymatchpairsgrouped\n        group by group_urn\n    ) mingrp on mingrp.group_urn = gmap.group_urn;\n\n--  update input table\nupdate ${Database}.temp.ram_names  set f_id = 0;\n\n\nupdate ${Database}.temp.ram_names nm\nset nm.f_id =  cu_family_id\nfrom ${Database}.temp.familymatchpairs_graphmap_merge t\nwhere nm.bbw_urn = t.cu_bbw_urn\n;\n\nupdate ${Database}.temp.ram_names \nset f_id = bbw_urn\nwhere f_id = 0;\n\nalter warehouse set warehouse_size = 'Xsmall';\n\n/******************************************************************************************\n                                      Finish proc\n******************************************************************************************/\n\nupdate   ${Database}.db.build_dates\nset      nestle_names_post_cust_dedupe = CURRENT_TIMESTAMP::timestamp_ntz\nwhere    trim(build_flag) = 'C';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_names_post_cust_dedupe',\n    '*************************',\n    '*************************',\n    'end of script',\n    CURRENT_TIMESTAMP::timestamp_ntz ;  \n\n\n\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 7 Post Dedupe'\n, \t\t'SCRIPT'\n, \t\t'FINISHED'\n;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196029":{"id":196029,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-224,"y":-192,"width":32,"height":32,"inputConnectorIDs":[196067],"outputSuccessConnectorIDs":[196059],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc 6 Family Pairs"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nKognitio Program  : Nestle Names Customer Dedupe Run\nAuthor            : Lindsay Timms\nClient Name       : Nestle\nJob Number        :\nStandard Machine  : Kognitio\nAmendment History : v01 - LT 20161216 - created\n******************************************************************************************/\n\nalter warehouse set warehouse_size = 'Small';\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 6 Family Pairs'\n, \t\t'SCRIPT'\n, \t\t'STARTED'\n;\n\n------------------------\n\ncreate or replace table ${Database}.temp.vw_familymatchpairs as\n\n--region a,l\n--a,sl    match on address id, soundex last name\nselect td_bbw_urn, t_bbw_urn, 'A,SL' as matchtype\nfrom ${Database}.temp.allmatchkeys\ninner join ${Database}.temp.allmatchkeysdedupe on td_address = t_address\n                                         and td_soundex_lastname = t_soundex_lastname\nwhere td_bbw_urn > t_bbw_urn\n    and td_address > 0\n    and td_soundex_lastname > ''\nunion\n--region a,l\n--a,l    match on address id, last name\nselect td_bbw_urn, t_bbw_urn, 'A,L'\nfrom ${Database}.temp.allmatchkeys\ninner join ${Database}.temp.allmatchkeysdedupe on td_address = t_address\n                                     and td_lastname = t_lastname\nwhere td_bbw_urn > t_bbw_urn\n    and td_address > 0\n    and td_lastname > ''\nunion\n  --region a,dsl\n  --a,dsl    match on address id\n  --    last name must be less than 3 chars different and greater than 2 chars or one blank or left chars the same\n --     soundex last name must be different (to prevent repeats of other selections)\nselect td_bbw_urn, t_bbw_urn, 'A,DSL'\nfrom ${Database}.temp.allmatchkeys\ninner join ${Database}.temp.allmatchkeysdedupe on td_address = t_address\nwhere td_bbw_urn > t_bbw_urn\n    and td_address > 0\n    and\n    (\n        t_lastname = ''\n        or td_lastname = ''\n        or (left(t_lastname, length(td_lastname)) = td_lastname and td_lastname > '')\n        or (left(td_lastname, length(t_lastname)) = t_lastname and t_lastname > '')\n        or (right(t_lastname, length(td_lastname)) = td_lastname and td_lastname > ''  and length(td_lastname)>1)\n        or (right(td_lastname, length(t_lastname)) = t_lastname and t_lastname > ''  and length(t_lastname)>1)\n        or (left(td_lastname, 3) = left(t_lastname, 3) and right(td_lastname, 2) = right(t_lastname, 2)and length(t_lastname) > 2 and length(td_lastname) > 2)\n        or (left(t_lastname, 4) = left(td_lastname, 4) and length(t_lastname) > 3 and length(td_lastname) > 3)\n        or (left(td_lastname, 4) = left(t_lastname, 4) and length(t_lastname) > 3 and length(td_lastname) > 3)\n    )\n    and\n    (\n        td_soundex_lastname <> t_soundex_lastname\n        or td_soundex_lastname = ''\n        or t_soundex_lastname = ''\n    );\n    \nalter warehouse set warehouse_size = 'Xsmall';\n\n-- end of view create\n\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_names_cust_dedupe_run',\n    '${Database}.temp.vw_familymatchpairs',\n    'family match pairs found',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.vw_familymatchpairs;\n\n\n/******************************************************************************************\n                                      Finish proc\n******************************************************************************************/\n\nupdate   ${Database}.db.build_dates\nset      nestle_names_cust_dedupe_run = CURRENT_TIMESTAMP::timestamp_ntz\nwhere    trim(build_flag) = 'C';\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_names_cust_dedupe_run',\n    '*************************',\n    '*************************',\n    'end of script',\n    CURRENT_TIMESTAMP::timestamp_ntz ;\n\n\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 6 Family Pairs'\n, \t\t'SCRIPT'\n, \t\t'FINISHED'\n;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196030":{"id":196030,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-416,"y":-192,"width":32,"height":32,"inputConnectorIDs":[196062],"outputSuccessConnectorIDs":[196061],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc 4 HH"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"ALTER WAREHOUSE set WAREHOUSE_SIZE=MEDIUM;\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 4 HH Dedupe'\n, \t\t'SF_build_proc_04_NESTLE_HH'\n, \t\t'STARTED'\n;\t\t\n\n\n/******************************************************************************************\n                                        DEDUPE NAMES\n******************************************************************************************/\ninsert into ${Database}.db.build_log \nselect \n    'nestle_names_hh_dedupe',\n    '*************************',\n    '*************************',\n    'start of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;  \n\n\n\nCREATE OR REPLACE TABLE ${Database}.temp.dedupe_names \nas\nselect \n    nc.db_bbw_urn as bbw_urn\n    ,nc.name_urn\n    ,nc.db_bbw_urn\n    ,nc.title\n    ,nc.firstname\n    ,nc.lastname\n    ,nc.company\n    ,nc.add1\n    ,nc.add2\n    ,nc.add3\n    ,nc.add4\n    ,nc.add5\n    ,nc.add6\n    ,nc.add7\n    ,nc.postcode\n    ,nc.city\n    ,nc.state\n    ,nc.country\n    ,nc.region\n    ,nc.country_clean\n    ,nc.cc_iso\n    ,nc.phone_home\n    ,nc.phone_home_dupe\n    ,nc.phone_work\n    ,nc.phone_work_dupe\n    ,nc.phone_mobile\n    ,nc.job_title\n    ,lower(nc.email) as email\n    ,nc.email_domain\n    ,nc.www\n    ,case --for de-dupe use the derived gender if it is 'm' or 'f' first, otherwise use original gender\n        when lower(trim(nc.gender)) in ('m','f') then upper(nc.gender)\n        when lower(trim(nc.original_gender)) in ('m','f') then upper(nc.original_gender)\n        else 'X'\n    end as gender\n    ,case --for output use the original gender, then the derived gender if it is 'm' or 'f'\n        when lower(trim(nc.original_gender)) in ('m','f') then upper(nc.original_gender)\n        when lower(trim(nc.gender)) in ('m','f') then upper(nc.gender)\n        else 'X'\n    end as original_gender\n    ,nc.company_dupe\n    ,nc.company_type\n    ,nc.company_geo\n    ,nc.company_group_ref\n    ,nc.derived_company\n    ,nc.derived_country\n    ,nc.firstnamecheck\n    ,nc.titlecheck\n    ,nc.city_status\n    ,nc.state_status\n    ,nc.name_score\n    ,nc.company_score\n    ,nc.address_score\n    ,nc.email_score\n    ,nc.phone_home_score\n    ,nc.phone_work_score\n    ,nc.phone_mobile_score\n    ,nc.job_title_score\n    ,nc.name_validation\n    ,nc.name_cleaning\n    ,nc.company_validation\n    ,nc.company_cleaning\n    ,nc.address_validation\n    ,nc.address_cleaning\n    ,nc.address_quality\n    ,nc.address_type\n    ,nc.country_validation\n    ,nc.country_cleaning\n    ,nc.email_validation\n    ,nc.email_cleaning\n    ,nc.phone_home_validation\n    ,nc.phone_home_cleaning\n    ,nc.phone_work_validation\n    ,nc.phone_work_cleaning\n    ,nc.phone_mobile_validation\n    ,nc.phone_mobile_cleaning\n    ,nc.job_title_validation\n    ,nc.job_title_cleaning\n    ,nc.paf_add1\n    ,nc.paf_add2\n    ,nc.paf_add3\n    ,nc.paf_add4\n    ,nc.paf_add5\n    ,nc.paf_add6\n    ,nc.paf_city\n    ,nc.paf_state\n    ,nc.paf_postcode\n    ,nc.paf_organisation\n    ,nc.cap_match_level\n    ,nc.cap_postcode_change_level\n    ,nc.cap_address_matching_score\n    ,nc.cap_output_status\n    ,nc.cap_match_status\n    ,nc.cap_premise_match\n    ,nc.cap_org_match\n    ,nc.cap_process\n    ,nc.cap_batch\n    ,nc.cap_address_key\n    ,nc.cap_organisation_key\n\t,nc.dob\n    ,nc.source\n    ,nc.source_date\n    ,nc.data_date\n    ,nc.reg_date\n    ,nc.source_file\n    ,nc.source_urn\n    ,nc.source_data_controller_id\n    ,nc.source_brand_id\n    ,nc.ckey\n    ,nc.fkey\n    ,nc.hkey\n    ,nc.source_urn                     as provider_contact_urn \n    ,cast('' as varchar(20))            as provider_business_urn            -- needed for dedupe but do not have data \n    ,cast('' as varchar(20))            as company_registration_number      -- needed for dedupe but do not have data \n    ,cast('' as varchar(20))            as initials                         -- needed for dedupe but do not have data\n    -- ,cast(0 as int) as hh_id \n    ,cast(0 as int)                     as f_id \n    ,cast(0 as int)                     as c_id \n    ,cast(0 as int)                     as co_id \nfrom ${Database}.db.names_cleaned  nc  \n;\n\ndrop table if exists ${Database}.temp.build_names_to_key;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_names_hh_dedupe',\n    '${Database}.temp.dedupe_names',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.dedupe_names; \n\n\n--new script for hh create\nCREATE OR REPLACE TABLE ${Database}.temp.hh_candidates \nas\nselect      \n    bbw_urn as hhc_bbw_urn,\n    upper\n    (\n        case when trim(cc_iso) = 'US' and trim(postcode) regexp '^[0-9]{5}-[0-9]{4}$|^[0-9]{5} [0-9]{4}$' then left(trim(postcode),5)\n            else postcode\n        end\n    ) as hhc_postcode,\n    upper\n    (\n        translate\n        (\n            replace\n            (\n                replace\n                (\n                    case \n                        when lower(address_quality) regexp '.*paf standard.*' \n                            and trim(cap_address_key) > '' \n                            and trim(cap_address_key) <> '00000000' \n                            then cast('CSAK' as varchar)|| cast(trim(cap_address_key) as varchar)\n                        -- Non GB\n                        -- if it's not uk and there is a number anywhere in the first three lines of the address then use that plus the first 2 words and the soundex of the next 2\n                        when trim(cc_iso) <> 'GB'  \n                            and substring(add1, 1, 1) regexp '.*[0-9].*' \n                            and lower(add1) not regexp '(.*)(tower|house|office|suite|[0-9]th f|[0-9]st f|[0-9]nd f|[0-9]rd f)(.*)' \n                            then split_part(trim(split_part(trim(translate(upper(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), '€ABCDEFGHIJKLMNOPQRSTUVWXYZ/.,:&-''''', ' ')),' ', 1)),' ', 1)||\n                                trim(split_part(upper(trim(translate(upper(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), '€0123456789/.&-,', ' '))), ' ' ,1)) ||\n                                trim(split_part(upper(trim(translate(upper(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), '€0123456789/.&-', ' '))), ' ' , 2)) ||\n                                regexp_replace(soundex(trim(split_part(upper(trim(translate(upper(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), '€0123456789/.&-', ' '))), ' ' , 3))),'[^A-Za-z]000','') \n                        when trim(cc_iso) <> 'GB'  \n                            and substring(add2, 1, 1) regexp '.*[0-9].*'   \n                            then split_part(trim(split_part(trim(translate(upper(coalesce(add2,'')||' '|| coalesce(add3,'')), '€ABCDEFGHIJKLMNOPQRSTUVWXYZ/.,:&-''''', ' ')),' ',  1)),' ',  1)||\n                                trim(split_part(upper(trim(translate(upper(coalesce(add2,'')||' '|| coalesce(add3,'')), '€0123456789/.&-,', ' '))), ' ' ,1)) ||\n                                trim(split_part(upper(trim(translate(upper(coalesce(add2,'')||' '|| coalesce(add3,'')), '€0123456789/.&-', ' '))), ' ' , 2)) ||\n                                regexp_replace(soundex(trim(split_part(upper(trim(translate(upper(coalesce(add2,'')||' '|| coalesce(add3,'')), '€0123456789/.&-', ' '))), ' ' , 3))),'[^A-Za-z]000','') ||\n                                regexp_replace(soundex(trim(split_part(upper(trim(translate(upper(coalesce(add2,'')||' '|| coalesce(add3,'')), '€0123456789/.&-', ' '))), ' ' , 4))),'[^A-Za-z]000','')\n                        when trim(cc_iso) <> 'GB'  \n                            and substring(add3, 1, 1) regexp '.*[0-9].*'     \n                            then split_part( trim(split_part(trim(translate(upper(coalesce(add3,'')), '€ABCDEFGHIJKLMNOPQRSTUVWXYZ/.,:&-''''', ' ')),' ',  1)),' ',  1)||\n                                trim(split_part(upper(trim(translate(upper(coalesce(add3,'')), '€0123456789/.&-,', ' '))), ' ' , 1)) ||\n                                trim(split_part(upper(trim(translate(upper(coalesce(add3,'')), '€0123456789/.&-', ' '))), ' ' ,  2)) ||\n                                regexp_replace(soundex(trim(split_part(upper(trim(translate(upper(coalesce(add3,'')), '€0123456789/.&-', ' '))), ' ' ,  3))),'[^A-Za-z]000','') ||\n                                regexp_replace(soundex(trim(split_part(upper(trim(translate(upper(coalesce(add3,'')), '€0123456789/.&-', ' '))), ' ' ,  4))),'[^A-Za-z]000','')\n                        when trim(cc_iso) <> 'GB'  \n                            and add1 regexp '.*[0-9].*'   \n                            and lower(add1) not regexp '(.*)(tower|house|office|suite|[0-9]th f|[0-9]st f|[0-9]nd f|[0-9]rd f)(.*)'   \n                            then split_part( trim(split_part(trim(translate(upper(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), '€ABCDEFGHIJKLMNOPQRSTUVWXYZ/.,:&-''''', ' ')),' ',  1)),' ',  1)||\n                                trim(split_part(upper(trim(translate(upper(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), '€0123456789/.&-,', ' '))), ' ' , 1)) ||\n                                trim(split_part(upper(trim(translate(upper(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), '€0123456789/.&-', ' '))), ' ' ,  2)) ||\n                                regexp_replace(soundex(trim(split_part(upper(trim(translate(upper(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), '€0123456789/.&-', ' '))), ' ' ,  3))),'[^A-Za-z]000','') ||\n                                regexp_replace(soundex(trim(split_part(upper(trim(translate(upper(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), '€0123456789/.&-', ' '))), ' ' ,  4))),'[^A-Za-z]000','')\n                        when trim(cc_iso) <> 'GB' \n                            and  add2 regexp '.*[0-9].*'     \n                            then split_part( trim(split_part(trim(translate(upper(coalesce(add2,'')||' '|| coalesce(add3,'')), '€ABCDEFGHIJKLMNOPQRSTUVWXYZ/.,:&-''''', ' ')),' ',  1)),' ',  1)||\n                                trim(split_part(upper(trim(translate(upper(coalesce(add2,'')||' '|| coalesce(add3,'')), '€0123456789/.&-,', ' '))), ' ' ,1)) ||\n                                trim(split_part(upper(trim(translate(upper(coalesce(add2,'')||' '|| coalesce(add3,'')), '€0123456789/.&-', ' '))), ' ' , 2)) ||\n                                regexp_replace(soundex(trim(split_part(upper(trim(translate(upper(coalesce(add2,'')||' '|| coalesce(add3,'')), '€0123456789/.&-', ' '))), ' ' , 3))),'[^A-Za-z]000','') ||\n                                regexp_replace(soundex(trim(split_part(upper(trim(translate(upper(coalesce(add2,'')||' '|| coalesce(add3,'')), '€0123456789/.&-', ' '))), ' ' , 4))),'[^A-Za-z]000','')\n                        when trim(cc_iso) <> 'GB' \n                            and  add3 regexp '.*[0-9].*'    \n                            then split_part( trim(split_part(trim(translate(upper(coalesce(add3,'')), '€ABCDEFGHIJKLMNOPQRSTUVWXYZ/.,:&-''''', ' ')),' ',  1)),' ',  1)||\n                                trim(split_part(upper(trim(translate(upper(coalesce(add3,'')), '0€123456789/.&-,', ' '))), ' ' , 1)) ||\n                                trim(split_part(upper(trim(translate(upper(coalesce(add3,'')), '€0123456789/.&-', ' '))), ' ' ,  2)) ||\n                                regexp_replace(soundex(trim(split_part(upper(trim(translate(upper(coalesce(add3,'')), '€0123456789/.&-', ' '))), ' ' ,  3))),'[^A-Za-z]000','') ||\n                                regexp_replace(soundex(trim(split_part(upper(trim(translate(upper(coalesce(add3,'')), '€0123456789/.&-', ' '))), ' ' ,  4))),'[^A-Za-z]000','')\n                        when trim(cc_iso) <> 'GB' \n                            and  add1 regexp '.*[0-9].*'   \n                            then split_part( trim(split_part(trim(translate(upper(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), '€ABCDEFGHIJKLMNOPQRSTUVWXYZ/.,:&-''''', ' ')),' ',  1)),' ',  1)||\n                                trim(split_part(upper(trim(translate(upper(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), '€0123456789/.&-,', ' '))), ' ' , 1)) ||\n                                trim(split_part(upper(trim(translate(upper(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), '€0123456789/.&-', ' '))), ' ' ,  2)) ||\n                                regexp_replace(soundex(trim(split_part(upper(trim(translate(upper(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), '€0123456789/.&-', ' '))), ' ' ,  3))),'[^A-Za-z]000','') ||\n                                regexp_replace(soundex(trim(split_part(upper(trim(translate(upper(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), '€0123456789/.&-', ' '))), ' ' ,  4))),'[^A-Za-z]000','')\n                        when trim(cc_iso) <> 'GB'  \n                            then trim(split_part(upper(trim(translate(upper(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), '€0123456789/.&-,', ' '))), ' ' , 1)) ||\n                                trim(split_part(upper(trim(translate(upper(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), '€0123456789/.&-', ' '))), ' ' ,  2)) ||\n                                regexp_replace(soundex(trim(split_part(upper(trim(translate(upper(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), '€0123456789/.&-', ' '))), ' ' ,  3))),'[^A-Za-z]000','') ||\n                                regexp_replace(soundex(trim(split_part(upper(trim(translate(upper(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), '€0123456789/.&-', ' '))), ' ' ,  4))),'[^A-Za-z]000','')\n                        -- GB        \n                        -- if post code is too short just use first 3 words\n                        when length(replace(postcode,' ','')) < 5 \n                            then trim(split_part(upper(trim(translate(upper(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), '€0123456789/.&-,', ' '))), ' ' , 1)) ||\n                                trim(split_part(upper(trim(translate(upper(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), '€0123456789/.&-', ' '))), ' ' ,  2)) ||\n                                trim(split_part(upper(trim(translate(upper(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), '€0123456789/.&-', ' '))), ' ' , 3)) \n                        -- if it starts with a number then use that        \n                        when add1 regexp '.*[0-9].*'  \n                            and lower(add1) regexp '(.*)(tower|house|office|suite|[0-9]th f|[0-9]st f|[0-9]nd f|[0-9]rd f)(.*)' \n                            and substring(add2, 1, 1) regexp '.*[0-9].*'  \n                            then trim(translate(split_part(trim(add2),' ',1),'€ABCDEFGHIJKLMNOPQRSTUVWXYZ/.,:&''''', ' '))\n                        -- if it starts with a number then use that\n                        when add1 regexp '.*[0-9].*'  \n                            and lower(add1) regexp '(.*)(tower|house|office|suite|[0-9]th f|[0-9]st f|[0-9]nd f|[0-9]rd f)(.*)' \n                            and substring(add2, 1, 1) not regexp '.*[0-9].*'  \n                            and substring(add3, 1, 1) regexp '.*[0-9].*' \n                            then trim(translate(split_part(trim(add3),' ',1),'€ABCDEFGHIJKLMNOPQRSTUVWXYZ/.,:&''''', ' '))\n                        -- if it starts with a number then use that    \n                        when add1 regexp '.*[0-9].*'  \n                            and lower(add1) regexp '(.*)(tower|house|office|suite|[0-9]th f|[0-9]st f|[0-9]nd f|[0-9]rd f)(.*)'  \n                            and substring(add2, 1, 1) not regexp '.*[0-9].*'  \n                            and substring(add3, 1, 1) not regexp '.*[0-9].*'\n                            and substring(add4, 1, 1) regexp '.*[0-9].*'                  \n                            then trim(translate(split_part(trim(add4),' ',1),'€ABCDEFGHIJKLMNOPQRSTUVWXYZ/.,:&''''', ' '))\n                        -- if it starts with a number then use that    \n                        when substring(add1, 1, 1) regexp '.*[0-9].*'  \n                            then trim(translate(split_part(trim(add1),' ',1),'€ABCDEFGHIJKLMNOPQRSTUVWXYZ/.,:&''''', ' '))          \n                        -- if it is a flat then get the first 2 words and the SOUNDEX of the next two    \n                        when lower(add1) regexp '(.*)(suite|flat|unit)(.*)'  \n                            then\n                                split_part(trim(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), ' ' , 1)||\n                                split_part(trim(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), ' ' , 2)||\n                                regexp_replace(soundex(split_part(trim(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), ' ' , 3)),'[^A-Za-z]000','')||\n                                regexp_replace(soundex(split_part(trim(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), ' ' , 4)),'[^A-Za-z]000','')\n                        -- if it is a flat then get the first 2 words and the SOUNDEX of the next two        \n                        when lower(add2) regexp '(.*)(suite|flat|unit)(.*)'  \n                            then split_part(trim(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), ' ' , 1)||\n                                split_part(trim(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), ' ' , 2)||\n                                regexp_replace(soundex(split_part(trim(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), ' ' , 3)),'[^A-Za-z]000','')||\n                                regexp_replace(soundex(split_part(trim(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), ' ' , 4)),'[^A-Za-z]000','')\n                        -- if there is a number anywhere in the first three lines of the address then use that        \n                        when add1|| coalesce(add2,'')|| coalesce(add3,'') regexp '.*[0-9].*'\n                            then split_part(ltrim(translate(upper(add1 ||' ' || coalesce(add2,'') || ' ' || coalesce(add3,' ')), '€ABCDEFGHIJKLMNOPQRSTUVWXYZ/.,:&''''', ' ')), ' ' , 1) -- Contains - if it links numbers\n                        -- if it is care of, then use the SOUNDEX of first two words from address line 2    \n                        when upper(left(add1,3)) = 'C/O' \n                            and trim(coalesce(add2,'')||coalesce(add3,'')) > '' \n                            then regexp_replace(soundex(split_part(trim(coalesce(add2,'')||' '|| coalesce(add3,'')), ' ' , 1)),'[^A-Za-z]000','')||\n                                regexp_replace(soundex(split_part(trim(coalesce(add2,'')||' '|| coalesce(add3,'')), ' ' ,  2)),'[^A-Za-z]000','')\n                        --  if it is care of and no add line 2/3 then use the SOUNDEX of 2nd two words from address line 1        \n                        when upper(left(add1,3)) = 'C/O' \n                            then regexp_replace(soundex(split_part(trim(add1), ' ' , 1)),'[^A-Za-z]000','')||\n                                regexp_replace(soundex(split_part(trim(add1), ' ' , 2)),'[^A-Za-z]000','')                  \n                        else \n                            regexp_replace(soundex(split_part(trim(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), ' ' ,  1)),'[^A-Za-z]000','')||\n                            regexp_replace(soundex(split_part(trim(add1||' '|| coalesce(add2,'')||' '|| coalesce(add3,'')), ' ' ,  2)),'[^A-Za-z]000','') --  otherwise if address_score = 1 use the SOUNDEX of the first two words\n                    end, \n                    ' ', ''\n                ),\n                chr(39),''\n            ), \n            '€/.&-,', ' '\n        )\n    ) as hhc_premise,\n    upper(cc_iso) as hhc_cc_iso,\n    current_date as hhc_rundate,\n    upper\n    (\n        replace\n        (\n            replace(replace(replace(replace(replace(replace(replace(replace(\n            replace(replace(replace(replace(replace(replace(replace(replace(\n            upper(coalesce(add1, '')|| coalesce(add2, '')|| coalesce(city, '')),\n            ' COURT','CT'),\n            ' LANE','LN'),\n            ' STREET','ST'),\n            ' ROAD','RD'),\n            ' TERRACE','TERR'),\n            ' CIRCLE','CIR'),\n            ' HIGHWAY','HWY'),\n            ' PARKWAY','PKWY'),\n            ' AVENUE','AVE'),\n            ' RIDGE','RDG'),\n            ' BOULEVARD','BLVD'),\n            ' DRIVE','DR'),\n            ' CLOSE','CL'),\n            ' ',''),\n            '~',''),\n            '.',''),\n            chr(39), ''\n        )\n    ) as hhc_addhash\nfrom  ${Database}.temp.dedupe_names\nwhere \n    (\n        coalesce(trim(add1),'') > ''\n        or coalesce(trim(add2),'') > '' \n    )\n    and \n    (\n        address_score = 1 \n        or \n        (   \n            trim(cap_organisation_key) > '' \n            and trim(cap_organisation_key) <> '00000000'\n        ) \n        or \n        (   \n            trim(cap_address_key) > '' \n            and trim(cap_address_key) <> '00000000'\n        )\n    )\n    -- and hh_id = 0\n    and c_id = 0;\n\n-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n                            \n\nupdate \t${Database}.temp.hh_candidates hhc\nset \thhc.hhc_cc_iso = withiso.hhc_cc_iso\nfrom\n\t(\tselect \tupper(trim(hhc_premise)||trim(hhc_postcode)) as adkey\n\t\t,\t\tmin(trim(hhc_cc_iso)) as hhc_cc_iso\n        from \t${Database}.temp.hh_candidates\n        where \ttrim(coalesce(hhc_cc_iso,''))<>'' and trim(hhc_postcode)<>'' and trim(hhc_premise)<>''\n\t\tgroup by upper(trim(hhc_premise)||trim(hhc_postcode)) \n\t\thaving \tcount(distinct trim(hhc_cc_iso))=1\n\t) withiso\nwhere \ttrim(hhc.hhc_cc_iso)='' \nand \tupper(trim(hhc.hhc_premise)||trim(hhc.hhc_postcode)) = trim(withiso.adkey)\n;\n\n-- Cross match the HHC_cc_iso where address exact match\nupdate ${Database}.temp.hh_candidates   hhc\nset hhc.hhc_cc_iso = withiso.hhc_cc_iso\nfrom    (   select upper(trim(hhc_addhash)||trim(hhc_postcode)) as adkey\n            ,       min(trim(hhc_cc_iso)) as hhc_cc_iso\n            from    ${Database}.temp.hh_candidates  \n            where   trim(coalesce(hhc_cc_iso,'')) <> '' \n            and     trim(hhc_postcode) <> '' \n            and     trim(hhc_addhash) <> '' \n            group by upper(trim(hhc_addhash)||trim(hhc_postcode)) \n            having count(distinct trim(hhc_cc_iso)) = 1\n        ) withiso\nwhere   trim(hhc.hhc_cc_iso) = '' \nand     upper(trim(hhc.hhc_addhash)||trim(hhc.hhc_postcode)) = trim(withiso.adkey)\n;\n\t\t\t\t\t\t\t\n\n-- use add hash to fix dodgy premises\nCREATE OR REPLACE TABLE ${Database}.temp.addhash_update \nas\nselect upper(trim(hhc_addhash)) as hhc_addhash,\n    upper(trim(replace(hhc_postcode,' ',''))) as hhc_postcode,\n    hhc_cc_iso,\n    count(distinct case when upper(hhc_premise) like 'CSAK%' then hhc_premise else cast(null as varchar) end) as zz\nfrom ${Database}.temp.hh_candidates\nwhere trim(hhc_addhash)>'' and trim(hhc_postcode)>''\ngroup by 1,2,3\nhaving count(distinct trim(hhc_premise))>1\n    and count(distinct case when upper(trim(hhc_premise)) like 'CSAK%' then trim(hhc_premise) else cast(null as varchar) end) < 2;\n\n\nCREATE OR REPLACE TABLE ${Database}.temp.addhash_update2 \nas\nselect upper(trim(replace(c.hhc_postcode,' ',''))) as hhc_postcode, \n    upper(trim(c.hhc_premise)) as hhc_premise, \n    upper(trim(c.hhc_cc_iso)) as hhc_cc_iso, \n    max(trim(u.hhc_addhash)) as hhc_addhash\nfrom ${Database}.temp.hh_candidates c \ninner join ${Database}.temp.addhash_update u on upper(trim(c.hhc_addhash)) = upper(trim(u.hhc_addhash)) \n                                    and trim(upper(replace(c.hhc_postcode,' ',''))) = upper(trim(u.hhc_postcode)) \n                                    and upper(trim(c.hhc_cc_iso)) = upper(trim(u.hhc_cc_iso))\nwhere trim(c.hhc_premise) > '' \n    and trim(c.hhc_postcode) > ''\ngroup by 1,2,3;\n\nupdate  ${Database}.temp.hh_candidates   c\nset     c.hhc_premise = addhash.hhc_addhash\nfrom    (\n        select  hhc_addhash,hhc_cc_iso,hhc_premise,hhc_postcode\n        from    ${Database}.temp.addhash_update2\n        )  addhash\nwhere   upper(trim(c.hhc_cc_iso)) = trim(addhash.hhc_cc_iso)\nand     upper(trim(c.hhc_premise)) = trim(addhash.hhc_premise)\nand     upper(replace(trim(c.hhc_postcode),' ','')) = trim(addhash.hhc_postcode)\n;\n\ndrop table if exists ${Database}.temp.addhash_update;\ndrop table if exists ${Database}.temp.addhash_update2;\n\ncreate or replace table ${Database}.temp.vw_hh_candidates2  \nas\nselect bbw_urn as hhc_bbw_urn,\n    upper(case when trim(cc_iso) = 'US' and postcode regexp '^[0-9]{5} [0-9]{4}$' then left(postcode,5) else postcode end) as hhc_postcode,\n    cast(null as varchar(100)) as hhc_premise,\n    cc_iso as hhc_cc_iso,\n    CURRENT_TIMESTAMP::timestamp_ntz as hhc_rundate,\n    upper\n    (\n        replace\n        (\n            replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(\n            replace(replace(replace(replace(upper(coalesce(add1, '')|| coalesce(add2, '')|| coalesce(city, '')),\n            ' COURT','CT'),\n            ' LANE','LN'),\n            ' STREET','ST'),\n            ' ROAD','RD'),\n            ' TERRACE','TERR'),\n            ' CIRCLE','CIR'),\n            ' HIGHWAY','HWY'),\n            ' PARKWAY','PKWY'),\n            ' AVENUE','AVE'),\n            ' RIDGE','RDG'),\n            ' BOULEVARD','BLVD'),\n            ' DRIVE','DR'),\n            ' CLOSE','CL'),\n            ' ',''),\n            '~',''),\n            '.',''),\n            chr(39),''\n        )\n    ) as hhc_addhash,\n    upper(add1) as hhc_add1,\n    upper(add2) as hhc_add2,\n    upper(city) as hhc_city\nfrom ${Database}.temp.dedupe_names\nleft join ${Database}.temp.hh_candidates on hhc_bbw_urn = bbw_urn\nwhere hhc_bbw_urn is null                                    \n    and trim(add1||add2) > '' \n    and lower(add1||add2) not regexp '(.*)(^tb|^not )(.*)'     --  avoids tbc,tba,'not set' etc.\n    and lower(add1||add2) regexp '.*[a-z].*'             --  avoids just numbers                        \n    and     \n    (\n        add1||add2 regexp '.*[1-9].*' \n        or length(trim(add1||add2)) > 8\n    )                                            --  avoids just letters unless decent length\n    and not \n    (\n        upper(left(add1||add2,1)) = upper(substr(add1||add2, 2, 1))\n        and upper(left(add1||add2, 1)) = upper(substr(add1||add2, 3, 1))\n        and left(add1||add2, 1) not regexp '.*[1-9].*'\n    )                                            --  avoids xxx etc. but allows 111 High St.\n    and upper(trim(add1)) <> upper(trim(city))               --  almost always rubish\n    and length(trim(add1||add2)) > 3                   --  almost always rubish;\n    --and hh_id = 0\n    and c_id = 0 ;\n\ninsert into ${Database}.temp.hh_candidates\n(\n    hhc_bbw_urn,\n    hhc_postcode,\n    hhc_premise,\n    hhc_cc_iso,\n    hhc_rundate,\n    hhc_addhash\n)\nselect \n    vc2.hhc_bbw_urn\n    ,max(c.hhc_postcode)\n    ,max(c.hhc_premise)\n    ,max(case when trim(vc2.hhc_cc_iso) <= '' then c.hhc_cc_iso else vc2.hhc_cc_iso end)\n    ,max(vc2.hhc_rundate)\n    ,max(vc2.hhc_addhash)\nfrom ${Database}.temp.vw_hh_candidates2 vc2\ninner join ${Database}.temp.hh_candidates c on upper(trim(vc2.hhc_addhash)) = upper(trim(c.hhc_addhash))\nleft join ${Database}.temp.hh_candidates c2 on vc2.hhc_bbw_urn = c2.hhc_bbw_urn\nwhere c2.hhc_bbw_urn is null\ngroup by vc2.hhc_bbw_urn;  \n        \n\ninsert into ${Database}.temp.hh_candidates\n(\n    hhc_bbw_urn,\n    hhc_postcode,\n    hhc_premise,\n    hhc_cc_iso,\n    hhc_rundate,\n    hhc_addhash\n)\nselect     \n    vc2.hhc_bbw_urn,\n    max(coalesce(case when vc22.hhc_postcode > vc2.hhc_postcode then vc22.hhc_postcode else vc2.hhc_postcode end,'none')),\n    max\n    (   \n        left\n        (\n            replace\n            (\n                replace(replace(replace(replace(replace(replace(replace(replace(replace(\n                replace(replace(replace(replace(replace(replace(replace(\n                    upper(vc2.hhc_add1||vc2.hhc_add2||vc2.hhc_city),\n                ' COURT','CT'),\n                ' LANE','LN'),\n                ' STREET','ST'),\n                ' ROAD','RD'),\n                ' TERRACE','TERR'),\n                ' CIRCLE','CIR')\n                ,' HIGHWAY','HWY'),\n                ' PARKWAY','PKWY'),\n                ' AVENUE','AVE'),\n                ' RIDGE','RDG'),\n                ' BOULEVARD','BLVD'),\n                ' DRIVE','DR'),\n                ' CLOSE','CL')\n                ,' ',''),\n                '~',''),\n                '.',''),\n                chr(39),''\n            ), 100\n        )\n    ),\n    max(case when vc22.hhc_cc_iso > vc2.hhc_cc_iso then vc22.hhc_cc_iso else vc2.hhc_cc_iso end),\n    max(vc2.hhc_rundate),\n    max(vc2.hhc_addhash)\nfrom ${Database}.temp.vw_hh_candidates2 vc2\ninner join ${Database}.temp.vw_hh_candidates2 vc22 on upper(trim(vc2.hhc_addhash)) = upper(trim(vc22.hhc_addhash))\nleft join ${Database}.temp.hh_candidates c on vc2.hhc_bbw_urn = c.hhc_bbw_urn\nwhere c.hhc_bbw_urn is null\ngroup by vc2.hhc_bbw_urn;\n\n\nCREATE OR REPLACE TABLE ${Database}.temp.hh_candidates2\nas    \nselect \n    hhc_bbw_urn, \n    max(hhc_postcode)   as hhc_postcode, \n    max(hhc_premise)    as hhc_premise, \n    max(hhc_cc_iso)     as hhc_cc_iso, \n    max(hhc_rundate)    as hhc_rundate, \n    max(hhc_addhash)    as hhc_addhash\nfrom ${Database}.temp.hh_candidates \ngroup by hhc_bbw_urn;\n\ncreate or replace table ${Database}.temp.vw_hhs \n(\n    hhs_hh_id, \n    hhs_bbw_urn, \n    hhs_rundate\n) \nas\nselect \n    hh_id as hh_id, \n    hhc_bbw_urn, \n    hh_rundate as hh_rundate\nfrom \n    (\n        select min(hhc_bbw_urn) as hh_id, \n            upper(hhc_cc_iso) as hh_cc_iso, \n            upper(hhc_postcode) as hh_postcode, \n            upper(hhc_premise) as hh_premise, \n            hhc_rundate as hh_rundate\n        from ${Database}.temp.hh_candidates\n        where hhc_premise is not null\n        group by upper(hhc_cc_iso), \n            upper(hhc_postcode), \n            upper(hhc_premise), \n            hhc_rundate\n    ) hc\ninner join ${Database}.temp.hh_candidates2  on upper(trim(hh_postcode)) = upper(trim(hhc_postcode)) \n                                    and upper(trim(hh_premise)) = upper(trim(hhc_premise))\n                                    and upper(trim(hh_cc_iso)) = upper(trim(hhc_cc_iso));\n                                                \n\nCREATE OR REPLACE TABLE ${Database}.temp.ram_names \nas\nselect \n    n.*,\n    hhs.hhs_hh_id as hh_id\nfrom ${Database}.temp.dedupe_names n  \nleft join ${Database}.temp.vw_hhs hhs on n.bbw_urn = hhs.hhs_bbw_urn;\n\ndrop table if exists ${Database}.temp.hh_candidates;\ndrop table if exists ${Database}.temp.hh_candidates2;\ndrop table if exists ${Database}.temp.dedupe_names;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_names_hh_dedupe',\n    '${Database}.temp.ram_names',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.ram_names;\n\nCREATE OR REPLACE TABLE ${Database}.temp.ie_hh_change \nas \nselect\n    a.name_urn,a.hh_id,a.add1,a.add2,a.add3,a.add4,a.add5,a.city,a.postcode,a.cc_iso,\n    left\n    (\n        replace\n        (\n            replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(\n            replace(replace(replace(replace(\n                upper(add1||add2||add3),\n            ' COURT','CT'),\n            ' LANE','LN'),\n            ' STREET','ST'),\n            ' ROAD','RD'),\n            ' TERRACE','TERR'),\n            ' CIRCLE','CIR'),\n            ' HIGHWAY','HWY'),\n            ' PARKWAY','PKWY'),\n            ' AVENUE','AVE'),\n            ' RIDGE','RDG'),\n            ' BOULEVARD','BLVD'),\n            ' DRIVE','DR'),\n            ' CLOSE','CL'),\n            ' ',''),\n            '~',''),\n            '.',''),\n            '''',''),\n            '-',''\n        ),\n        14\n    ) as ie_key,   \n    upper\n    (\n       case\n          when rlike(collate(state,''),'(.*)(^Carlow|Co Carlow|County Carlow|Co\\. Carlow|Co\\.Carlow)(.*)','i') then 'Carlow'\n            when rlike(collate(state,''),'(.*)(^Cavan|Co Cavan|County Cavan|Co\\. Cavan|Co\\.Cavan|^Co Cav|^Co\\. Cav)(.*)','i') then 'Cavan'\n            when rlike(collate(state,''),'(.*)(^Clare|Co Clare|County Clare|Co\\. Clare|Co\\.Clare|Co Claire|^Co Cla|^Co\\. Cla)(.*)','i') then 'Clare'\n            when rlike(collate(state,''),'(.*)(^Cork|Co Cork|County Cork|Co\\. Cork|Co\\.Cork|^Co Cor|^Co\\. Cor)(.*)','i') then 'Cork'\n            when rlike(collate(state,''),'(.*)(^Donegal|Co Donegal|County Donegal|Co\\. Donegal|Co\\.Donegal|^Co Don|^Co\\. Don)(.*)','i') then 'Donegal'\n            when rlike(collate(state,''),'(.*)(^Galway|Co Galway|County Galway|Co\\. Galway|Co\\.Galway|^Co Gal|^Co\\. Gal)(.*)','i') then 'Galway'\n            when rlike(collate(state,''),'(.*)(^Kerry|Co Kerry|County Kerry|Co\\. Kerry|Co\\.Kerry|^Co Ker|^Co\\. Ker)(.*)','i') then 'Kerry'\n            when rlike(collate(state,''),'(.*)(^Kildare|Co Kildare|County Kildare|Co\\. Kildare|Co\\.Kildare|Co Klidare)(.*)','i') then 'Kildare'\n            when rlike(collate(state,''),'(.*)(^Kilkenny|Co Kilkenny|County Kilkenny|Co\\. Kilkenny|Co\\.Kilkenny|Co Killkenny)(.*)','i') then 'Kilkenny'\n            when rlike(collate(state,''),'(.*)(^Laois|Co Laois|County Laois|Co\\. Laois|Co\\.Laois)(.*)','i') then 'Laois'\n            when rlike(collate(state,''),'(.*)(^Leitrim|Co Leitrim|County Leitrim|Co\\. Leitrim|Co\\.Leitrim|^Co Leit|^Co\\. Leit)(.*)','i') then 'Leitrim'\n            when rlike(collate(state,''),'(.*)(^Limerick|Co Limerick|County Limerick|Co\\. Limerick|Co\\.Limerick|^Co Lim|^Co\\. Lim)(.*)','i') then 'Limerick'\n            when rlike(collate(state,''),'(.*)(^Longford|Co Longford|County Longford|Co\\. Longford|Co\\.Longford)(.*)','i') then 'Longford'\n            when rlike(collate(state,''),'(.*)(^Louth|Co Louth|County Louth|Co\\. Louth|Co\\.Louth)(.*)','i') then 'Louth'\n            when rlike(collate(state,''),'(.*)(^Mayo|Co Mayo|County Mayo|Co\\. Mayo|Co\\.Mayo)(.*)','i') then 'Mayo'\n            when rlike(collate(state,''),'(.*)(^Meath|Co Meath|County Meath|Co\\. Meath|Co\\.Meath)(.*)','i') then 'Meath'\n            when rlike(collate(state,''),'(.*)(^Monaghan|Co Monaghan|County Monaghan|Co\\. Monaghan|Co\\.Monaghan|^Co Mon|^Co\\. Mon)(.*)','i') then 'Monaghan'\n            when rlike(collate(state,''),'(.*)(^Offaly|Co Offaly|County Offaly|Co\\. Offaly|Co\\.Offaly|Co Offlay|Co Offally|^Co Off|^Co\\. Off)(.*)','i') then 'Offaly'\n            when rlike(collate(state,''),'(.*)(^Roscommon|Co Roscommon|County Roscommon|Co\\. Roscommon|Co\\.Roscommon|Co Rosc0mmon|^Co Ros|^Co\\. Ros)(.*)','i') then 'Roscommon'\n            when rlike(collate(state,''),'(.*)(^Sligo|Co Sligo|County Sligo|Co\\. Sligo|Co\\.Sligo)(.*)','i') then 'Sligo'\n            when rlike(collate(state,''),'(.*)(^Tipperary|Co Tipperary|County Tipperary|Co\\. Tipperary|Co\\.Tipperary|^Co Tip|^Co\\. Tip)(.*)','i') then 'Tipperary'\n            when rlike(collate(state,''),'(.*)(^Waterford|Co Waterford|County Waterford|Co\\. Waterford|Co\\.Waterford|^Co Wat|^Co\\. Wat)(.*)','i') then 'Waterford'\n            when rlike(collate(state,''),'(.*)(^Westmeath|Co Westmeath|County Westmeath|Co\\. Westmeath|Co\\.Westmeath|Co West meath)(.*)','i') then 'Westmeath'\n            when rlike(collate(state,''),'(.*)(^Wexford|Co Wexford|County Wexford|Co\\. Wexford|Co\\.Wexford|^Co Wex|^Co\\. Wex)(.*)','i') then 'Wexford'\n            when rlike(collate(state,''),'(.*)(^Wicklow|Co Wicklow|County Wicklow|Co\\. Wicklow|Co\\.Wicklow)(.*)','i') then 'Wicklow'\n            when rlike(collate(state,''),'(.*)(^Dublin|Co Dublin|County Dublin|Co\\. Dublin|Co\\.Dublin| Dublin |^Co Dub|^Co\\. Dub)(.*)','i') or upper(collate(postcode,'')) like 'DUBLIN%' then 'Dublin'\n            when rlike(replace(upper(collate(state,'')),' N/A',''),'(.*)(Carlow$| Carlow [0-9])(.*)','i') then 'Carlow'\n            when rlike(replace(upper(collate(state,'')),' N/A',''),'(.*)( Cavan$| Cavan [0-9])(.*)','i')then 'Cavan'\n            when rlike(replace(upper(collate(state,'')),' N/A',''),'(.*)( Clare$| Clare [0-9])(.*)','i') then 'Clare'\n            when rlike(replace(upper(collate(state,'')),' N/A',''),'(.*)( Cork$| Cork [0-9])(.*)','i') then 'Cork'\n            when rlike(replace(upper(collate(state,'')),' N/A',''),'(.*)( Donegal$| Donegal [0-9])(.*)','i') then 'Donegal'\n            when rlike(replace(upper(collate(state,'')),' N/A',''),'(.*)( Wicklow$| Wicklow [0-9])(.*)','i') then 'Wicklow'\n            when rlike(replace(upper(collate(state,'')),' N/A',''),'(.*)( Galway$|Galway [0-9])(.*)','i') then 'Galway'\n            when rlike(replace(upper(collate(state,'')),' N/A',''),'(.*)( Kerry$| Kerry [0-9])(.*)','i') then 'Kerry'\n            when rlike(replace(upper(collate(state,'')),' N/A',''),'(.*)( Kildare$| Kildare [0-9])(.*)','i') then 'Kildare'\n            when rlike(replace(upper(collate(state,'')),' N/A',''),'(.*)( Kilkenny$| Kilkenny [0-9])(.*)','i') then 'Kilkenny'\n            when rlike(replace(upper(collate(state,'')),' N/A',''),'(.*)( Laois$| Laois [0-9])(.*)','i') then 'Laois'\n            when rlike(replace(upper(collate(state,'')),' N/A',''),'(.*)( Leitrim$| Leitrim [0-9])(.*)','i') then 'Leitrim'\n            when rlike(replace(upper(collate(state,'')),' N/A',''),'(.*)( Limerick$| Limerick [0-9])(.*)','i') then 'Limerick'\n            when rlike(replace(upper(collate(state,'')),' N/A',''),'(.*)( Longford$| Longford [0-9])(.*)','i') then 'Longford'\n            when rlike(replace(upper(collate(state,'')),' N/A',''),'(.*)( Louth$| Louth [0-9])(.*)','i') then 'Louth'\n            when rlike(replace(upper(collate(state,'')),' N/A',''),'(.*)( Mayo$| Mayo [0-9])(.*)','i') then 'Mayo'\n            when rlike(replace(upper(collate(state,'')),' N/A',''),'(.*)( Meath$| Meath [0-9])(.*)','i') then 'Meath'\n            when rlike(replace(upper(collate(state,'')),' N/A',''),'(.*)( Monaghan$| Monaghan [0-9])(.*)','i') then 'Monaghan'\n            when rlike(replace(upper(collate(state,'')),' N/A',''),'(.*)( Offaly$| Offaly [0-9])(.*)','i') then 'Offaly'\n            when rlike(replace(upper(collate(state,'')),' N/A',''),'(.*)( Roscommon$| Roscommon [0-9])(.*)','i') then 'Roscommon'\n            when rlike(replace(upper(collate(state,'')),' N/A',''),'(.*)( Sligo$| Sligo [0-9])(.*)','i') then 'Sligo'\n            when rlike(replace(upper(collate(state,'')),' N/A',''),'(.*)( Tipperary$| Tipperary [0-9])(.*)','i') then 'Tipperary'\n            when rlike(replace(upper(collate(state,'')),' N/A',''),'(.*)( Waterford$| Waterford [0-9])(.*)','i') then 'Waterford'\n            when rlike(replace(upper(collate(state,'')),' N/A',''),'(.*)( Westmeath$| Westmeath [0-9])(.*)','i') then 'Westmeath'\n            when rlike(replace(upper(collate(state,'')),' N/A',''),'(.*)( Wexford$| Wexford [0-9])(.*)','i') then 'Wexford'\n            when rlike(replace(upper(collate(state,'')),' N/A',''),'(.*)( Dublin$| Dublin [0-9])(.*)','i') then 'Dublin'\n            when rlike(collate(city,''),'(.*)(^Carlow|Co Carlow|County Carlow|Co\\. Carlow|Co\\.Carlow)(.*)','i') then 'Carlow'\n            when rlike(collate(city,''),'(.*)(^Cavan|Co Cavan|County Cavan|Co\\. Cavan|Co\\.Cavan|^Co Cav|^Co\\. Cav)(.*)','i') then 'Cavan'\n            when rlike(collate(city,''),'(.*)(^Clare|Co Clare|County Clare|Co\\. Clare|Co\\.Clare|Co Claire|^Co Cla|^Co\\. Cla)(.*)','i') then 'Clare'\n            when rlike(collate(city,''),'(.*)(^Cork|Co Cork|County Cork|Co\\. Cork|Co\\.Cork|^Co Cor|^Co\\. Cor)(.*)','i') then 'Cork'\n            when rlike(collate(city,''),'(.*)(^Donegal|Co Donegal|County Donegal|Co\\. Donegal|Co\\.Donegal|^Co Don|^Co\\. Don)(.*)','i') then 'Donegal'\n            when rlike(collate(city,''),'(.*)(^Galway|Co Galway|County Galway|Co\\. Galway|Co\\.Galway|^Co Gal|^Co\\. Gal)(.*)','i') then 'Galway'\n            when rlike(collate(city,''),'(.*)(^Kerry|Co Kerry|County Kerry|Co\\. Kerry|Co\\.Kerry|^Co Ker|^Co\\. Ker)(.*)','i') then 'Kerry'\n            when rlike(collate(city,''),'(.*)(^Kildare|Co Kildare|County Kildare|Co\\. Kildare|Co\\.Kildare|Co Klidare)(.*)','i') then 'Kildare'\n            when rlike(collate(city,''),'(.*)(^Kilkenny|Co Kilkenny|County Kilkenny|Co\\. Kilkenny|Co\\.Kilkenny|Co Killkenny)(.*)','i') then 'Kilkenny'\n            when rlike(collate(city,''),'(.*)(^Laois|Co Laois|County Laois|Co\\. Laois|Co\\.Laois)(.*)','i') then 'Laois'\n            when rlike(collate(city,''),'(.*)(^Leitrim|Co Leitrim|County Leitrim|Co\\. Leitrim|Co\\.Leitrim|^Co Leit|^Co\\. Leit)(.*)','i') then 'Leitrim'\n            when rlike(collate(city,''),'(.*)(^Limerick|Co Limerick|County Limerick|Co\\. Limerick|Co\\.Limerick|^Co Lim|^Co\\. Lim)(.*)','i') then 'Limerick'\n            when rlike(collate(city,''),'(.*)(^Longford|Co Longford|County Longford|Co\\. Longford|Co\\.Longford)(.*)','i') then 'Longford'\n            when rlike(collate(city,''),'(.*)(^Louth|Co Louth|County Louth|Co\\. Louth|Co\\.Louth)(.*)','i') then 'Louth'\n            when rlike(collate(city,''),'(.*)(^Mayo|Co Mayo|County Mayo|Co\\. Mayo|Co\\.Mayo)(.*)','i') then 'Mayo'\n            when rlike(collate(city,''),'(.*)(^Meath|Co Meath|County Meath|Co\\. Meath|Co\\.Meath)(.*)','i') then 'Meath'\n            when rlike(collate(city,''),'(.*)(^Monaghan|Co Monaghan|County Monaghan|Co\\. Monaghan|Co\\.Monaghan|^Co Mon|^Co\\. Mon)(.*)','i') then 'Monaghan'\n            when rlike(collate(city,''),'(.*)(^Offaly|Co Offaly|County Offaly|Co\\. Offaly|Co\\.Offaly|Co Offlay|Co Offally|^Co Off|^Co\\. Off)(.*)','i') then 'Offaly'\n            when rlike(collate(city,''),'(.*)(^Roscommon|Co Roscommon|County Roscommon|Co\\. Roscommon|Co\\.Roscommon|Co Rosc0mmon|^Co Ros|^Co\\. Ros)(.*)','i') then 'Roscommon'\n            when rlike(collate(city,''),'(.*)(^Sligo|Co Sligo|County Sligo|Co\\. Sligo|Co\\.Sligo)(.*)','i') then 'Sligo'\n            when rlike(collate(city,''),'(.*)(^Tipperary|Co Tipperary|County Tipperary|Co\\. Tipperary|Co\\.Tipperary|^Co Tip|^Co\\. Tip)(.*)','i') then 'Tipperary'\n            when rlike(collate(city,''),'(.*)(^Waterford|Co Waterford|County Waterford|Co\\. Waterford|Co\\.Waterford|^Co Wat|^Co\\. Wat)(.*)','i') then 'Waterford'\n            when rlike(collate(city,''),'(.*)(^Westmeath|Co Westmeath|County Westmeath|Co\\. Westmeath|Co\\.Westmeath|Co West meath)(.*)','i') then 'Westmeath'\n            when rlike(collate(city,''),'(.*)(^Wexford|Co Wexford|County Wexford|Co\\. Wexford|Co\\.Wexford|^Co Wex|^Co\\. Wex)(.*)','i') then 'Wexford'\n            when rlike(collate(city,''),'(.*)(^Wicklow|Co Wicklow|County Wicklow|Co\\. Wicklow|Co\\.Wicklow)(.*)','i') then 'Wicklow'\n            when rlike(collate(city,''),'(.*)(^Dublin|Co Dublin|County Dublin|Co\\. Dublin|Co\\.Dublin| Dublin |^Co Dub|^Co\\. Dub)(.*)','i') then 'Dublin'\n            when rlike(replace(upper(collate(city,'')),' N/A',''),'(.*)(Carlow$| Carlow [0-9])(.*)','i') then 'Carlow'\n            when rlike(replace(upper(collate(city,'')),' N/A',''),'(.*)(Cavan$| Cavan [0-9])(.*)','i') then 'Cavan'\n            when rlike(replace(upper(collate(city,'')),' N/A',''),'(.*)(Clare$| Clare [0-9])(.*)','i') then 'Clare'\n            when rlike(replace(upper(collate(city,'')),' N/A',''),'(.*)(Cork$| Cork [0-9])(.*)','i') then 'Cork'\n            when rlike(replace(upper(collate(city,'')),' N/A',''),'(.*)(Donegal$| Donegal [0-9])(.*)','i') then 'Donegal'\n            when rlike(replace(upper(collate(city,'')),' N/A',''),'(.*)(Wicklow$| Wicklow [0-9])(.*)','i') then 'Wicklow'\n            when rlike(replace(upper(collate(city,'')),' N/A',''),'(.*)(Galway$|Galway [0-9])(.*)','i') then 'Galway'\n            when rlike(replace(upper(collate(city,'')),' N/A',''),'(.*)(Kerry$| Kerry [0-9])(.*)','i') then 'Kerry'\n            when rlike(replace(upper(collate(city,'')),' N/A',''),'(.*)(Kildare$| Kildare [0-9])(.*)','i') then 'Kildare'\n            when rlike(replace(upper(collate(city,'')),' N/A',''),'(.*)(Kilkenny$| Kilkenny [0-9])(.*)','i') then 'Kilkenny'\n            when rlike(replace(upper(collate(city,'')),' N/A',''),'(.*)(Laois$| Laois [0-9])(.*)','i') then 'Laois'\n            when rlike(replace(upper(collate(city,'')),' N/A',''),'(.*)(Leitrim$| Leitrim [0-9])(.*)','i') then 'Leitrim'\n            when rlike(replace(upper(collate(city,'')),' N/A',''),'(.*)(Limerick$| Limerick [0-9])(.*)','i') then 'Limerick'\n            when rlike(replace(upper(collate(city,'')),' N/A',''),'(.*)(Longford$| Longford [0-9])(.*)','i') then 'Longford'\n            when rlike(replace(upper(collate(city,'')),' N/A',''),'(.*)(Louth$| Louth [0-9])(.*)','i') then 'Louth'\n            when rlike(replace(upper(collate(city,'')),' N/A',''),'(.*)(Mayo$| Mayo [0-9])(.*)','i') then 'Mayo'\n            when rlike(replace(upper(collate(city,'')),' N/A',''),'(.*)(Meath$| Meath [0-9])(.*)','i') then 'Meath'\n            when rlike(replace(upper(collate(city,'')),' N/A',''),'(.*)(Monaghan$| Monaghan [0-9])(.*)','i') then 'Monaghan'\n            when rlike(replace(upper(collate(city,'')),' N/A',''),'(.*)(Offaly$| Offaly [0-9])(.*)','i') then 'Offaly'\n            when rlike(replace(upper(collate(city,'')),' N/A',''),'(.*)(Roscommon$| Roscommon [0-9])(.*)','i') then 'Roscommon'\n            when rlike(replace(upper(collate(city,'')),' N/A',''),'(.*)(Sligo$| Sligo [0-9])(.*)','i') then 'Sligo'\n            when rlike(replace(upper(collate(city,'')),' N/A',''),'(.*)(Tipperary$| Tipperary [0-9])(.*)','i') then 'Tipperary'\n            when rlike(replace(upper(collate(city,'')),' N/A',''),'(.*)(Waterford$| Waterford [0-9])(.*)','i') then 'Waterford'\n            when rlike(replace(upper(collate(city,'')),' N/A',''),'(.*)(Westmeath$| Westmeath [0-9])(.*)','i') then 'Westmeath'\n            when rlike(replace(upper(collate(city,'')),' N/A',''),'(.*)(Wexford$| Wexford [0-9])(.*)','i') then 'Wexford'\n            when rlike(replace(upper(collate(city,'')),' N/A',''),'(.*)(Dublin$| Dublin [0-9])(.*)','i') then 'Dublin'                       \n            when rlike(collate(add5,''),'(.*)(^Carlow|Co Carlow|County Carlow|Co\\. Carlow|Co\\.Carlow)(.*)','i') then 'Carlow'\n            when rlike(collate(add5,''),'(.*)(^Cavan|Co Cavan|County Cavan|Co\\. Cavan|Co\\.Cavan|^Co Cav|^Co\\. Cav)(.*)','i') then 'Cavan'\n            when rlike(collate(add5,''),'(.*)(^Clare|Co Clare|County Clare|Co\\. Clare|Co\\.Clare|Co Claire|^Co Cla|^Co\\. Cla)(.*)','i') then 'Clare'\n            when rlike(collate(add5,''),'(.*)(^Cork|Co Cork|County Cork|Co\\. Cork|Co\\.Cork|^Co Cor|^Co\\. Cor)(.*)','i') then 'Cork'\n            when rlike(collate(add5,''),'(.*)(^Donegal|Co Donegal|County Donegal|Co\\. Donegal|Co\\.Donegal|^Co Don|^Co\\. Don)(.*)','i') then 'Donegal'\n            when rlike(collate(add5,''),'(.*)(^Galway|Co Galway|County Galway|Co\\. Galway|Co\\.Galway|^Co Gal|^Co\\. Gal)(.*)','i') then 'Galway'\n            when rlike(collate(add5,''),'(.*)(^Kerry|Co Kerry|County Kerry|Co\\. Kerry|Co\\.Kerry|^Co Ker|^Co\\. Ker)(.*)','i') then 'Kerry'\n            when rlike(collate(add5,''),'(.*)(^Kildare|Co Kildare|County Kildare|Co\\. Kildare|Co\\.Kildare|Co Klidare)(.*)','i') then 'Kildare'\n            when rlike(collate(add5,''),'(.*)(^Kilkenny|Co Kilkenny|County Kilkenny|Co\\. Kilkenny|Co\\.Kilkenny|Co Killkenny)(.*)','i') then 'Kilkenny'\n            when rlike(collate(add5,''),'(.*)(^Laois|Co Laois|County Laois|Co\\. Laois|Co\\.Laois)(.*)','i') then 'Laois'\n            when rlike(collate(add5,''),'(.*)(^Leitrim|Co Leitrim|County Leitrim|Co\\. Leitrim|Co\\.Leitrim|^Co Leit|^Co\\. Leit)(.*)','i') then 'Leitrim'\n            when rlike(collate(add5,''),'(.*)(^Limerick|Co Limerick|County Limerick|Co\\. Limerick|Co\\.Limerick|^Co Lim|^Co\\. Lim)(.*)','i') then 'Limerick'\n            when rlike(collate(add5,''),'(.*)(^Longford|Co Longford|County Longford|Co\\. Longford|Co\\.Longford)(.*)','i') then 'Longford'\n            when rlike(collate(add5,''),'(.*)(^Louth|Co Louth|County Louth|Co\\. Louth|Co\\.Louth)(.*)','i') then 'Louth'\n            when rlike(collate(add5,''),'(.*)(^Mayo|Co Mayo|County Mayo|Co\\. Mayo|Co\\.Mayo)(.*)','i') then 'Mayo'\n            when rlike(collate(add5,''),'(.*)(^Meath|Co Meath|County Meath|Co\\. Meath|Co\\.Meath)(.*)','i') then 'Meath'\n            when rlike(collate(add5,''),'(.*)(^Monaghan|Co Monaghan|County Monaghan|Co\\. Monaghan|Co\\.Monaghan|^Co Mon|^Co\\. Mon)(.*)','i') then 'Monaghan'\n            when rlike(collate(add5,''),'(.*)(^Offaly|Co Offaly|County Offaly|Co\\. Offaly|Co\\.Offaly|Co Offlay|Co Offally|^Co Off|^Co\\. Off)(.*)','i') then 'Offaly'\n            when rlike(collate(add5,''),'(.*)(^Roscommon|Co Roscommon|County Roscommon|Co\\. Roscommon|Co\\.Roscommon|Co Rosc0mmon|^Co Ros|^Co\\. Ros)(.*)','i') then 'Roscommon'\n            when rlike(collate(add5,''),'(.*)(^Sligo|Co Sligo|County Sligo|Co\\. Sligo|Co\\.Sligo)(.*)','i') then 'Sligo'\n            when rlike(collate(add5,''),'(.*)(^Tipperary|Co Tipperary|County Tipperary|Co\\. Tipperary|Co\\.Tipperary|^Co Tip|^Co\\. Tip)(.*)','i') then 'Tipperary'\n            when rlike(collate(add5,''),'(.*)(^Waterford|Co Waterford|County Waterford|Co\\. Waterford|Co\\.Waterford|^Co Wat|^Co\\. Wat)(.*)','i') then 'Waterford'\n            when rlike(collate(add5,''),'(.*)(^Westmeath|Co Westmeath|County Westmeath|Co\\. Westmeath|Co\\.Westmeath|Co West meath)(.*)','i') then 'Westmeath'\n            when rlike(collate(add5,''),'(.*)(^Wexford|Co Wexford|County Wexford|Co\\. Wexford|Co\\.Wexford|^Co Wex|^Co\\. Wex)(.*)','i') then 'Wexford'\n            when rlike(collate(add5,''),'(.*)(^Wicklow|Co Wicklow|County Wicklow|Co\\. Wicklow|Co\\.Wicklow)(.*)','i') then 'Wicklow'\n            when rlike(collate(add5,''),'(.*)(^Dublin|Co Dublin|County Dublin|Co\\. Dublin|Co\\.Dublin| Dublin |^Co Dub|^Co\\. Dub)(.*)','i') then 'Dublin'\n            when rlike(replace(upper(collate(add5,'')),' N/A',''),'(.*)(Carlow$| Carlow [0-9])(.*)','i') then 'Carlow'\n            when rlike(replace(upper(collate(add5,'')),' N/A',''),'(.*)(Cavan$| Cavan [0-9])(.*)','i') then 'Cavan'\n            when rlike(replace(upper(collate(add5,'')),' N/A',''),'(.*)(Clare$| Clare [0-9])(.*)','i') then 'Clare'\n            when rlike(replace(upper(collate(add5,'')),' N/A',''),'(.*)(Cork$| Cork [0-9])(.*)','i') then 'Cork'\n            when rlike(replace(upper(collate(add5,'')),' N/A',''),'(.*)(Donegal$| Donegal [0-9])(.*)','i') then 'Donegal'\n            when rlike(replace(upper(collate(add5,'')),' N/A',''),'(.*)(Wicklow$| Wicklow [0-9])(.*)','i') then 'Wicklow'\n            when rlike(replace(upper(collate(add5,'')),' N/A',''),'(.*)(Galway$|Galway [0-9])(.*)','i') then 'Galway'\n            when rlike(replace(upper(collate(add5,'')),' N/A',''),'(.*)(Kerry$| Kerry [0-9])(.*)','i') then 'Kerry'\n            when rlike(replace(upper(collate(add5,'')),' N/A',''),'(.*)(Kildare$| Kildare [0-9])(.*)','i') then 'Kildare'\n            when rlike(replace(upper(collate(add5,'')),' N/A',''),'(.*)(Kilkenny$| Kilkenny [0-9])(.*)','i') then 'Kilkenny'\n            when rlike(replace(upper(collate(add5,'')),' N/A',''),'(.*)(Laois$| Laois [0-9])(.*)','i') then 'Laois'\n            when rlike(replace(upper(collate(add5,'')),' N/A',''),'(.*)(Leitrim$| Leitrim [0-9])(.*)','i') then 'Leitrim'\n            when rlike(replace(upper(collate(add5,'')),' N/A',''),'(.*)(Limerick$| Limerick [0-9])(.*)','i') then 'Limerick'\n            when rlike(replace(upper(collate(add5,'')),' N/A',''),'(.*)(Longford$| Longford [0-9])(.*)','i') then 'Longford'\n            when rlike(replace(upper(collate(add5,'')),' N/A',''),'(.*)(Louth$| Louth [0-9])(.*)','i') then 'Louth'\n            when rlike(replace(upper(collate(add5,'')),' N/A',''),'(.*)(Mayo$| Mayo [0-9])(.*)','i') then 'Mayo'\n            when rlike(replace(upper(collate(add5,'')),' N/A',''),'(.*)(Meath$| Meath [0-9])(.*)','i') then 'Meath'\n            when rlike(replace(upper(collate(add5,'')),' N/A',''),'(.*)(Monaghan$| Monaghan [0-9])(.*)','i') then 'Monaghan'\n            when rlike(replace(upper(collate(add5,'')),' N/A',''),'(.*)(Offaly$| Offaly [0-9])(.*)','i') then 'Offaly'\n            when rlike(replace(upper(collate(add5,'')),' N/A',''),'(.*)(Roscommon$| Roscommon [0-9])(.*)','i') then 'Roscommon'\n            when rlike(replace(upper(collate(add5,'')),' N/A',''),'(.*)(Sligo$| Sligo [0-9])(.*)','i') then 'Sligo'\n            when rlike(replace(upper(collate(add5,'')),' N/A',''),'(.*)(Tipperary$| Tipperary [0-9])(.*)','i') then 'Tipperary'\n            when rlike(replace(upper(collate(add5,'')),' N/A',''),'(.*)(Waterford$| Waterford [0-9])(.*)','i') then 'Waterford'\n            when rlike(replace(upper(collate(add5,'')),' N/A',''),'(.*)(Westmeath$| Westmeath [0-9])(.*)','i') then 'Westmeath'\n            when rlike(replace(upper(collate(add5,'')),' N/A',''),'(.*)(Wexford$| Wexford [0-9])(.*)','i') then 'Wexford'\n            when rlike(replace(upper(collate(add5,'')),' N/A',''),'(.*)(Dublin$| Dublin [0-9])(.*)','i') then 'Dublin'          \n\t\t\twhen rlike(collate(add4,''),'(.*)(^Carlow|Co Carlow|County Carlow|Co\\. Carlow|Co\\.Carlow)(.*)','i') then 'Carlow'\n            when rlike(collate(add4,''),'(.*)(^Cavan|Co Cavan|County Cavan|Co\\. Cavan|Co\\.Cavan|^Co Cav|^Co\\. Cav)(.*)','i') then 'Cavan'\n            when rlike(collate(add4,''),'(.*)(^Clare|Co Clare|County Clare|Co\\. Clare|Co\\.Clare|Co Claire|^Co Cla|^Co\\. Cla)(.*)','i') then 'Clare'\n            when rlike(collate(add4,''),'(.*)(^Cork|Co Cork|County Cork|Co\\. Cork|Co\\.Cork|^Co Cor|^Co\\. Cor)(.*)','i') then 'Cork'\n            when rlike(collate(add4,''),'(.*)(^Donegal|Co Donegal|County Donegal|Co\\. Donegal|Co\\.Donegal|^Co Don|^Co\\. Don)(.*)','i') then 'Donegal'\n            when rlike(collate(add4,''),'(.*)(^Galway|Co Galway|County Galway|Co\\. Galway|Co\\.Galway|^Co Gal|^Co\\. Gal)(.*)','i') then 'Galway'\n            when rlike(collate(add4,''),'(.*)(^Kerry|Co Kerry|County Kerry|Co\\. Kerry|Co\\.Kerry|^Co Ker|^Co\\. Ker)(.*)','i') then 'Kerry'\n            when rlike(collate(add4,''),'(.*)(^Kildare|Co Kildare|County Kildare|Co\\. Kildare|Co\\.Kildare|Co Klidare)(.*)','i') then 'Kildare'\n            when rlike(collate(add4,''),'(.*)(^Kilkenny|Co Kilkenny|County Kilkenny|Co\\. Kilkenny|Co\\.Kilkenny|Co Killkenny)(.*)','i') then 'Kilkenny'\n            when rlike(collate(add4,''),'(.*)(^Laois|Co Laois|County Laois|Co\\. Laois|Co\\.Laois)(.*)','i') then 'Laois'\n            when rlike(collate(add4,''),'(.*)(^Leitrim|Co Leitrim|County Leitrim|Co\\. Leitrim|Co\\.Leitrim|^Co Leit|^Co\\. Leit)(.*)','i') then 'Leitrim'\n            when rlike(collate(add4,''),'(.*)(^Limerick|Co Limerick|County Limerick|Co\\. Limerick|Co\\.Limerick|^Co Lim|^Co\\. Lim)(.*)','i') then 'Limerick'\n            when rlike(collate(add4,''),'(.*)(^Longford|Co Longford|County Longford|Co\\. Longford|Co\\.Longford)(.*)','i') then 'Longford'\n            when rlike(collate(add4,''),'(.*)(^Louth|Co Louth|County Louth|Co\\. Louth|Co\\.Louth)(.*)','i') then 'Louth'\n            when rlike(collate(add4,''),'(.*)(^Mayo|Co Mayo|County Mayo|Co\\. Mayo|Co\\.Mayo)(.*)','i') then 'Mayo'\n            when rlike(collate(add4,''),'(.*)(^Meath|Co Meath|County Meath|Co\\. Meath|Co\\.Meath)(.*)','i') then 'Meath'\n            when rlike(collate(add4,''),'(.*)(^Monaghan|Co Monaghan|County Monaghan|Co\\. Monaghan|Co\\.Monaghan|^Co Mon|^Co\\. Mon)(.*)','i') then 'Monaghan'\n            when rlike(collate(add4,''),'(.*)(^Offaly|Co Offaly|County Offaly|Co\\. Offaly|Co\\.Offaly|Co Offlay|Co Offally|^Co Off|^Co\\. Off)(.*)','i') then 'Offaly'\n            when rlike(collate(add4,''),'(.*)(^Roscommon|Co Roscommon|County Roscommon|Co\\. Roscommon|Co\\.Roscommon|Co Rosc0mmon|^Co Ros|^Co\\. Ros)(.*)','i') then 'Roscommon'\n            when rlike(collate(add4,''),'(.*)(^Sligo|Co Sligo|County Sligo|Co\\. Sligo|Co\\.Sligo)(.*)','i') then 'Sligo'\n            when rlike(collate(add4,''),'(.*)(^Tipperary|Co Tipperary|County Tipperary|Co\\. Tipperary|Co\\.Tipperary|^Co Tip|^Co\\. Tip)(.*)','i') then 'Tipperary'\n            when rlike(collate(add4,''),'(.*)(^Waterford|Co Waterford|County Waterford|Co\\. Waterford|Co\\.Waterford|^Co Wat|^Co\\. Wat)(.*)','i') then 'Waterford'\n            when rlike(collate(add4,''),'(.*)(^Westmeath|Co Westmeath|County Westmeath|Co\\. Westmeath|Co\\.Westmeath|Co West meath)(.*)','i') then 'Westmeath'\n            when rlike(collate(add4,''),'(.*)(^Wexford|Co Wexford|County Wexford|Co\\. Wexford|Co\\.Wexford|^Co Wex|^Co\\. Wex)(.*)','i') then 'Wexford'\n            when rlike(collate(add4,''),'(.*)(^Wicklow|Co Wicklow|County Wicklow|Co\\. Wicklow|Co\\.Wicklow)(.*)','i') then 'Wicklow'\n            when rlike(collate(add4,''),'(.*)(^Dublin|Co Dublin|County Dublin|Co\\. Dublin|Co\\.Dublin| Dublin |^Co Dub|^Co\\. Dub)(.*)','i') then 'Dublin'\n            when rlike(replace(upper(collate(add4,'')),' N/A',''),'(.*)(Carlow$| Carlow [0-9])(.*)','i') then 'Carlow'\n            when rlike(replace(upper(collate(add4,'')),' N/A',''),'(.*)(Cavan$| Cavan [0-9])(.*)','i') then 'Cavan'\n            when rlike(replace(upper(collate(add4,'')),' N/A',''),'(.*)(Clare$| Clare [0-9])(.*)','i') then 'Clare'\n            when rlike(replace(upper(collate(add4,'')),' N/A',''),'(.*)(Cork$| Cork [0-9])(.*)','i') then 'Cork'\n            when rlike(replace(upper(collate(add4,'')),' N/A',''),'(.*)(Donegal$| Donegal [0-9])(.*)','i') then 'Donegal'\n            when rlike(replace(upper(collate(add4,'')),' N/A',''),'(.*)(Wicklow$| Wicklow [0-9])(.*)','i') then 'Wicklow'\n            when rlike(replace(upper(collate(add4,'')),' N/A',''),'(.*)(Galway$|Galway [0-9])(.*)','i') then 'Galway'\n            when rlike(replace(upper(collate(add4,'')),' N/A',''),'(.*)(Kerry$| Kerry [0-9])(.*)','i') then 'Kerry'\n            when rlike(replace(upper(collate(add4,'')),' N/A',''),'(.*)(Kildare$| Kildare [0-9])(.*)','i') then 'Kildare'\n            when rlike(replace(upper(collate(add4,'')),' N/A',''),'(.*)(Kilkenny$| Kilkenny [0-9])(.*)','i') then 'Kilkenny'\n            when rlike(replace(upper(collate(add4,'')),' N/A',''),'(.*)(Laois$| Laois [0-9])(.*)','i') then 'Laois'\n            when rlike(replace(upper(collate(add4,'')),' N/A',''),'(.*)(Leitrim$| Leitrim [0-9])(.*)','i') then 'Leitrim'\n            when rlike(replace(upper(collate(add4,'')),' N/A',''),'(.*)(Limerick$| Limerick [0-9])(.*)','i') then 'Limerick'\n            when rlike(replace(upper(collate(add4,'')),' N/A',''),'(.*)(Longford$| Longford [0-9])(.*)','i') then 'Longford'\n            when rlike(replace(upper(collate(add4,'')),' N/A',''),'(.*)(Louth$| Louth [0-9])(.*)','i') then 'Louth'\n            when rlike(replace(upper(collate(add4,'')),' N/A',''),'(.*)(Mayo$| Mayo [0-9])(.*)','i') then 'Mayo'\n            when rlike(replace(upper(collate(add4,'')),' N/A',''),'(.*)(Meath$| Meath [0-9])(.*)','i') then 'Meath'\n            when rlike(replace(upper(collate(add4,'')),' N/A',''),'(.*)(Monaghan$| Monaghan [0-9])(.*)','i') then 'Monaghan'\n            when rlike(replace(upper(collate(add4,'')),' N/A',''),'(.*)(Offaly$| Offaly [0-9])(.*)','i') then 'Offaly'\n            when rlike(replace(upper(collate(add4,'')),' N/A',''),'(.*)(Roscommon$| Roscommon [0-9])(.*)','i') then 'Roscommon'\n            when rlike(replace(upper(collate(add4,'')),' N/A',''),'(.*)(Sligo$| Sligo [0-9])(.*)','i') then 'Sligo'\n            when rlike(replace(upper(collate(add4,'')),' N/A',''),'(.*)(Tipperary$| Tipperary [0-9])(.*)','i') then 'Tipperary'\n            when rlike(replace(upper(collate(add4,'')),' N/A',''),'(.*)(Waterford$| Waterford [0-9])(.*)','i') then 'Waterford'\n            when rlike(replace(upper(collate(add4,'')),' N/A',''),'(.*)(Westmeath$| Westmeath [0-9])(.*)','i') then 'Westmeath'\n            when rlike(replace(upper(collate(add4,'')),' N/A',''),'(.*)(Wexford$| Wexford [0-9])(.*)','i') then 'Wexford'\n            when rlike(replace(upper(collate(add4,'')),' N/A',''),'(.*)(Dublin$| Dublin [0-9])(.*)','i') then 'Dublin'    \n            when rlike(collate(add3,''),'(.*)(^Carlow|Co Carlow|County Carlow|Co\\. Carlow|Co\\.Carlow)(.*)','i') then 'Carlow'\n            when rlike(collate(add3,''),'(.*)(^Cavan|Co Cavan|County Cavan|Co\\. Cavan|Co\\.Cavan|^Co Cav|^Co\\. Cav)(.*)','i') then 'Cavan'\n            when rlike(collate(add3,''),'(.*)(^Clare|Co Clare|County Clare|Co\\. Clare|Co\\.Clare|Co Claire|^Co Cla|^Co\\. Cla)(.*)','i') then 'Clare'\n            when rlike(collate(add3,''),'(.*)(^Cork|Co Cork|County Cork|Co\\. Cork|Co\\.Cork|^Co Cor|^Co\\. Cor)(.*)','i') then 'Cork'\n            when rlike(collate(add3,''),'(.*)(^Donegal|Co Donegal|County Donegal|Co\\. Donegal|Co\\.Donegal|^Co Don|^Co\\. Don)(.*)','i') then 'Donegal'\n            when rlike(collate(add3,''),'(.*)(^Galway|Co Galway|County Galway|Co\\. Galway|Co\\.Galway|^Co Gal|^Co\\. Gal)(.*)','i') then 'Galway'\n            when rlike(collate(add3,''),'(.*)(^Kerry|Co Kerry|County Kerry|Co\\. Kerry|Co\\.Kerry|^Co Ker|^Co\\. Ker)(.*)','i') then 'Kerry'\n            when rlike(collate(add3,''),'(.*)(^Kildare|Co Kildare|County Kildare|Co\\. Kildare|Co\\.Kildare|Co Klidare)(.*)','i') then 'Kildare'\n            when rlike(collate(add3,''),'(.*)(^Kilkenny|Co Kilkenny|County Kilkenny|Co\\. Kilkenny|Co\\.Kilkenny|Co Killkenny)(.*)','i') then 'Kilkenny'\n            when rlike(collate(add3,''),'(.*)(^Laois|Co Laois|County Laois|Co\\. Laois|Co\\.Laois)(.*)','i') then 'Laois'\n            when rlike(collate(add3,''),'(.*)(^Leitrim|Co Leitrim|County Leitrim|Co\\. Leitrim|Co\\.Leitrim|^Co Leit|^Co\\. Leit)(.*)','i') then 'Leitrim'\n            when rlike(collate(add3,''),'(.*)(^Limerick|Co Limerick|County Limerick|Co\\. Limerick|Co\\.Limerick|^Co Lim|^Co\\. Lim)(.*)','i') then 'Limerick'\n            when rlike(collate(add3,''),'(.*)(^Longford|Co Longford|County Longford|Co\\. Longford|Co\\.Longford)(.*)','i') then 'Longford'\n            when rlike(collate(add3,''),'(.*)(^Louth|Co Louth|County Louth|Co\\. Louth|Co\\.Louth)(.*)','i') then 'Louth'\n            when rlike(collate(add3,''),'(.*)(^Mayo|Co Mayo|County Mayo|Co\\. Mayo|Co\\.Mayo)(.*)','i') then 'Mayo'\n            when rlike(collate(add3,''),'(.*)(^Meath|Co Meath|County Meath|Co\\. Meath|Co\\.Meath)(.*)','i') then 'Meath'\n            when rlike(collate(add3,''),'(.*)(^Monaghan|Co Monaghan|County Monaghan|Co\\. Monaghan|Co\\.Monaghan|^Co Mon|^Co\\. Mon)(.*)','i') then 'Monaghan'\n            when rlike(collate(add3,''),'(.*)(^Offaly|Co Offaly|County Offaly|Co\\. Offaly|Co\\.Offaly|Co Offlay|Co Offally|^Co Off|^Co\\. Off)(.*)','i') then 'Offaly'\n            when rlike(collate(add3,''),'(.*)(^Roscommon|Co Roscommon|County Roscommon|Co\\. Roscommon|Co\\.Roscommon|Co Rosc0mmon|^Co Ros|^Co\\. Ros)(.*)','i') then 'Roscommon'\n            when rlike(collate(add3,''),'(.*)(^Sligo|Co Sligo|County Sligo|Co\\. Sligo|Co\\.Sligo)(.*)','i') then 'Sligo'\n            when rlike(collate(add3,''),'(.*)(^Tipperary|Co Tipperary|County Tipperary|Co\\. Tipperary|Co\\.Tipperary|^Co Tip|^Co\\. Tip)(.*)','i') then 'Tipperary'\n            when rlike(collate(add3,''),'(.*)(^Waterford|Co Waterford|County Waterford|Co\\. Waterford|Co\\.Waterford|^Co Wat|^Co\\. Wat)(.*)','i') then 'Waterford'\n            when rlike(collate(add3,''),'(.*)(^Westmeath|Co Westmeath|County Westmeath|Co\\. Westmeath|Co\\.Westmeath|Co West meath)(.*)','i') then 'Westmeath'\n            when rlike(collate(add3,''),'(.*)(^Wexford|Co Wexford|County Wexford|Co\\. Wexford|Co\\.Wexford|^Co Wex|^Co\\. Wex)(.*)','i') then 'Wexford'\n            when rlike(collate(add3,''),'(.*)(^Wicklow|Co Wicklow|County Wicklow|Co\\. Wicklow|Co\\.Wicklow)(.*)','i') then 'Wicklow'\n            when rlike(collate(add3,''),'(.*)(^Dublin|Co Dublin|County Dublin|Co\\. Dublin|Co\\.Dublin| Dublin |^Co Dub|^Co\\. Dub)(.*)','i') then 'Dublin'\n            when rlike(replace(upper(collate(add3,'')),' N/A',''),'(.*)(Carlow$| Carlow [0-9])(.*)','i') then 'Carlow'\n            when rlike(replace(upper(collate(add3,'')),' N/A',''),'(.*)(Cavan$| Cavan [0-9])(.*)','i') then 'Cavan'\n            when rlike(replace(upper(collate(add3,'')),' N/A',''),'(.*)(Clare$| Clare [0-9])(.*)','i') then 'Clare'\n            when rlike(replace(upper(collate(add3,'')),' N/A',''),'(.*)(Cork$| Cork [0-9])(.*)','i') then 'Cork'\n            when rlike(replace(upper(collate(add3,'')),' N/A',''),'(.*)(Donegal$| Donegal [0-9])(.*)','i') then 'Donegal'\n            when rlike(replace(upper(collate(add3,'')),' N/A',''),'(.*)(Wicklow$| Wicklow [0-9])(.*)','i') then 'Wicklow'\n            when rlike(replace(upper(collate(add3,'')),' N/A',''),'(.*)(Galway$|Galway [0-9])(.*)','i') then 'Galway'\n            when rlike(replace(upper(collate(add3,'')),' N/A',''),'(.*)(Kerry$| Kerry [0-9])(.*)','i') then 'Kerry'\n            when rlike(replace(upper(collate(add3,'')),' N/A',''),'(.*)(Kildare$| Kildare [0-9])(.*)','i') then 'Kildare'\n            when rlike(replace(upper(collate(add3,'')),' N/A',''),'(.*)(Kilkenny$| Kilkenny [0-9])(.*)','i') then 'Kilkenny'\n            when rlike(replace(upper(collate(add3,'')),' N/A',''),'(.*)(Laois$| Laois [0-9])(.*)','i') then 'Laois'\n            when rlike(replace(upper(collate(add3,'')),' N/A',''),'(.*)(Leitrim$| Leitrim [0-9])(.*)','i') then 'Leitrim'\n            when rlike(replace(upper(collate(add3,'')),' N/A',''),'(.*)(Limerick$| Limerick [0-9])(.*)','i') then 'Limerick'\n            when rlike(replace(upper(collate(add3,'')),' N/A',''),'(.*)(Longford$| Longford [0-9])(.*)','i') then 'Longford'\n            when rlike(replace(upper(collate(add3,'')),' N/A',''),'(.*)(Louth$| Louth [0-9])(.*)','i') then 'Louth'\n            when rlike(replace(upper(collate(add3,'')),' N/A',''),'(.*)(Mayo$| Mayo [0-9])(.*)','i') then 'Mayo'\n            when rlike(replace(upper(collate(add3,'')),' N/A',''),'(.*)(Meath$| Meath [0-9])(.*)','i') then 'Meath'\n            when rlike(replace(upper(collate(add3,'')),' N/A',''),'(.*)(Monaghan$| Monaghan [0-9])(.*)','i') then 'Monaghan'\n            when rlike(replace(upper(collate(add3,'')),' N/A',''),'(.*)(Offaly$| Offaly [0-9])(.*)','i') then 'Offaly'\n            when rlike(replace(upper(collate(add3,'')),' N/A',''),'(.*)(Roscommon$| Roscommon [0-9])(.*)','i') then 'Roscommon'\n            when rlike(replace(upper(collate(add3,'')),' N/A',''),'(.*)(Sligo$| Sligo [0-9])(.*)','i') then 'Sligo'\n            when rlike(replace(upper(collate(add3,'')),' N/A',''),'(.*)(Tipperary$| Tipperary [0-9])(.*)','i') then 'Tipperary'\n            when rlike(replace(upper(collate(add3,'')),' N/A',''),'(.*)(Waterford$| Waterford [0-9])(.*)','i') then 'Waterford'\n            when rlike(replace(upper(collate(add3,'')),' N/A',''),'(.*)(Westmeath$| Westmeath [0-9])(.*)','i') then 'Westmeath'\n            when rlike(replace(upper(collate(add3,'')),' N/A',''),'(.*)(Wexford$| Wexford [0-9])(.*)','i') then 'Wexford'\n            when rlike(replace(upper(collate(add3,'')),' N/A',''),'(.*)(Dublin$| Dublin [0-9])(.*)','i') then 'Dublin'        \n            when rlike(collate(add2,''),'(.*)(^Carlow|Co Carlow|County Carlow|Co\\. Carlow|Co\\.Carlow)(.*)','i') then 'Carlow'\n            when rlike(collate(add2,''),'(.*)(^Cavan|Co Cavan|County Cavan|Co\\. Cavan|Co\\.Cavan|^Co Cav|^Co\\. Cav)(.*)','i') then 'Cavan'\n            when rlike(collate(add2,''),'(.*)(^Clare|Co Clare|County Clare|Co\\. Clare|Co\\.Clare|Co Claire|^Co Cla|^Co\\. Cla)(.*)','i') then 'Clare'\n            when rlike(collate(add2,''),'(.*)(^Cork|Co Cork|County Cork|Co\\. Cork|Co\\.Cork|^Co Cor|^Co\\. Cor)(.*)','i') then 'Cork'\n            when rlike(collate(add2,''),'(.*)(^Donegal|Co Donegal|County Donegal|Co\\. Donegal|Co\\.Donegal|^Co Don|^Co\\. Don)(.*)','i') then 'Donegal'\n            when rlike(collate(add2,''),'(.*)(^Galway|Co Galway|County Galway|Co\\. Galway|Co\\.Galway|^Co Gal|^Co\\. Gal)(.*)','i') then 'Galway'\n            when rlike(collate(add2,''),'(.*)(^Kerry|Co Kerry|County Kerry|Co\\. Kerry|Co\\.Kerry|^Co Ker|^Co\\. Ker)(.*)','i') then 'Kerry'\n            when rlike(collate(add2,''),'(.*)(^Kildare|Co Kildare|County Kildare|Co\\. Kildare|Co\\.Kildare|Co Klidare)(.*)','i') then 'Kildare'\n            when rlike(collate(add2,''),'(.*)(^Kilkenny|Co Kilkenny|County Kilkenny|Co\\. Kilkenny|Co\\.Kilkenny|Co Killkenny)(.*)','i') then 'Kilkenny'\n            when rlike(collate(add2,''),'(.*)(^Laois|Co Laois|County Laois|Co\\. Laois|Co\\.Laois)(.*)','i') then 'Laois'\n            when rlike(collate(add2,''),'(.*)(^Leitrim|Co Leitrim|County Leitrim|Co\\. Leitrim|Co\\.Leitrim|^Co Leit|^Co\\. Leit)(.*)','i') then 'Leitrim'\n            when rlike(collate(add2,''),'(.*)(^Limerick|Co Limerick|County Limerick|Co\\. Limerick|Co\\.Limerick|^Co Lim|^Co\\. Lim)(.*)','i') then 'Limerick'\n            when rlike(collate(add2,''),'(.*)(^Longford|Co Longford|County Longford|Co\\. Longford|Co\\.Longford)(.*)','i') then 'Longford'\n            when rlike(collate(add2,''),'(.*)(^Louth|Co Louth|County Louth|Co\\. Louth|Co\\.Louth)(.*)','i') then 'Louth'\n            when rlike(collate(add2,''),'(.*)(^Mayo|Co Mayo|County Mayo|Co\\. Mayo|Co\\.Mayo)(.*)','i') then 'Mayo'\n            when rlike(collate(add2,''),'(.*)(^Meath|Co Meath|County Meath|Co\\. Meath|Co\\.Meath)(.*)','i') then 'Meath'\n            when rlike(collate(add2,''),'(.*)(^Monaghan|Co Monaghan|County Monaghan|Co\\. Monaghan|Co\\.Monaghan|^Co Mon|^Co\\. Mon)(.*)','i') then 'Monaghan'\n            when rlike(collate(add2,''),'(.*)(^Offaly|Co Offaly|County Offaly|Co\\. Offaly|Co\\.Offaly|Co Offlay|Co Offally|^Co Off|^Co\\. Off)(.*)','i') then 'Offaly'\n            when rlike(collate(add2,''),'(.*)(^Roscommon|Co Roscommon|County Roscommon|Co\\. Roscommon|Co\\.Roscommon|Co Rosc0mmon|^Co Ros|^Co\\. Ros)(.*)','i') then 'Roscommon'\n            when rlike(collate(add2,''),'(.*)(^Sligo|Co Sligo|County Sligo|Co\\. Sligo|Co\\.Sligo)(.*)','i') then 'Sligo'\n            when rlike(collate(add2,''),'(.*)(^Tipperary|Co Tipperary|County Tipperary|Co\\. Tipperary|Co\\.Tipperary|^Co Tip|^Co\\. Tip)(.*)','i') then 'Tipperary'\n            when rlike(collate(add2,''),'(.*)(^Waterford|Co Waterford|County Waterford|Co\\. Waterford|Co\\.Waterford|^Co Wat|^Co\\. Wat)(.*)','i') then 'Waterford'\n            when rlike(collate(add2,''),'(.*)(^Westmeath|Co Westmeath|County Westmeath|Co\\. Westmeath|Co\\.Westmeath|Co West meath)(.*)','i') then 'Westmeath'\n            when rlike(collate(add2,''),'(.*)(^Wexford|Co Wexford|County Wexford|Co\\. Wexford|Co\\.Wexford|^Co Wex|^Co\\. Wex)(.*)','i') then 'Wexford'\n            when rlike(collate(add2,''),'(.*)(^Wicklow|Co Wicklow|County Wicklow|Co\\. Wicklow|Co\\.Wicklow)(.*)','i') then 'Wicklow'\n            when rlike(collate(add2,''),'(.*)(^Dublin|Co Dublin|County Dublin|Co\\. Dublin|Co\\.Dublin| Dublin |^Co Dub|^Co\\. Dub)(.*)','i') then 'Dublin'\n            when rlike(replace(upper(collate(add2,'')),' N/A',''),'(.*)(Carlow$| Carlow [0-9])(.*)','i') then 'Carlow'\n            when rlike(replace(upper(collate(add2,'')),' N/A',''),'(.*)(Cavan$| Cavan [0-9])(.*)','i') then 'Cavan'\n            when rlike(replace(upper(collate(add2,'')),' N/A',''),'(.*)(Clare$| Clare [0-9])(.*)','i') then 'Clare'\n            when rlike(replace(upper(collate(add2,'')),' N/A',''),'(.*)(Cork$| Cork [0-9])(.*)','i') then 'Cork'\n            when rlike(replace(upper(collate(add2,'')),' N/A',''),'(.*)(Donegal$| Donegal [0-9])(.*)','i') then 'Donegal'\n            when rlike(replace(upper(collate(add2,'')),' N/A',''),'(.*)(Wicklow$| Wicklow [0-9])(.*)','i') then 'Wicklow'\n            when rlike(replace(upper(collate(add2,'')),' N/A',''),'(.*)(Galway$|Galway [0-9])(.*)','i') then 'Galway'\n            when rlike(replace(upper(collate(add2,'')),' N/A',''),'(.*)(Kerry$| Kerry [0-9])(.*)','i') then 'Kerry'\n            when rlike(replace(upper(collate(add2,'')),' N/A',''),'(.*)(Kildare$| Kildare [0-9])(.*)','i') then 'Kildare'\n            when rlike(replace(upper(collate(add2,'')),' N/A',''),'(.*)(Kilkenny$| Kilkenny [0-9])(.*)','i') then 'Kilkenny'\n            when rlike(replace(upper(collate(add2,'')),' N/A',''),'(.*)(Laois$| Laois [0-9])(.*)','i') then 'Laois'\n            when rlike(replace(upper(collate(add2,'')),' N/A',''),'(.*)(Leitrim$| Leitrim [0-9])(.*)','i') then 'Leitrim'\n            when rlike(replace(upper(collate(add2,'')),' N/A',''),'(.*)(Limerick$| Limerick [0-9])(.*)','i') then 'Limerick'\n            when rlike(replace(upper(collate(add2,'')),' N/A',''),'(.*)(Longford$| Longford [0-9])(.*)','i') then 'Longford'\n            when rlike(replace(upper(collate(add2,'')),' N/A',''),'(.*)(Louth$| Louth [0-9])(.*)','i') then 'Louth'\n            when rlike(replace(upper(collate(add2,'')),' N/A',''),'(.*)(Mayo$| Mayo [0-9])(.*)','i') then 'Mayo'\n            when rlike(replace(upper(collate(add2,'')),' N/A',''),'(.*)(Meath$| Meath [0-9])(.*)','i') then 'Meath'\n            when rlike(replace(upper(collate(add2,'')),' N/A',''),'(.*)(Monaghan$| Monaghan [0-9])(.*)','i') then 'Monaghan'\n            when rlike(replace(upper(collate(add2,'')),' N/A',''),'(.*)(Offaly$| Offaly [0-9])(.*)','i') then 'Offaly'\n            when rlike(replace(upper(collate(add2,'')),' N/A',''),'(.*)(Roscommon$| Roscommon [0-9])(.*)','i') then 'Roscommon'\n            when rlike(replace(upper(collate(add2,'')),' N/A',''),'(.*)(Sligo$| Sligo [0-9])(.*)','i') then 'Sligo'\n            when rlike(replace(upper(collate(add2,'')),' N/A',''),'(.*)(Tipperary$| Tipperary [0-9])(.*)','i') then 'Tipperary'\n            when rlike(replace(upper(collate(add2,'')),' N/A',''),'(.*)(Waterford$| Waterford [0-9])(.*)','i') then 'Waterford'\n            when rlike(replace(upper(collate(add2,'')),' N/A',''),'(.*)(Westmeath$| Westmeath [0-9])(.*)','i') then 'Westmeath'\n            when rlike(replace(upper(collate(add2,'')),' N/A',''),'(.*)(Wexford$| Wexford [0-9])(.*)','i') then 'Wexford'\n            when rlike(replace(upper(collate(add2,'')),' N/A',''),'(.*)(Dublin$| Dublin [0-9])(.*)','i') then 'Dublin'         \n            else ''\n        end\n   ) as ie_county            \nfrom ${Database}.temp.ram_names a\nwhere trim(cc_iso) = 'IE';\n\n\nCREATE OR REPLACE TABLE ${Database}.temp.ie_temp1 \nas\nselect ie_key,\n    count(distinct case when trim(ie_county)>''  then ie_county else null end) as counties,\n    min(trim(ie_county)) as x,\n    max(trim(ie_county)) as y\nfrom ${Database}.temp.ie_hh_change \ngroup by 1\nhaving count(distinct case when trim(ie_county)>'' then ie_county else null end) = 1 \n    and min(trim(ie_county)) <> max(trim(ie_county));\n\n--where 1 county but key matches to records with no county - fill it in. if multiple counties leave as it is\nupdate  ${Database}.temp.ie_hh_change hh\nset     hh.ie_county = t.y\nfrom    (select y,ie_key from ${Database}.temp.ie_temp1) t\nwhere   hh.ie_key = t.ie_key\n;\n\ndrop table if exists ${Database}.temp.ie_temp1 ;    \n    \n-- Take min hid for each key within a County\nCREATE OR REPLACE TABLE ${Database}.temp.ie_temp2 \nas\nselect ie_key,\n    ie_county,\n    min(hh_id) as hh_id \nfrom ${Database}.temp.ie_hh_change \nwhere trim(ie_county) > '' \ngroup by ie_key,\n    ie_county;\n\t\nupdate  ${Database}.temp.ie_hh_change    hh\nset     hh.hh_id = t.hh_id\nfrom    (select hh_id,ie_county,ie_key from ${Database}.temp.ie_temp2) t\nwhere   hh.ie_key = t.ie_key \nand     hh.ie_county = t.ie_county\n;\n\n\ndrop table if exists ${Database}.temp.ie_temp2 ;\n\n--apply back new keys for ie\nupdate  ${Database}.temp.ram_names hh\nset     hh.hh_id = t.hh_id\nfrom    (select hh_id,name_urn from ${Database}.temp.ie_hh_change) t \nwhere   hh.name_urn = t.name_urn\n;\n\n\ndrop table if exists ${Database}.temp.ie_hh_change ;\n\n/******************************************************************************************\n                                      Finish proc\n******************************************************************************************/\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_names_hh_dedupe',\n    '*************************',\n    '*************************',\n    'end of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;  \n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 4 HH Dedupe'\n, \t\t'SF_build_proc_04_NESTLE_HH'\n, \t\t'FINISHED'\n;\t\t\n\nALTER WAREHOUSE set WAREHOUSE_SIZE=XSMALL;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196031":{"id":196031,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-336,"y":-192,"width":32,"height":32,"inputConnectorIDs":[196061],"outputSuccessConnectorIDs":[196067],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc 5 Cust Prep"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\n                                        MATCHKEY NAMES\n******************************************************************************************/\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 5 Cust Dedupe Prep'\n, \t\t'SCRIPT'\n, \t\t'STARTED'\n;\n\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_names_cust_dedupe_prep',\n    '*************************',\n    '*************************',\n    'start of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;  \n\n\ndrop table if exists ${Database}.temp.allmatchkeysaddroll;\n \nCREATE OR REPLACE TABLE ${Database}.temp.allmatchkeysaddroll as \nselect hh_id, count(*) as address_occupants \nfrom ${Database}.temp.ram_names\nwhere coalesce(hh_id, 0) <> 0 \ngroup by hh_id;\n \n    \ndrop table if exists ${Database}.temp.allmatchkeys;\n\nCREATE OR REPLACE TABLE ${Database}.temp.allmatchkeys \n(\n    t_bbw_urn                   bigint                primary key null,\n    t_orig_id                   varchar(120)    null        default '',\n    t_soundex_lastname          char(6)                           null        default '',\n    t_soundex_firstname         char(6)                           null        default '',\n    t_address                   int                               null        default 0,\n    t_Address_occupants         int                               null        default 0,\n    t_dateofbirth               date                              null        default null,\n    t_email                     varchar(100)    null        default '',\n    t_lastname                  varchar(50)     null        default '',\n    t_firstname                 varchar(50)     null        default '',\n    t_fl                        varchar(100)    not null    default '',\n    t_initials                  char(1)                           null        default '',\n    t_postalarea                char(2)                           null        default '',\n    t_postcode                  varchar(50)     not null    default '',\n    t_country                   char(2)                           null        default '',\n    t_gender                    char(1)                           null        default '',\n    t_phone                     varchar(50)     null        default '',\n    t_mobile                    varchar(50)     null        default '',\n    t_work                      varchar(50)     null        default '',\n    t_company_id                varchar(50)     null        default '',\n    t_company_reg_no            varchar(10)     null        default '',\n    t_company                   varchar(125)    null        default '',\n    t_company_raw               varchar(125)    null        default '',\n    t_company_1st3chars         char(3)                           null        default '',\n    t_company_1st12chars        varchar(12)     null        default '',\n    t_company_1st12charssupp    varchar(12)     null        default '',\n    t_company_with_geo          varchar(125)    null        default '',\n    t_company_new               varchar(125)    null        default '',\n    t_company_type              varchar(125)    null        default '',\n    t_domain                    varchar(100)    null        default'',\n    t_region                    varchar(25)     null        default'',\n    t_email_group               int                               null        default 0,\n    t_contact_exact_bbw_urn     int                               null        default 0,\n    t_company_exact_bbw_urn     int                               null        default 0,\n    t_coadddom_exact_bbw_urn    int                               null        default 0,\n    t_contact_key_hash          varchar(255)    null        default '',\n    t_company_key_hash          varchar(255)    null        default '',\n    t_coaddressdom_key_hash     varchar(255)    null        default '',\n    t_c_id                      int                               null        default 0\n);\n\nalter warehouse set warehouse_size = 'Small';\n\n\ninsert into ${Database}.temp.allmatchkeys\n(\n    t_bbw_urn, \n    t_orig_id,\n    t_soundex_lastname, \n    t_soundex_firstname, \n    t_address, \n    t_Address_occupants,\n    t_dateofbirth, \n    t_email, \n    t_lastname, \n    t_firstname, \n    t_initials, \n    t_postalarea, \n    t_country, \n    t_gender, \n    t_phone, \n    t_mobile, \n    t_work, \n    t_company_id,\n    t_company_reg_no,\n    t_company,\n    t_company_raw,\n    t_company_1st3chars,\n    t_company_1st12chars,\n    t_company_with_geo,\n    t_company_type,\n    t_domain,\n    t_email_group,\n    t_fl,\n    t_postcode\n)\nselect bbw_urn,\n    source|| cast(case when left(source,4) <> 'REG_' or provider_contact_urn is null or provider_contact_urn = '0' or provider_contact_urn = '' then cast(bbw_urn as varchar) else provider_contact_urn end as nvarchar) as t_orig_id,\n    upper\n    (\n        replace\n        (\n            coalesce\n            (\n                soundex\n                (\n                    trim\n                    (\n                        replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(\n                        replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(\n                            upper(lastname)||' ',\n                            ' BA ',''),\n                            ' BENG ',''),\n                            ' BSC ',''),\n                            ' CBE ',''),\n                            ' DPHIL ',''),\n                            ' ESQ ',''),\n                            ' MA ',''),\n                            ' MBE ',''),\n                            ' MENG ',''),\n                            ' MEP ',''),\n                            ' MP ',''),\n                            ' MSC ',''),\n                            ' OBE ',''),\n                            ' PHD ',''),\n                            ' QC ',''),\n                            ' CFA ',''),\n                            ' I ',''),\n                            ' II ',''),\n                            ' III ',''),\n                            ' JR ',''),\n                            ' JNR ',''),\n                            ' MS ',''),\n                            ' LTD ',''),\n                            ' SNR ',''),\n                            ' RNZN ',''\n                        )\n                    )\n                ), \n                ''\n            ),\n            '0000',''\n        )\n    ) as sx_lastname,\n    upper(replace(coalesce(soundex(split_part(firstname,' ',1)),''),'0000','')) as sx_firstname,\n    coalesce(rn.hh_id, 0) as hh_id,\n    coalesce(aroll.address_occupants, 0) as address_occupants, \n    case when dob >= '1903-01-01' and dob <= current_date then dob else cast(null as date) end as dob,\n    upper(case when email like '%@%.%' then tbw.db.email_standardise(email)  else '' end) as email,\n    split_part\n    (\n        trim\n        (\n            replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(\n            replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(\n                upper\n                (\n                    coalesce\n                    (\n                        case \twhen right(lower(lastname), 5) =  ' decd' \t\tthen left(lastname,length(lastname) - 5)    \n\t\t\t\t\t\t\twhen right(lower(lastname), 9) =  ' deceased' \tthen left(lastname,length(lastname) - 9)\n\t\t\t\t\t\t\telse lastname end, ''\n                    )\n                )||' ',\n                ' BA ',''),\n                ' BENG ',''),\n                ' BSC ',''),\n                ' CBE ',''),\n                ' DPHIL ',''),\n                ' ESQ ',''),\n                ' MA ',''),\n                ' MBE ',''),\n                ' MENG ',''),\n                ' MEP ',''),\n                ' MP ',''),\n                ' MSC ',''),\n                ' OBE ',''),\n                ' PHD ',''),\n                ' QC ',''),\n                ' CFA ',''),\n                ' I ',''),\n                ' II ',''),\n                ' III ',''),\n                ' JR ',''),\n                ' JNR ',''),\n                ' MS ',''),\n                ' LTD ',''),\n                ' SNR ',''),\n                ' RNZN ',''\n            )\n        ),\n        ' ',-1\n    ) as lastname,\n    upper(coalesce(split_part(firstname,' ',1), '')),\n    upper(coalesce(case when initials <= '' then left(firstname, 1) else left(initials, 1) end, '')) as initials,\n    upper(coalesce(case when substring(postcode, 2, 1) regexp '.*[0-9].*' then left(postcode, 1) else left(postcode, 2) end, '')) as postalarea,\n    coalesce(cc_iso, ''),\n    upper(coalesce(gender, 'X')),\n    case when phone_home_score = 1 then phone_home else '' end as homephone,\n    case when phone_mobile_score = 1 then phone_mobile else '' end as mobilephone, \n    case when phone_work_score = 1 then phone_work else '' end as workphone,\n    case when provider_business_urn <= '' or provider_business_urn = cast(0 as varchar) then cast(bbw_urn as varchar) else source||provider_business_urn end t_company_id,\n    upper\n    (\n         case when company_registration_number not rlike '(.*)([^0-9])(.*)' then ltrim(company_registration_number,'0')\n             else translate(company_registration_number,'1234567890','')||'-'|| ltrim(translate(upper(company_registration_number),'abcdefghijklmnopqrstuvwxyz',''),'0')\n             end\n    ) as t_company_reg_no,\n    upper\n    (\n        case when rlike(company_dupe,'.*University.*|.*School.*|.*Council.*|.*College.*|.*Taste.*','i') then\n                upper(replace(replace(translate(upper(company_dupe), ',:&-/.!''''', ' '), ' ', ''), 'THE ', ''))\n            else upper(replace(replace(replace(translate(upper(company_dupe), ',:&-/.!''''', ' '), ' ', ''), upper(company_geo), ''), 'THE ', ''))\n        end\n    ) as t_company,\n    upper(coalesce(company,'')) as t_company_raw,\n    upper\n    (\n        case when rlike(company_dupe,'.*University.*|.*School.*|.*Council.*|.*College.*|.*Taste.*','i') then\n                left(replace(replace(upper(replace(replace(translate(upper(company_dupe), ',:&-/\\.*!''''', ' '), ' ', ''), 'THE ', '')),'UNIVERSITYOF',''),'UNIVERSITY',''), 3)\n            else left(upper(replace(replace(replace(translate(upper(company_dupe), ',:&-/\\.*!''''', ' '), ' ', ''), upper(company_geo), ''), 'THE ', '')), 3)\n        end\n    ) as t_company_1st3chars,\n    upper\n      (case when rlike(company_dupe,'.*University.*|.*School.*|.*Council.*|.*College.*|.*Taste.*','i') \n            then left(replace(replace(upper(replace(replace(translate(upper(company_dupe), ',:&-/\\.*!''''', ' '), ' ', ''), 'THE ', '')),'UNIVERSITYOF',''),'UNIVERSITY',''), 12)\n            else left(upper(replace(replace(replace(translate(upper(company_dupe), ',:&-/\\.*!''''', ' '), ' ', ''),upper(company_geo), ''), 'THE ', '')), 12)\n        end\n      ) as t_company_1st12chars,\n    ltrim(upper(translate(replace(upper(company_dupe),'the ',''),',:&-/\\.*!'''''  ,' ')))  as t_company_with_geo,\t\n    upper(company_type),\n    case when upper(email_cleaning) like '%GLOBAL DOMAIN IDENTIFIED%' then '' else email_domain end,\n    case when upper(email_cleaning) like '%GROUP EMAIL IDENTIFIED%' then 1 else 0 end  as t_email_group,\n    upper\n    (\n        replace\n        (\n            firstname||\n            trim\n            (\n                replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(\n                replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(\n                    upper(lastname)||' ',\n                    ' BA ',''),\n                    ' BENG ',''),\n                    ' BSC ',''),\n                    ' CBE ',''),\n                    ' DPHIL ',''),\n                    ' ESQ ',''),\n                    ' MA ',''),\n                    ' MBE ',''),\n                    ' MENG ',''),\n                    ' MEP ',''),\n                    ' MP ',''),\n                    ' MSC ',''),\n                    ' OBE ',''),\n                    ' PHD ',''),\n                    ' QC ',''),\n                    ' CFA ',''),\n                    ' I ',''),\n                    ' II ',''),\n                    ' III ',''),\n                    ' JR ',''),\n                    ' JNR ',''),\n                    ' MS ',''),\n                    ' LTD ',''),\n                    ' SNR ',''),\n                    ' RNZN ',''\n                )\n            ),\n            ' ',''\n        )\n    ) as t_fl,\n    upper(replace(postcode,' ','')) as t_postcode\nfrom ${Database}.temp.ram_names rn\nleft join ${Database}.temp.allmatchkeysaddroll aroll on rn.hh_id = aroll.hh_id;\n\ndrop table ${Database}.temp.allmatchkeysaddroll;\n\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_names_cust_dedupe_prep',\n    '${Database}.temp.allmatchkeys',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.allmatchkeys;     \n\n\ndrop table if exists ${Database}.temp.allmatchkeysdedupe;\n\nCREATE OR REPLACE TABLE ${Database}.temp.allmatchkeysdedupe \n(\n    td_bbw_urn                  bigint                           null,\n    td_orig_id                  varchar(120)   null        default '',\n    td_soundex_lastname         char(6)                          null        default '',\n    td_soundex_firstname        char(6)                          null        default '',\n    td_address                  int                              null        default 0,\n    td_Address_occupants        int                              null        default 0,\n    td_dateofbirth              date                             null        default null,\n    td_email                    varchar(100)   null        default '',\n    td_lastname                 varchar(50)    null        default '',\n    td_firstname                varchar(50)    null        default '',\n    td_fl                       varchar(100)   not null    default '',\n    td_initials                 char(1)                          null        default '',\n    td_postalarea               char(2)                          null        default '',\n    td_postcode                 varchar(50)    not null    default '',\n    td_country                  char(2)                          null        default '',\n    td_gender                   char(1)                          null        default '',\n    td_phone                    varchar(50)    null        default '',\n    td_mobile                   varchar(50)    null        default '',\n    td_work                     varchar(50)    null        default '',\n    td_company_id               varchar(50)    null        default '',\n    td_company_reg_no           varchar(10)    null        default '',\n    td_company                  varchar(125)   null        default '',\n    td_company_raw              varchar(125)   null        default '',\n    td_company_1st3chars        char(3)                          null        default '',\n    td_company_1st12chars       varchar(12)    null        default '',\n    td_company_1st12charssupp   varchar(12)    null        default '',\n    td_company_with_geo         varchar(125)   null        default '',\n    td_company_new              varchar(125)   null        default '',\n    td_company_type             varchar(125)   null        default '',\n    td_domain                   varchar(100)   null        default'',\n    td_region                   varchar(25)    null        default'',\n    td_email_group              int                              null        default 0,\n    td_contact_exact_bbw_urn    int                              null        default 0,\n    td_company_exact_bbw_urn    int                              null        default 0,\n    td_coadddom_exact_bbw_urn   int                              null        default 0,\n    td_contact_key_hash         varchar(255)   null        default '',\n    td_company_key_hash         varchar(255)   null        default '',\n    td_coaddressdom_key_hash    varchar(255)   null        default '',\n    td_c_id                     int                              null        default 0\n);\n                                \n-- To be used in the dedupe to match to itself.\ninsert into ${Database}.temp.allmatchkeysdedupe \nselect * \nfrom ${Database}.temp.allmatchkeys;\n\nalter warehouse set warehouse_size = 'Xsmall';\n\n/******************************************************************************************\n                                      Finish proc\n******************************************************************************************/\n\nupdate   ${Database}.db.build_dates\nset      nestle_names_cust_dedupe_prep = CURRENT_TIMESTAMP::timestamp_ntz\nwhere    trim(build_flag) = 'C';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_names_cust_dedupe_prep',\n    '*************************',\n    '*************************',\n    'end of script',\n    CURRENT_TIMESTAMP::timestamp_ntz ;  \n\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 5 Cust Dedupe Prep'\n, \t\t'SCRIPT'\n, \t\t'FINISHED'\n;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196032":{"id":196032,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":400,"y":112,"width":32,"height":32,"inputConnectorIDs":[196057],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Orig Proc 9 Supps"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nMatillion Program  : Nestle Names Suppressions\nAuthor             : Lindsay Timms\nClient Name        : Nestle\nUpdate Job Numbers : NUK08617(01/22)\nStandard Machine   : Snowflake\nAmendment History  : v01 Kog - LT 20161220 - Created\n                     v01 SF - LukeD\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \n******************************************************************************************/\n\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 9 Suppressions'\n, \t\t'SCRIPT'\n, \t\t'STARTED'\n;\n\n/******************************************************************************************\n                                   NAMES SUPPRESSIONS\n******************************************************************************************/\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_names_suppressions',\n    '*************************',\n    '*************************',\n    'start of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\nalter warehouse set warehouse_size = 'Large';\n\n--bit of a fudge on irish mailable data\nupdate ${Database}.temp.names_tmp\nset add1      = case when lower(add1)     = 'n/a' then '' else add1 end,\n    add2      = case when lower(add2)     = 'n/a' then '' else add2 end,\n    add3      = case when lower(add3)     = 'n/a' then '' else add3 end,\n    add4      = case when lower(add4)     = 'n/a' then '' else add4 end,\n    add5      = case when lower(add5)     = 'n/a' then '' else add5 end,\n    city      = case when lower(city)     = 'n/a' then '' else city end,\n    state     = case when lower(state)    = 'n/a' then '' else state end,\n    postcode  = case when lower(postcode) = 'n/a' then '' else postcode end\nwhere lower(cc_iso)  = 'ie';\n\nupdate ${Database}.temp.names_tmp set add1 = ''     where lower(cc_iso) = 'ie' and add1 regexp '.*0{2,20}.*'     and lower(add1) not regexp '.*[1-9a-z].*';\nupdate ${Database}.temp.names_tmp set add2 = ''     where lower(cc_iso) = 'ie' and add2 regexp '.*0{2,20}.*'     and lower(add2) not regexp '.*[1-9a-z].*';\nupdate ${Database}.temp.names_tmp set add3 = ''     where lower(cc_iso) = 'ie' and add3 regexp '.*0{2,20}.*'     and lower(add3) not regexp '.*[1-9a-z].*';\nupdate ${Database}.temp.names_tmp set add4 = ''     where lower(cc_iso) = 'ie' and add4 regexp '.*0{2,20}.*'     and lower(add4) not regexp '.*[1-9a-z].*';\nupdate ${Database}.temp.names_tmp set add5 = ''     where lower(cc_iso) = 'ie' and add5 regexp '.*0{2,20}.*'     and lower(add5) not regexp '.*[1-9a-z].*';\nupdate ${Database}.temp.names_tmp set postcode = '' where lower(cc_iso) = 'ie' and postcode regexp '.*0{2,20}.*' and lower(postcode) not regexp '.*[1-9a-z].*';\n\nupdate ${Database}.temp.names_tmp\nset city = add3, add3 = ''\nwhere lower(cc_iso) = 'ie'\n    and add3 <> ''\n    and city <> add3\n\tand regexp_replace(replace(add3,city,''), '0123456789 ') = ''\n    and regexp_replace(add3,'0123456789 ') <> '';\n\nupdate ${Database}.temp.names_tmp\nset state = city, city = ''\nwhere lower(cc_iso) = 'ie'\n    and city <> ''\n    and state <> city\n    and regexp_replace(replace(city,state,''), '0123456789 ') = ''\n    and regexp_replace(city,'0123456789 ') <> '';\n\nupdate ${Database}.temp.names_tmp\nset add2 = ''\nwhere lower(cc_iso) = 'ie'\n    and add2 = city;\n\nupdate ${Database}.temp.names_tmp\nset add3 = ''\nwhere lower(cc_iso) = 'ie'\n    and add3 = city;\n\nupdate ${Database}.temp.names_tmp\nset city = ''\nwhere lower(cc_iso) = 'ie'\n    and city = state;\n    \n--master name urn table\ndrop table if exists ${Database}.temp.build_supps_prep_name_urn;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_prep_name_urn\nas\nselect\n    cid,\n    hid,\n    name_urn,\n    source_data_controller_id,\n    source_brand_id,\n    source_date,\n    data_date,\n    email,\n    phone_home,\n    phone_work,\n    phone_mobile,\n    add1\nfrom ${Database}.temp.names_tmp;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_prep_name_urn',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_prep_name_urn;\n\n\n/******************************************************************************************\n                                     DATA PROTECTION\n******************************************************************************************/\n\n\ndrop table if exists ${Database}.temp.build_dp_1_prep;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_dp_1_prep\nas\nselect\n    nmt.cid,\n    nmt.hid,\n    nmt.name_urn,\n    nmt.email,\n    dp.data_controller_id, --dc for opt ins\n    dp.brand_id, --brand is for opt in brand rather than source\n    dp.dp_date,\n    dp.dp_mailable,\n    dp.dp_emailable,\n    dp.dp_phoneable,\n    dp.dp_smsable,\n    dp.dp_newsletter,\n    dp.source_date,\n    dp.data_date,\n    dp.source as dp_source,   \n    to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') as month_start_dt\nfrom ${Database}.temp.build_supps_prep_name_urn nmt\ninner join ${Database}.db.names_dp dp on trim(nmt.name_urn) = trim(dp.name_urn)\nwhere --must have at least 1 permission\n    dp.dp_mailable is not null\n    or dp.dp_emailable is not null\n    or dp.dp_phoneable is not null\n    or dp.dp_smsable is not null\n    or dp.dp_newsletter is not null;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_dp_1_prep',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_dp_1_prep;\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_roll_base;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_roll_base\nas\nselect distinct\n    email,\n    cid,\n    data_controller_id, --if no brand then we need the dc to work out permissions\n    brand_id,\n    first_value(dp_date) over\n        (\n            partition by cid, data_controller_id, brand_id\n            order by dp_date desc nulls last\n        ) \t\t\t\t\t\t\t\t\t\t\t\t\t\tas dp_last_date,\n    first_value(case when source_date < month_start_dt then dp_date else cast(null as date) end) over\n        (\n            partition by cid, data_controller_id, brand_id\n            order by case when source_date < month_start_dt then 1 else 0 end desc,\n                dp_date desc nulls last\n        ) \t\t\t\t\t\t\t\t\t\t\t\t\t\tas dp_last_date_lm,   \n    first_value(dp_source) over\n        (\n            partition by cid, data_controller_id, brand_id\n            order by dp_date desc nulls last, data_date desc\n        )                                                       as dp_last_source,  \n    first_value(dp_date) over\n        (\n            partition by cid, data_controller_id , brand_id\n            order by dp_date nulls last, data_date\n        )                                                       as dp_first_date,  \n    first_value(dp_source) over\n        (\n            partition by cid, data_controller_id, brand_id\n            order by dp_date nulls last, data_date \n        )                                                       as dp_first_source\nfrom ${Database}.temp.build_dp_1_prep;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_roll_positive;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_roll_positive\nas\nselect distinct\n    cid,\n    data_controller_id,\n    brand_id,\n    first_value(case when dp_emailable = 1 or dp_mailable = 1 or dp_newsletter = 1 then dp_date else cast(null as date) end) over\n        (\n            partition by cid, data_controller_id, brand_id\n            order by\n                case when dp_emailable = 1 or dp_mailable = 1 or dp_newsletter = 1 then 1 else 0 end desc,\n                dp_date desc nulls last,\n                data_date desc nulls last,\n                source_date desc nulls last\n        )  as dp_last_positive_date,\n    first_value(case when source_date < month_start_dt and (dp_emailable = 1 or dp_mailable = 1 or dp_newsletter = 1) then dp_date else cast(null as date) end) over\n        (\n            partition by cid, data_controller_id, brand_id\n            order by\n                case when source_date < month_start_dt then 1 else 0 end desc,\n                case when dp_emailable = 1 or dp_mailable = 1 or dp_newsletter = 1 then 1 else 0 end desc,\n                dp_date desc nulls last,\n                data_date desc nulls last,\n                source_date desc nulls last\n        ) as dp_last_positive_date_lm,\n    first_value(case when dp_emailable = 1 or dp_mailable = 1 or dp_newsletter = 1 then dp_source else null end) over\n        (\n            partition by cid, data_controller_id, brand_id\n            order by\n                case when dp_emailable = 1 or dp_mailable = 1 or dp_newsletter = 1 then 1 else 0 end desc,\n                dp_date desc nulls last,\n                data_date desc nulls last,\n                source_date desc nulls last\n        )  as dp_last_positive_source\nfrom ${Database}.temp.build_dp_1_prep;\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_roll_positive_email;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_roll_positive_email\nas\nselect\n    email,\n    data_controller_id,\n    brand_id,\n    dp_last_positive_emailable_date,\n    dp_last_positive_emailable_source\nfrom (\n         select\n             email,\n             data_controller_id,\n             brand_id,\n             case when dp_emailable = 1 then dp_date else cast(null as date) end as dp_last_positive_emailable_date,\n             case when dp_emailable = 1 then dp_source else null end as dp_last_positive_emailable_source,\n             row_number() over\n                 (\n                     partition by email, data_controller_id, brand_id\n                     order by\n                         dp_emailable desc nulls last,\n                         dp_date desc nulls last,\n                         data_date desc nulls last,\n                         source_date desc nulls last\n                 ) as row_num\n         from ${Database}.temp.build_dp_1_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_roll_positive_email_lm;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_roll_positive_email_lm\nas\nselect\n    email,\n    data_controller_id,\n    brand_id,\n    dp_last_positive_emailable_date_lm\nfrom (\n         select\n             email,\n             data_controller_id,\n             brand_id,\n             case when source_date < month_start_dt and dp_emailable = 1 then dp_date else cast(null as date) end as dp_last_positive_emailable_date_lm,\n             case when source_date < month_start_dt and dp_emailable = 1 then dp_source else null end as dp_last_positive_emailable_source_lm,\n             row_number() over\n                 (\n                     partition by email, data_controller_id, brand_id\n                     order by\n                         case when source_date < month_start_dt then 1 else 0 end desc,\n                         dp_emailable desc nulls last,\n                         dp_date desc nulls last,\n                         data_date desc nulls last,\n                         source_date desc nulls last\n                 ) as row_num\n         from ${Database}.temp.build_dp_1_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_roll_mail;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_roll_mail\nas\nselect\n    cid,\n    data_controller_id, --if no brand then we need the dc to work out permissions\n    brand_id,\n    dp_mailable,\n    dp_last_mailable_date,\n    dp_last_mailable_source\nfrom (\n         select\n             cid,\n             data_controller_id,\n             brand_id,\n             dp_mailable,\n             dp_date as dp_last_mailable_date,\n             dp_source as dp_last_mailable_source,\n             row_number() over\n                 (\n                     partition by cid, data_controller_id, brand_id\n                     order by\n                         case when dp_mailable is null then 0 else 1 end desc,\n                         dp_date desc nulls last,\n                         data_date desc nulls last,\n                         source_date desc nulls last,\n                         dp_mailable nulls last\n                 ) as row_num\n         from ${Database}.temp.build_dp_1_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_roll_email;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_roll_email\nas\nselect\n    email,\n    data_controller_id, --if no brand then we need the dc to work out permissions\n    brand_id,\n    dp_emailable,\n    dp_last_emailable_date,\n    dp_last_emailable_source\nfrom (\n         select\n             email,\n             data_controller_id,\n             brand_id,\n             dp_emailable,\n             dp_date as dp_last_emailable_date,\n             dp_source as dp_last_emailable_source,  \n             row_number() over\n                 (\n                     partition by email, data_controller_id, brand_id --for gigya/gdpr we now need to permission by email address\n                     order by\n                         case when dp_emailable is null then 0 else 1 end desc,\n                         dp_date desc nulls last,\n                         data_date desc nulls last,\n                         source_date desc nulls last,\n                         dp_emailable nulls last, \n                         data_controller_id\n                 ) as row_num\n         from ${Database}.temp.build_dp_1_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_roll_newsletter;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_roll_newsletter\nas\nselect\n    email,\n    data_controller_id, --if no brand then we need the dc to work out permissions\n    brand_id,\n    dp_newsletter,\n    dp_last_newsletter_date\nfrom (\n         select\n             email,\n             data_controller_id,\n             brand_id,\n             dp_newsletter,\n             dp_date as dp_last_newsletter_date,\n             row_number() over\n                 (\n                     partition by email, data_controller_id, brand_id --for gigya/gdpr we now need to permission by email address\n                     order by\n                         case when dp_newsletter is null then 0 else 1 end desc,\n                         dp_date desc nulls last,\n                         data_date desc nulls last,\n                         source_date desc nulls last,\n                         dp_newsletter nulls last, \n                         data_controller_id\n                 ) as row_num\n         from ${Database}.temp.build_dp_1_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_roll_email_lm;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_roll_email_lm\nas\nselect\n    email,\n    data_controller_id, --if no brand then we need the dc to work out permissions\n    brand_id,\n    dp_emailable_lm,\n    dp_last_emailable_date_lm\nfrom (\n         select\n             email,\n             data_controller_id,\n             brand_id,\n             case when source_date < month_start_dt then dp_emailable else cast(null as int) end as dp_emailable_lm,\n             case when source_date < month_start_dt then dp_date else cast(null as date) end as dp_last_emailable_date_lm,\n             row_number() over\n                 (\n                     partition by email, data_controller_id, brand_id --for gigya/gdpr we now need to permission by email address\n                     order by\n                         case when source_date < month_start_dt then 1 else 0 end desc,\n                         case when dp_emailable is null then 0 else 1 end desc,\n                         dp_date desc nulls last,\n                         data_date desc nulls last,\n                         source_date desc nulls last,\n                         dp_emailable nulls last\n                 ) as row_num\n         from ${Database}.temp.build_dp_1_prep\n     ) dp\nwhere row_num = 1;\t\t\t\t\t\t\t \n\ndrop table if exists ${Database}.temp.build_supps_names_dp_roll;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_roll\nas\nselect distinct\n    ba.email,\n    ba.cid,\n    ba.data_controller_id, --if no brand then we need the dc to work out permissions\n    ba.brand_id,\n    ma.dp_mailable,\n    em.dp_emailable,\n    el.dp_emailable_lm,\n    ne.dp_newsletter,\n    ma.dp_last_mailable_date,\n    em.dp_last_emailable_date,\n    pe.dp_last_positive_emailable_date,\n    el.dp_last_emailable_date_lm,\n    pl.dp_last_positive_emailable_date_lm,\n    ne.dp_last_newsletter_date,\n    ba.dp_last_date,\n    ba.dp_last_date_lm,\n    po.dp_last_positive_date,\n    po.dp_last_positive_date_lm,\n    --sources\n    ma.dp_last_mailable_source,\n    em.dp_last_emailable_source,\n    pe.dp_last_positive_emailable_source,\n    --ne.dp_last_newsletter_source,\n    ba.dp_last_source,\n    po.dp_last_positive_source,\n    --acquisition\n    ba.dp_first_date,\n    ba.dp_first_source\nfrom ${Database}.temp.build_supps_names_dp_roll_base ba\nleft join ${Database}.temp.build_supps_names_dp_roll_positive po on po.cid = ba.cid\n                                                           and po.data_controller_id = ba.data_controller_id\n                                                           and coalesce(po.brand_id,0) = coalesce(ba.brand_id,0)\nleft join ${Database}.temp.build_supps_names_dp_roll_positive_email pe on lower(trim(pe.email)) = lower(trim(ba.email))\n                                                                 and pe.data_controller_id = ba.data_controller_id\n                                                                 and coalesce(pe.brand_id,0) = coalesce(ba.brand_id,0)\nleft join ${Database}.temp.build_supps_names_dp_roll_positive_email_lm pl on lower(trim(pl.email)) = lower(trim(ba.email))\n                                                                     and pl.data_controller_id = ba.data_controller_id\n                                                                     and coalesce(pl.brand_id,0) = coalesce(ba.brand_id,0)\nleft join ${Database}.temp.build_supps_names_dp_roll_email em on lower(trim(em.email)) = lower(trim(ba.email))\n                                                        and em.data_controller_id = ba.data_controller_id\n                                                        and coalesce(em.brand_id,0) = coalesce(ba.brand_id,0)\nleft join ${Database}.temp.build_supps_names_dp_roll_mail ma on ma.cid = ba.cid\n                                                       and ma.data_controller_id = ba.data_controller_id\n                                                       and coalesce(ma.brand_id,0) = coalesce(ba.brand_id,0)\nleft join ${Database}.temp.build_supps_names_dp_roll_newsletter ne on lower(trim(ne.email)) = lower(trim(ba.email))\n                                                             and ne.data_controller_id = ba.data_controller_id\n                                                             and coalesce(ne.brand_id,0) = coalesce(ba.brand_id,0)\nleft join ${Database}.temp.build_supps_names_dp_roll_email_lm el on lower(trim(el.email)) = lower(trim(ba.email))\n                                                           and el.data_controller_id = ba.data_controller_id\n                                                           and coalesce(el.brand_id,0) = coalesce(ba.brand_id,0);\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_roll',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_roll;\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_roll_base;\n--drop table if exists ${Database}.temp.build_supps_names_dp_roll_positive;\n--drop table if exists ${Database}.temp.build_supps_names_dp_roll_positive_email;\n--drop table if exists ${Database}.temp.build_supps_names_dp_roll_positive_email_lm;\n--drop table if exists ${Database}.temp.build_supps_names_dp_roll_email;\n--drop table if exists ${Database}.temp.build_supps_names_dp_roll_mail;\n--drop table if exists ${Database}.temp.build_supps_names_dp_roll_newsletter;\n--drop table if exists ${Database}.temp.build_supps_names_dp_roll_email_lm;\n--drop table if exists ${Database}.temp.build_dp_1_prep;\n\n\n--build the cross ref on the fly\n--build the reverse live lookup - dc/brand combos = business unit\n--be aware of same brand under different dc - both need to inherit the latest permission per brand\n\ndrop table if exists ${Database}.temp.build_ref_data_controller_division_xref;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_ref_data_controller_division_xref\nas\nselect\n    di.data_controller_id,\n    di.division_id,\n    br.brand_id\nfrom ${Database}.db.ref_data_controller_division_xref di\ninner join ${Database}.db.ref_brand br on di.division_id = br.division_id;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_ref_data_controller_division_xref',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_ref_data_controller_division_xref;\n\n--Main business level reference table (eventually will replace the above 'build_ref_data_controller_division_xref' table)\ndrop table if exists ${Database}.live.xref_business_level;\n\nCREATE OR REPLACE TABLE ${Database}.live.xref_business_level\nas\nselect\n    data_controller_id,\n    business_unit_id,\n    division_id,\n    brand_id,\n    case when rn = 1 then rn end as primary_division_map,\n    case when rn2 = 1 then rn2 end as primary_brand_map\nfrom\n    (select\n        x.data_controller_id,\n        case\n            when di.business_unit_id is not null then di.business_unit_id\n            else br.brand_id + (select max(data_controller_id) from ${Database}.db.ref_data_controller) --insert the missing ones with fake bu's\n        end as business_unit_id,\n        di.division_id,\n        br.brand_id,\n        row_number() over (partition by di.division_id order by case when x.data_controller_id = (select data_controller_id from ${Database}.db.ref_data_controller where data_controller ilike 'Nestl_ (Ireland) Ltd') then 0 else data_controller_id end desc, br.brand_id) rn,\n        row_number() over (partition by br.brand_id    order by case when x.data_controller_id = (select data_controller_id from ${Database}.db.ref_data_controller where data_controller ilike 'Nestl_ (Ireland) Ltd') then 0 else data_controller_id end desc, di.division_id) rn2\n    from ${Database}.db.ref_brand br\n    left join ${Database}.db.ref_data_controller_division_xref x on x.division_id = br.division_id\n    left join ${Database}.db.ref_division di on x.division_id = di.division_id)\n;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.live.xref_business_level',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.xref_business_level;\n\n\n------------------------------------------------------------\n--mail permissions by cid\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result\nas\nselect distinct\n    cid,\n    email,\n    brand_id,\n    dp_mailable,\n    dp_last_mailable_date,\n    dp_last_date,\n    dp_last_positive_date,\n    dp_last_date_lm,\n    dp_last_positive_date_lm\nfrom ${Database}.temp.build_supps_names_dp_roll\nwhere brand_id is not null;\n\ninsert into ${Database}.db.build_log\nselect 'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_result',\n    'total records (with brand)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_result;\n\n\n\n--work out all the possible brand opt ins unsing the xref\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_1_prep;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_1_prep\nas\nselect distinct\n    rl.cid,\n    rl.email,\n    xref.brand_id,\n    rl.dp_mailable,\n    rl.dp_last_mailable_date,\n    rl.dp_last_date,\n    rl.dp_last_positive_date,\n    rl.dp_last_date_lm,\n    rl.dp_last_positive_date_lm\nfrom ${Database}.temp.build_supps_names_dp_roll rl\ninner join ${Database}.temp.build_ref_data_controller_division_xref xref on rl.data_controller_id = xref.data_controller_id\nwhere rl.brand_id is null;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_result_no_brand_1_prep',\n    'total records (no brand)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_result_no_brand_1_prep;\n\n\n--find the latest per brand to take care of multi permisions per brand\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_mail;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_mail\nas\nselect\n    cid,\n    brand_id,\n    dp_mailable,\n    dp_last_mailable_date\nfrom (\n         select\n             cid,\n             brand_id,\n             dp_mailable,\n             dp_last_mailable_date,\n             row_number() over\n                 (\n                     partition by cid, brand_id\n                     order by\n                         case when dp_mailable is null then 0 else 1 end desc,\n                         dp_last_mailable_date desc nulls last,\n                         dp_mailable nulls last\n                 ) as row_num\n         from ${Database}.temp.build_supps_names_dp_result_no_brand_1_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_dates;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_dates\nas\nselect\n    cid,\n    brand_id,\n    max(dp_last_date) as dp_last_date,\n    max(dp_last_positive_date) as dp_last_positive_date,\n    max(dp_last_date_lm) as dp_last_date_lm,\n    max(dp_last_positive_date_lm) as dp_last_positive_date_lm\nfrom ${Database}.temp.build_supps_names_dp_result_no_brand_1_prep\ngroup by cid, brand_id;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_1;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_1\nas\nselect\n    pr.cid,\n    pr.email,\n    pr.brand_id,\n    ma.dp_mailable,\n    ma.dp_last_mailable_date,\n    da.dp_last_date,\n    da.dp_last_positive_date,\n    da.dp_last_date_lm,\n    da.dp_last_positive_date_lm\nfrom (\n         select distinct\n             cid,\n             email,\n             brand_id\n         from ${Database}.temp.build_supps_names_dp_result_no_brand_1_prep\n     ) pr\nleft join ${Database}.temp.build_supps_names_dp_result_no_brand_mail ma on ma.cid = pr.cid\n                                                                  and ma.brand_id = pr.brand_id\nleft join ${Database}.temp.build_supps_names_dp_result_no_brand_dates da on da.cid = pr.cid\n                                                                  and da.brand_id = pr.brand_id;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_result_no_brand_1',\n    'total records (no brand)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_result_no_brand_1;\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_mail;\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_dates;\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_1_prep;\n\n\n--insert dp for all brands under a data controller (if no brand id specified)\nmerge into ${Database}.temp.build_supps_names_dp_result dpbr\nusing ${Database}.temp.build_supps_names_dp_result_no_brand_1 mg on mg.cid = dpbr.cid\n                                                         and lower(trim(mg.email)) = lower(trim(dpbr.email))\n                                                         and mg.brand_id = dpbr.brand_id --brand specific opt ins always have priority\nwhen not matched then insert\n(\n    cid,\n    email,\n    brand_id,\n    dp_mailable,\n    dp_last_mailable_date,\n    dp_last_date,\n    dp_last_positive_date,\n    dp_last_date_lm,\n    dp_last_positive_date_lm\n)\nvalues\n(\n    mg.cid,\n    mg.email,\n    mg.brand_id,\n    mg.dp_mailable,\n    mg.dp_last_mailable_date,\n    mg.dp_last_date,\n    mg.dp_last_positive_date,\n    mg.dp_last_date_lm,\n    mg.dp_last_positive_date_lm\n);\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_result',\n    'total records (with dp)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_result;\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_1;\n\n\n--insert all the records with missing/null dp\nmerge into ${Database}.temp.build_supps_names_dp_result dpbr\nusing (\n          select distinct\n              cid,\n              email,\n              source_brand_id\n          from ${Database}.temp.build_supps_prep_name_urn\n          where source_brand_id is not null\n      ) mg on mg.cid = dpbr.cid\n          and mg.email = dpbr.email\n          and mg.source_brand_id = dpbr.brand_id\nwhen not matched then insert\n(\n    cid,\n    email,\n    brand_id\n)\nvalues\n(\n    mg.cid,\n    mg.email,\n    mg.source_brand_id\n);\n\n\nmerge into ${Database}.temp.build_supps_names_dp_result dpbr\nusing (\n          select distinct\n              prep.cid,\n              prep.email,\n              xref.brand_id\n          from ${Database}.temp.build_supps_prep_name_urn prep\n          inner join ${Database}.temp.build_ref_data_controller_division_xref xref on prep.source_data_controller_id = xref.data_controller_id\n          where prep.source_brand_id is null\n      ) mg on mg.cid = dpbr.cid\n          and lower(trim(mg.email)) = lower(trim(dpbr.email))\n          and mg.brand_id = dpbr.brand_id\nwhen not matched then insert\n(\n    cid,\n    email,\n    brand_id\n)\nvalues\n(\n    mg.cid,\n    mg.email,\n    mg.brand_id\n);\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_result',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_result;\n\n\n------------------------------------------------------------\n--same again but for email address\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_email;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_email\nas\nselect distinct\n    email,\n    brand_id,\n    dp_emailable,\n    dp_emailable_lm,\n    dp_newsletter,\n    dp_last_emailable_date,\n    dp_last_positive_emailable_date,\n    dp_last_emailable_date_lm,\n    dp_last_positive_emailable_date_lm,\n    dp_last_newsletter_date\nfrom ${Database}.temp.build_supps_names_dp_roll\nwhere brand_id is not null\n    and email > ''\n    and (\n            dp_emailable is not null\n            or dp_newsletter is not null\n        );\n\ninsert into ${Database}.db.build_log\nselect 'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_result_email',\n    'total records (with brand)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_result_email;\n\n\n--work out all the possible brand opt ins unsing the xref\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_2_prep;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_2_prep\nas\nselect distinct\n    rl.email,\n    xref.brand_id,\n    rl.dp_emailable,\n    rl.dp_emailable_lm,\n    rl.dp_newsletter,\n    rl.dp_last_emailable_date,\n    rl.dp_last_positive_emailable_date,\n    rl.dp_last_emailable_date_lm,\n    rl.dp_last_positive_emailable_date_lm,\n    rl.dp_last_newsletter_date\nfrom ${Database}.temp.build_supps_names_dp_roll rl\ninner join ${Database}.temp.build_ref_data_controller_division_xref xref on rl.data_controller_id = xref.data_controller_id\nwhere rl.brand_id is null\n    and email > ''\n    and (\n            rl.dp_emailable is not null\n            or rl.dp_newsletter is not null\n        );\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_result_no_brand_2_prep',\n    'total records (no brand)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_result_no_brand_2_prep;\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_roll;\n\n\n--find the latest per brand to take care of multi permisions per brand\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_email;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_email\nas\nselect\n    email,\n    brand_id,\n    dp_emailable,\n    dp_last_emailable_date\nfrom (\n         select\n             email,\n             brand_id,\n             dp_emailable,\n             dp_last_emailable_date,\n             row_number() over\n                 (\n                     partition by email, brand_id\n                     order by\n                         case when dp_emailable is null then 0 else 1 end desc,\n                         dp_last_emailable_date desc nulls last,\n                         dp_emailable nulls last\n                 ) as row_num\n         from ${Database}.temp.build_supps_names_dp_result_no_brand_2_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_email_lm;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_email_lm\nas\nselect\n    email,\n    brand_id,\n    dp_emailable_lm,\n    dp_last_emailable_date_lm\nfrom (\n         select\n             email,\n             brand_id,\n             dp_emailable_lm,\n             dp_last_emailable_date_lm,\n             row_number() over\n                 (\n                     partition by email, brand_id\n                     order by\n                         case when dp_emailable_lm is null then 0 else 1 end desc,\n                         dp_last_emailable_date_lm desc nulls last,\n                         dp_emailable_lm nulls last\n                 ) as row_num\n         from ${Database}.temp.build_supps_names_dp_result_no_brand_2_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_email2;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_email2\nas\nselect\n    em.email,\n    em.brand_id,\n    em.dp_emailable,\n    el.dp_emailable_lm,\n    em.dp_last_emailable_date,\n    el.dp_last_emailable_date_lm\nfrom ${Database}.temp.build_supps_names_dp_result_no_brand_email em\nleft join ${Database}.temp.build_supps_names_dp_result_no_brand_email_lm el on lower(trim(el.email)) = lower(trim(em.email))\n                                                                      and el.brand_id = em.brand_id;\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_email;\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_email_lm;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_newsletter;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_newsletter\nas\nselect\n    email,\n    brand_id,\n    dp_newsletter,\n    dp_last_newsletter_date\nfrom (\n         select\n             email,\n             brand_id,\n             dp_newsletter,\n             dp_last_newsletter_date,\n             row_number() over\n                 (\n                     partition by email, brand_id\n                     order by\n                         case when dp_newsletter is null then 0 else 1 end desc,\n                         dp_last_newsletter_date desc nulls last,\n                         dp_newsletter nulls last\n                 ) as row_num\n         from ${Database}.temp.build_supps_names_dp_result_no_brand_2_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_email3;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_email3\nas\nselect\n    em.email,\n    em.brand_id,\n    em.dp_emailable,\n    em.dp_emailable_lm,\n    ne.dp_newsletter,\n    em.dp_last_emailable_date,\n    em.dp_last_emailable_date_lm,\n    ne.dp_last_newsletter_date\nfrom ${Database}.temp.build_supps_names_dp_result_no_brand_email2 em\nleft join ${Database}.temp.build_supps_names_dp_result_no_brand_newsletter ne on lower(trim(ne.email)) = lower(trim(em.email))\n                                                                        and ne.brand_id = em.brand_id;\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_email2;\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_newsletter;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_positive;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_positive\nas\nselect\n    email,\n    brand_id,\n    dp_last_positive_emailable_date\nfrom (\n         select\n             email,\n             brand_id,\n             dp_last_positive_emailable_date,\n             row_number() over\n                 (\n                     partition by email, brand_id\n                     order by\n                         case when dp_emailable is null then 0 else 1 end desc,\n                         dp_last_positive_emailable_date desc nulls last\n                 ) as row_num\n         from ${Database}.temp.build_supps_names_dp_result_no_brand_2_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_email4;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_email4\nas\nselect\n    em.email,\n    em.brand_id,\n    em.dp_emailable,\n    em.dp_emailable_lm,\n    em.dp_newsletter,\n    em.dp_last_emailable_date,\n    po.dp_last_positive_emailable_date,\n    em.dp_last_emailable_date_lm,\n    em.dp_last_newsletter_date\nfrom ${Database}.temp.build_supps_names_dp_result_no_brand_email3 em\nleft join ${Database}.temp.build_supps_names_dp_result_no_brand_positive po on lower(trim(po.email)) = lower(trim(em.email))\n                                                                      and po.brand_id = em.brand_id;\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_email3;\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_positive;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_positive_lm;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_positive_lm\nas\nselect\n    email,\n    brand_id,\n    dp_last_positive_emailable_date_lm\nfrom (\n         select\n             email,\n             brand_id,\n             dp_last_positive_emailable_date_lm,\n             row_number() over\n                 (\n                     partition by email, brand_id\n                     order by\n                         case when dp_emailable_lm is null then 0 else 1 end desc,\n                         dp_last_positive_emailable_date_lm desc nulls last\n                 ) as row_num\n         from ${Database}.temp.build_supps_names_dp_result_no_brand_2_prep\n     ) dp\nwhere row_num = 1;\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_2_prep;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_2;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_2\nas\nselect\n    em.email,\n    em.brand_id,\n    em.dp_emailable,\n    em.dp_emailable_lm,\n    em.dp_newsletter,\n    em.dp_last_emailable_date,\n    em.dp_last_positive_emailable_date,\n    em.dp_last_emailable_date_lm,\n    pl.dp_last_positive_emailable_date_lm,\n    em.dp_last_newsletter_date\nfrom ${Database}.temp.build_supps_names_dp_result_no_brand_email4 em\nleft join ${Database}.temp.build_supps_names_dp_result_no_brand_positive_lm pl on lower(trim(pl.email)) = lower(trim(em.email))\n                                                                         and pl.brand_id = em.brand_id;\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_email4;\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_positive_lm;\n\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_result_no_brand_2',\n    'total records (no brand)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_result_no_brand_2;\n\n\n--insert dp for all brands under a data controller (if no brand id specified)\nmerge into ${Database}.temp.build_supps_names_dp_result_email dpbr\nusing ${Database}.temp.build_supps_names_dp_result_no_brand_2 mg on lower(trim(mg.email)) = lower(trim(dpbr.email))\n                                                         and mg.brand_id = dpbr.brand_id --brand specific opt ins always have priority\nwhen not matched then insert\n(\n    email,\n    brand_id,\n    dp_emailable,\n    dp_emailable_lm,\n    dp_newsletter,\n    dp_last_emailable_date,\n    dp_last_positive_emailable_date,\n    dp_last_emailable_date_lm,\n    dp_last_positive_emailable_date_lm,\n    dp_last_newsletter_date\n)\nvalues\n(\n    mg.email,\n    mg.brand_id,\n    mg.dp_emailable,\n    mg.dp_emailable_lm,\n    mg.dp_newsletter,\n    mg.dp_last_emailable_date,\n    mg.dp_last_positive_emailable_date,\n    mg.dp_last_emailable_date_lm,\n    mg.dp_last_positive_emailable_date_lm,\n    mg.dp_last_newsletter_date\n);\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_result_email',\n    'total records (with dp)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_result_email;\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_2;\n\n\n/********************************************************************************************\n*                                     BAD QUALITY DATA                                        *\n*********************************************************************************************/\n\ndrop table if exists ${Database}.temp.build_supps_names_supps_quality;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_quality\nas\nselect\n    name_urn,\n    phone_home_score,\n    phone_work_score,\n    phone_mobile_score,\n    case when email = '0' or lower(email) regexp '.*[^-a-z0-9_@\\+\\\\.&].*' then -1 else email_score end as email_score,\n    case when email_score = 1 then cast(null as date) else data_date end as first_supp_email_date,\n    -- some pass paf but have completely wrong org allocated so fail them\n    -- will need more work for overseas\n    -- irish rule as well\n    case\n        when lower(address_quality) in ('paf standard (v)','paf standard (c)')\n            and paf_organisation > '' and cap_org_match = 'n'\n            and not --special case sma/hcp\n                (\n                    lower(paf_organisation) regexp '(.*)(hospital|trust|medical|pct|p c t|pharmacy|surgery|nhs|infirmary|doctors|health|chemist|nursery|sure start|surestart|practice|children|dr)(.*)'\n                    or (lower(email_domain) regexp '.*\\.ac\\..*' and lower(collate(paf_organisation,'')) regexp '(.*)(university|college)(.*)')\n                )\n            then -1\n        --special hcp rule for irish addresses\n        when lower(cc_iso) = 'ie'\n            and\n            (\n                lower(add1) regexp '(.*)(pm[0-9]|pm [0-9]|parcel motel|store it|storeit)(.*)'\n                or  lower(firstname||' '||lastname) like '%urgent%'\n                or lower(firstname||' '||lastname) like '%removed%'\n                or lower(firstname||' '||lastname) like '%customer%'\n                or add1 regexp '.*[0-9]{6}.*'\n                or add2 regexp '.*[0-9]{6}.*'\n                or add3 regexp '.*[0-9]{6}.*'\n                or add4 regexp '.*[0-9]{6}.*'\n                or add5 regexp '.*[0-9]{6}.*'\n            )\n            then -1\n        when lower(cc_iso) = 'ie' and\n            case when add1 > '' and lower(add1) <> 'eire' and lower(add1) <> 'n/a' then 1 else 0 end +\n            case when add2 > '' and lower(add2) <> 'eire' and lower(add2) <> 'n/a' then 1 else 0 end +\n            case when add3 > '' and lower(add3) <> 'eire' and lower(add3) <> 'n/a' then 1 else 0 end +\n            case when add4 > '' and lower(add4) <> 'eire' and lower(add4) <> 'n/a' then 1 else 0 end +\n            case when city > '' and lower(city) <> 'eire' and lower(city) <> 'n/a' then 1 else 0 end +\n            case when state > '' and lower(state) <> 'eire' and lower(state) <> 'n/a' then 1 else 0 end > 2\n            then 1\n        -- temp fix for dates in addresses passing address clean\n        when\n            lower(add1||add2) regexp '.*-jan.*' or lower(add1||add2) regexp '.*-feb.*' or lower(add1||add2) regexp '.*-mar.*' or lower(add1||add2) regexp '.*-apr.*' or\n            lower(add1||add2) regexp '.*-may.*' or lower(add1||add2) regexp '.*-jun.*' or lower(add1||add2) regexp '.*-jul.*' or lower(add1||add2) regexp '.*-aug.*' or\n            lower(add1||add2) regexp '.*-sep.*' or lower(add1||add2) regexp '.*-oct.*' or lower(add1||add2) regexp '.*-nov.*' or lower(add1||add2) regexp '.*-dec.*'\n            then -1\n        else address_score\n    end as address_score,\n    -- get rid of test records\n    case when firstname regexp '.*@.*' then -1 else name_score end as name_score\nfrom ${Database}.temp.ram_names;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_quality',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_quality;\n\n/******************************************************************************************\n*                                     MANUAL SUPPRESSION\n******************************************************************************************/\n\n\n-- email - any person whose email address is on the manual file should be suppressed for ever\ndrop table if exists ${Database}.temp.build_supps_names_supps_manual_email;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_manual_email\nas\nselect\n    lower(rn.email) as email,\n    1 as manual_channel_email,\n    min(sm.data_date) as first_supp_manual_date\nfrom ${Database}.temp.ram_names rn\ninner join ${Database}.db.supps_manual sm on split_part(rn.name_urn,'-',-1) = cast(sm.supp_urn as varchar)\nwhere rn.email > ''\n    and rn.email_score = 1\n    and lower(rn.source) = 'manual'\n    and manual_channel_email = 1\ngroup by lower(rn.email);\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_manual_email',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_manual_email;\n\n-- phone number matches\n-- phone and mobile number and person whos home or mobile number appears on the manual file should be suppressed\ndrop table if exists ${Database}.temp.build_supps_names_supps_manual_phone_temp;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_manual_phone_temp\nas\nselect\n    rn.phone_home as phone,\n    1 as manual_channel_phone\nfrom     ${Database}.temp.ram_names rn\ninner join ${Database}.db.supps_manual sm on split_part(rn.name_urn,'-',-1) = cast(sm.supp_urn as varchar)\nwhere rn.phone_home > ''\n    and rn.phone_home_score = 1\n    and lower(rn.source) = 'manual'\n    and manual_channel_phone = 1\ngroup by rn.phone_home;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_manual_phone_temp',\n    'total records (home)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_manual_phone_temp;\n\ninsert into ${Database}.temp.build_supps_names_supps_manual_phone_temp\nselect rn.phone_mobile as phone,\n    1 as manual_channel_phone\nfrom ${Database}.temp.ram_names rn\ninner join ${Database}.db.supps_manual sm on split_part(rn.name_urn,'-',-1) = cast(sm.supp_urn as varchar)\nwhere rn.phone_mobile > ''\n    and rn.phone_mobile_score = 1\n    and lower(rn.source) = 'manual'\n    and manual_channel_phone = 1\ngroup by rn.phone_mobile;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_manual_phone_temp',\n    'total records (home and mobile)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_manual_phone_temp;\n\ninsert into ${Database}.temp.build_supps_names_supps_manual_phone_temp\nselect rn.phone_work as phone,\n    1 as manual_channel_phone\nfrom ${Database}.temp.ram_names rn\ninner join ${Database}.db.supps_manual sm on split_part(rn.name_urn,'-',-1)  = cast(sm.supp_urn as varchar)\nwhere rn.phone_work > ''\n    and rn.phone_work_score = 1\n    and lower(rn.source) = 'manual'\n    and manual_channel_phone = 1\ngroup by rn.phone_work;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_manual_phone_temp',\n    'total records (home and mobile and work)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_manual_phone_temp;\n\n-- create distinct list of valid numbers to screen against database\ndrop table if exists ${Database}.temp.build_supps_names_supps_manual_phone;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_manual_phone\nas\nselect phone,\n    max(manual_channel_phone) as manual_channel_phone\nfrom ${Database}.temp.build_supps_names_supps_manual_phone_temp\ngroup by phone;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_manual_phone',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_manual_phone;\n\n--drop table if exists ${Database}.temp.build_supps_names_supps_manual_phone_temp;\n\n\n-- address matches\ndrop table if exists ${Database}.temp.build_supps_names_supps_manual_hh_id;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_manual_hh_id\nas\nselect\n    coalesce(rn.hh_id,rn.bbw_urn) as hid,\n    1 as manual_channel_mail\nfrom ${Database}.temp.ram_names rn\ninner join ${Database}.db.supps_manual sm on split_part(rn.name_urn,'-',-1)  = cast(sm.supp_urn as varchar)\nwhere lower(rn.source) = 'manual'\n    and manual_channel_mail = 1\ngroup by coalesce(rn.hh_id,rn.bbw_urn);\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_manual_hh_id',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_manual_hh_id;\n\n\n/******************************************************************************************\n                                     UNSUBSCRIBE SUPPRESSION\n******************************************************************************************/\n\n-- Attribute campaigns to unsubscribes\nmerge into ${Database}.db.supps_unsubscribe su\nusing (\n          select\n              su.supp_urn,\n              ae.campaign_name,\n              ae.event_name,\n              ae.event_timestamp,\n              row_number() over\n                  (\n                      partition by su.supp_urn\n                      order by\n                          case when lower(ae.link_url) regexp '.*unsub.*' then 1 else 0 end desc,\n                          ae.event_timestamp desc\n                  ) as rn\n          from ${Database}.db.supps_unsubscribe su\n          inner join ${Database}.db.adestra_events ae on lower(trim(ae.email)) = lower(trim(su.email))\n                                                and cast(ae.event_timestamp as date) >= (su.data_date - 7)\n                                                and cast(ae.event_timestamp as date) <= su.data_date\n          where trim(su.source) in ('SUPP_PRAG_1|nestlecouk','SUPP_PRAG_1|purina','SUPP_PRAG_1|Purina','SUPP_PRAG_1|Purina.')\n              and su.data_date >= (current_date - 5)\n              and su.unsub_campaign = ''\n              and lower(ae.event_name) regexp '(.*)(click|read)(.*)'\n      ) ae on ae.supp_urn = su.supp_urn\n          and ae.rn = 1\nwhen matched then update\nset su.unsub_campaign = ae.campaign_name,\n    su.unsub_event = ae.event_name,\n    su.unsub_timestamp = ae.event_timestamp;\n\n\nmerge into ${Database}.db.supps_unsubscribe su\nusing (\n          select\n              su.supp_urn,\n              ae.campaign_name,\n              ae.event_name,\n              ae.event_timestamp,\n              row_number() over\n                  (\n                      partition by su.supp_urn\n                      order by\n                          case when lower(ae.link_url) regexp '.*unsub.*' then 1 else 0 end desc,\n                          ae.event_timestamp desc\n                  ) as rn\n          from ${Database}.db.supps_unsubscribe su\n          inner join ${Database}.db.adestra_events_sma ae on lower(trim(ae.email)) = lower(trim(su.email))\n                                                         and cast(ae.event_timestamp as date) >= (su.data_date - 7)\n                                                         and cast(ae.event_timestamp as date) <= su.data_date\n          where trim(su.source) = 'SUPP_PRAG_1|sma'\n              and su.data_date >= (current_date - 5)\n              and su.unsub_campaign = ''\n              and lower(ae.event_name) regexp '(.*)(click|read)(.*)'\n      ) ae on ae.supp_urn = su.supp_urn\n          and ae.rn = 1\nwhen matched then update\nset su.unsub_campaign = ae.campaign_name,\n    su.unsub_event = ae.event_name,\n    su.unsub_timestamp = ae.event_timestamp;\n\n\n--  email - any person whose email address is on the unsubscribe file should be suppressed by brand\ndrop table if exists ${Database}.temp.build_supps_names_supps_unsubscribe_email;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_unsubscribe_email\nas\nselect\n    rn.email,\n    su.brand_id,\n    max(su.data_date) as unsubscribe_channel_email_date,\n    min(su.data_date) as first_supp_unsub_date\nfrom ${Database}.live.xref_name_urn rn\ninner join ${Database}.db.supps_unsubscribe su on split_part(rn.name_urn,'-',-1)  = cast(su.supp_urn as varchar)\nwhere rn.email > ''\n    and lower(rn.source) = 'unsub'\n    and su.unsubscribe_channel_email = 1\ngroup by\n    rn.email,\n    su.brand_id;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_unsubscribe_email',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_unsubscribe_email;\n\n--add the unsubs for every brand for the dc's for ease of joining later...\ndrop table if exists ${Database}.temp.build_supps_names_supps_unsubscribe_email_brand;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_unsubscribe_email_brand\nas\nselect\n    email,\n    brand_id,\n    unsubscribe_channel_email_date,\n    first_supp_unsub_date\nfrom ${Database}.temp.build_supps_names_supps_unsubscribe_email\nwhere brand_id is not null; --if they have a brand then they mean to be opted out of this brand\n\ninsert into ${Database}.temp.build_supps_names_supps_unsubscribe_email_brand\n    select\n        su.email,\n        br.brand_id,\n        su.unsubscribe_channel_email_date,\n        su.first_supp_unsub_date\n    from ${Database}.temp.build_supps_names_supps_unsubscribe_email su\n    --inner join ${Database}.temp.build_ref_data_controller_division_xref xref on su.data_controller_id = xref.data_controller_id\n    cross join ${Database}.db.ref_brand br\n    where su.brand_id is null --if they have no brand then we exclude them from everything\nand su.email||'|'||to_char(br.brand_id) not in--brand specific opt outs have priority\n(\nselect email||'|'||to_char(brand_id)\nfrom ${Database}.temp.build_supps_names_supps_unsubscribe_email_brand\n)\n;\n    \ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_unsubscribe_email_brand',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_unsubscribe_email_brand;\n\n--drop table if exists ${Database}.temp.build_supps_names_supps_unsubscribe_email;\n\n\n--  region address matches\ndrop table if exists ${Database}.temp.build_supps_names_supps_unsubscribe_c_id;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_unsubscribe_c_id\nas\nselect\n    rn.cid as cid,\n    su.brand_id,\n    max(su.data_date) as unsubscribe_channel_mail_date\nfrom ${Database}.live.xref_name_urn rn\ninner join ${Database}.db.supps_unsubscribe su on split_part(rn.name_urn,'-',-1)  = cast(su.supp_urn as varchar)\nwhere lower(rn.source) = 'unsub'\n    and unsubscribe_channel_mail = 1\ngroup by\n    rn.cid,\n    su.brand_id;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_unsubscribe_c_id',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_unsubscribe_c_id;\n\n--add the unsubs for every brand for the dc's for ease of joining later...\ndrop table if exists ${Database}.temp.build_supps_names_supps_unsubscribe_cid_brand;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_unsubscribe_cid_brand\nas\nselect\n    cid,\n    brand_id,\n    unsubscribe_channel_mail_date\nfrom ${Database}.temp.build_supps_names_supps_unsubscribe_c_id\nwhere brand_id is not null; --if they have a brand then they mean to be opted out of this brand\n\ninsert into ${Database}.temp.build_supps_names_supps_unsubscribe_cid_brand\n    select\n        su.cid,\n        br.brand_id,\n        su.unsubscribe_channel_mail_date\n    from ${Database}.temp.build_supps_names_supps_unsubscribe_c_id su\n    --inner join ${Database}.temp.build_ref_data_controller_division_xref xref on su.data_controller_id = xref.data_controller_id\n    cross join ${Database}.db.ref_brand br\n    where su.brand_id is null --if they have no brand then we exclude them from everything\nand to_char(su.cid)||'|'||to_char(br.brand_id) not in\n    (\n    select\n        to_char(cid)||'|'||to_char(brand_id)\n    from ${Database}.temp.build_supps_names_supps_unsubscribe_cid_brand\n    )\n    ;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_unsubscribe_cid_brand',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_unsubscribe_cid_brand;\n\n--drop table if exists ${Database}.temp.build_supps_names_supps_unsubscribe_c_id;\n--drop table if exists ${Database}.temp.build_ref_data_controller_division_xref;\n\n\n/******************************************************************************************\n*                                      DEAD SUPPRESSION\n******************************************************************************************/\n\n-- dead supressions\ndrop table if exists ${Database}.temp.build_supps_names_supps_dead_cid;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_dead_cid\nas\nselect\n    cid    as cid,\n    1       as dead_cid,\n    min(data_date) as first_supp_dead_date\nfrom ${Database}.live.xref_name_urn\nwhere lower(source) = 'dead'\ngroup by cid;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_dead_cid',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_dead_cid;\n\n/******************************************************************************************\n*                                    GONEAWAY SUPPRESSION\n******************************************************************************************/\n\n-- goneaway supressions\ndrop table if exists ${Database}.temp.build_supps_names_supps_goneaway_cid;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_goneaway_cid\nas\nselect\n    cid,\n    hid,\n    1                       as gone_cid\nfrom ${Database}.live.xref_name_urn\nwhere lower(source) = 'gone'\ngroup by cid, hid;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_goneaway_cid',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_goneaway_cid;\n\n/******************************************************************************************\n                                         CHILDREN\n******************************************************************************************/\n\ndrop table if exists ${Database}.temp.build_supps_names_supps_child;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_child\nas\nselect\n    c_id as cid,\n    1    as child_cid,\n    min(data_date) as first_supp_child_date\nfrom ${Database}.temp.ram_names\nwhere\n    (\n        dob between dateadd(year,-16,current_date) and current_date\n        or lower(title) in ('master','mstr','mast')\n    )\n    and dob <> '2001-01-01' --some default date for some reason\ngroup by c_id;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_child',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_child;\n\n\n/******************************************************************************************\n                                       EMAIL BOUNCE\n******************************************************************************************/\n\n\n-- email bounces\ndrop table if exists ${Database}.temp.build_supps_names_supps_bounce_email;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_bounce_email\nas\nselect\n    lower(trim(email)) as email,\n    max(case when trim(bounce_type) in ('known_bounce','suppressed_global') then 1 else 0 end) as bounce_email,\n    max(case when trim(bounce_type) not in ('known_bounce','suppressed_global') then 1 else 0 end) as old_bounce_email,\n    max(data_date) as bounce_date,\n    min(data_date) as first_supp_bounce_date\nfrom ${Database}.db.supps_bounce\nwhere trim(email) > ''\ngroup by lower(trim(email));\n\n\n--flame needs 3 x flames in last 2 months\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_adestra_events_supps_roll\nas\nselect\n    lower(trim(email)) as email,\n    max(event_timestamp) as flame_date,\n    count(*) as num_flame\nfrom ${Database}.db.adestra_events\nwhere trim(event_name) = 'inbound_flame'\n    and event_timestamp >= add_months(current_date, -2)\ngroup by 1;\n\ninsert into ${Database}.temp.build_supps_names_supps_bounce_email\nselect distinct\n    email,\n    1 as bounce_email,\n    0 as old_bounce_email,\n    flame_date as bounce_date,\n    flame_date as first_supp_bounce_date\nfrom ${Database}.temp.build_adestra_events_supps_roll\nwhere num_flame > 2\n    and email not in (select email from ${Database}.temp.build_supps_names_supps_bounce_email);\n\n--drop table if exists ${Database}.temp.build_adestra_events_supps_roll;\n\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_bounce_email',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_bounce_email;\n\n\n/******************************************************************************************\n                                       OFFSHORE\n******************************************************************************************/\n\n-- offshore\ndrop table if exists ${Database}.temp.build_supps_offshore;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_offshore\nas\nselect\n    distinct coalesce(hh_id,bbw_urn) as hid,\n    1                                as offshore\nfrom ${Database}.temp.ram_names\nwhere lower(postcode) like 'je%'\n    or lower(postcode) like 'gy%'\n    or lower(postcode) like 'im%';\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_offshore',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_offshore;\n\n\n/******************************************************************************************\n                                       Business\n******************************************************************************************/\n\n--not currently required\n\n\n/******************************************************************************************\n                                       BabyMPS\n******************************************************************************************/\n\n--not currently required\n\n\n/******************************************************************************************\n                                     DATA RETENTION\n******************************************************************************************/\n\n-- NOTE TO BE REMOVED: This has moved up to be available for use with the email engagement section. Moved the other ref tables from rollups too.\n\n------------------------------------------------------------\n-- REF TABLES\n\n--build new xref for business units\ndrop table if exists ${Database}.temp.build_ref_data_controller_bus_unit_xref;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_ref_data_controller_bus_unit_xref\nas\nselect\n    case\n        when di.business_unit_id is not null then di.business_unit_id\n        else br.brand_id + (select max(data_controller_id) from ${Database}.db.ref_data_controller) --insert the missing ones with fake bu's\n    end as business_unit_id,\n    di.division_id,\n    br.brand_id\nfrom ${Database}.db.ref_brand br\ninner join ${Database}.db.ref_division di on di.division_id = br.division_id;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_ref_data_controller_bus_unit_xref',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_ref_data_controller_bus_unit_xref;\n\n\ndrop table if exists ${Database}.live.ref_brand;\n\nCREATE OR REPLACE TABLE ${Database}.live.ref_brand\nas\nselect\n    br.brand_id,\n    trim(br.brand) as brand,\n    trim(br.brand_pet_type) as brand_pet_type,\n    di.division_id,\n    trim(di.division) as division\nfrom ${Database}.db.ref_brand br\ninner join ${Database}.db.ref_division di on di.division_id = br.division_id;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.live.ref_brand',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.ref_brand;\n\n\ndrop table if exists ${Database}.live.ref_division;\n\nCREATE OR REPLACE TABLE ${Database}.live.ref_division\nas\nselect\n    division_id,\n    trim(division) as division\nfrom ${Database}.db.ref_division;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.live.ref_division',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.ref_division;\n\n\ndrop table if exists ${Database}.live.ref_data_controller;\n\nCREATE OR REPLACE TABLE ${Database}.live.ref_data_controller\nas\nselect\n    data_controller_id,\n    trim(data_controller) as data_controller,\n    trim(nestle_country) as nestle_country\nfrom ${Database}.db.ref_data_controller;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.live.ref_data_controller',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.ref_data_controller;\n\n\ndrop table if exists ${Database}.live.ref_business_unit;\n\nCREATE OR REPLACE TABLE ${Database}.live.ref_business_unit\nas\nselect distinct\n    xref.business_unit_id,\n    case when dc.data_controller_id is null then br.brand else dc.data_controller end as business_unit\nfrom ${Database}.temp.build_ref_data_controller_bus_unit_xref xref\nleft join ${Database}.live.ref_data_controller dc on dc.data_controller_id = xref.business_unit_id\ninner join ${Database}.live.ref_brand br on br.brand_id = xref.brand_id;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.live.ref_business_unit',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.ref_business_unit;\n\n\ndrop table if exists ${Database}.live.ref_business_unit_brand;\n\nCREATE OR REPLACE TABLE ${Database}.live.ref_business_unit_brand\nas\nselect\n    bu.business_unit_id,\n    bu.business_unit,\n    br.brand_id,\n    br.brand\nfrom ${Database}.temp.build_ref_data_controller_bus_unit_xref xref\ninner join ${Database}.live.ref_business_unit bu on bu.business_unit_id = xref.business_unit_id\ninner join ${Database}.live.ref_brand br on br.brand_id = xref.brand_id;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.live.ref_business_unit_brand',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.ref_business_unit_brand;\n\n\nalter warehouse set warehouse_size = 'Xlarge';\n\n------------------------------------------------------------\n-- EMAIL ENGAGEMENT\n\ndrop table if exists ${Database}.temp.build_supps_email_engagement;\n\n-- Nestle Adestra\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_email_engagement\nas\nselect\n    lower(trim(ae.email)) as email,\n    case\n        when bu.business_unit_id is not null then bu.business_unit_id\n        when chl.data_controller_id is not null then chl.data_controller_id\n        when lower(trim(ae.campaign_name)) regexp '^npp.*' then (select business_unit_id from ${Database}.live.ref_business_unit where trim(business_unit) like 'Nestl_ Purina Petcare (UK) Ltd')\n        else (select business_unit_id from ${Database}.live.ref_business_unit where trim(business_unit) like 'Nestl_ UK Ltd')\n    end as business_unit_id,\n    max(cast(ae.event_timestamp as date)) as last_open_date,\n    max(case when ae.source_date < date_trunc('MONTH', current_date-1) then cast(ae.event_timestamp as date) else cast(null as date) end) as last_open_date_lm,\n    max(case\n            when lower(ae.event_name) regexp '(.*)(open|read)(.*)' and cast(ae.event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            else cast(ae.event_timestamp as date)\n        end) as last_open_date_ios15,\n    max(case\n            when lower(ae.event_name) regexp '(.*)(open|read)(.*)' and cast(ae.event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            when ae.source_date < date_trunc('MONTH', current_date-1) then cast(ae.event_timestamp as date)\n            else cast(null as date)\n        end) as last_open_date_ios15_lm\nfrom ${Database}.db.adestra_events ae\nleft join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(ae.campaign_name) = lower(xr.adestra_campaign_name)\nleft join ${Database}.db.comms_hist_lookup chl on lower(chl.campaign_id) = lower(xr.ch_campaign_id)\n                                          or lower(chl.campaign_id) = lower(case when trim(ae.campaign_name) ilike '%_MTE_%' then split_part(trim(ae.campaign_name),'_',3) else split_part(trim(ae.campaign_name),'_',1) end)\nleft join ${Database}.live.ref_business_unit_brand bu on bu.brand_id = chl.brand_id\nwhere lower(trim(ae.event_name)) regexp '(.*)(click|open|read|shared|submit)(.*)'\n    and lower(trim(ae.link_url)) not regexp '.*unsub.*'\n    and lower(trim(ae.email)) > ''\ngroup by 1,2;\n\nalter warehouse set warehouse_size = 'Large';\n\n-- Nestle Mapp\ninsert into ${Database}.temp.build_supps_email_engagement\nselect\n    lower(trim(mp.user_email)) as email,\n    case\n        when bu.business_unit_id is not null then bu.business_unit_id\n        when chl.data_controller_id is not null then chl.data_controller_id\n        when lower(trim(mp.message_name)) regexp '^npp.*' then (select business_unit_id from ${Database}.live.ref_business_unit where trim(business_unit) like 'Nestl_ Purina Petcare (UK) Ltd')\n        else (select business_unit_id from ${Database}.live.ref_business_unit where trim(business_unit) like 'Nestl_ UK Ltd')\n    end as business_unit_id,\n    max(mp.record_timestamp) as last_open_date,\n    max(case when mp.source_date < date_trunc('MONTH', dateadd(day,-1,current_date())) then cast(mp.record_timestamp as date) else cast(null as date) end) as last_open_date_lm,\n    max(case\n            when lower(mp.record_type) regexp '.*render.*' and cast(mp.record_timestamp as date) >= '2021-09-20' then cast(null as date)\n            else cast(mp.record_timestamp as date)\n        end) as last_open_date_ios15,\n    max(case\n            when lower(mp.record_type) regexp '.*render.*' and cast(mp.record_timestamp as date) >= '2021-09-20' then cast(null as date)\n            when mp.source_date < date_trunc('MONTH', dateadd(day,-1,current_date())) then cast(mp.record_timestamp as date)\n            else cast(null as date)\n        end) as last_open_date_ios15_lm\nfrom ${Database}.db.mapp_events mp\nleft join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(trim(mp.message_name)) = lower(trim(xr.mapp_message_name))\nleft join ${Database}.db.comms_hist_lookup chl on lower(trim(chl.campaign_id)) = lower(trim(xr.ch_campaign_id))\n                                          or lower(trim(chl.campaign_id)) = lower(case when trim(mp.message_name) ilike '%_MTE_%' then split_part(trim(mp.message_name),'_',3) else split_part(trim(mp.message_name),'_',1) end)\nleft join ${Database}.live.ref_business_unit_brand bu on bu.brand_id = chl.brand_id\nwhere lower(trim(mp.record_type)) regexp '.*click.*|.*render.*'\n    and lower(trim(mp.click_link_url)) not regexp '.*unsub.*'\n    and lower(trim(mp.user_email)) > ''\ngroup by 1,2;\n\n\n\n-- SMA Adestra\ninsert into ${Database}.temp.build_supps_email_engagement\nselect\n    lower(trim(email)) as email,\n    (select business_unit_id from ${Database}.live.ref_business_unit where lower(trim(business_unit)) = 'sma') as business_unit_id,\n    max(cast(event_timestamp as date)) as last_open_date,\n    max(case when source_date < date_trunc('MONTH', current_date-1) then cast(event_timestamp as date) else cast(null as date) end) as last_open_date_lm,\n    max(case\n            when lower(event_name) regexp '(.*)(open|read)(.*)' and cast(event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            else cast(event_timestamp as date)\n        end) as last_open_date_ios15,\n    max(case\n            when lower(event_name) regexp '(.*)(open|read)(.*)' and cast(event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            when source_date < date_trunc('MONTH', current_date-1) then cast(event_timestamp as date)\n            else cast(null as date)\n        end) as last_open_date_ios15_lm\nfrom ${Database}.db.adestra_events_sma\nwhere lower(event_name) regexp '(.*)(click|open|read|shared|submit)(.*)'\n    and lower(trim(link_url)) not regexp '.*unsub.*'\n    and lower(trim(email)) > ''\n    and lower(trim(workspace_name)) not regexp '.*cerelac.*'\ngroup by 1,2;\n\n\n-- Cerelac Adestra\ninsert into ${Database}.temp.build_supps_email_engagement\nselect\n    lower(trim(email)) as email,\n    (select business_unit_id from ${Database}.live.ref_business_unit where lower(trim(business_unit)) = 'cerelac') as business_unit_id,\n    max(cast(event_timestamp as date)) as last_open_date,\n    max(case when source_date < date_trunc('MONTH', current_date-1) then cast(event_timestamp as date) else cast(null as date) end) as last_open_date_lm,\n    max(case\n            when lower(event_name) regexp '(.*)(open|read)(.*)' and cast(event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            else cast(event_timestamp as date)\n        end) as last_open_date_ios15,\n    max(case\n            when lower(event_name) regexp '(.*)(open|read)(.*)' and cast(event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            when source_date < date_trunc('MONTH', current_date-1) then cast(event_timestamp as date)\n            else cast(null as date)\n        end) as last_open_date_ios15_lm\nfrom ${Database}.db.adestra_events_sma\nwhere lower(event_name) regexp '(.*)(click|open|read|shared|submit)(.*)'\n    and lower(trim(link_url)) not regexp '.*unsub.*'\n    and lower(trim(email)) > ''\n    and lower(trim(workspace_name)) regexp '.*cerelac.*'\ngroup by 1,2;\n\n\n\n-- HCP Adestra\ninsert into ${Database}.temp.build_supps_email_engagement\nselect\n    lower(trim(email)) as email,\n    (select business_unit_id from ${Database}.live.ref_business_unit where lower(trim(business_unit)) = 'hcp') as business_unit_id,\n    max(cast(event_timestamp as date)) as last_open_date,\n    max(case when source_date < date_trunc('MONTH', current_date-1) then cast(event_timestamp as date) else cast(null as date) end) as last_open_date_lm,\n    max(case\n            when lower(event_name) regexp '(.*)(open|read)(.*)' and cast(event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            else cast(event_timestamp as date)\n        end) as last_open_date_ios15,\n    max(case\n            when lower(event_name) regexp '(.*)(open|read)(.*)' and cast(event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            when source_date < date_trunc('MONTH', current_date-1) then cast(event_timestamp as date)\n            else cast(null as date)\n        end) as last_open_date_ios15_lm\nfrom ${Database}.db.adestra_events_hcp\nwhere lower(trim(event_name)) regexp '(.*)(click|open|read|shared|submit)(.*)'\n    and lower(trim(link_url)) not regexp '.*unsub.*'\n    and lower(trim(email)) > ''\ngroup by 1,2;\n\n\n\n------------------------------------------------------------\n-- ACCOUNT ENGAGEMENT\n\ndrop table if exists ${Database}.temp.build_dp_2_prep;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_dp_2_prep\nas\nselect\n    nmt.cid,\n    nmt.hid,\n    nmt.name_urn,\n    nmt.email,\n    dp.data_controller_id, --dc for opt ins\n    dp.brand_id, --brand is for opt in brand rather than source\n    dp.dp_date,\n    dp.dp_mailable,\n    dp.dp_emailable,\n    dp.dp_phoneable,\n    dp.dp_smsable,\n    dp.dp_newsletter,\n    dp.source_date,\n    dp.data_date,\n    date_trunc('MONTH', dateadd(day,-1,current_date())) as month_start_dt\nfrom ${Database}.temp.build_supps_prep_name_urn nmt\ninner join ${Database}.db.names_dp dp on nmt.name_urn = trim(dp.name_urn)\nwhere --must have at least 1 permission\n    dp.dp_mailable is not null\n    or dp.dp_emailable is not null\n    or dp.dp_phoneable is not null\n    or dp.dp_smsable is not null\n    or dp.dp_newsletter is not null;\n\n\ndrop table if exists ${Database}.temp.build_supps_last_login;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_last_login\nas\nselect\n    xr.cid,\n    case\n        when bu.business_unit_id is not null then bu.business_unit_id\n        else wh.data_controller_id\n    end as business_unit_id,\n    max(cast(wh.browser_date as date)) as last_login_date,\n    max(case when wh.source_date < date_trunc('MONTH', current_date-1) then cast(wh.browser_date as date) else cast(null as date) end) as last_login_date_lm\nfrom ${Database}.db.web_browser_hist wh\ninner join ${Database}.live.xref_name_urn xr on xr.name_urn = trim(wh.name_urn)\ninner join ${Database}.live.ref_business_unit_brand bu on bu.brand_id = wh.brand_id\nleft join ${Database}.temp.build_dp_2_prep dp on dp.name_urn = wh.name_urn\n                                      and dp.data_controller_id = wh.data_controller_id\n                                      and dp.dp_date = cast(wh.browser_date as date)\n                                      and dp.dp_mailable = 0\n                                      and dp.dp_emailable = 0\nwhere dp.name_urn is null\n    and trim(wh.source) <> 'REG_GIG_Initial_Load'\ngroup by 1,2;\n\n--drop table if exists ${Database}.temp.build_dp_2_prep;\n\ndrop table if exists ${Database}.temp.build_supps_first_reg;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_first_reg\nas\nselect\n    xr.cid,\n    case\n        when bu.business_unit_id is not null then bu.business_unit_id\n        else nm.source_data_controller_id\n    end as business_unit_id,\n    min(nm.reg_date) as first_reg_date,\n    min(case when nm.source_date < date_trunc('MONTH', current_date-1) then nm.reg_date else cast(null as date) end) as first_reg_date_lm\nfrom ${Database}.db.names nm\ninner join ${Database}.live.xref_name_urn xr on xr.name_urn = trim(nm.name_urn)\ninner join ${Database}.live.ref_business_unit_brand bu on bu.brand_id = nm.source_brand_id\ngroup by 1,2;\n\n\n\n/******************************************************************************************\n*                                      Final Suppressions Tables\n******************************************************************************************/\n\n-- preserve names supps\ndrop table if exists ${Database}.live.names_supps;\n\nCREATE OR REPLACE TABLE ${Database}.live.names_supps\nas\nselect\n    pr.name_urn,\n    pr.cid,\n    --        data quality flags - if the record has a bad record then flag them as a suppression\n    coalesce(case when sso.address_score      = 1 then 0 else 1 end,1) as supp_bad_address,\n    coalesce(case when sso.name_score         = 1 then 0 else 1 end,1) as supp_bad_name,\n    coalesce(case when sso.phone_home_score   = 1 then 0 else 1 end,1) as supp_bad_phone_home,\n    coalesce(case when sso.phone_mobile_score = 1 then 0 else 1 end,1) as supp_bad_phone_mobile,\n    coalesce(case when sso.phone_work_score   = 1 then 0 else 1 end,1) as supp_bad_phone_work,\n    coalesce(case when sso.email_score        = 1 then 0 else 1 end,1) as supp_bad_email,\n    --        manual suppressions - if the household, phone number or email appears in the manual supps file then flag as a suppression\n    coalesce(smsg.manual_channel_mail,0)        as supp_manual_channel_mail,\n    coalesce(sme.manual_channel_email,0)        as supp_manual_channel_email,\n    greatest\n    (\n        coalesce(smpsg.manual_channel_phone,0),\n        coalesce(smpsue.manual_channel_phone,0),\n        coalesce(smpw.manual_channel_phone,0)\n    )                                           as supp_manual_channel_phone,\n    --        deads and goneaways from suppression matching above\n    coalesce(sd.dead_cid,0)                     as supp_dead,\n    coalesce(sg.gone_cid,0)                     as supp_goneaway,\n    coalesce(sc.child_cid,0)                    as supp_child,\n    --        email bounces\n    case\n        when sb.bounce_email = 1 then 1\n        when sb.old_bounce_email = 1 and pr.data_date <= sb.bounce_date then 1\n        else 0\n    end                                         as supp_bounce,\n    coalesce(so.offshore      ,0)               as supp_offshore,\n    sso.first_supp_email_date,\n    sme.first_supp_manual_date,\n    sb.first_supp_bounce_date,\n    sd.first_supp_dead_date,\n    sc.first_supp_child_date,\n    pr.add1,\n    pr.email,\n    pr.phone_home,\n    pr.phone_mobile,\n    pr.phone_work\nfrom ${Database}.temp.build_supps_prep_name_urn pr\nleft join ${Database}.temp.build_supps_names_supps_quality            sso    on pr.name_urn     = sso.name_urn\nleft join ${Database}.temp.build_supps_names_supps_manual_hh_id       smsg   on pr.hid          = smsg.hid\nleft join ${Database}.temp.build_supps_names_supps_manual_email       sme    on lower(trim(pr.email))        = lower(trim(sme.email))\nleft join ${Database}.temp.build_supps_names_supps_manual_phone       smpsg  on pr.phone_home   = smpsg.phone\nleft join ${Database}.temp.build_supps_names_supps_manual_phone       smpsue on pr.phone_mobile = smpsue.phone\nleft join ${Database}.temp.build_supps_names_supps_manual_phone       smpw   on pr.phone_work   = smpw.phone\nleft join ${Database}.temp.build_supps_names_supps_goneaway_cid       sg     on pr.cid          = sg.cid        and pr.hid = sg.hid\nleft join ${Database}.temp.build_supps_names_supps_dead_cid           sd     on pr.cid          = sd.cid\nleft join ${Database}.temp.build_supps_names_supps_child              sc     on pr.cid          = sc.cid\nleft join ${Database}.temp.build_supps_names_supps_bounce_email       sb     on lower(trim(pr.email))        = lower(trim(sb.email))\nleft join ${Database}.temp.build_supps_offshore                       so     on pr.hid          = so.hid;\n\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.live.names_supps',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.names_supps;\n\n-- tidy a bit\n--drop table if exists ${Database}.temp.build_supps_offshore;\n--drop table if exists ${Database}.temp.build_supps_names_supps_quality;\n--drop table if exists ${Database}.temp.build_supps_names_supps_manual_phone;\n--drop table if exists ${Database}.temp.build_supps_names_supps_manual_hh_id;\n--drop table if exists ${Database}.temp.build_supps_names_supps_manual_email;\n--drop table if exists ${Database}.temp.build_supps_names_supps_goneaway_cid;\n--drop table if exists ${Database}.temp.build_supps_names_supps_dead_cid;\n--drop table if exists ${Database}.temp.build_supps_names_supps_child;\n--drop table if exists ${Database}.temp.build_supps_names_supps_bounce_email;\n--drop table if exists ${Database}.temp.build_supps_prep_name_urn;\n\n\ndrop table if exists ${Database}.temp.build_supps_email;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_email\nas\nselect\n    email,\n    max(supp_bad_email) as supp_bad_email,\n    max(supp_manual_channel_email) as supp_manual_channel_email,\n    max(supp_bounce) as supp_bounce,\n    min(first_supp_email_date) as first_supp_email_date,\n    min(first_supp_manual_date) as first_supp_manual_date,\n    min(first_supp_bounce_date) as first_supp_bounce_date\nfrom ${Database}.live.names_supps\nwhere email > ''\ngroup by email;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_email',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_email;\n\n\ndrop table if exists ${Database}.temp.build_supps_cid;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_cid\nas\nselect\n    cid,\n    max(supp_dead) as supp_dead,\n    max(supp_child) as supp_child,\n    min(first_supp_dead_date) as first_supp_dead_date,\n    min(first_supp_child_date) as first_supp_child_date\nfrom ${Database}.live.names_supps\ngroup by cid;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_cid',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_cid;\n\n\n\n-----------------------------------------------------------\n\n-- create contact flags table\ndrop table if exists ${Database}.temp.build_names_contact_flags;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_names_contact_flags\nas\nselect\n    name_urn,\n    cid,\n    case\n        when\n            supp_bad_address                         = 0 and\n            supp_manual_channel_mail                 = 0 and\n            supp_goneaway                            = 0 and\n            supp_dead                                = 0 and\n            supp_child                               = 0 and\n            add1                                     > ''\n        then 1\n        else 0\n    end as mailable_ignoring_dp,\n    case\n        when\n            supp_manual_channel_mail                 = 0 and\n            supp_goneaway                            = 0 and\n            supp_dead                                = 0 and\n            supp_child                               = 0\n        then 1\n        else 0\n    end as mailable_ignoring_dp_address,\n    case\n        when\n            supp_bad_email                           = 0 and\n            supp_manual_channel_email                = 0 and\n            supp_bounce                              = 0 and\n            supp_dead                                = 0 and\n            supp_child                               = 0 and\n            email                                    > ''\n        then 1\n        else 0\n    end as emailable_ignoring_dp,\n    case\n        when\n            (\n                supp_bad_phone_home = 0\n                or supp_bad_phone_work = 0\n            )                                            and\n            supp_manual_channel_phone                = 0 and\n            supp_goneaway                            = 0 and\n            supp_dead                                = 0 and\n            supp_child                               = 0 and\n            (phone_home > '' or phone_work > '')\n        then 1\n        else 0\n    end as phoneable_ignoring_dp,\n    case\n        when\n            supp_bad_phone_mobile                    = 0 and\n            supp_manual_channel_phone                = 0 and\n            supp_dead                                = 0 and\n            supp_child                               = 0 and\n            phone_mobile                             > ''\n        then 1\n        else 0\n    end as smsable_ignoring_dp\nfrom ${Database}.live.names_supps;\n\n-----------------------------------------------------------\n\n-- Create table for SMA youngest child\ndrop table if exists ${Database}.temp.names_supps_dp_brand_sma;\n\nCREATE OR REPLACE TABLE ${Database}.temp.names_supps_dp_brand_sma\nas\nselect distinct\n    (select brand_id from ${Database}.live.ref_brand where lower(brand) = 'sma') as brand_id,\n    coalesce(nt.cid,dea.cid) as cid,\n    first_value(coalesce(dea.dob,nt.reg_date)) over\n        (\n            partition by coalesce(nt.cid,dea.cid)\n            order by coalesce(dea.dob,nt.reg_date) desc nulls last\n        ) as m_dob\nfrom ${Database}.temp.names_tmp nt\nfull outer join ${Database}.live.dependant dea on dea.cid = nt.cid\n                                         and dea.valid = 1\nwhere lower(nt.source) regexp '.*reg_umb.*'\n    or dea.cid is not null;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.names_supps_dp_brand_sma',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.names_supps_dp_brand_sma;\n\nalter warehouse set warehouse_size = 'Xlarge';\n\ndrop table if exists ${Database}.live.names_supps_dp_brand_email;\n\nCREATE OR REPLACE TABLE ${Database}.live.names_supps_dp_brand_email\nas\nselect\n    dp.cid,\n    dp.email,\n    xref.business_unit_id,\n    xref.division_id,\n    dp.brand_id,\n    coalesce(dpe.dp_last_emailable_date,dp.dp_last_date) as dp_last_date,\n    coalesce(dpe.dp_last_positive_emailable_date,dp.dp_last_positive_date) as dp_last_positive_date,\n    coalesce(dpe.dp_last_emailable_date_lm,dp.dp_last_date_lm) as dp_last_date_lm,\n    coalesce(dpe.dp_last_positive_emailable_date_lm,dp.dp_last_positive_date_lm) as dp_last_positive_date_lm,\n    sma.m_dob as sma_m_dob,\n    ee.last_open_date,\n    ee.last_open_date_lm,\n    ee.last_open_date_ios15,\n    ee.last_open_date_ios15_lm,\n    lo.last_login_date,\n    lo.last_login_date_lm,\n    fr.first_reg_date,\n    fr.first_reg_date_lm,\n    case\n        when dpe.dp_last_positive_emailable_date is null\n            and dp.dp_last_positive_date is null\n            and ee.last_open_date is null\n            and lo.last_login_date is null\n            and fr.first_reg_date is null then cast(null as date)\n        else greatest\n                 (\n                     coalesce(dpe.dp_last_positive_emailable_date,dp.dp_last_positive_date,cast('1900-01-01' as date)),\n                     coalesce(ee.last_open_date,cast('1900-01-01' as date)),\n                     coalesce(lo.last_login_date,cast('1900-01-01' as date)),\n                     coalesce(fr.first_reg_date,cast('1900-01-01' as date))\n                 )\n    end as customer_retention_date,\n    case\n        when dpe.dp_last_positive_emailable_date_lm is null\n            and dp.dp_last_positive_date_lm is null\n            and ee.last_open_date_lm is null\n            and lo.last_login_date_lm is null\n            and fr.first_reg_date_lm is null then cast(null as date)\n        else greatest\n                 (\n                     coalesce(dpe.dp_last_positive_emailable_date_lm,dp.dp_last_positive_date_lm,cast('1900-01-01' as date)),\n                     coalesce(ee.last_open_date_lm,cast('1900-01-01' as date)),\n                     coalesce(lo.last_login_date_lm,cast('1900-01-01' as date)),\n                     coalesce(fr.first_reg_date_lm,cast('1900-01-01' as date))\n                 )\n    end as customer_retention_date_lm,\n    case\n        when dpe.dp_last_positive_emailable_date is null\n            and dp.dp_last_positive_date is null\n            and ee.last_open_date_ios15 is null\n            and lo.last_login_date is null\n            and fr.first_reg_date is null then cast(null as date)\n        else greatest\n                 (\n                     coalesce(dpe.dp_last_positive_emailable_date,dp.dp_last_positive_date,cast('1900-01-01' as date)),\n                     coalesce(ee.last_open_date_ios15,cast('1900-01-01' as date)),\n                     coalesce(lo.last_login_date,cast('1900-01-01' as date)),\n                     coalesce(fr.first_reg_date,cast('1900-01-01' as date))\n                 )\n    end as customer_retention_date_ios15,\n    case\n        when dpe.dp_last_positive_emailable_date_lm is null\n            and dp.dp_last_positive_date_lm is null\n            and ee.last_open_date_ios15_lm is null\n            and lo.last_login_date_lm is null\n            and fr.first_reg_date_lm is null then cast(null as date)\n        else greatest\n                 (\n                     coalesce(dpe.dp_last_positive_emailable_date_lm,dp.dp_last_positive_date_lm,cast('1900-01-01' as date)),\n                     coalesce(ee.last_open_date_ios15_lm,cast('1900-01-01' as date)),\n                     coalesce(lo.last_login_date_lm,cast('1900-01-01' as date)),\n                     coalesce(fr.first_reg_date_lm,cast('1900-01-01' as date))\n                 )\n    end as customer_retention_date_ios15_lm,\n    dp.dp_mailable,\n    coalesce(dpe.dp_emailable,0) as dp_emailable,\n    coalesce(dpe.dp_emailable_lm,0) as dp_emailable_lm,\n    coalesce(dpe.dp_newsletter,0) as dp_newsletter,\n    case when suc.unsubscribe_channel_mail_date >= dp.dp_last_mailable_date - 1 then 1 else 0 end as supp_unsubscribe_channel_mail,\n    case\n        when sue.unsubscribe_channel_email_date >= dpe.dp_last_emailable_date - 1 then 1\n        when sue.unsubscribe_channel_email_date >= dpe.dp_last_newsletter_date - 1 then 1\n        else 0\n    end as supp_unsubscribe_channel_email,\n    coalesce(es.supp_bad_email,1) as supp_bad_email,\n    coalesce(es.supp_manual_channel_email,0) as supp_manual_channel_email,\n    coalesce(es.supp_bounce,0) as supp_bounce,\n    coalesce(cs.supp_dead,0) as supp_dead,\n    coalesce(cs.supp_child,0) as supp_child,\n    case\n        when dp.brand_id = (select brand_id from ${Database}.live.ref_brand where lower(brand) = 'sma')\n            and (coalesce(dpe.dp_last_emailable_date_lm, dp.dp_last_date_lm) is null or coalesce(dpe.dp_last_emailable_date_lm, dp.dp_last_date_lm) < add_months(current_date,-33))\n            and coalesce(dpe.dp_last_emailable_date, dp.dp_last_date) >= to_date(to_char(current_date,'YYYYMM01'),'YYYYMMDD') then 0\n        when dp.brand_id = (select brand_id from ${Database}.live.ref_brand where lower(brand) = 'sma')\n            and sma.m_dob >= add_months(current_date-7,-36) then 0\n        when dp.brand_id = (select brand_id from ${Database}.live.ref_brand where lower(brand) = 'sma') then 1\n        when coalesce(dpe.dp_last_positive_emailable_date,dp.dp_last_positive_date) >= add_months(current_date,-24)\n            or ee.last_open_date >= add_months(current_date,-24)\n            or lo.last_login_date >= add_months(current_date,-24)\n            or fr.first_reg_date >= add_months(current_date,-24) then 0\n        else 1\n    end as supp_engagement,\n    sue.first_supp_unsub_date,\n    es.first_supp_email_date,\n    es.first_supp_manual_date,\n    es.first_supp_bounce_date,\n    cs.first_supp_dead_date,\n    cs.first_supp_child_date\nfrom ${Database}.temp.build_supps_names_dp_result dp\ninner join ${Database}.temp.build_ref_data_controller_bus_unit_xref xref on xref.brand_id = dp.brand_id\nleft join ${Database}.temp.build_supps_names_dp_result_email dpe on lower(trim(dpe.email)) = lower(trim(dp.email))\n                                                           and dpe.brand_id = dp.brand_id\nleft join ${Database}.temp.build_supps_names_supps_unsubscribe_cid_brand suc on suc.cid = dp.cid\n                                                                       and suc.brand_id = dp.brand_id\nleft join ${Database}.temp.build_supps_names_supps_unsubscribe_email_brand sue on lower(trim(sue.email)) = lower(trim(dp.email))\n                                                                         and sue.brand_id = dp.brand_id\nleft join ${Database}.temp.build_supps_cid cs on cs.cid = dp.cid\nleft join ${Database}.temp.build_supps_email es on lower(trim(es.email)) = lower(trim(dp.email))\nleft join ${Database}.temp.build_supps_email_engagement ee on lower(trim(ee.email)) = lower(trim(dp.email))\n                                                     and ee.business_unit_id = xref.business_unit_id\nleft join ${Database}.temp.build_supps_last_login lo on lo.cid = dp.cid\n                                               and lo.business_unit_id = xref.business_unit_id\nleft join ${Database}.temp.build_supps_first_reg fr on fr.cid = dp.cid\n                                              and fr.business_unit_id = xref.business_unit_id\nleft join ${Database}.temp.names_supps_dp_brand_sma sma on sma.cid = dp.cid\n                                                  and sma.brand_id = dp.brand_id;\n\nalter warehouse set warehouse_size = 'Large';\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_result;\n--drop table if exists ${Database}.temp.build_ref_data_controller_bus_unit_xref;\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_email;\n--drop table if exists ${Database}.temp.build_supps_names_supps_unsubscribe_cid_brand;\n--drop table if exists ${Database}.temp.build_supps_names_supps_unsubscribe_email_brand;\n--drop table if exists ${Database}.temp.build_supps_email;\n--drop table if exists ${Database}.temp.build_supps_cid;\n--drop table if exists ${Database}.temp.build_supps_email_engagement;\n--drop table if exists ${Database}.temp.build_supps_last_login;\n--drop table if exists ${Database}.temp.build_supps_first_reg;\n--drop table if exists ${Database}.temp.names_supps_dp_brand_sma;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.live.names_supps_dp_brand_email',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.names_supps_dp_brand_email;\n\n\n-- create email contact flags table\ndrop table if exists ${Database}.temp.build_email_brand_contact_flags;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_email_brand_contact_flags\nas\nselect\n    *\nfrom (\n         select\n             cid,\n             email,\n             business_unit_id,\n             division_id,\n             brand_id,\n             dp_last_date,\n             last_open_date,\n             last_open_date_ios15,\n             case\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where brand = 'SMA') then sma_m_dob\n                 when customer_retention_date = '1900-01-01' then cast(null as date)\n                 else customer_retention_date\n             end as customer_retention_group_date,\n             case\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where brand = 'SMA') then sma_m_dob\n                 when customer_retention_date_ios15 = '1900-01-01' then cast(null as date)\n                 else customer_retention_date_ios15\n             end as customer_retention_group_date_ios15,\n             case\n                 --SMA specific - start\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and dp_last_date_lm between add_months(current_date,-36) and add_months(current_date,-33)\n                     and dp_last_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') then 2 --reactivated\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and (dp_last_date_lm is null or dp_last_date_lm < add_months(current_date,-36))\n                     and dp_last_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') then 3 --new\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months(current_date,-33) then 1 --safe base\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months(current_date,-35) then 4  --at risk base\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months(current_date-7,-36) then 5  --data orphan\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months(current_date,-37) then 6  --Gone this month\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma') then 7 --Gone gone - or no dob\n                 --SMA specific - end\n                 when customer_retention_date_lm between add_months(current_date,-24) and add_months(current_date,-21)\n                     and customer_retention_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') then 2 --reactivated\n                 when (customer_retention_date_lm is null or customer_retention_date_lm < add_months(current_date,-24))\n                     and customer_retention_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') then 3 --new\n                 when customer_retention_date >= add_months(current_date,-21) then 1  --safe base\n                 when customer_retention_date >= add_months(current_date,-23) then 4  --at risk base\n                 when customer_retention_date >= add_months(current_date,-24) then 5  --data orphans\n                 when customer_retention_date >= add_months(current_date,-25) then 6  --gone this month\n                 when customer_retention_date is not null then 7 --gone ever\n                 else 8 --no opted in/out\n             end as customer_retention_group_base,\n             case\n                 --SMA specific - start\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and dp_last_date_lm between add_months(current_date,-36) and add_months(current_date,-33)\n                     and dp_last_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') then 2 --reactivated\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and (dp_last_date_lm is null or dp_last_date_lm < add_months(current_date,-36))\n                     and dp_last_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') then 3 --new\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months(current_date,-33) then 1 --safe base\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months(current_date,-35) then 4  --at risk base\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months(current_date-7,-36) then 5  --data orphan\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months(current_date,-37) then 6  --Gone this month\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma') then 7 --Gone gone - or no dob\n                 --SMA specific - end\n                 when customer_retention_date_ios15_lm between add_months(current_date,-24) and add_months(current_date,-21)\n                     and customer_retention_date_ios15 >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') then 2 --reactivated\n                 when (customer_retention_date_ios15_lm is null or customer_retention_date_ios15_lm < add_months(current_date,-24))\n                     and customer_retention_date_ios15 >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') then 3 --new\n                 when customer_retention_date_ios15 >= add_months(current_date,-21) then 1  --safe base\n                 when customer_retention_date_ios15 >= add_months(current_date,-23) then 4  --at risk base\n                 when customer_retention_date_ios15 >= add_months(current_date,-24) then 5  --data orphans\n                 when customer_retention_date_ios15 >= add_months(current_date,-25) then 6  --gone this month\n                 when customer_retention_date_ios15 is not null then 7 --gone ever\n                 else 8 --no opted in/out\n             end as customer_retention_group_base_ios15,\n             case\n                 when first_supp_dead_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') and supp_dead = 1 then 1 --dead this month\n                 when supp_dead = 1 then 2\n                 when first_supp_manual_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') and supp_manual_channel_email = 1 then 3\n                 when supp_manual_channel_email = 1 then 4\n                 when first_supp_bounce_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') and supp_bounce = 1 then 5\n                 when supp_bounce = 1 then 6\n                 when first_supp_unsub_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') and supp_unsubscribe_channel_email = 1 then 7\n                 when supp_unsubscribe_channel_email = 1 then 8\n                 when dp_emailable_lm = 1 and dp_emailable = 0 then 9\n                 when dp_emailable = 0 then 10\n                 when supp_engagement = 1 then 11\n                 else 12\n             end as customer_suppression_group_base,\n             case\n                 when\n                     dp_mailable                              = 1 and\n                     supp_unsubscribe_channel_mail            = 0 and\n                     supp_dead                                = 0 and\n                     supp_child                               = 0 and\n                     supp_engagement                          = 0\n                 then 1\n                 else 0\n             end as mailable,\n             case\n                 when\n                     dp_emailable                             = 1 and\n                     supp_unsubscribe_channel_email           = 0 and\n                     supp_engagement                          = 0 and\n                     supp_bad_email                           = 0 and\n                     supp_manual_channel_email                = 0 and\n                     supp_bounce                              = 0 and\n                     supp_dead                                = 0 and\n                     supp_child                               = 0 and\n                     email                                    > ''\n                 then 1\n                 else 0\n             end as emailable,\n             case\n                 when\n                     dp_newsletter                            = 1 and\n                     supp_unsubscribe_channel_email           = 0 and\n                     supp_engagement                          = 0 and\n                     supp_bad_email                           = 0 and\n                     supp_manual_channel_email                = 0 and\n                     supp_bounce                              = 0 and\n                     supp_dead                                = 0 and\n                     supp_child                               = 0 and\n                     email                                    > ''\n                 then 1\n                 else 0\n             end as emailable_newsletter,\n             case\n                 when\n                     supp_unsubscribe_channel_mail            = 0 and\n                     supp_dead                                = 0 and\n                     supp_child                               = 0 and\n                     supp_engagement                          = 0\n                 then 1\n                 else 0\n             end as mailable_ignoring_dp,\n             case\n                 when\n                     supp_unsubscribe_channel_email           = 0 and\n                     supp_engagement                          = 0 and\n                     supp_bad_email                           = 0 and\n                     supp_manual_channel_email                = 0 and\n                     supp_bounce                              = 0 and\n                     supp_dead                                = 0 and\n                     supp_child                               = 0 and\n                     email                                    > ''\n                 then 1\n                 else 0\n             end as emailable_ignoring_dp\n         from ${Database}.live.names_supps_dp_brand_email\n     ) supp\nwhere customer_retention_group_base < 7\n    or brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma');\n\nalter warehouse set warehouse_size = 'Xsmall';\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_email_brand_contact_flags',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_email_brand_contact_flags;\n\n\n/******************************************************************************************\n*                                         End Procedure\n******************************************************************************************/\n\nupdate   ${Database}.db.build_dates\nset      nestle_names_suppressions = CURRENT_TIMESTAMP::timestamp_ntz\nwhere    trim(build_flag) = 'C';\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '*************************',\n    '*************************',\n    'end of script',\n    CURRENT_TIMESTAMP::timestamp_ntz ;\n\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 9 Suppressions'\n, \t\t'SCRIPT'\n, \t\t'FINISHED'\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196033":{"id":196033,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":176,"y":-16,"width":32,"height":32,"inputConnectorIDs":[196068],"outputSuccessConnectorIDs":[196054,196069],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc 10 Data Updates"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nKognitio Program  : Nestle Names Updates\nAuthor            : Lindsay Timms\nClient Name       : Nestle\nJob Number        : \nStandard Machine  : Kognitio\nAmendment History : v01 - LT 20170120 - Created\n********************************************************************************************/\n\n   \ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 10 Data Updates'\n, \t\t'SCRIPT'\n, \t\t'STARTED'\n;\n\n/*********************************************************************************************\n*                                          DATA_UPDATES                                         *\n**********************************************************************************************/\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_data_updates',\n    '*************************',\n    '*************************',\n    'start of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;  \n\n/*********************************************************************************************\n*                                  NAME AND ADDRESS CHANGES                                     *\n**********************************************************************************************/\n\ndrop table if exists ${Database}.temp.build_supps_goneaway_to_key_keyed;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_goneaway_to_key_keyed \nas\nselect \n    rn.c_id as cid,\n    rn.hh_id as hid,\n    sg.supp_urn,\n    trim(sg.title_new) as title_new,\n    trim(sg.firstname_new) as firstname_new,\n    trim(sg.lastname_new) as lastname_new,\n    trim(sg.add1_new) as add1_new,\n    trim(sg.add2_new) as add2_new,\n    trim(sg.add3_new) as add3_new,\n    trim(sg.add4_new) as add4_new,\n    trim(sg.add5_new) as add5_new,\n    trim(sg.postcode_new) as postcode_new,\n    trim(sg.email_new) as email_new,\n    trim(sg.email) as email,\n    sg.data_date,\n    sg.source_date,\n    trim(sg.source_file) as source_file,\n    trim(sg.source_urn) as source_urn\nfrom ${Database}.temp.ram_names rn \ninner join ${Database}.db.supps_goneaway sg on split_part(rn.name_urn,'-',-1) = cast(sg.supp_urn as varchar)\nwhere lower(rn.source) = 'gone' \n   and (trim(sg.add1_new) >'' or trim(sg.email_new) > '');\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_data_updates',\n    '${Database}.temp.build_supps_goneaway_to_key_keyed',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_supps_goneaway_to_key_keyed;     \n    \n--drop table ${Database}.temp.ram_names;   \n    \n-- update names and address in the data warehouse based on the goneaways file\ndrop table if exists ${Database}.temp.build_data_updates_nestle_addr_cid;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_data_updates_nestle_addr_cid \nas\nselect distinct  \n    nt.cid,\n    nt.hid,\n    first_value(ga.supp_urn) over \n        (\n            partition by ga.cid \n            order by \n                ga.hid desc nulls last, \n                ga.data_date desc nulls last, \n                ga.source_date desc nulls last,\n                ga.source_file desc,\n                ga.source_urn desc\n        ) as supp_urn,\n    first_value(ga.data_date) over\n        (\n            partition by ga.cid\n            order by\n                ga.hid desc nulls last,\n                ga.data_date desc nulls last\n        ) as data_date,\n    first_value(ga.title_new) over \n        (\n            partition by ga.cid \n            order by \n                ga.hid desc nulls last, \n                ga.data_date desc nulls last, \n                ga.source_date desc nulls last,\n                ga.source_file desc,\n                ga.source_urn desc\n        ) as title_new,\n    first_value(ga.firstname_new) over \n        (\n            partition by ga.cid \n            order by \n                ga.hid desc nulls last, \n                ga.data_date desc nulls last, \n                ga.source_date desc nulls last,\n                ga.source_file desc,\n                ga.source_urn desc\n        ) as firstname_new,    \n    first_value(ga.lastname_new) over \n        (\n            partition by ga.cid \n            order by \n                ga.hid desc nulls last, \n                ga.data_date desc nulls last, \n                ga.source_date desc nulls last,\n                ga.source_file desc,\n                ga.source_urn desc\n        ) as lastname_new,  \n    first_value(ga.add1_new) over \n        (\n            partition by ga.cid \n            order by \n                ga.hid desc nulls last, \n                ga.data_date desc nulls last, \n                ga.source_date desc nulls last,\n                ga.source_file desc,\n                ga.source_urn desc\n        ) as add1_new, \n    first_value(ga.add2_new) over \n        (\n            partition by ga.cid \n            order by \n                ga.hid desc nulls last, \n                ga.data_date desc nulls last, \n                ga.source_date desc nulls last,\n                ga.source_file desc,\n                ga.source_urn desc\n        ) as add2_new,     \n    first_value(ga.add3_new) over \n        (\n            partition by ga.cid \n            order by \n                ga.hid desc nulls last, \n                ga.data_date desc nulls last, \n                ga.source_date desc nulls last,\n                ga.source_file desc,\n                ga.source_urn desc\n        ) as add3_new,\n    first_value(ga.add4_new) over \n        (\n            partition by ga.cid \n            order by \n                ga.hid desc nulls last, \n                ga.data_date desc nulls last, \n                ga.source_date desc nulls last,\n                ga.source_file desc,\n                ga.source_urn desc\n        ) as add4_new, \n    first_value(ga.add5_new) over \n        (\n            partition by ga.cid \n            order by \n                ga.hid desc nulls last, \n                ga.data_date desc nulls last, \n                ga.source_date desc nulls last,\n                ga.source_file desc,\n                ga.source_urn desc\n        ) as add5_new,     \n    first_value(ga.postcode_new) over \n        (\n            partition by ga.cid \n            order by \n                ga.hid desc nulls last, \n                ga.data_date desc nulls last, \n                ga.source_date desc nulls last,\n                ga.source_file desc,\n                ga.source_urn desc\n        ) as postcode_new,         \n    first_value(ga.email_new) over \n        (\n            partition by ga.cid \n            order by \n                ga.hid desc nulls last, \n                ga.data_date desc nulls last, \n                ga.source_date desc nulls last,\n                ga.source_file desc,\n                ga.source_urn desc\n        ) as email_new\nfrom ${Database}.temp.names_tmp nt\ninner join ${Database}.temp.build_supps_goneaway_to_key_keyed ga on nt.cid = ga.cid \n                                                       and nt.hid = ga.hid \nwhere ga.data_date > nt.data_date -- if the update is more recent than the captured data\n    and ga.add1_new > '';\n\n\ndrop table if exists ${Database}.temp.build_data_updates_nestle_addr_urn;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_data_updates_nestle_addr_urn \nas\nselect \n    nt.name_urn,\n    row_number() over (order by 1) as run,\n    da.*\nfrom ${Database}.temp.names_tmp  nt \ninner join ${Database}.temp.build_data_updates_nestle_addr_cid da on nt.cid = da.cid\n                                                     and nt.hid = da.hid;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_data_updates',\n    '${Database}.temp.build_data_updates_nestle_addr_urn',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_data_updates_nestle_addr_urn;  \n\ndrop table ${Database}.temp.build_data_updates_nestle_addr_cid;\n\n\n\ndrop table if exists ${Database}.temp.build_data_updates_nestle_addr_insert;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_data_updates_nestle_addr_insert \nas\nselect   \n    nt.name_urn                                                                   as name_urn,\n    cast(row_number() over(order by 1) as int) + (select max(bbw_urn) from ${Database}.db.names) as bbw_urn,\n    nt.reg_date                                                                   as reg_date,\n    da.data_date                                                                  as data_date,\n    da.title_new                                                                  as title,\n    da.firstname_new                                                              as firstname,\n    da.lastname_new                                                               as lastname,\n    da.add1_new                                                                   as add1,\n    da.add2_new                                                                   as add2,\n    da.add3_new                                                                   as add3,\n    da.add4_new                                                                   as add4,\n    da.add5_new                                                                   as add5,\n    da.postcode_new                                                               as postcode,\n    nt.dob                                                                        as dob,\n    ''                                                                            as phone_home,\n    nt.phone_mobile                                                               as phone_mobile,\n    ''                                                                            as phone_work,\n    case when da.email_new > '' then da.email_new else nt.email end               as email,\n    nt.country,\n    nt.source,\n    '9999'                                                                        as source_file,\n    to_char(current_date,'yyyymmdd')||lpad(cast(da.run as varchar),7,'x')         as source_urn,\n    dateadd(day,1,current_date)                                               as source_date,\n    nt.source_data_controller_id,\n    nt.source_brand_id\nfrom ${Database}.temp.names_tmp nt \ninner join ${Database}.temp.build_data_updates_nestle_addr_urn da on nt.name_urn = da.name_urn\nwhere nt.source_file != '9999'\n    or upper(nt.postcode) != upper(da.postcode_new);\n\ndrop table ${Database}.temp.build_data_updates_nestle_addr_urn;\n\n--  insert the updates into the data warehouse but with no dp so the last actual dp captured will be used\ninsert into ${Database}.db.names \n(\n    name_urn,\n    bbw_urn, \n    reg_date,\n    data_date, \n    title, \n    firstname, \n    lastname, \n    add1, \n    add2, \n    add3, \n    add4, \n    add5, \n    postcode, \n    dob, \n    phone_home, \n    phone_mobile, \n    phone_work,\n    email,\n    country,\n    source, \n    source_file, \n    source_urn, \n    source_date,\n    source_data_controller_id,\n    source_brand_id)\nselect \n    name_urn,\n    bbw_urn, \n    reg_date,\n    data_date, \n    title, \n    firstname, \n    lastname, \n    add1, \n    add2, \n    add3, \n    add4, \n    add5, \n    postcode, \n    dob, \n    phone_home, \n    phone_mobile, \n    phone_work,\n    email,\n    country,\n    source, \n    source_file, \n    source_urn, \n    source_date,\n    source_data_controller_id,\n    source_brand_id \nfrom ${Database}.temp.build_data_updates_nestle_addr_insert;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_data_updates',\n    '${Database}.db.names',\n    'records update in '||cast(current_date as varchar)||' build',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_data_updates_nestle_addr_insert; \n\ndrop table ${Database}.temp.build_data_updates_nestle_addr_insert;\n\n/*******************************************************************************************\n*                                    EMAIL ONLY CHANGES                                       *\n********************************************************************************************/\n\n-- update email address in the data warehouse based on the goneaways file\ndrop table if exists ${Database}.temp.build_data_updates_nestle_email_no_ckey;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_data_updates_nestle_email_no_ckey \nas\nselect distinct \n    lower(sg.email) as email,\n    first_value(ga.data_date) over \n        (\n            partition by ga.cid \n            order by \n                ga.hid desc nulls last, \n                ga.data_date desc nulls last, \n                ga.source_date desc nulls last,\n                ga.source_file desc,\n                ga.source_urn desc\n        ) as data_date,\n    first_value(ga.email_new) over \n        (\n            partition by ga.cid \n            order by \n                ga.hid desc nulls last, \n                ga.data_date desc nulls last, \n                ga.source_date desc nulls last,\n                ga.source_file desc,\n                ga.source_urn desc\n        ) as email_new\nfrom ${Database}.temp.build_supps_goneaway_to_key_keyed sg\ninner join ${Database}.temp.build_supps_goneaway_to_key_keyed ga on lower(sg.email) = lower(ga.email) \nwhere coalesce(ga.add1_new, '') = ''\n    and ga.email_new > ''\n    and ga.email > ''\n    and lower(ga.email) <> lower(ga.email_new);\n\ndrop table ${Database}.temp.build_supps_goneaway_to_key_keyed;    \n\ndrop table if exists ${Database}.temp.build_data_updates_nestle_email_no_ckey_urn;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_data_updates_nestle_email_no_ckey_urn \nas\nselect   \n    nt.name_urn,\n    da.*,\n    row_number() over (order by 1) as run\nfrom ${Database}.temp.names_tmp nt \ninner join ${Database}.temp.build_data_updates_nestle_email_no_ckey da on lower(nt.email) = lower(da.email)\nwhere da.data_date > nt.data_date; -- only if the update is more recent than the captured data\n\ninsert into ${Database}.db.build_log \nselect 'nestle_data_updates',\n    '${Database}.temp.build_data_updates_nestle_email_no_ckey_urn',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_data_updates_nestle_email_no_ckey_urn;  \n\ndrop table ${Database}.temp.build_data_updates_nestle_email_no_ckey;\n\ndrop table if exists ${Database}.temp.build_data_updates_nestle_email_insert;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_data_updates_nestle_email_insert\nas\nselect  \n    nt.name_urn                                                                   as name_urn,\n    cast(row_number() over(order by 1 ) as int) + (select max(bbw_urn) from ${Database}.db.names) as bbw_urn,\n    nt.reg_date                                                                   as reg_date,\n    da.data_date                                                                  as data_date,\n    nt.title                                                                      as title,\n    nt.firstname                                                                  as firstname,\n    nt.lastname                                                                   as lastname,\n    nt.add1                                                                       as add1,\n    nt.add2                                                                       as add2,\n    nt.add3                                                                       as add3,\n    nt.add4                                                                       as add4,\n    nt.add5                                                                       as add5,\n    nt.postcode                                                                   as postcode,\n    nt.dob                                                                        as dob,\n    nt.phone_home                                                                 as phone_home,\n    nt.phone_mobile                                                               as phone_mobile,\n    nt.phone_work                                                                 as phone_work,\n    da.email_new                                                                  as email,\n    nt.country,  \n    nt.source                                                                     as source,\n    '9999'                                                                        as source_file,\n    to_char(current_date,'yyyymmdd')||lpad(cast(da.run as varchar),7,'x')         as source_urn,\n    dateadd(day,1,current_date )                                               as source_date,\n    nt.source_data_controller_id,\n    nt.source_brand_id\nfrom ${Database}.temp.names_tmp nt \ninner join ${Database}.temp.build_data_updates_nestle_email_no_ckey_urn da on nt.name_urn = da.name_urn;\n\ndrop table ${Database}.temp.build_data_updates_nestle_email_no_ckey_urn;\n\ninsert into ${Database}.db.names \n(\n    name_urn,\n    bbw_urn, \n    reg_date,\n    data_date, \n    title, \n    firstname, \n    lastname, \n    add1, \n    add2, \n    add3, \n    add4, \n    add5, \n    postcode, \n    dob, \n    phone_home, \n    phone_mobile, \n    phone_work, \n    email,\n    country,\n    source, \n    source_file, \n    source_urn, \n    source_date,\n    source_data_controller_id,\n    source_brand_id\n)\nselect \n    name_urn,\n    bbw_urn, \n    reg_date,\n    data_date, \n    title, \n    firstname, \n    lastname, \n    add1, \n    add2, \n    add3, \n    add4, \n    add5, \n    postcode, \n    dob, \n    phone_home, \n    phone_mobile, \n    phone_work, \n    email,\n    country,\n    source, \n    source_file, \n    source_urn, \n    source_date,\n    source_data_controller_id,\n    source_brand_id\nfrom ${Database}.temp.build_data_updates_nestle_email_insert;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_data_updates',\n    '${Database}.db.names',\n    'email records update in '||cast(current_date as varchar)||' build',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_data_updates_nestle_email_insert; \n\ndrop table ${Database}.temp.build_data_updates_nestle_email_insert;\n\n\nalter warehouse set warehouse_size = 'Medium';\n       \n-- preserve names table - leave in memory as well    \ndrop table if exists ${Database}.live.names ;\n\nCREATE OR REPLACE TABLE ${Database}.live.names \nas\nselect * from ${Database}.temp.names_tmp; \n\n--drop table ${Database}.temp.names_tmp;\n\n\nalter warehouse set warehouse_size = 'Xsmall';\n\n/*********************************************************************************************\n*                                        End Procedure                                         *\n**********************************************************************************************/\n\nupdate   ${Database}.db.build_dates\nset      nestle_names_data_updates = CURRENT_TIMESTAMP::timestamp_ntz\nwhere    trim(build_flag) = 'c';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_data_updates',\n    '*************************',\n    '*************************',\n    'end of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;  \n\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 10 Data Updates'\n, \t\t'SCRIPT'\n, \t\t'FINISHED'\n;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196034":{"id":196034,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":448,"y":-192,"width":32,"height":32,"inputConnectorIDs":[196055],"outputSuccessConnectorIDs":[196099],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc 8 Post Dedupe"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nKognitio Program  : Nestle Names Post Dedupe\nAuthor            : Lindsay Timms\nClient Name       : Nestle\nJob Number        : \nStandard Machine  : Kognitio\nAmendment History : v01 - LT 20161216 - Created\n******************************************************************************************/\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 8 Post Dedupe'\n, \t\t'SCRIPT'\n, \t\t'STARTED'\n;\n\n\n\n/******************************************************************************************\n                                     NAMES POST DEDUPE\n******************************************************************************************/\n\n------------------------------------------------------------------------------------------------\n--extra de-dupe to assign records with no names to the same cid as matching emails:\n\n--Identify whether all records in ram_names are email only or not\ndrop table if exists ${Database}.temp.email_only_marker;\nCREATE OR REPLACE TABLE ${Database}.temp.email_only_marker as\nselect \n    name_urn\n    ,c_id\n    ,email\n    ,data_date\n    ,source_date\n    ,db_bbw_urn as bbw_urn\n    ,case when decode(name_score,1,title,'') = '' and decode(name_score,1,firstname,'') = '' and decode(name_score,1,lastname,'') = '' then 1 else 0 end as email_only\nfrom ${Database}.temp.ram_names\nwhere email > ''\n;\n\n--Match email only records to full records and assign c_id (Note this only matches to a single record to prevent daisy chaining)\ndrop table if exists ${Database}.temp.email_matching;\nCREATE OR REPLACE TABLE ${Database}.temp.email_matching as\nselect distinct\n    name_urn\n    ,first_value(c_id) over (partition by name_urn order by data_date_diff asc nulls last, source_date_diff asc nulls last,bbw_urn_diff asc nulls last,bbw_urn desc) as c_id\nfrom\n    (\n    select\n        eo.name_urn\n        ,abs(eo.data_date - fr.data_date) as data_date_diff\n        ,abs(eo.source_date - fr.source_date) as source_date_diff\n        ,abs(eo.bbw_urn - fr.bbw_urn) as bbw_urn_diff\n        ,fr.bbw_urn\n        ,fr.c_id\n    from \n        (\n        select *\n        from ${Database}.temp.email_only_marker\n        where email_only = 1\n        ) eo\n    inner join \n        (\n        select *\n        from ${Database}.temp.email_only_marker\n        where email_only = 0\n        ) fr on lower(eo.email) = lower(fr.email)\n    ) t\n;\n\nalter warehouse set warehouse_size = 'Large';\n\n--Update CIDs where email only record has matched to full record\nmerge into ${Database}.temp.ram_names nm\nusing \n    (\n    select *\n    from ${Database}.temp.email_matching\n    ) as mg on nm.name_urn = mg.name_urn\nwhen matched then update\nset nm.c_id = mg.c_id\n;\n\n--Identify c_id for each email address so we can merge identical email only records\ndrop table if exists ${Database}.temp.email_only_matching;\nCREATE OR REPLACE TABLE ${Database}.temp.email_only_matching as\nselect \n    lower(email) as email\n    ,min(c_id) c_id\nfrom ${Database}.temp.email_only_marker\nwhere email_only = 1\nand name_urn not in\n    (\n    select name_urn\n    from ${Database}.temp.email_matching\n    )\ngroup by lower(email)\n;\n\n--Update CIDs where email only records have matched (c_id = bbw_urn restriction hopefully identifies records not previously merged)\nmerge into ${Database}.temp.ram_names nm\nusing \n    (\n    select *\n    from ${Database}.temp.email_only_matching\n    ) as mg on lower(nm.email) = lower(mg.email)\nwhen matched and nm.c_id = nm.bbw_urn \n    and decode(name_score,1,title,'') = '' \n    and decode(name_score,1,firstname,'') = '' \n    and decode(name_score,1,lastname,'') = ''\nthen update\nset nm.c_id = mg.c_id\n;\n\ndrop table if exists ${Database}.temp.email_only_matching;\n\n\n/******************************************************************************************\n*                             create xref lookup tables\n******************************************************************************************/\n\ndrop table if exists ${Database}.live.xref_name_urn;\n\nCREATE OR REPLACE TABLE ${Database}.live.xref_name_urn  \nas\nselect \n    name_urn,\n    bbw_urn,     \n    email,\n    c_id as cid,\n    hh_id as hid,\n    source,\n    data_date\nfrom ${Database}.temp.ram_names;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_names_post_dedupe',\n    '${Database}.live.xref_name_urn',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.xref_name_urn;\n\ndrop table if exists ${Database}.temp.email_lookup;\nCREATE OR REPLACE TABLE ${Database}.temp.email_lookup as\nselect distinct\n    trim(name_urn) as name_urn\n    ,lower(trim(email)) as email\n    ,first_value(bbw_urn) over (partition by name_urn,email order by bbw_urn asc) as bbw_urn\nfrom ${Database}.db.names\nwhere email > ''\n;\n\ndrop table if exists ${Database}.live.xref_email;\nCREATE OR REPLACE TABLE ${Database}.live.xref_email as\nselect \n    x.cid\n    ,el.email\n    ,min(el.bbw_urn) as bbw_urn\nfrom ${Database}.live.xref_name_urn x\ninner join ${Database}.temp.email_lookup el on x.name_urn = el.name_urn\ngroup by x.cid,el.email\n;\n\ndrop table if exists ${Database}.temp.email_lookup;\n\n/******************************************************************************************\n*                                 names table\n******************************************************************************************/\n\n-- find the first bbw_urn for each record\ndrop table if exists ${Database}.temp.build_names_bbw_urn_prep2;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_names_bbw_urn_prep2 \nas\nselect \n    cid,\n    min(bbw_urn) as bbw_urn\nfrom ${Database}.live.xref_name_urn\ngroup by cid;\n\n\n/******************************************************************************************\n*                               CREATE NAMES TABLES\n******************************************************************************************/   \n\ndrop table if exists ${Database}.temp.names_tmp;\n\nCREATE OR REPLACE TABLE ${Database}.temp.names_tmp \nas\nselect   \n    rn.hkey,\n    rn.ckey,\n    coalesce(rn.hh_id,rn.bbw_urn) as hid,\n    rn.c_id as cid,\n    rn.name_urn,\n    pr.bbw_urn,\n    rn.reg_date,\n    rn.data_date,\n    case when rn.name_score = 1 then rn.title else '' end as title,\n    case when rn.name_score = 1 then rn.firstname else '' end as firstname,\n    case when rn.name_score = 1 then rn.lastname else '' end as lastname,\n    rn.company,\n    rn.add1,\n    rn.add2,\n    rn.add3,\n    rn.add4,\n    rn.add5,\n    rn.city,\n    rn.state,\n    rn.postcode,\n    rn.region,\n    rn.country_clean,\n    rn.country,\n    rn.cc_iso,\n    rn.original_gender as gender,\n    case when rn.dob between '1901-01-01' and current_date then rn.dob else cast(null as date) end as dob,\n    rn.phone_home,\n    rn.phone_mobile,\n    rn.phone_work,\n    rn.email,\n    '' as email_md5,--case when rn.email > '' then perl.f1_out else '' end as email_md5,\n    rn.job_title,\n    rn.address_quality,\n    rn.address_type,\n    case\n        when t.salut_type = 2 then t.salut_base\n        when t.salut_type = 1 then 'Dear '||t.salut_base||' '||rn.lastname \n        when lower(f.gender) = 'm' then 'Dear Mr '||rn.lastname\n        when lower(f.gender) = 'f' then 'Dear Ms '||rn.lastname\n        else ''\n    end as formal_salutation,\n    case\n        when t.salut_type = 2 then t.salut_base\n        when f.firstname is not null then 'Dear '||rn.firstname\n        when length(rn.firstname) > 1 then 'Dear '||rn.firstname\n        -- when length(rn.firstname) = 1 then 'Dear '||rn.firstname||' '||rn.lastname\n        when t.salut_type = 1 then 'Dear '||t.salut_base||' '||rn.lastname\n        else ''\n    end as informal_salutation,\n    trim(rn.title)||' '|| trim(rn.firstname) ||' '|| trim(rn.lastname) as name,\n    rn.source,\n    rn.source_file,\n    rn.source_urn,\n    rn.source_date,\n    rn.source_data_controller_id,\n    rn.source_brand_id,\n    case when lower(rn.email_cleaning) like '%group email identified%' then 1 else 0 end as generic_email_flag\nfrom ${Database}.temp.ram_names rn \ninner join ${Database}.temp.build_names_bbw_urn_prep2 pr on rn.c_id = pr.cid\n/*\nleft join  \n    (\n        external script tbw.md5 \n        from \n        (\n            select \n                email,\n                name_urn \n            from ${Database}.temp.ram_names\n            where email > ''\n         )\n    ) perl                                    on perl.urn_out = rn.name_urn\n*/\nleft join tbw.db.titles t                        on lower(rn.title) = lower(t.title)\nleft join tbw.db.firstnames f                    on lower(rn.firstname) = lower(f.firstname)\nwhere lower(rn.source) not in ('manual','gone','dead','unsub','td|historic','nuk100-1'); --TD and NUK are removed in the old NUK build (no one is sure why...)\n\nalter warehouse set warehouse_size = 'Xsmall';\n\ndrop table ${Database}.temp.build_names_bbw_urn_prep2;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_names_post_dedupe',\n    '${Database}.temp.names_tmp',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.names_tmp; \n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_names_post_dedupe',\n    '${Database}.temp.names_tmp','total cids',\n    cast(count(distinct cid) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.names_tmp; \n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_names_post_dedupe',\n    '${Database}.temp.names_tmp','total hids',\n    cast(count(distinct hid) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.names_tmp; \n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_names_post_dedupe',\n    '${Database}.temp.names_tmp','total ckeys',\n    cast(count(distinct ckey) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.names_tmp; \n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_names_post_dedupe',\n    '${Database}.temp.names_tmp','total hkeys',\n    cast(count(distinct hkey) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.names_tmp; \n\n\n/******************************************************************************************\n                                      Finish proc\n******************************************************************************************/\n\nupdate   ${Database}.db.build_dates\nset      nestle_names_post_dedupe = CURRENT_TIMESTAMP::timestamp_ntz\nwhere    trim(build_flag) = 'C';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_names_post_dedupe',\n    '*************************',\n    '*************************',\n    'end of script',\n    CURRENT_TIMESTAMP::timestamp_ntz ;  \n\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 8 Post Dedupe'\n, \t\t'SCRIPT'\n, \t\t'FINISHED'\n;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196035":{"id":196035,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":448,"y":-16,"width":32,"height":32,"inputConnectorIDs":[196099],"outputSuccessConnectorIDs":[196057,196075],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc 8a SMA Dep Rollup"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nProgram           : Nestle daily NPP sma dependant rollup\nAuthor            : Lindsay Timms\nClient Name       : Nestle\nJob Number        : \nStandard Machine  : Kognitio\nAmendment History : v01 - LT 20190115 - Created\n******************************************************************************************/\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 8a SMA Dep Rollup'\n, \t\t'SCRIPT'\n, \t\t'STARTED'\n;\n\n\ninsert into ${Database}.db.build_log \nselect    'nestle_sma_dependant_rollup'\n,         '*************************'\n,         '*************************'\n,         'start of script'\n,         CURRENT_TIMESTAMP::timestamp_ntz\n; \n\n/**************************************************************************\n        SMA VERSIONS OF NAMES\n**************************************************************************/\n\ndrop table if exists ${Database}.temp.names_sma;\nCREATE OR REPLACE TABLE ${Database}.temp.names_sma\nas\nselect nm.*\nfrom ${Database}.temp.names_tmp nm\ninner join (\n               select distinct\n                   name_urn\n               from ${Database}.db.names\n               where source_brand_id in (select brand_id from ${Database}.db.ref_brand where trim(brand) = 'SMA')\n           ) dbnm on dbnm.name_urn = nm.name_urn;\n\n\n/**************************************************************************\n        MOAC UMBRACO XREF\n**************************************************************************/\n\ndrop table if exists ${Database}.temp.build_sma_moac_umbraco_xref;\n\ncreate or replace table ${Database}.temp.build_sma_moac_umbraco_xref\nas\nselect distinct\n    xr1.name_urn as moac_name_urn,\n    xr2.name_urn as umbraco_name_urn,\n    case when xr1.latest_record > xr2.latest_record then 'REG_MOAC' else 'REG_UMB' end as winner\nfrom (\n         select\n             cid,\n             name_urn,\n             max(data_date) as latest_record\n         from ${Database}.live.xref_name_urn\n         where source = 'REG_MOAC'\n         group by 1,2\n     ) xr1\ninner join (\n               select\n                   cid,\n                   name_urn,\n                   max(data_date) as latest_record\n               from ${Database}.live.xref_name_urn\n               where source = 'REG_UMB'\n               group by 1,2\n           ) xr2 on xr1.cid = xr2.cid;\n\n\n/**************************************************************************\n        CHILDRENS TABLE\n**************************************************************************/\n\n\ndrop table if exists ${Database}.live.dependant;\nCREATE OR REPLACE TABLE ${Database}.live.dependant\nas\nselect distinct    \n    nm.cid,\n    nm.hid,\n    coalesce(xr.umbraco_name_urn,de.name_urn) as name_urn,\n    de.name_urn as child_urn,\n    de.child_id,\n    de.firstname,  \n    de.lastname,  \n    de.dob,  \n    de.gender,\n    case\n        when de.child_id = 'D' and de.dob < (current_date - 14) then 1\n        when de.dob > de.created_date and de.dob < (current_date - 14) then 1\n        else de.auto_promoted\n    end as auto_promoted,\n    cast(null as nvarchar(150)) as child_name,\n    cast(null as varchar) as comms_programme,\n    cast(null as varchar) as comms_subprogramme,\n    cast(null as varchar) as comms_programme_description,\n    cast(null as date) as comms_duedate,\n    cast(null as tinyint) as live_flag,\n    case when pl.name_urn is not null then 1 else 0 end as previously_lapsed,\n    case \n        when de.dob > de.created_date and de.dob-de.created_date>294 then 'Pre'\n        when de.dob >= de.created_date and (de.dob-de.created_date)/7.0 between 28 and 42 then 'T1'\n        when de.dob >= de.created_date and (de.dob-de.created_date)/7.0 between 13 and 28 then 'T2'\n        when de.dob >= de.created_date and (de.dob-de.created_date)/7.0 >= 0 and (de.dob-de.created_date)/7.0 < 13 then 'T3'\n        when floor(months_between(de.created_date,de.dob)) between 0 and 3 then 'S1'\n        when floor(months_between(de.created_date,de.dob)) between 4 and 5 then 'S2'\n        when floor(months_between(de.created_date,de.dob)) between 6 and 7 then 'S3'\n        when floor(months_between(de.created_date,de.dob)) between 8 and 11 then 'S4'\n        when floor(months_between(de.created_date,de.dob)) between 12 and 23 then 'S5'\n        when floor(months_between(de.created_date,de.dob)) between 24 and 35 then 'S6'\n        when floor(months_between(de.created_date,de.dob)) > 35 then 'S7'\n        else 'No Stage'\n    end as child_stage_reg,\n    case \n        when de.dob > current_date and de.dob-current_date>294 then 'Pre'\n        when de.dob >= current_date and (de.dob-current_date)/7.0 between 28 and 42 then 'T1'\n        when de.dob >= current_date and (de.dob-current_date)/7.0 between 13 and 28 then 'T2'\n        when de.dob >= current_date and (de.dob-current_date)/7.0 >= 0 and (de.dob-current_date)/7.0 < 13 then 'T3'\n        when floor(months_between(current_date,de.dob)) between 0 and 3 then 'S1'\n        when floor(months_between(current_date,de.dob)) between 4 and 5 then 'S2'\n        when floor(months_between(current_date,de.dob)) between 6 and 7 then 'S3'\n        when floor(months_between(current_date,de.dob)) between 8 and 11 then 'S4'\n        when floor(months_between(current_date,de.dob)) between 12 and 23 then 'S5'\n        when floor(months_between(current_date-7,de.dob)) between 23 and 35 then 'S6'\n        when floor(months_between(current_date,de.dob)) > 35 then 'S7'\n        else 'No Stage'\n    end as child_stage_now,\n    case \n        when lower(de.source) regexp '(.*)(dnn|umbraco|reg_umb)(.*)' then 1\n        when \n            (\n                lower(de.source) regexp '(.*)(reg_fan|reg_mbo)(.*)' \n                    and de.created_date between '2016-03-01' and '2016-10-12'\n                    and de.dob >= de.created_date\n                    and (de.dob-de.created_date)/7.0 <=40\n             )\n             or\n            (     \n                (lower(de.source) not regexp '(.*)(reg_fan|reg_mbo)(.*)' or de.created_date < '2016-03-01' or de.created_date > '2016-10-12')\n                 and \n                 (\n                    (de.dob >= de.created_date and (de.dob-de.created_date)/7.0 <=42)\n                     or\n                     floor(months_between(de.created_date,de.dob)) between 0 and 35\n                 )\n             ) then 1\n        else 0\n    end as valid,\n    de.source,\n    de.source_date,\n    de.created_date\nfrom \n(\n    select distinct\n        trim(name_urn) as name_urn, \n        trim(child_id) as child_id,\n        trim(firstname) as firstname,  \n        trim(lastname) as lastname,  \n        dob,  \n        trim(gender) as gender,\n        auto_promoted,\n        created_date,\n        trim(source) as source,\n        source_date,        \n        deleted_date,\n        coalesce(is_active,1) as is_active,\n        coalesce(is_deleted,0) as is_deleted,\n        row_number() over\n        (\n            partition by name_urn, child_id\n            order by created_date desc, source_date desc, source_urn desc\n        ) as rn\n    from ${Database}.db.dependant  \n) de\ninner join ${Database}.temp.names_sma nm on de.name_urn = nm.name_urn\nleft join ${Database}.db.sma_prev_lapsed pl on trim(nm.name_urn) = trim(pl.name_urn)\nleft join ${Database}.temp.build_sma_moac_umbraco_xref xr on trim(xr.moac_name_urn) = trim(de.name_urn)\nwhere nm.source_brand_id in (select brand_id from ${Database}.db.ref_brand where trim(brand) = 'SMA')\n    and de.deleted_date is null\n    and de.is_active <> 0\n    and de.is_deleted <> 1\n    and de.dob is not null\n    and de.rn = 1;\n--717975 in 2 secs\n\n/**************************************************************************\n          BMPS\n**************************************************************************/\n\n\ndrop table if exists ${Database}.temp.cid_bmps;\nCREATE OR REPLACE TABLE ${Database}.temp.cid_bmps\nas\nselect    \n    cid,\n    max(greatest(supps.expected_arrival_date_of_baby, supps.date_and_time_of_registration)) as supp_date_max,\n    min(least(supps.expected_arrival_date_of_baby, supps.date_and_time_of_registration)) as supp_date_min\nfrom tbw.db.bmps_suppressions supps\ninner join ${Database}.temp.names_sma nm on trim(supps.hkey) = trim(nm.hkey) -- no hkey on xref\nwhere trim(supps.supp_type) = 'BMPS'\n    and upper(coalesce(supps.hkey,'')) not in ('NULL','')\n    and trim(nm.hkey) != ''\ngroup by 1;\n\ndrop table if exists ${Database}.temp.names_sma;\n\n\n-- Remove those that match baby mps.\ndelete from ${Database}.live.dependant\nwhere cid in \n    (\n        select distinct de.cid\n        from ${Database}.live.dependant de \n        join ${Database}.temp.cid_bmps bmps on de.cid = bmps.cid\n        where de.dob between add_months(bmps.supp_date_min, -6) and add_months(bmps.supp_date_max, 6)\n    );\n\n\n/**************************************************************************\n          MOAC UPDATE\n**************************************************************************/\n\nmerge into ${Database}.live.dependant de\nusing (\n          select distinct\n              de.name_urn,\n              de.child_id,\n              case\n                  when wn.dob > current_date and de.dob > current_date then 0\n                  when de.dob > (wn.dob-84) and de.dob < (wn.dob+84) then 0\n                  else 1\n              end as valid\n          from ${Database}.live.dependant de\n          inner join (\n                         select\n                             de.name_urn,\n                             de.child_id,\n                             de.dob,\n                             de.source\n                         from ${Database}.live.dependant de\n                         join ${Database}.temp.build_sma_moac_umbraco_xref xr on de.name_urn = xr.umbraco_name_urn\n                                                                             and de.source = xr.winner\n                     ) wn on de.name_urn = wn.name_urn\n                         and de.child_id <> wn.child_id\n                         and de.source <> wn.source\n      ) invalid on de.name_urn = invalid.name_urn\n               and de.child_id = invalid.child_id\n               and invalid.valid = 0\nwhen matched then update\nset de.valid = 0;\n\n\n\ninsert into ${Database}.db.build_log \nselect    'nestle_sma_rollup'\n,         '*************************'\n,         '*************************'\n,         'end of script'\n,         CURRENT_TIMESTAMP::timestamp_ntz\n; \n\n\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 8a SMA Dep Rollup'\n, \t\t'SCRIPT'\n, \t\t'FINISHED'\n;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196036":{"id":196036,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":-1040,"y":80,"width":32,"height":32,"inputConnectorIDs":[196077],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Output for FS 0"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Output for FS"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196037":{"id":196037,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":144,"y":-96,"width":32,"height":32,"inputConnectorIDs":[196060],"outputSuccessConnectorIDs":[196066],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Log GM Cust"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"insert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect\nCURRENT_TIMESTAMP::timestamp_ntz\n,'${Database}'\n,'BUILD'\n,'GraphMap Cust'\n,'SCRIPT'\n,'FINISHED'\n;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196038":{"id":196038,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":80,"y":64,"width":32,"height":32,"inputConnectorIDs":[196054],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Orig Proc 12 Rollups"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nProgram           : Nestle Rollups\nAuthor            : Lindsay Timms\nClient Name       : Nestle\nJob Number        : \nStandard Machine  : Kognitio\nAmendment History : v01 - LT 20170207 - Created\n                    ... various undocumented changes\n                    v02 - LW 20210803 brand_preference change (NUK05862 rework)\n                    v03 - Shira 20220421 exclude RESP_ADE_RMI from acquistion type base creation as this is not an acquired source (it is a response source)\n******************************************************************************************/\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 12 Rollups'\n, \t\t'SCRIPT'\n, \t\t'STARTED'\n;\n\n/******************************************************************************************\n                                         ROLLUP\n******************************************************************************************/\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '*************************',\n    '*************************',\n    'start of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;  \n\n\n---------------------\n-- cid base\n\ndrop table if exists ${Database}.temp.build_rollups_cid_base;\n   \nalter warehouse set warehouse_size = 'Large';\n   \nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_base  \nas\nselect \n    cid,\n    max(case when name_urn = latest_name_urn then hid end) as hid,\n    min(bbw_urn) as bbw_urn,\n    max(latest_name_urn) as name_urn,    \n    min(reg_date) as created_date,\n    max(data_date) as updated_date, \n    max(case when name_urn = name_urn_to_mail_ignoring_dp then country_clean end) as country,        \n    min(case when gender = '' then 'X' else gender end) as gender, -- min works assuming 'm','f','x' (gender conflicts are fixed below)\n    max(case when name_urn = name_urn_to_mail_ignoring_dp then postcode end) as postcode,\n    max(case when name_urn = name_urn_to_mail_ignoring_dp then postcode_area_home end) as postcode_area_home,    \n    max(case when name_urn = name_urn_to_mail_ignoring_dp then postcode_district_home end) as postcode_district_home,   \n    max(case when name_urn = name_urn_to_dob then dob end) as dob,\n    --    contactable status     \n    max(mailable_ignoring_dp) as mailable_ignoring_dp,\n    max(emailable_ignoring_dp) as emailable_ignoring_dp,\n    max(phoneable_ignoring_dp) as phoneable_ignoring_dp,\n    max(smsable_ignoring_dp) as smsable_ignoring_dp,    \n    --    which record for that customer is best to contact for each channel   \n    max(name_urn_to_mail_ignoring_dp) as name_urn_to_mail_ignoring_dp,\n    max(name_urn_to_email_ignoring_dp) as name_urn_to_email_ignoring_dp,       \n    max(name_urn_to_phone_ignoring_dp) as name_urn_to_phone_ignoring_dp,   \n    max(name_urn_to_sms_ignoring_dp) as name_urn_to_sms_ignoring_dp\nfrom\n\t(\n\tselect \n\t\tnm.cid\n\t\t,nm.hid\n\t\t,nm.name_urn\n\t\t,nm.bbw_urn\n\t\t,nm.reg_date\n\t\t,nm.data_date\n\t\t,nm.country_clean\n\t\t,nm.gender\n\t\t,nm.postcode\n\t\t,cf.mailable_ignoring_dp\n\t\t,cf.emailable_ignoring_dp\n\t\t,cf.phoneable_ignoring_dp\n\t\t,cf.smsable_ignoring_dp\n\t\t,case\n\t\t\twhen lower(collate(nm.name_urn,'')) not regexp '.*work.*' and upper(nm.postcode) in ('IRELAND','EIRE')                     then 'RO'\n\t\t\twhen lower(collate(nm.name_urn,'')) not regexp '.*work.*' then  case\n\t\t\t\t\t\twhen lower(substring(collate(nm.postcode,''),2,1)) regexp '.*[a-z].*' then left(nm.postcode,2) \n\t\t\t\t\t\telse left(nm.postcode,1) \n\t\t\t\t\tend \n\t\t\telse ''\n\t\tend as postcode_area_home\n\t\t,case\n\t\t\twhen lower(collate(nm.name_urn,'')) not regexp '.*work.*' then case \n\t\t\t\twhen lower(nm.country)='united kingdom' then left(upper(split_part(nm.postcode,' ',1)),10) \n\t\t\t\telse '' \n\t\t\t\tend\n\t\t\telse ''\n\t\tend as postcode_district_home\n\t\t,case \n\t\t\twhen nm.dob = '2001-01-01' then cast(null as date) \n\t\t\twhen nm.dob >= current_date then cast(null as date) \n\t\t\twhen nm.dob <= '1901-01-01' then cast(null as date) \n\t\t\telse nm.dob \n\t\tend as dob\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc, nm.name_urn asc) as Latest_name_urn\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by nm.data_date asc nulls last, nm.reg_date asc nulls last, nm.source_date asc nulls last, nm.bbw_urn asc, nm.name_urn asc) as Earliest_name_urn\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by case when nm.dob is not null then 1 else 0 end desc nulls last, nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc,nm.name_urn asc) as name_urn_to_dob\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by cf.mailable_ignoring_dp desc nulls last, nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc,nm.name_urn asc) as name_urn_to_mail_ignoring_dp\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by cf.emailable_ignoring_dp desc nulls last, nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc,nm.name_urn asc) as name_urn_to_email_ignoring_dp\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by cf.phoneable_ignoring_dp desc nulls last, nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc,nm.name_urn asc) as name_urn_to_phone_ignoring_dp\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by cf.smsable_ignoring_dp desc nulls last, nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc,nm.name_urn asc) as name_urn_to_sms_ignoring_dp\n\tfrom ${Database}.live.names nm \n\tinner join ${Database}.temp.build_names_contact_flags cf on nm.name_urn = cf.name_urn\n\t) t\ngroup by 1\n;\n\nalter warehouse set warehouse_size = 'Xsmall';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_base',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_base;   \n\n---------------------\n--  gender fix\n\ndrop table if exists ${Database}.temp.build_rollups_cid_gender_fix;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_gender_fix \nas\nselect   \n    cid,\n    max(case when lower(gender) = 'm' then 1 else 0 end) as male,\n    max(case when lower(gender) = 'f' then 1 else 0 end) as female\nfrom ${Database}.live.names\ngroup by cid\nhaving  max(case when lower(gender) = 'm' then 1 else 0 end) = 1\n    and max(case when lower(gender) = 'f' then 1 else 0 end) = 1;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_gender_fix',\n    'fixed gender',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_gender_fix;\n\n---------------------\n--cid pets\n\n--Create list of \"DECEASED\" names\ndrop table if exists ${Database}.temp.deceased_name;\nCREATE OR REPLACE TABLE ${Database}.temp.deceased_name as\nselect \n    distinct trim(pet_name) as pet_name\nfrom ${Database}.db.pet\nwhere lower(trim(pet_name)) regexp '(.*)(dcsd|decd|deceased|r\\.i\\.p|dec\\.)(.*)'\nor (lower(trim(pet_name)) regexp '.*died.*' and lower(trim(pet_name)) not regexp '(.*)(diedre|diedu|ndied)(.*)')\nor (lower(trim(pet_name)) regexp '.*rip.*' and lower(trim(pet_name)) not regexp '(.*)(ripl|ripe|strip|ripp|trip|crip|rips|grip|ripu|ript|frip|ripo|ripa|prip|riph|ripk)(.*)' and lower(trim(pet_name)) not in ('rip','little rip'))\nor (lower(trim(pet_name)) regexp '.*dead.*' and lower(trim(pet_name)) not regexp '(.*)(deads|dead p|deadr|deadl|deadm|p dead)(.*)')\n;\n\n-- Create list of all pet names for cleaning\ndrop table if exists ${Database}.temp.pet_name_lookup_1;\nCREATE OR REPLACE TABLE ${Database}.temp.pet_name_lookup_1 as\nselect \n    distinct upper(trim(pet_name)) as pet_name\nfrom ${Database}.db.pet\n;\n\n--Split names to try and get multiple valid names\ndrop table if exists ${Database}.temp.pet_names_split;\nCREATE OR REPLACE TABLE ${Database}.temp.pet_names_split as\nselect \n        pet_name\n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 1) as pet_name_1   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 2) as pet_name_2   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 3) as pet_name_3   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 4) as pet_name_4   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 5) as pet_name_5   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 6) as pet_name_6   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 7) as pet_name_7   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 8) as pet_name_8   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 9) as pet_name_9\n    from ${Database}.temp.pet_name_lookup_1\n    ;\n    \ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.pet_names_split',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.pet_names_split;\n\ndrop table if exists ${Database}.temp.pet_name_lookup_1;\n\n--Create thin table for mapping pet names to all cleaned pet names\ndrop table if exists ${Database}.temp.all_pet_names_1;\nCREATE OR REPLACE TABLE ${Database}.temp.all_pet_names_1 as   \n--REMOVE UNWANTED CHARACTERS\nselect distinct\n    split.pet_name\n    ,trim(initcap(translate(upper(regexp_replace(split.pet_name_split,'[\\x00-\\x1F|\\x7F]','')), 'ÀÁÂÃÄÅÇÐÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜÝŸŽL©¶³¤¢§º¼½¦®ª«¡¨¯¹»›‰¾†¬±˜~\\|`!\"£$%^*_-=:;@~#<>?', 'aaaaaacdeeeeiiiinoooooosuuuuyyzl'))) as pet_name_split\nfrom\n    (\n    select pet_name, initcap(replace(replace(replace(trim(pet_name_1),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_1 > ''\n    union all   \n    select pet_name, initcap(replace(replace(replace(trim(pet_name_2),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_2 > ''\n    union all  \n    select pet_name, initcap(replace(replace(replace(trim(pet_name_3),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_3 > '' \n    union all\n    select pet_name, initcap(replace(replace(replace(trim(pet_name_4),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_4 > '' \n    union all  \n    select pet_name, initcap(replace(replace(replace(trim(pet_name_5),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_5 > '' \n    union all\n    select pet_name, initcap(replace(replace(replace(trim(pet_name_6),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_6 > '' \n    union all  \n    select pet_name, initcap(replace(replace(replace(trim(pet_name_7),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_7 > '' \n    union all\n    select pet_name, initcap(replace(replace(replace(trim(pet_name_8),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_8 > '' \n    union all  \n    select pet_name, initcap(replace(replace(replace(trim(pet_name_9),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_9 > '' \n    ) split\nwhere trim(initcap(translate(upper(regexp_replace(split.pet_name_split,'[\\x00-\\x1F|\\x7F]','')), 'ÀÁÂÃÄÅÇÐÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜÝŸŽL©¶³¤¢§º¼½¦®ª«¡¨¯¹»›‰¾†¬±˜~\\|`!\"£$%^*_-=:;@~#<>?', 'aaaaaacdeeeeiiiinoooooosuuuuyyzl'))) > ''\n;\n\ndrop table if exists ${Database}.temp.pet_name_split;\n\n--Remove everything brackets\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'('||tbw.db.suckchars(pet_name_split,'(',')')||')','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'('||tbw.db.suckchars(pet_name_split,'(',')')||')','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'('||tbw.db.suckchars(pet_name_split,'(',')')||')','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'('||tbw.db.suckchars(pet_name_split,'(',')')||')','');\n\n--Remove everything in square brackets\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'['||tbw.db.suckchars(pet_name_split,'[',']')||']','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'['||tbw.db.suckchars(pet_name_split,'[',']')||']','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'['||tbw.db.suckchars(pet_name_split,'[',']')||']','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'['||tbw.db.suckchars(pet_name_split,'[',']')||']','');\n\n--Remove everything in curly brackets\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'{'||tbw.db.suckchars(pet_name_split,'{','}')||'}','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'{'||tbw.db.suckchars(pet_name_split,'{','}')||'}','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'{'||tbw.db.suckchars(pet_name_split,'{','}')||'}','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'{'||tbw.db.suckchars(pet_name_split,'{','}')||'}','');\n\n--Remove everything following unclosed brackets\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,substr(pet_name_split,CHARINDEX('(',pet_name_split,-1)),'')\nwhere CHARINDEX('(',pet_name_split,-1) > CHARINDEX(')',pet_name_split,-1)\n;\n\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,substr(pet_name_split,CHARINDEX('[',pet_name_split,-1)),'')\nwhere CHARINDEX('[',pet_name_split,-1) > CHARINDEX(']',pet_name_split,-1)\n;\n\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,substr(pet_name_split,CHARINDEX('{',pet_name_split,-1)),'')\nwhere CHARINDEX('{',pet_name_split,-1) > CHARINDEX('}',pet_name_split,-1)\n;\n\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = trim(right(pet_name_split,length(pet_name_split) - 1))\nwhere left(pet_name_split,1) = '.'\n;\n\n--Create cleaned pet name lookup\ndrop table if exists ${Database}.temp.all_pet_names;\nCREATE OR REPLACE TABLE ${Database}.temp.all_pet_names as\nselect \n    pet_name\n    ,case \n        when left(pet_name_split,1) = '-' then trim(replace(pet_name_split,'-','')) \n        else trim(pet_name_split) \n    end as pet_name_split\nfrom ${Database}.temp.all_pet_names_1\n;\n\ndrop table if exists ${Database}.temp.all_pet_names_1;\n\n--Create lookup table with flags for reference\ndrop table if exists ${Database}.live.pet_name_lookup;\nCREATE OR REPLACE TABLE ${Database}.live.pet_name_lookup as\nwith flags \nas\n(\n    select \n        pet_name\n        ,case\n             when left(upper(pet_name_split),4) = 'AGE ' then ''\n             when charindex(' AGE ',upper(pet_name_split)) > 1 then left(pet_name_split,charindex(' AGE ',upper(pet_name_split)) - 1)\n             else pet_name_split\n         end as pet_name_split\n        ,case \n            when  replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') in ('gook','spick','spik','prat','stupid')\n                 or       lower(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'CANAL','')) regexp '.*anal.*'           and lower(pet_name_split) not in ('analoui','analts','analuwa','aspanall','banal','branall','bwanali','campanale','canal','canale','canalella','canale-parola','canales','canali','canals','chanal','courbanally','cuanalo','danaldson','ganalon','gnanalingam','gnanalingham','hajyzamanali','hassanali','hassanally','janal','janali','kanal','kanala','kanalas','kanalos','kanalosova','kankanala','khanal','macanally','manalac','manalan','manalang','manalansan','manalastas','manalaysay','manaley','manalili','manally','manalo','manaloto','mcanallen','mcanally','mcdanald','mcdoanald','panal','panaligan','rabanal','rajanala','ramjanali','ramjanally','ramzanali','ranaldi','ranaldo','ranall','ranalli','ranallo','roshanali','sanalitro')\n                 or       replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'URANUS','') in ('ANUS','SMELLMYANUS','HUGHJANUS')           --and lower(pet_name_split) not in ('anush','anusha','anusic','anusiewicz','anusionwu','anuszkiewicz','banushi','banuso','bhanushali','blanusa','deanus','emanus','emmanus','ganuszko','hanus','hanusch','hanusiak','hanusova','hanuszewicz','hermanus','iloanusi','iwanuschak','jaanus','janus','janusaitis','janusas','janusauskaite','janusauskas','janusauskiene','janusevicius','januska','januskaite','januskeviciene','januskevicius','januskeviciute','janusonis','janusz','januszczak','januszczyk','januszek','januszewska','januszewski','januszkiewicz','januszko','mac manus','macmanus','mamanus','manus','manuschka','manuszewski','mc manus','mchanus','mcmanus','mcnanus','ndanusa','ohanusi','ranus','romanus','sanusi','silvanus','stanuszek','tanushi','zanussi')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*arse.*'           and lower(pet_name_split) not in ('arseen','arsenault','arsene','arseneault','arsenio','arsenis','arseniuk','banarse','barseghian','barsellotti','barsey','carse','carsell','carsen','carser','carsewell','carsey','darsey','farser','garsed','gerard-pearse','harse','harsent','hearse','hearsey','karsenbarg','karsera','karseras','kearse','kearsey','larsen','lund-larsen','marse','marseden','marseglia','marseille','marseilles','marsek','marsel','marsell','marsella','marsello','marsen','marsenic','marsey','narse','parse','parsell','parselle','parsells','parsely','parsens','parsey','pearse','pearsey','posarsek','sarsero','scarse','scarsebrook','scarsella','summarsell','swearse','tarsey','tearse')\n            --     or       replace(replace(replace(replace(collate(pet_name_split,''),'''',''),' ',''),'-',''),'&','') regexp 'ass'            and lower(pet_name_split) not in ('abass','abassah','abassi','abbass','abbassi','abbassian','abbassy','abdelmassih','abecassis','abu hassan','abuhassan','admassu','afrassiabi','agass','agassiz','aghassi','aghdassi','akass','akhrass','al hassan','alassad','al-assadi','alassaf','albassam','al-bassam','aldabass','alhassan','al-hassan','alhassani','al-hassani','alhasso','al-hasso','alihassan','ali-hassan','aljassar','alkass','alkassim','allass','allassani','allpass','almassi','alnassar','alnasser','al-nasser','alqassab','al-qassab','alqassimi','altass','altwasser','al-yassin','amass','amasse','amassoul','amirghassemi','anastassi','anastassiades','anastassiou','andrassy','andreassen','andreasson','appassamy','asparassa','assa','assaad','assab','assad','assadi','assadian','assadourian','assadullah','assaed','assael','assaf','assah','assakarah','assal','assali','assall','assalone','assam','assamoi','assamoua','assan','assanah','assanand','assani','assante','assar','assareh','assari','assaritti','assas','assassa','assassi','assayag','assaye','asscher','assefa','assefaw','assefuah','asseily','asselin','assell','assem','assemakis','assemian','assen','assender','assenheim','assenjee','assenso','assenti','asser','asserati','assersohn','asset','asseter','assey','assheton','assheton-smith','assi','assia','assiamah','assibey','assid','assif','assifuah','assig','assili','assim','assimakopoulos','assin','assinder','assing','assini','assiotes','assirati','assiratti','assis','assiter','assitt','asslanian','assmann','asso','associates','assock','assoku','assomull','asson','assor','assou','assouad','assoufi','assoul','assouline','assour','assra','assrafally','assucena','assumpcao','assuncao','assur','atanassov','atanassova','atassi','athanassiou','athanassopoulos','ayadassen','ayassamy','babassana','balassa','baldassari','baldassarra','baldassarre','baldassarri','barass','barkass','barlass','barrass','barrasso','bass','bassa','bassadone','bassage','bassah','bassaid','bassakaropoulos','bassal','bassalian','bassam','bassan','bassani','bassano','bassant','bassaragh','bassas','bassatt','basse','bassell','bassen','bassendale','bassendine','bassenger','bassent','basser','basset','bassett','bassett-cross','bassett-jones','bassett-smith','bassettt','bassey','bassford','bassham','bassi','bassie','bassier','bassil','bassilious','bassill','bassily','bassin','bassindale','bassinder','bassingdale','bassinger','bassingham','bassingthwaighte','bassingthwaite','bassington','bassiony','bassiouni','bassir','bassiri','bassit','bassitt','bassman','bassnett','basso','bassoli','bassom','basson','bassot','bassou','bassous','bassr','bassra','bassral','basstoe','bassue','bass-woodcock','bassy','baylass','bedassie','beedassee','beedassy','belassie','bellass','benassi','benhassine','benriassa','blass','blasse','blennerhasset','blennerhassett','bonass','bonassera','bordass','boumerdassi','bourassa','bownass','brass','brassart','brasse','brasseaux','brassel','brassell','brasser','brassett','brasseur','brassey','brassfield','brassil','brassill','brassington','brassinton','brassley','buglass','bullass','bumpass','burdass','burgass','burglass','byass','cabassi','cafasso','calamassi','camrass','canassa','capasso','carass','carassale','carasso','carcass','carmassi','casamassa','cass','cassa','cassady','cassagne','cassam','cassama','cassambai','cassamo','cassamobai','cassan','cassandra','cassandro','cassanell','cassani','cassano','cassanova','cassap','cassapi','cassar','cassaretto','cassata','casse','cassedy','cassee','cassel','casselden','casseldine','cassell','cassella','casselle','casselles','cassells','casselman','cassels','casselton','cassely','cassem','cassemis','cassen','casser','cassera','cassere','casserley','casserly','cassese','cassettare','cassettari','cassey','cassford','cassi','cassia','cassiano','cassiday','cassiddy','cassidey','cassidi','cassidy','cassie','cassiey','cassillis','cassily','cassim','cassimatis','cassin','cassinelli','cassing','cassingena','cassingham','cassini','cassinos','cassis','cassisa','cassisi','cassisy','cassity','cassius','cassles','cassley','cassling','cassman','cassom','cassomini','casson','cassone','cassoni','casson-smith','cassop','casssidy','casstles','cassule','casswell','cassy','chandradass','chassagnette','chassar','chasseaud','chassebi','chassels','chasser','chassin','chavasse','cherkassky','chevassut','chiassaro','chiasson','christtmass','claassen','claassens','class','classen','classens','classey','classic','classick','classon','colliass','compass','corlass','corrass','cortopassi','crass','crasswell','crassweller','creasser','croudass','crudass','currass','dalmasso','dass','dassa','dassama','dassanaike','dassanayake','dassani','dassaur','dasseville','dassler','dasso','dasson','dassonville','dassow','dassu','dassut','dassy','d''brass','de assis','de grasse','de pass','degrasse','degrassi','del basso','depass','depasse','devassy','devassykutty','diarrassouba','diassona','dilasser','djelassi','d''lasselle','dos passos','douglass','dowglass','dracass','du casse','ducasse','dugasse','duglass','dundass','eassie','eassom','easson','el fassi','el hassan','el-assaad','elassal','elfassi','elfassy','elhassan','el-hassan','elhassani','eliassen','eliasson','el-kassir','elmhassani','elyassi','espinasse','faassen','fairbass','fairbrass','falwasser','fass','fassam','fassan','fassbender','fasseau','fassenfeld','fassenfelt','fasser','fassett','fassihi','fassinger','fassio','fassioms','fassis','fassler','fassnidge','fassom','fassoms','fasson','fassum','fassy','fewlass','fieldgrass','finglass','fracassi','fracasso','frasson','frassoni','furnass','gabbitass','gaddass','galassi','galasso','gass','gassama','gassan','gassar','gasse','gasser','gassick','gasside','gassis','gassman','gassmann','gassner','gasson','gassor','gasston','gassy','gebreselassie','gebreslassie','ghassan','ghassemi','ghassemian','ghiassi','gilgrass','gillgrass','glass','glassar','glassberg','glassborow','glassbrook','glassby','glassco','glasscock','glasscoe','glasscoo','glasse','glassell','glassenbury','glasser','glassett','glassey','glassfield','glassford','glassgow','glassington','glassman','glassock','glasson','glassonbury','glasspell','glasspole','glasspool','glasspoole','glasstone','glassup','glassup-smith','glasswell','goldwasser','goodlass','grass','grassa','grassam','grassby','grasse','grasset','grassham','grassi','grassick','grassie','grassing','grassington','grassini','grasske','grasso','grassom','grasson','grassroots','greenglass','greengrass','grossnass','habassi','habteselassie','hadassi','haileselassie','hajivassiliou','halpass','hass','hassa','hassaan','hassaballa','hassabu','hassack','hassad','hassain','hassaine','hassal','hassall','hassalls','hassam','hassan','hassan ali','hassanali','hassan-ali','hassanally','hassane','hassanein','hassani','hassania','hassanian','hassanien','hassanin','hassaniyeh','hassanjee','hassanpour','hassany','hassanyeh','hassanzada','hassanzadeh','hassard','hassay','hassbani','hasse','hassea','hassein','hassel','hasselbach','hasselby','hasselder','hasseldine','hasseler','hasselgren','hassell','hassells','hasselman','hasselmann','hasselt','hassen','hassent','hasser','hasset','hassett','hassey','hassi','hassiakos','hassian','hassib','hassid','hassie','hassim','hassin','hassine','hassing','hassini','hassion','hassiotis','hasslacher','hassle','hassler','hasslett','hassman','hassn','hasso','hassock','hasson','hassoon','hassoun','hassouna','hassouni','hassy','hawkings-byass','hochstrasser','hoodlass','hudlass','hudlass-galley','hvass','ingrassia','jackson-bass','jamnadass','jarass','jass','jassad','jassal','jassam','jassan','jassar','jassat','jasse','jasseh','jassel','jassell','jasser','jassey','jassi','jassie','jassim','jassin','jasso','jasson','jassop','jassy','jelassi','jhass','jonassen','jonasson','kalbassi','kaltwasser','karahassan','karassek','karassellos','karbassi','karrass','kass','kassa','kassab','kassabian','kassah','kassahun','kassai','kassam','kassama','kassamali','kassan','kassanga','kassanis','kassapian','kassar','kassardjian','kassas','kassay','kassaye','kasse','kasseean','kassel','kassell','kasselman','kassem','kassen','kasser','kassey','kassi','kassidy','kassie','kassier','kassim','kassimatis','kassimi','kassin','kassir','kassiram','kassiras','kassiri','kassis','kassler','kassman','kassner','kasson','kassongo','kassouf','kassous','kassrai','kasstan','kassulke','kassy','khamassi','khass','khassal','klaassen','klass','klassa','klassen','klassnik','klasson','knass','kouassi','kounasso','koylass','krass','krasser','krassnitzer','krassos','krassowska','krassowski','kutassy','labassi','labassiere','lachasseigne','larrassey','lass','lassa','lassak','lassalle','lassam','lassan','lasse','lassen','lasser','lasserre','lasserson','lasseter','lassetter','lassey','lassiter','lasslett','lassman','lassmans','lassnig','lasso','lasson','lassoued','lassu','lassus','lawlass','laxton-bass','le gassick','le gassicke','lebrasse','lecrass','legassick','lemass','lemasson','levasseur','lhassani','liassi','liassides','lomass','losasso','lovelass','lowmass','lucass','lucassi','lynass','maass','maassen','macassey','magassa','mallpass','malpass','manasse','manasseh','manassian','manassie','mandon-gassman','mass','massa','massaccesi','massad','massah','massaio','massalay','massall','massally','massam','massamba','massan','massanet','massaquoi','massar','massara','massarano','massard','massarella','massarelli','massari','massaro','massart','massawe','massay','massbery','masscy','masse','massee','massei','massel','masselis','massell','massen','massender','massengo','massenhove','masser','masserella','masseri','masseroli','masset','massett','massetti','massey','massey-chase','masshar','masshedar','massheder','massi','massia','massiah','massias','massicks','massicott','massicotte','massidda','massie','massie-taylor','massih','massimi','massimiliano','massimino','massimo','massin','massing','massingale','massingberd','massingberd-mundy','massingham','massinghan','massini','massink','massion','massironi','massiter','massmann','masso','massocchi','massod','massom','masson','massone','massood','massop','massos','massot','massotti','massoud','massoudi','massoudinia','massouh','massoumi','massoumian','massoura','massouras','massow','massri','masssey','massudi','massum','massumi','massy','massy-collier','massyn','matassa','matassi','matthiasson','mattrass','mayassi','mcassey','mcglasson','mcnasser','menassa','middlemass','minassian','moass','mobasser','mobasseri','modasser','mohades-kassai','montasser','morhtassi','motavassel','mouqtassid','mouyiassi','movassagh','movassaghi','mudassar','mudasser','mudassir','mullasseril','munasser','muntasser','nambi-lasseko','nass','nassa','nassab','nassali','nassan','nassanga','nassar','nassari','nassaris','nassau','nasse','nasseem','nassef','nassehi','nassem','nasser','nasseraldeen','nassereddine','nasseri','nassery','nasseur','nassey','nassi','nassib','nassie','nassif','nassim','nassir','nassiri','nassir-pour','nassiry','nasskau','nasso','nassolo','nasson','nassor','nassour','nassr','nassralla','nassrat','nassuna','nassuphis','nassur','natrass','nattrass','negassi','neiass','nekrassov','ngassa','nicholass','nicklasson','niklasson','nyass','nyassi','onassis','osei-assibey','ouassine','overmass','pallagrass','pallass','papavassiliou','pass','passa','passafonti','passalacqua','passam','passan','passano','passant','passantino','passap','passaportis','passard','passarelli','passarello','passariello','passaris','passaro','passas','passat','passaway','passby','passchier','passco','passe','passee','passell','passells','passenger','passer','passera','passerello','passeri','passerini','passes','passet','passett','passey','passfield','passhore','passi','passiatore','passingham','passinghan','passley','passman','passmoor','passmoore','passmore','passon','passoni','passons','passos','passow','passwala','passway','passy','pawass','payassis','pendegrass','petrassi','petrasso','peyrasse','picasso','pintassilgo','pitassi','plass','plassard','plasse','plassing','pleass','polglass','poonwassie','portass','pragassen','prassas','prassede','prasser','purgass','qassem','qassemi','qassim','qassin','quassim','quatermass','rabassa','rabasse','ramadass','ramasso','ramdass','rashbass','rass','rassa','rassad','rassam','rassan','rassekh','rassel','rassell','rasser','rassi','rassid','rassim','rassiter','rasson','rassool','rassouli','rassul','regassa','rohrbasser','rouass','rungassamy','salmassian','sanassee','sanassy','sancassani','sant-cassia','sass','sassa','sassano','sassarini','sasse','sassella','sassen','sasserath','sassi','sassienie','sasso','sasson','sassone','sassone-corsi','sassons','sassoon','sassu','schmassmann','scott-masson','seeneevassen','selassie','sepassi','shallcrass','shanassy','shankardass','shaughnassy','shere-massey','simonassi','slassor','smargiassi','snodgrass','spassov','spassova','stallabrass','stallebrass','stallibrass','stallybrass','stass','stassen','stassi','stassiouk','strass','strassacappa','strassen','strasser','strassheim','strasshine','sunassee','sunnassee','syass','tabassam','tabassum','tabassun','tahmassebi','tamassy','targrass','tass','tassa','tassabehji','tassadaq','tassaker','tassan','tassano','tassara','tassart','tassawar','tasse','tassel','tassell','tasselli','tassi','tassie','tassier','tassiker','tassinari','tasso','tassone','tassou','tavassoli','tesfaselassie','thassim','thomass','thomassen','thomasset','thomassin','thomasson','thoulass','tirabasso','titmass','tobiassen','tomass','tomassen','tomassi','tomassini','tomasso','tomasson','toplass','trapasso','travasso','travassos','treppass','trippass','trivass','ul hassan','ulhassan','ul-hassan','valassis','van assen','van hasselt','vanassche','vangasse','vass','vassa','vassal','vassall','vassalli','vassallo','vassalos','vassan','vassantlal','vassar','vassaramo','vassay','vasse','vasseghi','vassel','vasselin','vassell','vassello','vassen','vasser','vasseur','vassey','vassi','vassib','vassie','vassil','vassila','vassilakis','vassilas','vassileiou','vassilev','vassileva','vassili','vassiliades','vassiliadis','vassiliev','vassilieva','vassiliou','vassilis','vassiljev','vassiljeva','vassilopoulos','vassiloulis','vasso','vasson','vassoodaven','vassos','vassou','vettasseri','vigrass','vincatassin','vlassis','vlassov','wanlass','wass','wassal','wassall','wassan','wasse','wassef','wassel','wassell','wassem','wassenaar','wasser','wasserberg','wasserman','wassermann','wasserstein','wassi','wassie','wassiee','wassif','wassili','wassim','wassing','wassink','wassmer','wasson','wasswa','wattass','willgrass','windass','windgassen','windrass','wiseglass','woldeselassie','woodmass','woolass','wrong assistant','xassan','yass','yassa','yassar','yasseen','yassen','yasser','yassi','yassien','yassim','yassin','yassine','yassini','yassir','yassrebi','zachariassen')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') in ('ass','asshole')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*ballsack.*'       and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bastard.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bitch.*'          and lower(pet_name_split) not in ('babitcheva','bitcha','bitchakdjian','bitcham','bitchanka','bitchard','bitchass','bitchburn','bitchel','bitchell','bitchen','bitchener','bitchenkova','bitcheno','bitchenor','bitcher','bitcherla','bitchers','bitchfield','bitchford','dembitchi','subitcha')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*biatch.*'         and lower(pet_name_split) not in ('biatchoe','biatchon','mbiatchou','mbiatchou-nya')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bloody.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*blowjob.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bollock.*'        and lower(lower(pet_name_split)) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bollok.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bollox.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*boner.*'          and lower(pet_name_split) not in ('amboner','bonera','bonera-callan','boner-cambell','bonere','boneret','bonerhygena','boneri','bonerjea','bonerpairet','bonerr','carboner','carbonera','carboneras','carbonere','carboneri','carbonero','eboner','kabonero','ortiz carboneres','osboner','rabonerabone','rathboner','rathboners')\n                 or       lower(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'BOOBEAR',''),'BOOBOO','')) regexp '.*boob.*'           and lower(pet_name_split) not in ('aboobacker','aboobakar','aboobaker','aboobucker','boobbyer','boobis','mahboob','mahboobani','mehboob','mohoboob')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bugger.*'         and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'BUMBLE',''),'BINGBUM','')) regexp '.*bum.*'            and lower(pet_name_split) not in ('album','babumba','bumatay','bumba','bumbra','bumble','bumby','bumford','bumfrey','bumpas','bumpstead','bumpsteed','bumpus','bumrah','mbumba')\n                 or       lower(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'BUTTON',''),'BUTTER','')) regexp '.*butt.*'           and lower(pet_name_split) not in ('albutt','allbutt','archbutt','baybutt','bhabutta','butt','buttaci','buttall','buttar','buttarazzi','buttarelli','buttars','buttel','buttell','butten','buttenshaw','butter','buttercase','butterell','butterfeild','butterfield','butterfiled','butterfill','butterfly','butterick','butterill','butteris','butteriss','butterley','butterly','butters','buttersworth','butterton','butterwick','butterwith','butterwood','butterworth','butterwoth','buttery','buttfield','butti','buttice','buttifant','buttifint','buttigieg','buttimer','buttimore','buttiner','butting','buttinger','buttivant','buttle','buttleman','buttler','buttley','buttling','buttner','buttolph','button','buttons','button-stephens','buttress','buttrey','buttrick','buttrill','buttriss','buttrum','butts','buttwell','buttworth','callbutt','carbutt','ebbutt','gabbutt','garbutt','gorbutt','gurbutt','harbutt','holbutt','hurlbutt','lebutt','mabbutt','ollenbuttel','parbutt','sarbutt','sarbutts','sbuttoni','sobutta','sowerbutts','stuart-buttle','talbutt','tarbutt','tebbutt','tebutt','tibbutt','tobutt','turbutt','wallbutton','warbutton')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*clitoris.*'       and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'PEACOCK',''),'COCKAPOO',''),'HITCHCOCK',''),'COCKER','')) regexp '.*cock.*'           and lower(pet_name_split) not in ('cockram','adcock','adcocks','addcock','alcock','alecock','allcock','allicock','ancock','aucock','awcock','aycock','babcock','barcock','batcock','battcock','baycock','beacock','beercock','bilcock','bocock','boocock','bowcock','bulcock','bullcock','cockain','cockar','cockarill','cockayne','cockbain','cockbaine','cockbill','cockborn','cockburn','cockcroft','cocke','cockel','cockell','cocken','cocker','cockerall','cockeram','cockeran','cockerell','cockerham','cockerhan','cockerhill','cockeril','cockerill','cockerline','cockersell','cockersole','cockerton','cockett','cockette','cockfield','cockford','cockhill','cockill','cockin','cockland','cockle','cocklin','cockling','cockran','cockrane','cockrel','cockrell','cockrem','cockren','cockrill','cockrin','cockroft','cocksedge','cocksey','cockshull','cockshutt','cockson','cocksworth','cockton','cockwell','cockwill','crocock','dancock','dancocks','deacock','decock','didcock','dilcock','eacock','ecock','edgecock','elcock','elcocks','ellcock','ellicock','filcock','grewcock','grocock','groocock','growcock','hacock','hadcock','haincock','hallcock','hamcock','hancock','hancocke','hancocks','handcock','hankcock','hanncock','harcock','hawcock','haycock','haycocks','heacock','heathcock','hedgcock','hedgecock','heircock','hencock','hercock','heycock','hichcock','highcock','hillcock','hircock','hiscock','hiscocks','hitchcock','hitchcocks','hitcock','hithcock','hudson-peacock','jeacock','jeacocke','jeycock','johncock','lacock','lawcock','laycock','leacock','lewcock','leycock','locock','lowcock','luccock','luckcock','lucock','lurcock','maycock','meacock','milcock','miscock','mocock','moorcock','morecock','mulcock','mycock','nancock','ocock','paecock','peacock','peacocke','peacocks','peakcock','pecock','peecock','philcock','pidcock','pitcock','pocock','purcocks','pycock','radford-hancock','raincock','sandercock','saundercock','shellcock','shilcock','shillcock','silcock','silcocks','sillcock','simcock','simcocks','sincock','slocock','slucock','symcock','tancock','tilcock','tillcock','tocock','trebilcock','trebillcock','twocock','veacock','wadcock','walcock','wallcock','westcock','whadcock','wilcock','wilcocks','wilcockson','willcock','willcocks','willcockson','woocock','woodcock','wookcock','woolcock','woolcocks')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*coon.*'           and lower(pet_name_split) not in ('coonagh','coonan','coonar','coonber','coonbes','coonbs','coone','cooner','coonerty','coones','cooney','coong','coonick','coonie','coonor','ocooner','ocoonor','scoon','scoones','scoons')\n                 or       lower(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'SCRAP','')) regexp '.*crap.*'           and lower(pet_name_split) not in ('scrap')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*cunt.*'           and lower(pet_name_split) not in ('scunthorpe')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*damn.*'           and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'DICKSON',''),'DICKENS','')) regexp '.*dick.*'           and lower(pet_name_split) not in ('benedick','benedickter','biddick','boldick','braddick','bradick','briddick','brodick','bundick','burdick','caddick','chiddick','chiddicks','cobbledick','condick','craddick','cradick','cundick','dickason','dickaty','dicke','dickel','dicken','dickens','dickenson','dicker','dickers','dickerson','dickes','dickeson','dicketts','dickey','dickham','dickie','dickin','dickings','dickingson','dickins','dickinson','dickinson-smith','dickison','dickle','dickon','dickons','dickonson','dickov','dicksee','dickson','dicksons','dicky','fendick','forsdick','forsdicke','fosdick','fredick','frosdick','grimsdick','haddick','haedicke','hedicker','hildick','hildick-smith','kaddick','kendick','landick','ludick','luedicke','maddick','maddicks','mccordick','mcdicken','mcdickson','meddick','meddicks','paddick','pundick','reddick','rhodick','riddick','riddicks','roddick','rodick','ruddick','rudick','sadick','sandick','shaddick','shadick','siddick','suddick','thorndick','vodicka','waddicker','weadick','wedick','widdick','widdicks','zserdicky')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*dildo.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&','') = 'DYKE'           --and lower(pet_name_split) not in ('dyker','fendyke','forsdyke','thorndyke','van dyke','vandyke')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*erect.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&','') in ('FAG','FAGGOT','FAGOT','FAGGOTS','FAGGOTCAT')            --and lower(pet_name_split) not in ('alfageme','fagade','fagaly','fagan','fagandini','fagbemi','fagbenle','fagbenro','fagbohun','fagbohungbe','fagbola','fagboyegun','fagbure','fage','fagelman','fagelson','fagen','fagence','fagents','fager','fagerlund','fages','faggetter','faggin','faghany','faghihi','faghirzadeh','faghy','fagin','fagioli','fagnani','fagon','fagundes','fagunwa','fagura','graffagnino','mcfagan','tesfagaber','zolfaghari')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*fatass.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*feck.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*fellate.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*fellatio.*'       and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*felching.*'       and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*fuck.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*fudgepack.*'      and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*flange.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*goddamn.*'        and lower(pet_name_split) not in ('')\n            --     --or       replace(replace(replace(replace(pet_name_split,'''',''),' ',''),'-',''),'&','') regexp 'hell'           and lower(pet_name_split) not in ('abethell','archell','bachell','barichello','backshell','batcheller','batchellor','battershell','beachell','bearchell','bechelli','beckhelling','bethell','bexhell','bhella','birchell','bishell','bithell','boshell','boshelle','bowshell','bratchell','buchell','bulheller','burchell','bushell','bythell','cashell','chell','chella','chelladurai','chellam','chellamuthu','chellappah','chellappan','chellar','chelle','chellen','chellew','chelley','chelliah','chellingsworth','chellingworth','chellis','chellum','coshell','critchell','cuthell','dichello','etchell','etchells','ethell','formichella','getchell','ghelle','hanschell','hatchell','hella','hellaby','hellal','hellam','hellan','helland','hellard','hellary','hellas','hellawell','hellberg','helle','hellebrand','hellel','hellen','hellend','hellens','heller','hellerman','hellery','hellett','helleur','hellewell','helley','hellgren','helliar','hellicar','hellier','helliker','hellin','helling','hellinger','hellings','hellingsworth','hellis','hellish','helliwell','hellman','hellmann','hellmers','hellmich','hellmuth','hellon','hellor','hellors','hellowell','hellsten','hellstrom','hellwell','hellwig','hellwing','helly','hellyar','hellyer','hellyn','hellywell','hempshell','henshell','herschell','hitchell','houchell','ithell','kearney-mitchell','kemshell','ketchell','khella','kinchella','kitchell','larochelle','licchelli','llewhellin','llewhellyn','lythell','machell','maitchell','marchell','marshell','matchell','maychell','mcmitchell','mechell','michell','michelle','michelli','mictchell','micthell','mighell','mihell','minchell','minchella','minghella','minshell','mirchell','mitchell','mitchell-davis','mitchell-dawson','mitchelle','mitchell-gears','mitchell-harris','mitchell-innes','mitchelll','mitchellmore','mitchells','mitchell-smith','mitchellson','mithchell','mithell','mittchell','monachello','mtchell','mutchell','neachell','nethell','nichells','nihell','nitchell','ochello','page-mitchell','patchell','peachell','pechell','petchell','phellas','phellps','pitchell','purchell','rachell','rachelle','renshell','richell','rochell','rochelle','rotchell','rothell','satchell','satchelle','schell','schellekens','schellenberg','scheller','senchell','setchell','seychell','shell','shellabear','shellam','shellan','shellard','shellbourne','shellcock','shellcross','shelldon','shelldrake','shellem','shellens','sheller','shelley','shellhorn','shellie','shellien','shelliker','shellim','shelling','shellis','shellito','shellock','shells','shellshear','shellswell','shellton','shellum','shelly','smithells','stitchell','tatchell','tempest-mitchell','thellman','thellmann','thellusson','titchell','tortoishell','trewhella','trushell','twitchell','vachell','vencatachellum','weighell','whell','whellam','whellams','whellan','whellans','wheller','whelligan','whichello','whitchell','witchell','withell','zucchelli')     \n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') = 'hell'       \n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*homo.*'           and lower(pet_name_split) not in ('homoki','homoky','homola','homolka','homoncik','mojakhomo','odhomor','sohomow','thomond','thomopson','thomos','thomoson')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*illegal.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*immigrant.*'      and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*jerk.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*jizz.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*labia.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*lardass.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*lmao.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*lmfao.*'          and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'MUFFIN','')) regexp '.*muff.*'           and lower(pet_name_split) not in ('muffat','muffet','muffett','muffin','muffitt','mufford')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*nigga.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*nigger.*'         and lower(pet_name_split) not in ('')\n            --     or       replace(replace(replace(replace(pet_name_split,'''',''),' ',''),'-',''),'&','') regexp 'nob'            and lower(pet_name_split) not in ('agwunobi','akzo nobel','annobil','anunobi','asinobi','conoboy','czarnobaj','danobrega','de nobrega','de nobriga','denobrega','denobriga','dinobi','dodd-noble','donoban','enobakhare','igbinoba','knobb','knobbs','knobel','knoblauch','knoble','knobloch','nobakht','nobari','nobb','nobble','nobbs','nobe','nobeebaccus','nobeen','nobel','noberts','nobertson','nobes','nobi','nobile','nobin','nobinson','noble','noble-nesbitt','nobles','noblet','noblett','noblin','nobo','noboa','nobody','nobre','nobrega','nobson','nwadinobi','obanobi','onobrauche','pronobis','sinobad','snober','stride-noble','sznober')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') = 'nob'      \n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*penis.*'          and lower(pet_name_split) not in ('penistan','peniston','penistone','')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*piss.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*poof.*'           and lower(pet_name_split) not in ('')\n                 --POOP not in use for pet name swear words\n                 --or       replace(replace(replace(replace(pet_name_split,'''',''),' ',''),'-',''),'&','') regexp 'poop'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*prick.*'          and lower(pet_name_split) not in ('prickett')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*pube.*'           and lower(pet_name_split) not in ('')\n                 --PUFF not in use for pet name swear words\n                 --or       replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'LOVEPUFF',''),'HUFFLEPUFF','') regexp 'puff'           and lower(pet_name_split) not in ('puffer','puffett','puffitt','spuffard')                \n                 or       replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&','') in ('PUSSYFLAP','PUSSYFLAPS','YOURPUSSY','PERVERTEDPUSSYCAT','PUSSYDESTROYER')          --and lower(pet_name_split) not in ('') and pet_name_split not regexp 'pussycat'\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*scrotum.*'        and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'ESSEX',''),'SUSSEX','')) regexp '.*sex.*'            and lower(pet_name_split) not in ('bessex','bissex','essex','essex-crosby','sexby','sexon','sexstone','sexton','sussex','wessex')\n                --SHAG not in use for pet name swear words\n                --or       replace(replace(replace(replace(pet_name_split,'''',''),' ',''),'-',''),'&','') regexp 'shag'           and lower(pet_name_split) not in ('ashagbe','eshag','shagari','shagaya','shaghaghi')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*shit.*'           and lower(pet_name_split) not in ('ashitey','feshitan','kinoshita','mashiter','matsushita','miyashita','morishita','mwashita','oshitola','rakshit','rashit','rushiti','shith','shitta-bey','shittabey','shittu','shitu','yamashita')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*slag.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*slut.*'           and lower(pet_name_split) not in ('sluter')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*smegma.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*spunk.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*smelly.*'         and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'HONEYSUCKLE','')) regexp '.*suck.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*suicide.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*terrorist.*'      and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*testical.*'       and lower(pet_name_split) not in ('')\n            --     or          replace(replace(replace(replace(pet_name_split,'''',''),' ',''),'-',''),'&','') regexp 'tit'            and lower(pet_name_split) not in ('footitt','titcombe','bultitude','daintith','dentith','footit','foottit','futtit','grittith','grittiths','laetitia','le petit','lepetit','le-petit','lostitch','loutit','louttit','mititelu','mutiti','muttitt','otite','otitoju','pentith','petit','petite','petitjean','petitpierre','petitt','pettit','pettite','pettitt','ptitchard','satite','stitch','stitchell','stitcher','stitchman','stitfall','stitkovac','stitou','stitson','stitt','stittle','tita','titan','titchard','titchell','titchen','titchener','titchin','titchiner','titchmarsh','titchner','tite','titera','titerickx','titford','tithecott','tither','titheradge','titheridge','titherington','titherley','titherly','titi','titilayo','titiloye','titjen','title','titler','titley','titlow','titmarsh','titmas','titmass','titmus','titmuss','tito','titorenko','titov','titova','titre','titshall','titt','tittensor','titterington','titterrell','tittershill','titterton','tittle','tittley','titton','tittonis','tituana','titus','titus-glover','titze','whittit')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') = 'tit'            \n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*tosser.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*turd.*'           and lower(pet_name_split) not in ('sturdee','sturdey','sturdgess','sturdivant','sturdy')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*twat.*'           and lower(pet_name_split) not in ('attwater','attwaters','atwater','westwater')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*vagina.*'         and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'TWANKEY','')) regexp '.*wank.*'           and lower(pet_name_split) not in ('mufwankolo','nwankpa','nwankwo','nwankwor','nwankwu','schwank','swankie','wanklyn','wankowicz')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*whore.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bottomlicker.*'   and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*spannerpants.*'   and lower(pet_name_split) not in ('')\n                then 1 else 0\n        end as swear_flag\n        ,case when length(pet_name_split) > 100 then 1 else 0 end as max_length_flag\n        ,case \n            when length(replace(replace(replace(lower(pet_name_split),' ',''),'-',''),'&','')) = 1 then 1 \n            else 0 \n        end as min_length_flag\n        ,case \n            when lower(pet_name_split) not regexp '.*[a-zA-Z].*' or lower(pet_name) not regexp '.*[a-zA-Z].*' then 1 \n            else 0 \n        end no_alphabetic_flag\n        ,case \n            when lower(pet_name_split) regexp '(.*)(no name|unknown|not known|new cat|not named yet|see below|unamed|unnamed|not decided|not yet named|to be named|decided|not chosen)(.*)' then 1 --List of clearly bad names\n            when lower(pet_name_split) regexp '(.*)(sister|white|cat|dog|yes|brother)(.*)' and  pet_name_split regexp '.*\\\\).*' then 1 --List from searching for close brackets left over\n            when pet_name_split regexp '.*[0-9].*' and pet_name_split regexp '.*\\\\).*' then 1 --Identifies names that contain a number and a close bracket\n            when lower(pet_name_split) regexp '(.*)( years old|years old|0atis|0liver|0lly|0pel|0scar|0z|1 max. 2 pippa|1 poppy 2 dottie|1. vasska 2. sherman|10 years|12 cats|14 others|15 boy|1sheba|2 cats  barry|2 cats  demi|2 catsbrahma|2 dogs|2 dogs  coco|2 dogs coco|2 honey|2 kerry|2 s|2 siamese cats jasmin|2 x dogs star|3 cats|3 cats eve|3 cats oldest garfield|3 jack|3 moggie|3 others|3 s|34c25|3d|3hree|4 cats|4 cats bingo|5 cats|5 kittens|6 cats  lucy|7even|8 cats owned|9yrs|''bea''|''bertha simmering light|cant name them yet|cat 1|cat 2|cat 3|cat 4|cat a|cat name|cat1|cat1 tom|cat12|cat13|cat1bentley|cat2|cat3|''cea|''cooper'' magic pulse|do not have one|dog 1|dog 2|dog 3|dog 4|dog 5|dog1|dog11|dog2|dog3|dont have any|dont have names yet|dont have one|don''t know|dont know yet|don''t know yet|''dre|dunno|dunno yet|éva|gaylord|have 5 cats|have 6 cats|have not named them|havent chosen yet|havent named them|havent named yet|i have 11|i have 2 maisie|i have 2 micky|i have 3 cats|i have 3 twinkle|i have 4 cats|i have 5|i have 5 cats|i have 5 cat''s|i have lots|i have six molly|i havent got one|ive got 24 cats|i''ve got 4 cats|ive got 6 mia|just born|just born2|''kc''|no cat|no idea|no kittens|no more|no.1|no.2|no1 no2 no3 no|not given yet|not got adult|not keeping|not named|not named as yet|not named her yet|not picked on yet|not sure|not sure new kitten|not sure yet|not yet|not yet chose one|not yey named|nothing yet|''olly|only 1 dog|out door cat|pup1|pup2|pup3|puppies 10|puppies x 10|puppy 1|puppy 2|puppy 3|puss 1|puss 2|still thinking of name|still to name them|\uD83C\uDF40 clover|used to this)(.*)' \n                      and NOT(lower(pet_name_split) ilike any ('%dunnock%','%snowcat amber%','%kenynten say no more%','%kentixen no more drama%','%worry no more%','%dream no more%')) then 1 --bad names requested by CS to be blanked\n            else 0 end as invalid_name_flag\n        ,case\n            when length(pet_name_split) > 15 and (length(pet_name_split) - length(replace(replace(pet_name_split,' ',''),'-',''))) = 0 then 1\n            when length(split_part(replace(pet_name_split,'-',' '),' ',1)) > 15 then 1\n            when length(split_part(replace(pet_name_split,'-',' '),' ',2)) > 15 then 1\n            when length(split_part(replace(pet_name_split,'-',' '),' ',3)) > 15 then 1\n            when length(split_part(replace(pet_name_split,'-',' '),' ',4)) > 15 then 1\n            when length(split_part(replace(pet_name_split,'-',' '),' ',5)) > 15 then 1\n        else 0 end as long_name_flag\n        ,case when length(pet_name_split) - length(replace(pet_name_split,' ','')) > 3 then 1 else 0 end as multi_word_flag\n    from ${Database}.temp.all_pet_names\n)\nselect  \n    pet_name\n    ,case \n        when swear_flag = 1 or max_length_flag = 1 or min_length_flag = 1 or no_alphabetic_flag = 1 or invalid_name_flag = 1 or long_name_flag = 1 then '' \n        else replace(pet_name_split,')','') \n    end as pet_name_cleaned\n    ,swear_flag\n    ,max_length_flag\n    ,min_length_flag\n    ,no_alphabetic_flag\n    ,invalid_name_flag\n    ,long_name_flag\n    ,multi_word_flag\n    ,cast(0 as tinyint) as deceased_flag\nfrom flags\n;\n\ndrop table if exists ${Database}.temp.all_pet_names;\n\n--Add deceased marker to pet suppression markers\nupdate ${Database}.live.pet_name_lookup\nset deceased_flag = 1\nwhere upper(pet_name) in\n(\nselect upper(pet_name)\nfrom ${Database}.temp.deceased_name\n)\n;\n\n\nalter warehouse set warehouse_size = 'Small';\n\n--Work out suppressions from supps_pet table\ndrop table if exists ${Database}.temp.supps_pets;\ncreate or replace table ${Database}.temp.supps_pets\nas\nselect distinct\n    deceased_urn\nfrom (\n         select distinct\n              upper(x2.name_urn||'|'||trim(sp.pet_name)) as deceased_urn\n         from ${Database}.db.supps_pet sp\n         inner join ${Database}.live.xref_name_urn x1 on lower(x1.email) = lower(trim(sp.email))\n         inner join ${Database}.live.xref_name_urn x2 on x2.cid = x1.cid\n         where trim(sp.email) > ''\n         union all\n         select distinct\n              upper(x2.name_urn||'|'||trim(sp.pet_name)) as deceased_urn\n         from ${Database}.db.supps_pet sp\n         inner join ${Database}.live.xref_name_urn x1 on x1.name_urn = trim(sp.source_urn)\n         inner join ${Database}.live.xref_name_urn x2 on x2.cid = x1.cid\n     ) s;\n\n\n--Create full version of pet information (will be deduped later)\ndrop table if exists ${Database}.temp.cid_pet_temp;\nCREATE OR REPLACE TABLE ${Database}.temp.cid_pet_temp as\nselect\n    cid\n    ,name_urn\n    ,pet_type\n    ,pet_breed\n    ,nvl(pet_gender,'') as pet_gender\n    ,upper(nvl(pet_size,'')) as pet_size\n    ,pet_indoor_outdoor\n    ,pet_colour\n    ,nvl(pet_name_cleaned,'') as pet_name_cleaned\n    ,case\n        when pet_dob is not null then pet_dob --CIAM actual DOB\n        when pet_age_years is not null and pet_age_months is not null then add_months(pet_dob_first_data_date, -((pet_age_years*12)+pet_age_months)) --CIAM pet age years or months\n        when pet_birth_month is not null and pet_birth_year is not null\n            then case\n                     when try_to_date(cast(pet_birth_year as varchar)||'-'||pet_birth_month||'-'||to_char(pet_dob_first_data_date,'DD')) is not null\n                         then cast(cast(pet_birth_year as varchar)||'-'||pet_birth_month||'-'||to_char(pet_dob_first_data_date,'DD') as date)\n                     else last_day(cast(cast(pet_birth_year as varchar)||'-'||pet_birth_month||'-'||'01' as date))\n                 end --Birthday email \n        when pet_age_years is not null and pet_birth_month is not null\n            then case\n                     when try_to_date(cast(cast(to_char(pet_dob_first_data_date,'YYYY') as int) - cast(pet_age_years as int) - case when pet_birth_month_int <= month(pet_dob_first_data_date) then 0 else 1 end as varchar)||'-'||pet_birth_month||'-'||to_char(pet_dob_first_data_date,'DD')) is not null\n                         then cast(cast(cast(to_char(pet_dob_first_data_date,'YYYY') as int) - cast(pet_age_years as int) - case when pet_birth_month_int <= month(pet_dob_first_data_date) then 0 else 1 end as varchar)||'-'||pet_birth_month||'-'||to_char(pet_dob_first_data_date,'DD') as date)\n                     else last_day(cast(cast(cast(to_char(pet_dob_first_data_date,'YYYY') as int) - cast(pet_age_years as int) - case when pet_birth_month_int <= month(pet_dob_first_data_date) then 0 else 1 end as varchar)||'-'||pet_birth_month||'-'||'01' as date))\n                 end --Winalot campaign and eCRM 'sorry' email\n        when pet_age_weeks is not null then (pet_dob_first_data_date - (pet_age_weeks*7)) --Purina GP signup (age given in weeks)\n        when pet_age_months is not null then add_months(pet_dob_first_data_date, -pet_age_months) --Purina GP signup (age given in months)\n    end as derived_pet_dob\n    ,case\n        when pet_dob is not null then 'Actual pet DOB'\n        when pet_age_years is not null and pet_age_months is not null then 'Pet age years and months'\n        when pet_birth_month is not null and pet_birth_year is not null then 'Pet birth month and year'\n        when pet_age_years is not null and pet_birth_month is not null then 'Pet age years and pet birth month'\n        when pet_age_weeks is not null then 'Pet age weeks'\n        when pet_age_months is not null then 'Pet age months'  \n        else 'No DOB details'\n    end as dob_type\n    ,pet_life_stage\n    ,source\n    ,pet_dob_last_data_date\n    ,data_date\nfrom\n    (\n    select distinct\n        cid\n        ,x.name_urn\n        ,case \n        when lower(p.pet_type) regexp '.*cat.*' then 'Cat'\n        when lower(p.pet_type) regexp '.*dog.*' then 'Dog'\n        else initcap(trim(p.pet_type)) end as pet_type\n        ,trim(coalesce(pbc.clean_breed_name,'')) as pet_breed\n        ,trim(pet_gender) as pet_gender\n        ,trim(pet_size) as pet_size\n        ,trim(pet_indoor_outdoor) as pet_indoor_outdoor\n        ,coalesce(trim(cl.purina_colour),trim(p.pet_colour)) as pet_colour\n        ,case when l.multi_word_flag = 1 and left(upper(x.name_urn),6) <> 'REG_KC' then '' else pet_name_cleaned end as pet_name_cleaned\n        ,pet_dob\n        ,lpad(to_char(pet_birth_month),2,'0') as pet_birth_month\n        ,pet_birth_month as pet_birth_month_int\n        ,pet_birth_year\n        ,pet_age_years\n        ,pet_age_months\n        ,pet_age_weeks\n      \t,pet_life_stage\n        ,trim(p.source) as source\n        ,least(p.data_date,source_date) as data_date\n        ,first_value(least(p.data_date,source_date)) over (partition by cid,case when lower(p.pet_type) regexp '.*cat.*' then 'Cat' when lower(collate(p.pet_type,'')) regexp 'dog' then 'Dog' else initcap(p.pet_type) end,pet_name_cleaned,pet_dob,pet_birth_month,pet_age_years,pet_age_months,pet_age_weeks order by least(p.data_date,source_date) asc) as pet_dob_first_data_date\n        ,first_value(least(p.data_date,source_date)) over (partition by cid,case when lower(p.pet_type) regexp '.*cat.*' then 'Cat' when lower(collate(p.pet_type,'')) regexp 'dog' then 'Dog' else initcap(p.pet_type) end,pet_name_cleaned,pet_dob,pet_birth_month,pet_age_years,pet_age_months,pet_age_weeks order by least(p.data_date,source_date) desc) as pet_dob_last_data_date\n    from ${Database}.live.xref_name_urn x\n    inner join ${Database}.db.pet p on x.name_urn = p.name_urn\n    left join ${Database}.live.pet_name_lookup l on upper(trim(p.pet_name)) = upper(l.pet_name)\n    left join ${Database}.db.ref_pet_breeds_clean pbc on lower(trim(pbc.breed_name)) = lower(trim(p.pet_breed))\n                                                and lower(trim(pbc.pet_type)) = lower(trim(p.pet_type))\nleft join ${Database}.db.pet_avatar_colour_lookup cl on upper(trim(p.pet_breed)) = upper(trim(cl.breed))\n                                                    and upper(trim(p.pet_colour)) = upper(trim(cl.passed_colour))\n    where nvl(l.deceased_flag,0) = 0\n    and upper(x.name_urn||'|'||trim(p.pet_name)) not in\n    (\n        select \n            deceased_urn\n        from ${Database}.temp.supps_pets\n    )\n    ) t\n;\n\ndrop table if exists ${Database}.temp.supps_pets;\n\n--Create deduped table of pet names with information\ndrop table if exists ${Database}.live.cid_pet;\nCREATE OR REPLACE TABLE ${Database}.live.cid_pet as\nselect \n    row_number() over (partition by cid order by case when nvl(pet_name,'') > '' then 1 else 0 end desc,pet_dob asc,case when nvl(pet_breed,'') > '' then 1 else 0 end desc,case when nvl(pet_gender,'') > '' then 1 else 0 end desc,name_urn desc,pet_name asc) as pet_number\n    ,* \nfrom\n(\nselect *\n       ,  case when pet_name > '' then pet_name\n               when pet_name = '' and lead(pet_name, 1) over(partition by cid, pet_type order by pet_name asc) > '' \n                                  and pet_data_date < lead(pet_data_date, 1) over(partition by cid, pet_type order by pet_data_date asc) then 'new name added' \n            else pet_name end as new_pets\nfrom\n(\nselect \n    cid\n    ,name_urn\n  \t,cast('' as varchar(50)) as pet_id\n    ,pet_type\n    ,pet_name_cleaned as pet_name\n    ,pet_breed\n    ,pet_gender\n    ,first_value(derived_pet_dob) over (partition by cid,pet_type,pet_name_cleaned order by case when derived_pet_dob is null then 0 else 1 end desc,pet_dob_last_data_date desc,derived_pet_dob desc) as pet_dob\n    ,first_value(dob_type) over (partition by cid,pet_type,pet_name_cleaned order by case when derived_pet_dob is null then 0 else 1 end desc,pet_dob_last_data_date desc,derived_pet_dob desc,dob_type desc) as pet_dob_type\n    ,coalesce(trim(lk.size),pt.pet_size) as pet_size\n    ,pet_indoor_outdoor\n    ,trim(pt.pet_colour) as pet_colour\n    ,pet_dob_last_data_date as pet_data_date\n    ,case\n  \t\twhen pet_life_stage > '' then pet_life_stage\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-12)  and coalesce(lk.size,pt.pet_size) in ('T','S')          then 'Puppy'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-24)  and coalesce(lk.size,pt.pet_size) in ('L','XL')         then 'Puppy'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-120) and coalesce(lk.size,pt.pet_size) in ('T','S')          then 'Adult'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-60)  and coalesce(lk.size,pt.pet_size) in ('L','XL')         then 'Adult'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-156) and coalesce(lk.size,pt.pet_size) in ('T','S','L','XL') then 'Senior'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-12)                                                          then 'Puppy'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-84)                                                          then 'Adult'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-156)                                                         then 'Senior'\n        when pet_type = 'Dog' and derived_pet_dob <= add_months(current_date,-156)                                                         then 'Older'\n        when pet_type = 'Cat' and derived_pet_dob >  add_months(current_date,-12)                                                          then 'Kitten'\n        when pet_type = 'Cat' and derived_pet_dob >  add_months(current_date,-84)                                                          then 'Adult'\n        when pet_type = 'Cat' and derived_pet_dob >  add_months(current_date,-192)                                                         then 'Senior'\n        when pet_type = 'Cat' and derived_pet_dob <= add_months(current_date,-192)                                                         then 'Older'\n        else 'Unknown'\n    end as pet_life_stage\n    ,cast(0 as int) as pdc_gender_link_update\n    ,cast(0 as int) as pdc_breed_link_update\n    ,cast(0 as int) as pdc_colour_link_update\n    ,cast(0 as int) as pdc_outdoor_link_update\n    ,source\n    ,row_number() over (partition by cid,pet_type,pet_name_cleaned order by data_date desc,pet_dob_last_data_date desc,derived_pet_dob desc,pet_size desc,pet_indoor_outdoor desc,pet_gender desc,pet_breed desc) as rownum\nfrom ${Database}.temp.cid_pet_temp pt\nleft join ${Database}.db.dog_breed_size_lookup lk on upper(pt.pet_breed) =  upper(trim(lk.breed))\nwhere pet_type in ('Cat','Dog')\n) t\nwhere rownum = 1\nand\n    (\n        (\n            pet_type = 'Dog' \n            and pet_dob > add_months(current_date, -240) --Dogs must be under 20\n        )\n        or \n        (\n            pet_type = 'Cat' \n            and pet_dob > add_months(current_date, -360) --Cats must be under 30\n        )\n        or\n        (\n            pet_type in ('Dog', 'Cat') --remove anything other than cat/dog\n            and pet_data_date >= add_months(current_date, -12) --everything captured in the last 12 months is valid\n        )\n    )\nand name_urn not in (\n                    select distinct c.name_urn\n                    from ${Database}.temp.cid_pet_temp c\n                    inner join ${Database}.temp.cid_pet_temp c2 on c.cid = c2.cid \n                                                          and c.pet_type = c2.pet_type \n                                                          and c2.source = 'RESP_REV_DAILY'\n                    where c.pet_name_cleaned = ''\n                    ) \n) np \nwhere new_pets <> 'new name added'\n;\n\nalter warehouse set warehouse_size = 'Xsmall';\n                         \ndrop table if exists ${Database}.temp.cid_pet_temp ;  \n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid_pet',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_pet;\n\n--merge pdc ages\nmerge into ${Database}.live.cid_pet pt\nusing (\n          select\n              xr.cid,\n              ae.npp_ecrm_pdc_age as pet_name,\n              case when lower(link_url) ilike '%utm_content=twoyears%' then cast(add_months(event_timestamp, -24) as date)\n                   when lower(link_url) ilike '%utm_content=fiveyears%' then cast(add_months(event_timestamp, -60) as date)\n                   when lower(link_url) ilike '%utm_content=eightyears%' then cast(add_months(event_timestamp, -96) as date)\n                   when lower(link_url) ilike '%utm_content=tenyears%' then cast(add_months(event_timestamp, -120) as date)\n                   end as pet_dob,\n              cast(event_timestamp as date) as data_date,\n              row_number() over(partition by xr.cid, ae.npp_ecrm_pdc_age order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ae.name_urn\n          where lower(event_name) regexp '.*click.*'\n          and link_label = 'PDC | Service | PDC' --check\n          and link_url ilike any  (\n                                  '%utm_content=twoyears%',\n                                  '%utm_content=fiveyears%',\n                                  '%utm_content=eightyears%',\n                                  '%utm_content=tenyears%'\n                                 )\n          and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population))\n      ) ax on ax.cid = pt.cid\n          and lower(ax.pet_name) = lower(pt.pet_name)\n          and ax.rn = 1\nwhen matched and ax.data_date > pt.pet_data_date then update\nset pt.pet_dob = ax.pet_dob,\n    pt.PET_DOB_TYPE = 'PDC click';\n\n\n--merge pdc breeds\nmerge into ${Database}.live.cid_pet pt\nusing (\n          select\n              xr.cid,\n              ae.npp_ecrm_pdc_breed as pet_name,\n              case when lower(link_url) ilike '%utm_content=crossbreed%' then 'Cross Breed'\n                   when lower(link_url) ilike '%utm_content=labrador%' then 'Retriever (Labrador)'\n                   when lower(link_url) ilike '%utm_content=collie%' then 'Border Collie'\n                   when lower(link_url) ilike '%utm_ content=cocker%' then 'Spaniel (Cocker)'\n                   when lower(link_url) ilike '%utm_content=french%' then 'French Bulldog'\n                   end as pet_breed,\n              cast(event_timestamp as date) as data_date,\n              row_number() over(partition by xr.cid, ae.npp_ecrm_pdc_breed order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ae.name_urn\n          where lower(event_name) regexp '.*click.*'\n          and link_label = 'PDC | Service | PDC' --check\n          and link_url ilike any  (\n                                  '%utm_content=crossbreed%', \n                                  '%utm_content=labrador%',\n                                  '%utm_content=collie%',\n                                  '%utm_content=cocker%',\n                                  '%utm_content=french%'\n                                 )\n          and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population))\n      ) ax on ax.cid = pt.cid\n          and lower(ax.pet_name) = lower(pt.pet_name)\n          and ax.rn = 1\nwhen matched and ax.data_date > pt.pet_data_date and pet_type = 'Dog' then update\nset pt.pet_breed = ax.pet_breed,\n    pt.pdc_breed_link_update = 1;\n\n--merge pdc colours\nmerge into ${Database}.live.cid_pet pt\nusing (\n          select\n              xr.cid,\n              ae.npp_ecrm_pdc_colour as pet_name,\n              case when lower(link_url) ilike '%utm_content=white%' then 'White'\n                   when lower(link_url) ilike '%utm_content=blackwhite%'  then 'Black & White'\n                   when lower(link_url) ilike '%utm_content=black%'  then 'Black'\n                   when lower(link_url) ilike '%utm_content=tabby%' then 'Tabby'\n                   when lower(link_url) ilike '%utm_content=ginger%' then 'Ginger'\n                   when lower(link_url) ilike '%utm_content=multi%' then 'Multi'\n                   when lower(link_url) ilike '%utm_content=brown%' then 'Brown'\n                   when lower(link_url) ilike '%utm_content=grey%' then 'Grey'\n                   when lower(link_url) ilike '%utm_content=hairless%' then 'Hairless'\n                   end as pet_colour,\n              cast(event_timestamp as date) as data_date,\n              row_number() over(partition by xr.cid, ae.npp_ecrm_pdc_colour order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ae.name_urn\n          where lower(event_name) regexp '.*click.*'\n          and link_label = 'PDC | Service | PDC' --check\n          and link_url ilike any  (\n                                  '%utm_content=white%',\n                                  '%utm_content=blackwhite%',\n                                  '%utm_content=black%' ,\n                                  '%utm_content=tabby%',\n                                  '%utm_content=ginger%',\n                                  '%utm_content=multi%',\n                                  '%utm_content=brown%',\n                                  '%utm_content=grey%',\n                                  '%utm_content=hairless%'\n                                 )\n          and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population))\n      ) ax on ax.cid = pt.cid\n          and lower(ax.pet_name) = lower(pt.pet_name)\n          and ax.rn = 1\nwhen matched and ax.data_date > pt.pet_data_date and pet_type = 'Cat' then update\nset pt.pet_colour = ax.pet_colour,\n    pt.pdc_colour_link_update = 1;\n    \n--merge pdc npp_ecrm_pdc_outdoor\nmerge into ${Database}.live.cid_pet pt\nusing (\n          select\n              xr.cid,\n              ae.npp_ecrm_pdc_outdoor as pet_name,\n              case when lower(link_url) ilike '%utm_content=indoor%' then 'I'\n                   when lower(link_url) ilike '%utm_content=outdoor%'  then 'O'\n                   end as PET_INDOOR_OUTDOOR,\n              cast(event_timestamp as date) as data_date,\n              row_number() over(partition by xr.cid, ae.npp_ecrm_pdc_outdoor order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ae.name_urn\n          where lower(event_name) regexp '.*click.*'\n          and link_label = 'PDC | Service | PDC' --check\n          and link_url ilike any  (\n                                  '%utm_content=indoor%',\n                                  '%utm_content=outdoor%'\n                                 )\n          and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population))\n      ) ax on ax.cid = pt.cid\n          and lower(ax.pet_name) = lower(pt.pet_name)\n          and ax.rn = 1\nwhen matched and ax.data_date > pt.pet_data_date and pet_type = 'Cat' then update\nset pt.PET_INDOOR_OUTDOOR = ax.PET_INDOOR_OUTDOOR,\n    pt.pdc_outdoor_link_update = 1;\n\n\n--merge pdc genders\n--gender merged directly from adestra event to live cid pet, some links were missing (purina-pdc.tbw-apps.net)\n--merge pdc genders\nmerge into ${Database}.live.cid_pet pt\nusing (\n          select\n              xr.cid,\n              ae.npp_ecrm_pdc_gender as pet_name,\n              case when lower(link_url) regexp '.*=female.*' then 'Female'\n                   when lower(link_url) regexp '.*=male.*' then 'Male' \n                   end as pet_gender,\n              cast(event_timestamp as date) as data_date,\n              row_number() over(partition by xr.cid, ae.npp_ecrm_pdc_gender order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ae.name_urn\n          where lower(event_name) regexp '.*click.*'\n          and link_label = 'PDC | Service | PDC'\n          and link_url ilike any  (\n                            '%utm_content=female%',\n                            '%utm_content=male%'\n                          )\n          and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population))\n      ) ax on ax.cid = pt.cid\n          and lower(ax.pet_name) = lower(pt.pet_name)\n          and ax.rn = 1\nwhen matched and ax.data_date > pt.pet_data_date then update\nset pt.pet_gender = ax.pet_gender,\n    pt.pdc_gender_link_update = 1;\n\n\n-- Insert new pets into pet id table\nmerge into ${Database}.db.ref_pet_id rp\nusing (\n          select\n              bbw_urn,\n              pet_type,\n              pet_name,\n              date_code||'-'||unique_code||'-'||pet_type_code||'-'||bbw_urn_code as pet_id\n          from (\n                   select\n                       xr.bbw_urn,\n                       pt.pet_type,\n                       lower(pt.pet_name) as pet_name,\n\t\t\t\t\t   --Note that the bit below will only work as long as the length of hte Hex string doesn't exceed 8 characters\n                       replace(to_char(to_char(current_date(),'YYYYMMDD')::integer,'XXXXXXXX'),' ','0') as date_code,\n                       replace(to_char(row_number() over (order by 1),'XXXXXX'),' ','0') as unique_code,\n\t\t\t\t\t   --Not totally sure why the hex isn't hard coded here?\n                       replace(to_char(case when pet_type = 'Cat' then 3120 else 4157 end,'XXXX'),' ','0') as pet_type_code,\n                       replace(to_char(xr.bbw_urn,'XXXXXXXXXXXX'),' ','0') as bbw_urn_code\n                   from ${Database}.live.cid_pet pt\n                   inner join (\n                                  select\n                                      cid,\n                                      min(bbw_urn) as bbw_urn\n                                  from ${Database}.live.xref_name_urn\n                                  group by 1\n                              ) xr on xr.cid = pt.cid\n               ) p\n      ) id on id.bbw_urn = rp.bbw_urn\n          and id.pet_type = rp.pet_type\n          and id.pet_name = rp.pet_name\nwhen not matched then insert\n(\n    bbw_urn,\n    pet_type,\n    pet_name,\n    pet_id,\n    data_date\n)\nvalues\n(\n    id.bbw_urn,\n    id.pet_type,\n    id.pet_name,\n    id.pet_id,\n    current_date\n);\n\ninsert into ${Database}.db.build_log \nselect\n    '${Database}_rollups',\n    '${Database}.db.ref_pet_id',\n    'new records',\n    cast(count(*) as varchar),\n    current_timestamp \nfrom ${Database}.db.ref_pet_id\nwhere data_date = current_date;\n\n\n-- Set pet_id in live pet table\nmerge into ${Database}.live.cid_pet pt\nusing (\n          select\n              xr.cid,\n              rp.pet_id,\n              rp.pet_type,\n              rp.pet_name,\n              row_number() over(partition by xr.cid, rp.pet_type, rp.pet_name order by rp.bbw_urn) as rn\n          from ${Database}.db.ref_pet_id rp\n          inner join ${Database}.live.xref_name_urn xr on xr.bbw_urn = rp.bbw_urn\n      ) rp on rp.cid = pt.cid\n          and rp.pet_type = pt.pet_type\n          and lower(rp.pet_name) = lower(pt.pet_name)\n          and rp.rn = 1\nwhen matched then update\nset pt.pet_id = rp.pet_id;\n\n---------------------\n--have cat/have dog\n\ndrop table if exists ${Database}.temp.build_rollups_cid_have_cat ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_have_cat \nas\nselect cid, count(*) as number_of_cats \nfrom ${Database}.live.cid_pet\nwhere lower(pet_type) regexp '.*cat.*'\ngroup by cid;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_have_cat',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_have_cat;\n\n\ndrop table if exists ${Database}.temp.build_rollups_cid_have_dog ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_have_dog \nas\nselect cid, count(*) as number_of_dogs \nfrom ${Database}.live.cid_pet\nwhere lower(pet_type) regexp '.*dog.*'\ngroup by cid;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_have_dog',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_have_dog;\n\ndrop table if exists ${Database}.temp.build_rollups_cid_pdc_pet ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_pdc_pet \nas\nselect cid,\n       case when pet_segment > '' then activity_date end as activity_date,\n       pet_segment\nfrom ( select        \n              xr.cid,\n              case when lower(link_url) regexp '.*=neither.*' then 'Neither'\n                   when lower(link_url) regexp '.*=both.*' and hc.cid is null and hd.cid is null then 'Both'\n                   when lower(link_url) regexp '.*=dog.*' and hd.cid is null then 'Dog'\n                   when lower(link_url) regexp '.*=cat.*' and hc.cid is null then 'Cat' \n                    else ''\n                   end as pet_segment,\n              cast(event_timestamp as date) as activity_date,\n              row_number() over(partition by xr.cid order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ae.name_urn\n          left join ${Database}.temp.build_rollups_cid_have_cat hc on hc.cid = xr.cid\n          left join ${Database}.temp.build_rollups_cid_have_dog hd on hd.cid = xr.cid\n          where lower(event_name) regexp '.*click.*'\n            and campaign_name ilike '%Better_Together%'\n            and link_label = 'PDC | Service | PDC'\n            and link_url ilike '%/purina-pdc.tbw-apps.net%'\n            and link_url ilike any ('%=dog%','%=cat%','%=both%','%=neither%')\n                           \n            and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population)) --not sure if this should be included, copied from gender\n       )\nwhere rn = 1\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_pdc_pet',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_pdc_pet;\t\t\t\t\t\t\t\t\t\t\t\t\n---------------------\n--inferred cat/inferred dog\n\ndrop table if exists ${Database}.temp.build_rollups_cid_inferred_cat;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_inferred_cat\nas\nselect\n    cid,\n    max(ic.data_date) as data_date\nfrom ${Database}.live.xref_name_urn xr\ninner join (\n               --coupons\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.quotient_coupons qc\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = qc.brand_id\n               where trim(brand_pet_type) = 'Cat'\n               union all\n               --coupons/samples\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.names_attributes\n               where (\n                            (trim(source) = 'REG_WUN' and trim(registration_campaign) in ('Gourmet Coupon','gourmet_coupon','Felix Try Now','Go-CAT Free Sample','Go-Cat Free Sample'))\n                         or\n                            (trim(source) = 'REG_KE' and lower(source_file) regexp '(.*)(purinaone|uk-3wc-freesample|uk-gocat)(.*)' and last_login is not null)\n                         or\n                            (trim(source) = 'SAMP_GOU_1')\n                     )\n               union all\n               --registrations\n               select distinct\n                   trim(nm.name_urn) as name_urn,\n                   reg_date as data_date\n               from ${Database}.db.names nm\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = nm.source_brand_id\n               where trim(brand_pet_type) = 'Cat'\n               union all\n               --preferences\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.names_preference np\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = np.brand_id\n               where lower(source_file) not regexp '.*json.*'\n                   and (pref_emailable = 1 or pref_mailable = 1)\n                   and trim(brand_pet_type) = 'Cat'\n           ) ic on ic.name_urn = xr.name_urn\ngroup by xr.cid;\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_inferred_cat',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_rollups_cid_inferred_cat;\n\n\ndrop table if exists ${Database}.temp.build_rollups_cid_inferred_dog;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_inferred_dog\nas\nselect\n    cid,\n    max(id.data_date) as data_date\nfrom ${Database}.live.xref_name_urn xr\ninner join (\n               --coupons\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.quotient_coupons qc\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = qc.brand_id\n               where trim(brand_pet_type) = 'Dog'\n               union all\n               --samples\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.names_attributes\n               where (\n                            (trim(source) = 'REG_WUN' and trim(registration_campaign) in ('Try For Free','Dentalife Dog Free Sample'))\n                         or\n                            (trim(source) = 'REG_KE' and lower(source_file) regexp '.*uk-dentalife.*' and last_login is not null)\n                     )\n               union all\n               --registrations\n               select distinct\n                   trim(name_urn) as name_urn,\n                   reg_date as data_date\n               from ${Database}.db.names nm\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = nm.source_brand_id\n               where trim(brand_pet_type) = 'Dog'\n               union all\n               --preferences\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.names_preference np\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = np.brand_id\n               where lower(source_file) not regexp '.*json.*'\n                   and (pref_emailable = 1 or pref_mailable = 1)\n                   and trim(brand_pet_type) = 'Dog'\n           ) id on id.name_urn = xr.name_urn\ngroup by xr.cid;\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_inferred_dog',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_rollups_cid_inferred_dog;\n\n\n---------------------\n--used to have cat/have dog (we 'expired' the pet)\n\ndrop table if exists ${Database}.temp.build_rollups_cid_used_to_have_cat ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_used_to_have_cat \nas\nselect cid\nfrom ${Database}.live.cid_pet\nwhere lower(pet_type) regexp '.*cat.*'\ngroup by cid;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_used_to_have_cat',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_used_to_have_cat;\n\n\ndrop table if exists ${Database}.temp.build_rollups_cid_used_to_have_dog ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_used_to_have_dog \nas\nselect cid\nfrom ${Database}.live.cid_pet\nwhere lower(pet_type) regexp '.*dog.*'\ngroup by cid;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_used_to_have_dog',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_used_to_have_dog;\n\n\ndrop table if exists ${Database}.temp.build_rollups_cid_deceased_pets ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_deceased_pets \nas\nselect cid, \n    sum\n    (\n        case \n            when \n                (\n                    pet_data_date >= add_months(current_date, -1) --data in the last month\n                    and pet_type = 'Dog' \n                    and pet_dob <= add_months(current_date, -240) --dog is over 20\n                )\n                or\n                (\n                    pet_data_date >= add_months(current_date, -1) --data in the last month\n                    and pet_type = 'Cat' \n                    and pet_dob <= add_months(current_date, -360) --cat is over 30\n                ) \n                or\n                (\n                    pet_dob is null \n                    and pet_data_date < add_months(current_date, -12) --just gone over 12 months old data\n                    and pet_data_date >= add_months(current_date, -13) \n                ) then 1 \n            else 0 \n        end\n    ) as num_pets_deceased_this_month\nfrom ${Database}.live.cid_pet\ngroup by cid;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_deceased_pets',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_deceased_pets;\n\n\n--CREATE cid_LitterTable\n\ndrop table if exists ${Database}.live.cid_litter;\n\nCREATE OR REPLACE TABLE ${Database}.live.cid_litter\nas\nselect\n    cid,\n    coalesce(sire_name,'') as sire_name,\n    coalesce(dam_name,'') as dam_name,\n    litter_type,\n    litter_dob,\n    case when litter_size = 'T' then 'S'\n               when litter_size = '' then Size\n               else litter_size end as litter_size,\n    litter_breed,\n    litter_puppies_kittens,\n    litter_kennel,\n    data_date,\n    source,\n    source_file,\n    source_urn,\n    source_date\nfrom (\n         select\n             xr.cid,\n  \t\t\ttrim(lt.name_urn) as NAME_URN,\n\t\t\ttrim(lt.sire_name) as SIRE_NAME,\n\t\t\ttrim(lt.dam_name) as DAM_NAME,\n\t\t\ttrim(lt.litter_type) as LITTER_TYPE,\n\t\t\tlt.litter_dob,\n\t\t\ttrim(lt.litter_size) as LITTER_SIZE,\n\t\t\ttrim(lt.litter_breed) as LITTER_BREED,\n\t\t\tlitter_puppies_kittens,\n\t\t\ttrim(litter_kennel) as LITTER_KENNEL,\n\t\t\tlt.data_date,\n\t\t\ttrim(lt.source) as SOURCE,\n\t\t\ttrim(lt.source_file) as SOURCE_FILE,\n\t\t\ttrim(lt.source_urn) as SOURCE_URN,\n\t\t\tlt.source_date,\n             row_number() over\n             (\n                 partition by \n                     xr.cid,\n                     trim(lt.sire_name),\n                     trim(lt.dam_name),\n                     trim(lt.litter_type),\n                     lt.litter_dob,\n                     trim(lt.litter_size),\n                     trim(lt.litter_breed),\n                     lt.litter_puppies_kittens,\n                     trim(lt.litter_kennel)\n                 order by \n                     lt.data_date desc nulls last,\n                     lt.source_date desc nulls last\n             ) as row_num\n         from ${Database}.live.xref_name_urn xr\n         inner join ${Database}.db.litter lt on trim(lt.name_urn) = xr.name_urn\n     ) dlt\n     left outer join ${Database}.db.DOG_BREED_SIZE_LOOKUP sl on lower(left(dlt.Litter_breed,15)) = lower(left(trim(sl.breed),15))\nwhere row_num = 1;\n\n---------------------\n--cid questions\n\ndrop table if exists ${Database}.live.cid_question ;  \n\nCREATE OR REPLACE TABLE ${Database}.live.cid_question \nas\nselect distinct\n    nm.cid,\n    qu.question_id,\n    trim(rqu.question) as question,\n    first_value(lower(trim(qu.answer))) over \n        (\n            partition by nm.cid, qu.question_id\n            order by \n                qu.data_date desc nulls last,\n                qu.source_date desc nulls last\n        ) as answer,\n    first_value(qu.data_date) over \n        (\n            partition by nm.cid, qu.question_id\n            order by \n                qu.data_date desc nulls last,\n                qu.source_date desc nulls last\n        ) as answer_data_date       \nfrom ${Database}.live.names nm    \ninner join ${Database}.db.question qu on nm.name_urn = trim(qu.name_urn)\ninner join ${Database}.db.ref_question rqu on qu.question_id = rqu.question_id\nwhere qu.data_date > add_months(current_date, -60) --now only using data from the last 5 years for questions\n    and qu.brand_id is null;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid_question',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_question;\n\n---------------------\n--brand questions\n\ndrop table if exists ${Database}.live.cid_brand_question ;  \n\nCREATE OR REPLACE TABLE ${Database}.live.cid_brand_question \nas\nselect distinct\n    nm.cid,\n    qu.brand_id,\n    qu.question_id,\n    trim(rqu.question) as question, \n    first_value(lower(trim(qu.answer))) over \n        (\n            partition by nm.cid, qu.brand_id, qu.question_id\n            order by \n                qu.data_date desc nulls last,\n                qu.source_date desc nulls last\n        ) as answer,\n    first_value(qu.data_date) over \n        (\n            partition by nm.cid, qu.brand_id, qu.question_id\n            order by \n                qu.data_date desc nulls last,\n                qu.source_date desc nulls last\n        ) as answer_data_date    \nfrom ${Database}.live.names nm    \ninner join ${Database}.db.question qu on nm.name_urn = trim(qu.name_urn)\ninner join ${Database}.db.ref_question rqu on qu.question_id = rqu.question_id\nwhere qu.data_date > add_months(current_date, -60) --now only using data from the last 5 years for questions\n    and qu.brand_id is not null;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid_brand_question',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_brand_question;\n\n---------------------\n--preferred brand questions\n\ndrop table if exists ${Database}.temp.build_rollups_cid_brand_preferred ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_brand_preferred \nas\nselect distinct\n    cid,\n    brand_id\nfrom ${Database}.live.cid_brand_question\nwhere answer_data_date > add_months(current_date, -60) --now only using data from the last 5 years to determine preference for brand\n    and brand_id is not null\n    and\n    (\n        question = 'Brand of pet food fed to pet'\n        or question = 'What type of food does your pet eat (Brand)'\n        or question = 'Brand of dry cat food fed to pet'\n        or \n        (\n            question = 'How often do you feed your pet (Brand)'\n            and answer in ('a couple of times per month', 'a couple of times per week', 'a couple of times per year','every day')\n        )\n        or \n        (\n            lower(question) regexp '.*consumption - coffee brand.*' \n            and lower(answer) not regexp '.*none.*'\n        )\n        or \n        (\n            lower(question) regexp '.*consumption - coffee product.*' \n            and lower(answer) not regexp '.*none.*'\n        )\n        or lower(question) regexp '.*drinking location - coffee product.*'\n        or lower(question) regexp '.*drinking time - coffee brand.*'\n        --dont use 'Brand of Pet Food you are interested in' - is bollox\n    );\n    \n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_brand_preferred',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_brand_preferred;\n\n---------------------\n--purina engagement scoring\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_rate_review;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_rate_review \nas\nselect    \n    cid,\n    answer_data_date as activity_date,\n    case when answer in ('3','4','5') then 'Left Positive Rate & Review'\n         when answer in ('1','2') then 'Left Negative Rate & Review'\n         end as activity,\n    qu.brand_id as activity_brand_id\nfrom ${Database}.live.cid_brand_question qu\ninner join ${Database}.live.ref_brand br on qu.brand_id = br.brand_id \n                                   and br.division_id = 12\nwhere question ilike '%overall%';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_rate_review',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_rate_review;\n\n---------------------\n--first/last source date by brand\n\ndrop table if exists ${Database}.temp.build_rollups_cid_brand_base ;  \n\nalter warehouse set warehouse_size = 'Large';\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_brand_base \nas\nselect distinct\n    nm.cid,\n    dbnm.source_brand_id as brand_id,\n    0 as assigned_master_brand,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by dbnm.data_date nulls last\n        )                                            as first_date_brand,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by dbnm.data_date desc nulls last\n        )                                            as last_date_brand,\n    first_value(nat.last_login) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by \n                nat.last_login desc, \n                dbnm.data_date nulls last, \n                nm.reg_date nulls last,\n                nm.source_date nulls last\n        )                                            as last_login_brand,      \n    first_value(trim(nat.channel)) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by \n                case when nat.channel > '' then 1 else 0 end desc, --only want populated channels\n                dbnm.data_date nulls last, \n                nm.reg_date nulls last,\n                nm.source_date nulls last\n        )                                            as first_channel_brand,    \n    first_value(trim(nat.channel)) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by \n                case when nat.channel > '' then 1 else 0 end desc, --only want populated channels\n                dbnm.data_date desc nulls last, \n                dbnm.reg_date desc nulls last,\n                dbnm.source_date desc nulls last\n        )                                            as last_channel_brand\nfrom ${Database}.live.names nm\ninner join ${Database}.db.names dbnm on trim(dbnm.name_urn) = nm.name_urn\nleft join ${Database}.db.names_attributes nat on trim(nat.name_urn) = trim(dbnm.name_urn)\n                                     and trim(nat.source) = trim(dbnm.source)\n                                     and nat.source_date = dbnm.source_date\n                                     and nat.source_urn = dbnm.source_urn\nwhere dbnm.source_brand_id is not null;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_brand_base',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_brand_base;\n\n---------------------\n--first/last source date by bu\n\ndrop table if exists ${Database}.temp.build_rollups_cid_bu_base ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_bu_base \nas\nselect distinct\n    nm.cid,\n    dbnm.source_data_controller_id as business_unit_id,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_data_controller_id \n            order by dbnm.data_date nulls last\n        )                                            as first_date_business_unit,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_data_controller_id \n            order by dbnm.data_date desc nulls last\n        )                                            as last_date_business_unit\nfrom ${Database}.live.names nm\ninner join ${Database}.db.names dbnm on trim(dbnm.name_urn) = nm.name_urn;\n\n--insert the brands that are actually business units \nmerge into ${Database}.temp.build_rollups_cid_bu_base bu\nusing \n(\n    select distinct \n        cbb.cid,\n        rbu.business_unit_id,\n        first_value(cbb.first_date_brand) over \n            (\n                partition by cbb.cid, rbu.business_unit_id\n                order by cbb.first_date_brand nulls last\n            ) as first_date_business_unit,\n        first_value(cbb.last_date_brand) over \n            (\n                partition by cbb.cid, rbu.business_unit_id\n                order by cbb.last_date_brand desc nulls last\n            ) as last_date_business_unit\n    from ${Database}.temp.build_rollups_cid_brand_base cbb\n    inner join ${Database}.live.ref_business_unit_brand rbu on cbb.brand_id = rbu.brand_id\n) mg on mg.cid = bu.cid \n    and mg.business_unit_id = bu.business_unit_id\nwhen not matched then insert\n(\n    cid,\n    business_unit_id,\n    first_date_business_unit,\n    last_date_business_unit\n)\nvalues \n(\n    mg.cid,\n    mg.business_unit_id,\n    mg.first_date_business_unit,\n    mg.last_date_business_unit\n);   \n\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_bu_base',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_bu_base;\n\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_npp_no_brand_base \nas\nselect distinct\n    nm.cid,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by dbnm.data_date nulls last\n        )                                            as first_date_brand,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by dbnm.data_date desc nulls last\n        )                                            as last_date_brand\nfrom ${Database}.live.names nm\ninner join ${Database}.db.names dbnm on dbnm.name_urn = nm.name_urn\nwhere dbnm.source_data_controller_id = (select data_controller_id from ${Database}.live.ref_data_controller where data_controller like 'Nestl_ Purina Petcare (UK) Ltd')\n    and dbnm.source_brand_id is null;\n\n---------------------\n--fix up for purina master brand - eveyone purina should be now flagged as master brand source \n\nmerge into ${Database}.temp.build_rollups_cid_brand_base cbb\nusing (\n          select distinct\n              cid,\n              (select brand_id from ${Database}.live.ref_brand where brand = 'Purina Masterbrand') as brand_id,\n              first_value(first_date_brand) over\n                  (\n                      partition by cid\n                      order by first_date_brand desc nulls last\n                  ) as first_date_brand,\n              first_value(last_date_brand) over\n                  (\n                      partition by cid\n                      order by last_date_brand desc nulls last\n                  ) as last_date_brand\n          from (\n                   select\n                       cbb.cid,\n                       cbb.first_date_brand,\n                       cbb.last_date_brand\n                   from ${Database}.temp.build_rollups_cid_brand_base cbb\n                   inner join ${Database}.live.ref_brand rb on rb.brand_id = cbb.brand_id\n                   left join (\n                                 select distinct\n                                     xr.cid,\n                                     'Growing Pup' as brand\n                                 from ${Database}.db.comms_hist ch\n                                 inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ch.name_urn\n                                 where ch.promotion_id = 'NPP07290'\n                                     and ch.cell_id = '1'\n                                 union all\n                                 select distinct\n                                     xr.cid,\n                                     'Growing Pup' as brand\n                                 from ${Database}.db.names nm\n                                 inner join ${Database}.live.xref_name_urn xr on xr.name_urn = nm.name_urn\n                                 left join ${Database}.live.cid_pet pt on pt.name_urn = nm.name_urn\n                                 where nm.source_brand_id = (select brand_id from ${Database}.live.ref_brand where brand = 'Growing Pup')\n                                     and (\n                                             pt.pet_dob < (add_months(current_date,-12)-12)\n                                          or\n                                             (nm.source = 'REG_THG' and pt.pet_dob is null and lower(pt.pet_life_stage) = 'puppy' and pt.pet_data_date < (add_months((current_date+56),-12))-12)\n                                         )\n                             ) gp on gp.cid = cbb.cid\n                                 and gp.brand = rb.brand\n                   left join (\n                                 select distinct\n                                     xr.cid,\n                                     'Breed Selector' as brand\n                                 from ${Database}.db.comms_hist ch\n                                 inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ch.name_urn\n                                 left join (\n                                             select\n                                                 xr.cid,\n                                                 drop_date\n                                             from ${Database}.db.comms_hist ch\n                                             inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ch.name_urn\n                                             where ch.promotion_id = 'NPP04398_C' and ch.cell_id = '1'\n                                             \n                                            ) gp on gp.cid = xr.cid\n                                 where ch.promotion_id = 'NPP06155'\n                                     and (\n                                             (ch.cell_id = '8' and ch.drop_date < dateadd(day,-14,current_date()) and gp.drop_date is null)\n                                          or      \n                                             (ch.cell_id = '8' and ch.drop_date < dateadd(day,-14,current_date()) and (gp.drop_date < ch.drop_date or gp.drop_date > dateadd(day,14,ch.drop_date))) \n                                          or ch.name_urn in (\n                                                                select\n                                                                    distinct urn as name_urn\n                                                                from ${Database}.db.npp_breed_selector_pdc_responses rs\n                                                                where lower(rs.bs_still_getting_puppy) = 'no'\n                                                            )\n                                         )\n                             ) bs on bs.cid = cbb.cid\n                                 and bs.brand = rb.brand\n                   where (rb.division = 'Petcare' and rb.brand not in  ('Beta Breeder','Pro Plan Breeder','Pro Plan Vet','Kitten Code','Growing Pup', 'Breed Selector'))\n                       or (rb.brand = 'Growing Pup' and gp.cid is not null)\n                       or (rb.brand = 'Breed Selector' and bs.cid is not null)\n                   union all\n                   select\n                       cid,\n                       first_date_brand,\n                       last_date_brand\n                   from ${Database}.temp.build_rollups_cid_npp_no_brand_base\n               ) mb\n      ) mb on mb.cid = cbb.cid\n          and mb.brand_id = cbb.brand_id\nwhen not matched then insert\n(\n    cid,\n    brand_id,\n    assigned_master_brand,\n    first_date_brand,\n    last_date_brand,\n    last_login_brand,\n    first_channel_brand,\n    last_channel_brand\n)\nvalues\n(\n    mb.cid,\n    mb.brand_id,\n    1,\n    mb.first_date_brand,\n    mb.last_date_brand,\n    cast(null as date),\n    cast(null as varchar(10)),\n    cast(null as varchar(10))\n);\n\n---------------------\n--set up Kitten Code brand for anyone who has a kitten from other brands\nmerge into ${Database}.temp.build_rollups_cid_brand_base cbb\nusing (\n          select distinct\n              cbb.cid,\n              (select brand_id from ${Database}.live.ref_brand where brand = 'Kitten Code') as brand_id,\n              first_value(first_date_brand) over\n                  (\n                      partition by cbb.cid\n                      order by first_date_brand nulls last\n                  ) as first_date_brand,\n              first_value(last_date_brand) over\n                  (\n                      partition by cbb.cid\n                      order by last_date_brand desc nulls last\n                  ) as last_date_brand\n          from (\n                   select\n                       cid,\n                       first_date_brand,\n                       last_date_brand\n                   from ${Database}.temp.build_rollups_cid_brand_base cbb\n                   inner join ${Database}.live.ref_brand rb on rb.brand_id = cbb.brand_id\n                   where (rb.division = 'Petcare' and rb.brand not in  ('Beta Breeder','Pro Plan Breeder','Pro Plan Vet'))\n                   union all\n                   select\n                       cid,\n                       first_date_brand,\n                       last_date_brand\n                   from ${Database}.temp.build_rollups_cid_npp_no_brand_base\n               ) cbb\n          inner join (\n                         select distinct\n                             cid\n                         from ${Database}.live.cid_pet\n                         where lower(pet_life_stage) = 'kitten'\n                     ) pt on pt.cid = cbb.cid\n      ) kc on kc.cid = cbb.cid\n          and kc.brand_id = cbb.brand_id\nwhen not matched then insert\n(\n    cid,\n    brand_id,\n    assigned_master_brand,\n    first_date_brand,\n    last_date_brand,\n    last_login_brand,\n    first_channel_brand,    \n    last_channel_brand\n)\nvalues \n(\n    kc.cid,\n    kc.brand_id,\n    0,\n    kc.first_date_brand,\n    kc.last_date_brand,\n    cast(null as date),\n    cast(null as varchar(10)),\n    cast(null as varchar(10))\n);\n\n---------------------\n--set up Growing Pup brand for anyone who has a Puppy from other brands\nmerge into ${Database}.temp.build_rollups_cid_brand_base cbb\nusing (\n          select distinct\n              cbb.cid,\n              (select brand_id from ${Database}.live.ref_brand where brand = 'Growing Pup') as brand_id,\n              first_value(first_date_brand) over\n                  (\n                      partition by cbb.cid\n                      order by first_date_brand nulls last\n                  ) as first_date_brand,\n              first_value(last_date_brand) over\n                  (\n                      partition by cbb.cid\n                      order by last_date_brand desc nulls last\n                  ) as last_date_brand\n          from (\n                   select\n                       cid,\n                       first_date_brand,\n                       last_date_brand\n                   from ${Database}.temp.build_rollups_cid_brand_base cbb\n                   inner join ${Database}.live.ref_brand rb on rb.brand_id = cbb.brand_id\n                   where (rb.division = 'Petcare' and rb.brand not in  ('Beta Breeder','Pro Plan Breeder','Pro Plan Vet'))\n                   union all\n                   select\n                       cid,\n                       first_date_brand,\n                       last_date_brand\n                   from ${Database}.temp.build_rollups_cid_npp_no_brand_base\n               ) cbb\n          inner join (\n                         select distinct\n                             cid\n                         from ${Database}.live.cid_pet\n                         where lower(pet_life_stage) = 'puppy'\n                     ) pt on pt.cid = cbb.cid\n      ) gp on gp.cid = cbb.cid\n          and gp.brand_id = cbb.brand_id\nwhen not matched then insert\n(\n    cid,\n    brand_id,\n    assigned_master_brand,\n    first_date_brand,\n    last_date_brand,\n    last_login_brand,\n    first_channel_brand,    \n    last_channel_brand\n)\nvalues \n(\n    gp.cid,\n    gp.brand_id,\n    0,\n    gp.first_date_brand,\n    gp.last_date_brand,\n    cast(null as date),\n    cast(null as varchar(10)),\n    cast(null as varchar(10))\n);\n\nalter warehouse set warehouse_size = 'Medium';\n\n---------------------\n--have no printer\n\ndrop table if exists ${Database}.temp.build_rollups_cid_no_printer ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_no_printer \nas\nselect distinct nm.cid\nfrom ${Database}.live.names nm\ninner join ${Database}.db.names_attributes nat on trim(nat.name_urn) = nm.name_urn\n                                         and nat.no_printer = 1;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_no_printer',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_no_printer;\n\n---------------------\n--purina engagement scoring\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_samples;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_samples\nas \nselect distinct   \n    cid,\n    first_value(activity_date) over (partition by cid, activity_brand_id order by activity_date desc) as activity_date,\n    'Requested free product sample' as activity,\n    activity_brand_id\nfrom (\n        select distinct \n            xr.cid,\n            case\n                when trim(ch.campaign_id) = 'NPP04825_1' then (select brand_id from ${Database}.live.ref_brand where brand = 'Go Cat')\n                when trim(ch.campaign_id) in ('NPP05588_1','NPP02921_3','NPP04571') then (select brand_id from ${Database}.live.ref_brand where brand = 'Dentalife')\n            end as activity_brand_id,\n            drop_date as activity_date\n        from ${Database}.db.comms_hist ch\n        inner join ${Database}.live.xref_name_urn xr on trim(ch.name_urn) = trim(xr.name_urn)\n        where trim(programme_id) = 'M' \n        and \n            (\n            trim(campaign_id) = 'NPP04825_1' --Go Cat\n            or trim(campaign_id) = 'NPP05588_1' -- Dentalife\n            or trim(campaign_id) = 'NPP02921_3' --old dentalife\n            or trim(campaign_id) = 'NPP04571' --old dentalife\n            )\n        union all\n        select distinct\n            xr.cid,\n            sm.source_brand_id as activity_brand_id,\n            coalesce(sm.request_date,sm.processing_date) as activity_date\n        from ${Database}.db.npp_sample_requests sm\n        inner join ${Database}.live.xref_name_urn xr on trim(xr.name_urn) = trim(sm.name_urn)\n    ) a\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_samples',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_samples;\n\n---------------------\n--all sources by brand\n\nalter warehouse set warehouse_size = 'Large';\n\ndrop table if exists ${Database}.live.cid_brand_source ;  \n\nCREATE OR REPLACE TABLE ${Database}.live.cid_brand_source\nas\nselect distinct\n    nm.cid,\n    dbnm.source_brand_id as brand_id,\n    trim(dbnm.source) as source,\n    trim(dbnm.source_file) as source_file,  \n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id, trim(dbnm.source), trim(dbnm.source_file)\n            order by dbnm.data_date nulls last\n        )                                            as first_date_brand_source,    \n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id, trim(dbnm.source), trim(dbnm.source_file)\n            order by dbnm.data_date desc nulls last\n        )                                            as last_date_brand_source\nfrom ${Database}.live.names nm\ninner join ${Database}.db.names dbnm on trim(dbnm.name_urn) = nm.name_urn\nwhere dbnm.source_brand_id is not null;\n\nalter warehouse set warehouse_size = 'Medium';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid_brand_source',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_brand_source;\n\n\n---------------------\n--preferrences (gigya)\ndrop table if exists ${Database}.temp.build_rollups_cid_brand_preference ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_brand_preference \nas\nselect distinct\n    nm.cid,\n    np.brand_id,\n    first_value(np.pref_emailable) over \n        (\n            partition by nm.cid, np.brand_id\n            order by \n                np.data_date desc nulls last,\n                case when lower(np.source_file) regexp '.*json.*' then 1 else 0 end --migration is json files\n        )  as pref_emailable,\n    first_value(case when lower(np.source_file) regexp '.*json.*' then 1 else 0 end) over \n        (\n            partition by nm.cid, np.brand_id\n            order by \n                np.data_date desc nulls last,\n                case when lower(np.source_file) regexp '.*json.*' then 1 else 0 end --migration is json files\n        )  as pref_mig,\n    first_value(np.data_date) over \n        (\n            partition by nm.cid, np.brand_id\n            order by \n                np.data_date desc nulls last,\n                case when lower(np.source_file) regexp '.*json.*' then 1 else 0 end --migration is json files\n        )  as pref_date,\n    first_value(np.data_date) over \n        (\n            partition by nm.cid, np.brand_id\n            order by \n                np.data_date asc nulls last,\n                case when lower(np.source_file) regexp '.*json.*' then 1 else 0 end --migration is json files\n        )  as first_pref_date\nfrom ${Database}.live.names nm\ninner join ${Database}.db.names_preference np on trim(np.name_urn) = nm.name_urn;\n                                     \ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_brand_preference',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_brand_preference;\n\n\n---------------------\n--all products (affiliations) by brand\n\n\ndrop table if exists ${Database}.live.cid_brand_product ;  \n\nCREATE OR REPLACE TABLE ${Database}.live.cid_brand_product\nas\nselect distinct\n    nm.cid,\n    rp.brand_id,\n    rp.product_id,\n    first_value(pr.data_date) over \n        (\n            partition by nm.cid, rp.brand_id, rp.product_id\n            order by pr.data_date desc nulls last\n        )  as last_date_brand_product\nfrom ${Database}.live.names nm\ninner join ${Database}.db.product pr on trim(pr.name_urn) = nm.name_urn\ninner join ${Database}.db.ref_product rp on pr.product_id = rp.product_id\nwhere rp.brand_id is not null;\n\nalter warehouse set warehouse_size = 'Small';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid_brand_product',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_brand_product;\n\ndrop table if exists ${Database}.live.ref_product;\n   \nCREATE OR REPLACE TABLE ${Database}.live.ref_product  \nas\nselect \n    product_id,\n    trim(product_name) as product_name\nfrom ${Database}.db.ref_product;\n\n\ndrop table if exists ${Database}.temp.build_rollups_cid_brand_product ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_brand_product\nas\nselect distinct\n    cid,\n    brand_id\nfrom ${Database}.live.cid_brand_product\nwhere last_date_brand_product > add_months(current_date, -60); --now only using data from the last 5 years to determine preference for brand\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_brand_product',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_brand_product;\n\n--purina engagement scoring\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_loyalty_scheme;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_loyalty_scheme\nas \nselect \n    distinct cid,\n    first_value(activity_date) over (partition by cid, trim(brand) order by activity_date desc) as activity_date,\n    'Joined Loyalty Scheme' as activity,\n    brand_id as activity_brand_id\nfrom (\n        select distinct    \n            xr.cid,\n            first_value(l.source_date) over (partition by xr.cid order by l.source_date desc) as activity_date,\n            'BETA' as brand,\n            (select brand_id from ${Database}.live.ref_brand where brand = 'Beta') as brand_id\n        from     ${Database}.db.npp_beta_pro_plan_loyalty l\n        join         ${Database}.live.xref_name_urn xr on xr.name_urn = 'REG_NPP_LYLTY|'||cast(l.urn as varchar)\n        where     trim(l.source) = 'BETA Loyalty'\n        \n        union all\n        \n        select distinct    \n            xr.cid,\n            first_value(l.source_date) over (partition by xr.cid order by l.source_date desc) as activity_date,\n            'Pro Plan' as brand,\n            (select brand_id from ${Database}.live.ref_brand where brand = 'Pro Plan') as brand_id\n        from     ${Database}.db.npp_beta_pro_plan_loyalty l\n        join         ${Database}.live.xref_name_urn xr on xr.name_urn = 'REG_NPP_LYLTY|'||cast(l.urn as varchar)\n        where     trim(l.source) = 'PRO PLAN Loyalty'\n        \n        union all\n        \n        select    \n            cid,\n            last_date_brand_product as activity_date,\n            case when product_id in (970,1611,1612,1613) then 'Pro Plan'\n                 when product_id = 1631 then 'Felix'\n                 when product_id = 1632 then 'Gourmet'\n                 else 'error' end as brand,\n            case when product_id in (970,1611,1612,1613) then (select brand_id from ${Database}.live.ref_brand where brand = 'Pro Plan')\n                 when product_id = 1631 then (select brand_id from ${Database}.live.ref_brand where brand = 'Felix')\n                 when product_id = 1632 then (select brand_id from ${Database}.live.ref_brand where brand = 'Gourmet')\n                 else cast(null as int) end as brand_id\n        from ${Database}.live.cid_brand_product\n        where product_id in (970,1611,1612,1613,1631,1632)\n        union all\n        select distinct\n            cid,\n            answer_data_date as activity_date,\n            'Your Purina' as brand,\n            (select brand_id from ${Database}.live.ref_brand where brand = 'Your Purina') as brand_id\n        from ${Database}.live.cid_question cq\n        inner join ${Database}.db.ref_question rq on rq.question_id = cq.question_id\n        where rq.question = 'Where do you buy food for your pets?'\n        ) a\n;\n\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_loyalty_scheme',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_loyalty_scheme;\n\ndrop table if exists ${Database}.temp.build_comms_history ;  \n\nalter warehouse set warehouse_size = 'Medium';\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_comms_history\nas \nselect \n    nm.cid,\n    ch.control_cell,\n    trim(ch.name_urn) as name_urn,\n    ch.drop_date,\n    ch.response_date,\n    ch.data_brand_id,\n    lower(trim(ch.email)) as email,\n    ch.brand_preference,\n    ch.brand_engagement,\n    trim(ch.programme_id)||'|'||trim(ch.campaign_id)||'|'||trim(ch.promotion_id)||'|'||trim(ch.cell_id)||'|'||trim(ch.pack_id) as packid\nfrom ${Database}.db.comms_hist ch\ninner join ${Database}.live.names nm on trim(ch.name_urn) = nm.name_urn;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_comms_history',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_comms_history;\n\n\ndrop table if exists ${Database}.temp.build_comms_history_lookup ;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_comms_history_lookup\nas\nselect *,\n    trim(programme_id)||'|'||trim(campaign_id)||'|'||trim(promotion_id)||'|'||trim(cell_id)||'|'||trim(pack_id) as packid\nfrom ${Database}.db.comms_hist_lookup;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_comms_history_lookup',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_comms_history_lookup;\n\n\n---------------------\n--responses\n\n\ndrop table if exists ${Database}.temp.adestra_events_in_xref;\n\n--create version of adestra table with all campaigns that are in the xref\nCREATE OR REPLACE TABLE ${Database}.temp.adestra_events_in_xref\nas\nselect\n    trim(ae.email) as EMAIL,\n\ttrim(ae.name_urn) as NAME_URN,\n\ttrim(ae.amf_id) as AMF_ID,\n\ttrim(ae.campaign_id) as CAMPAIGN_ID,\n\ttrim(ae.campaign_name) as CAMPAIGN_NAME,\n\ttrim(ae.event_name) as EVENT_NAME,\n\tae.event_timestamp,\n\ttrim(ae.link_label) as LINK_LABEL,\n\ttrim(ae.link_url) as LINK_URL,\n\ttrim(ae.form_builder_id) as FORM_BUILDER_ID,\n    trim(ae.email_client) as email_client,\n    trim(ae.email_client_type) as email_client_type,\n    trim(ae.browser) as browser,\n\ttrim(ae.kog_pack) as KOG_PACK,\n\ttrim(ae.source_file) as SOURCE_FILE,\n\tae.source_date,\n    trim(xr.ch_campaign_id) as ch_campaign_id\nfrom ${Database}.db.adestra_events ae\ninner join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(trim(ae.campaign_name)) = lower(trim(xr.adestra_campaign_name))\n                                                           and trim(xr.adestra_campaign_name) <> ''\nwhere ae.name_urn <> '999999';\n\ndrop table if exists ${Database}.temp.adestra_events_no_xref;\n\n--create version of adestra table with all campaign that are not in the xref\nCREATE OR REPLACE TABLE ${Database}.temp.adestra_events_no_xref\nas\nselect\n    trim(ae.email) as EMAIL,\n\ttrim(ae.name_urn) as NAME_URN,\n\ttrim(ae.amf_id) as AMF_ID,\n\ttrim(ae.campaign_id) as CAMPAIGN_ID,\n\ttrim(ae.campaign_name) as CAMPAIGN_NAME,\n\ttrim(ae.event_name) as EVENT_NAME,\n\tae.event_timestamp,\n\ttrim(ae.link_label) as LINK_LABEL,\n\ttrim(ae.link_url) as LINK_URL,\n\ttrim(ae.form_builder_id) as FORM_BUILDER_ID,\n    trim(ae.email_client) as email_client,\n    trim(ae.email_client_type) as email_client_type,\n    trim(ae.browser) as browser,\n\ttrim(ae.kog_pack) as KOG_PACK,\n\ttrim(ae.source_file) as SOURCE_FILE,\n\tae.source_date\nfrom ${Database}.db.adestra_events ae\nleft join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(trim(ae.campaign_name)) = lower(trim(xr.adestra_campaign_name))\n                                                          and trim(xr.adestra_campaign_name) <> ''\nwhere xr.adestra_campaign_name is null\n    and ae.name_urn <> '999999';\n\n\n\ndrop table if exists ${Database}.live.adestra_events ;  \n\nalter warehouse set warehouse_size = 'Xlarge';\n\n--insert the ones that are in the lookup and have a name_urn\ncreate or replace table ${Database}.live.adestra_events \nas \nselect distinct\n    'Adestra' as platform,\n    nm.cid,\n    ch.campaign_id,\n    lower(ae.email) as email,\n    ae.amf_id,\n    ae.campaign_id as adestra_campaign_id,\n    ae.campaign_name as adestra_campaign_name,\n    ae.event_name,\n    ae.event_timestamp,\n    case when ae.event_name ilike '%form_builder_click%' then 'DC | Service | Web Form'\n\t\t\t when ae.event_name ilike '%form_click%' then 'DC | Service | Web Form'\n             when ae.event_name ilike '%webversion_click%' then 'O | Generic | View in Browser'\n             else  coalesce(rll.link_label, ae.link_label)\n    end as link_label,\n    ae.link_url,\n    ae.form_builder_id,\n    ae.email_client,\n    ae.email_client_type,\n    ae.browser,\n\tcoalesce(ae.kog_pack,'') as kog_pack,\n    ae.source_file,\n    ae.source_date\nfrom ${Database}.temp.adestra_events_in_xref ae --the name_urn on here is only historic - assume only email now supplied\ninner join ${Database}.live.xref_name_urn nm on ae.name_urn = nm.name_urn --get all the old ones\ninner join ${Database}.temp.build_comms_history_lookup ch on lower(ch.campaign_id) = lower(ae.ch_campaign_id)\nleft join ${Database}.db.ref_link_label rll on trim(ae.link_url) = trim(rll.link_url)\n                                      and trim(lower(ae.campaign_name)) = trim(lower(rll.campaign_name)) \nwhere ae.name_urn > '';\n\n\n--insert the ones that are in the lookup with no name_urn\ninsert into ${Database}.live.adestra_events \nselect distinct\n    'Adestra' as platform,\n    nm.cid,\n    ch.campaign_id,\n    lower(ae.email) as email,\n    ae.amf_id,\n    ae.campaign_id as adestra_campaign_id,\n    ae.campaign_name,\n    ae.event_name,\n    ae.event_timestamp,\n    case when ae.event_name ilike '%form_builder_click%' then 'DC | Service | Web Form'\n\t\t\t when ae.event_name ilike '%form_click%' then 'DC | Service | Web Form'\n             when ae.event_name ilike '%webversion_click%' then 'O | Generic | View in Browser'\n             else  coalesce(rll.link_label, ae.link_label)\n    end as link_label,\n    ae.link_url,\n    ae.form_builder_id,\n    ae.email_client,\n    ae.email_client_type,\n    ae.browser,\n\tcoalesce(ae.kog_pack,'') as kog_pack,\n    ae.source_file,\n    ae.source_date\nfrom ${Database}.temp.adestra_events_in_xref ae --the name_urn on here is only historic - assume only email now supplied\ninner join ${Database}.live.xref_email nm on lower(ae.email) = nm.email --use this as it is all email addresses on the db\ninner join ${Database}.temp.build_comms_history_lookup ch on lower(ch.campaign_id) = lower(ae.ch_campaign_id)\ninner join ${Database}.temp.build_comms_history chb on chb.packid = ch.packid \n                                        and chb.cid = nm.cid\nleft join ${Database}.db.ref_link_label rll on trim(ae.link_url) = trim(rll.link_url)\n                                      and trim(lower(ae.campaign_name)) = trim(lower(rll.campaign_name))                                         \n\nwhere ae.name_urn = '';\n\n\ndrop table if exists ${Database}.temp.adestra_events_in_xref;\n\n\n--insert the ones that are not in the lookup but with name_urn\ninsert into ${Database}.live.adestra_events \nselect distinct\n    'Adestra' as platform,\n    nm.cid,\n    ch.campaign_id,\n    lower(ae.email) as email,\n    ae.amf_id,\n    ae.campaign_id as adestra_campaign_id,\n    ae.campaign_name,\n    ae.event_name,\n    ae.event_timestamp,\n    case when ae.event_name ilike '%form_builder_click%' then 'DC | Service | Web Form'\n\t\t\t when ae.event_name ilike '%form_click%' then 'DC | Service | Web Form'\n             when ae.event_name ilike '%webversion_click%' then 'O | Generic | View in Browser'\n             else  coalesce(rll.link_label, ae.link_label)\n    end as link_label,\n    ae.link_url,\n    ae.form_builder_id,\n    ae.email_client,\n    ae.email_client_type,\n    ae.browser,\n\tcoalesce(ae.kog_pack,'') as kog_pack,\n    ae.source_file,\n    ae.source_date\nfrom ${Database}.temp.adestra_events_no_xref ae --the name_urn on here is only historic - assume only email now supplied\ninner join ${Database}.live.xref_name_urn nm on ae.name_urn = nm.name_urn\ninner join ${Database}.temp.build_comms_history_lookup ch on ch.programme_id = 'E' \n                                              and lower(ch.campaign_id) = lower(case when ae.campaign_name ilike '%_MTE_%' then tbw.db.strchop(ae.campaign_name,'_',1,3) else tbw.db.strchop(ae.campaign_name,'_',1,1) end)\nleft join ${Database}.db.ref_link_label rll on trim(ae.link_url) = trim(rll.link_url)\n                                      and trim(lower(ae.campaign_name)) = trim(lower(rll.campaign_name))                                              \nwhere ae.name_urn > '';\n\n\n--insert the ones that are not in the lookup with no name_urn\ninsert into ${Database}.live.adestra_events \nselect distinct\n    'Adestra' as platform, \n    nm.cid,\n    ch.campaign_id,\n    lower(ae.email) as email,\n    ae.amf_id,\n    ae.campaign_id as adestra_campaign_id,\n    ae.campaign_name,\n    ae.event_name,\n    ae.event_timestamp,\n    case when ae.event_name ilike '%form_builder_click%' then 'DC | Service | Web Form'\n\t\t\t when ae.event_name ilike '%form_click%' then 'DC | Service | Web Form'\n             when ae.event_name ilike '%webversion_click%' then 'O | Generic | View in Browser'\n             else  coalesce(rll.link_label, ae.link_label)\n    end as link_label,\n    ae.link_url,\n    ae.form_builder_id,\n    ae.email_client,\n    ae.email_client_type,\n    ae.browser,\n\tcoalesce(ae.kog_pack,'') as kog_pack,\n    ae.source_file,\n    ae.source_date\nfrom ${Database}.temp.adestra_events_no_xref ae --the name_urn on here is only historic - assume only email now supplied\ninner join ${Database}.live.xref_email nm on lower(ae.email) = nm.email --use this as it is all email addresses on the db\ninner join ${Database}.temp.build_comms_history_lookup ch on ch.programme_id = 'E' \n                                              and lower(ch.campaign_id) = lower(case when ae.campaign_name ilike '%_MTE_%' then tbw.db.strchop(ae.campaign_name,'_',1,3) else tbw.db.strchop(ae.campaign_name,'_',1,1) end)\ninner join ${Database}.temp.build_comms_history chb on chb.packid = ch.packid \n\n                                        and chb.cid = nm.cid \n\nleft join ${Database}.db.ref_link_label rll on trim(ae.link_url) = trim(rll.link_url)\n                                      and trim(lower(ae.campaign_name)) = trim(lower(rll.campaign_name))\nwhere ae.name_urn = '';\n\ndrop table ${Database}.temp.adestra_events_no_xref;\n\n\nalter warehouse set warehouse_size = 'Medium';\n\ndrop table if exists ${Database}.temp.mapp_events_in_xref;\n\n--create version of adestra table with all campaigns that are in the xref\nCREATE OR REPLACE TABLE ${Database}.temp.mapp_events_in_xref\nas\nselect\n    mp.senttomta_timestamp,\n\ttrim(mp.senttomta_externaltransactionid) as senttomta_externaltransactionid,\n\ttrim(mp.senttomta_sendoutchannel) as senttomta_sendoutchannel,\n\tmp.skip_timestamp,\n\ttrim(mp.skip_category) as skip_category,\n\ttrim(mp.skip_externaltransactionid) as skip_externaltransactionid,\n\tmp.bounce_timestamp,\n\ttrim(mp.bounce_category) as bounce_category,\n\ttrim(mp.bounce_text) as bounce_text,\n\tmp.feedback_timestamp,\n\ttrim(mp.feedback_category) as feedback_category,\n\tmp.render_timestamp,\n\ttrim(mp.render_geolocation_isocountrycode) as render_geolocation_isocountrycode,\n\ttrim(mp.render_geolocation_regioncode) as render_geolocation_regioncode,\n\ttrim(mp.render_geolocation_city) as render_geolocation_city,\n\ttrim(mp.render_geolocation_latitude) as render_geolocation_latitude,\n\ttrim(mp.render_geolocation_longitude) as render_geolocation_longitude,\n\ttrim(mp.render_useragent_platform) as render_useragent_platform,\n\ttrim(mp.render_useragent_operatingsystemname) as render_useragent_operatingsystemname,\n\ttrim(mp.render_useragent_operatingsystemversion) as render_useragent_operatingsystemversion,\n\ttrim(mp.render_useragent_clientname) as render_useragent_clientname,\n\ttrim(mp.render_useragent_clientversion) as render_useragent_clientversion,\n\ttrim(mp.render_useragent_rawstring) as render_useragent_rawstring,\n\tmp.click_timestamp,\n\ttrim(mp.click_link_id) as click_link_id,\n\ttrim(mp.click_link_category_id) as click_link_category_id,\n\ttrim(mp.click_link_category_name) as click_link_category_name,\n\ttrim(mp.click_link_url) as click_link_url,\n\ttrim(mp.click_link_systemlinktype) as click_link_systemlinktype,\n\ttrim(mp.click_link_type) as click_link_type,\n\ttrim(mp.click_geolocation_isocountrycode) as click_geolocation_isocountrycode,\n\ttrim(mp.click_geolocation_regioncode) as click_geolocation_regioncode,\n\ttrim(mp.click_geolocation_city) as click_geolocation_city,\n\ttrim(mp.click_geolocation_latitude) as click_geolocation_latitude,\n\ttrim(mp.click_geolocation_longitude) as click_geolocation_longitude,\n\ttrim(mp.click_useragent_platform) as click_useragent_platform,\n\ttrim(mp.click_useragent_operatingsystem) as click_useragent_operatingsystem,\n\ttrim(mp.click_useragent_operatingsystemversion) as click_useragent_operatingsystemversion,\n\ttrim(mp.click_useragent_clientname) as click_useragent_clientname,\n\ttrim(mp.click_useragent_clientversion) as click_useragent_clientversion,\n\ttrim(mp.click_useragent_rawstring) as click_useragent_rawstring,\n\tmp.unsubscribe_timestamp,\n\tmp.forward_timestamp,\n\tmp.conversion_cp_timestamp,\n\ttrim(mp.conversion_cp_id) as conversion_cp_id,\n\ttrim(mp.conversion_cp_name) as conversion_cp_name,\n\ttrim(mp.conversion_cp_orderid) as conversion_cp_orderid,\n\ttrim(mp.conversion_cp_itemcount) as conversion_cp_itemcount,\n\ttrim(mp.conversion_cp_amount) as conversion_cp_amount,\n\ttrim(mp.conversion_cp_requestparameters) as conversion_cp_requestparameters,\n\ttrim(mp.group_id) as group_id,\n\ttrim(mp.group_name) as group_name,\n\ttrim(mp.group_email) as group_email,\n\ttrim(mp.group_category_id) as group_category_id,\n\ttrim(mp.group_category_name) as group_category_name,\n\ttrim(mp.message_id) as message_id,\n\ttrim(mp.message_name) as message_name,\n\ttrim(mp.message_category_id) as message_category_id,\n\ttrim(mp.message_category_name) as message_category_name,\n\ttrim(mp.message_subject_unresolved) as message_subject_unresolved,\n\ttrim(mp.message_externalid) as message_externalid,\n\ttrim(mp.message_type) as message_type,\n\ttrim(mp.message_variation_id) as message_variation_id,\n\ttrim(mp.selection_id) as selection_id,\n\ttrim(mp.selection_name) as selection_name,\n\tmp.record_timestamp,\n\ttrim(mp.record_type) as record_type,\n\tmp.record_senttomta_timestamp,\n\ttrim(mp.record_externaltransactionid) as record_externaltransactionid,\n\ttrim(mp.sendout_type) as sendout_type,\n\ttrim(mp.sendout_addresseerole) as sendout_addresseerole,\n\ttrim(mp.sendout_recipienttype) as sendout_recipienttype,\n\ttrim(mp.user_id) as user_id,\n\ttrim(mp.user_email) as user_email,\n\ttrim(mp.user_mobilenumber) as user_mobilenumber,\n\ttrim(mp.user_faxnumber) as user_faxnumber,\n\ttrim(mp.user_identifier) as user_identifier,\n\ttrim(mp.user_custom_attribute_batch) as user_custom_attribute_batch,\n\ttrim(mp.user_custom_attribute_cell) as user_custom_attribute_cell,\n\ttrim(mp.user_custom_attribute_name_urn) as user_custom_attribute_name_urn,\n\ttrim(mp.source_file) as source_file,\n\tmp.source_date,\n    xr.ch_campaign_id\nfrom ${Database}.db.mapp_events mp\ninner join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(trim(mp.message_name)) = lower(trim(xr.mapp_message_name))\n                                                           and trim(xr.mapp_message_name) <> '';\n\n\ndrop table if exists ${Database}.temp.mapp_events_no_xref;\n\n--create version of adestra table with all campaigns that are in the xref\nCREATE OR REPLACE TABLE ${Database}.temp.mapp_events_no_xref\nas\nselect\n    mp.senttomta_timestamp,\n\ttrim(mp.senttomta_externaltransactionid) as senttomta_externaltransactionid,\n\ttrim(mp.senttomta_sendoutchannel) as senttomta_sendoutchannel,\n\tmp.skip_timestamp,\n\ttrim(mp.skip_category) as skip_category,\n\ttrim(mp.skip_externaltransactionid) as skip_externaltransactionid,\n\tmp.bounce_timestamp,\n\ttrim(mp.bounce_category) as bounce_category,\n\ttrim(mp.bounce_text) as bounce_text,\n\tmp.feedback_timestamp,\n\ttrim(mp.feedback_category) as feedback_category,\n\tmp.render_timestamp,\n\ttrim(mp.render_geolocation_isocountrycode) as render_geolocation_isocountrycode,\n\ttrim(mp.render_geolocation_regioncode) as render_geolocation_regioncode,\n\ttrim(mp.render_geolocation_city) as render_geolocation_city,\n\ttrim(mp.render_geolocation_latitude) as render_geolocation_latitude,\n\ttrim(mp.render_geolocation_longitude) as render_geolocation_longitude,\n\ttrim(mp.render_useragent_platform) as render_useragent_platform,\n\ttrim(mp.render_useragent_operatingsystemname) as render_useragent_operatingsystemname,\n\ttrim(mp.render_useragent_operatingsystemversion) as render_useragent_operatingsystemversion,\n\ttrim(mp.render_useragent_clientname) as render_useragent_clientname,\n\ttrim(mp.render_useragent_clientversion) as render_useragent_clientversion,\n\ttrim(mp.render_useragent_rawstring) as render_useragent_rawstring,\n\tmp.click_timestamp,\n\ttrim(mp.click_link_id) as click_link_id,\n\ttrim(mp.click_link_category_id) as click_link_category_id,\n\ttrim(mp.click_link_category_name) as click_link_category_name,\n\ttrim(mp.click_link_url) as click_link_url,\n\ttrim(mp.click_link_systemlinktype) as click_link_systemlinktype,\n\ttrim(mp.click_link_type) as click_link_type,\n\ttrim(mp.click_geolocation_isocountrycode) as click_geolocation_isocountrycode,\n\ttrim(mp.click_geolocation_regioncode) as click_geolocation_regioncode,\n\ttrim(mp.click_geolocation_city) as click_geolocation_city,\n\ttrim(mp.click_geolocation_latitude) as click_geolocation_latitude,\n\ttrim(mp.click_geolocation_longitude) as click_geolocation_longitude,\n\ttrim(mp.click_useragent_platform) as click_useragent_platform,\n\ttrim(mp.click_useragent_operatingsystem) as click_useragent_operatingsystem,\n\ttrim(mp.click_useragent_operatingsystemversion) as click_useragent_operatingsystemversion,\n\ttrim(mp.click_useragent_clientname) as click_useragent_clientname,\n\ttrim(mp.click_useragent_clientversion) as click_useragent_clientversion,\n\ttrim(mp.click_useragent_rawstring) as click_useragent_rawstring,\n\tmp.unsubscribe_timestamp,\n\tmp.forward_timestamp,\n\tmp.conversion_cp_timestamp,\n\ttrim(mp.conversion_cp_id) as conversion_cp_id,\n\ttrim(mp.conversion_cp_name) as conversion_cp_name,\n\ttrim(mp.conversion_cp_orderid) as conversion_cp_orderid,\n\ttrim(mp.conversion_cp_itemcount) as conversion_cp_itemcount,\n\ttrim(mp.conversion_cp_amount) as conversion_cp_amount,\n\ttrim(mp.conversion_cp_requestparameters) as conversion_cp_requestparameters,\n\ttrim(mp.group_id) as group_id,\n\ttrim(mp.group_name) as group_name,\n\ttrim(mp.group_email) as group_email,\n\ttrim(mp.group_category_id) as group_category_id,\n\ttrim(mp.group_category_name) as group_category_name,\n\ttrim(mp.message_id) as message_id,\n\ttrim(mp.message_name) as message_name,\n\ttrim(mp.message_category_id) as message_category_id,\n\ttrim(mp.message_category_name) as message_category_name,\n\ttrim(mp.message_subject_unresolved) as message_subject_unresolved,\n\ttrim(mp.message_externalid) as message_externalid,\n\ttrim(mp.message_type) as message_type,\n\ttrim(mp.message_variation_id) as message_variation_id,\n\ttrim(mp.selection_id) as selection_id,\n\ttrim(mp.selection_name) as selection_name,\n\tmp.record_timestamp,\n\ttrim(mp.record_type) as record_type,\n\tmp.record_senttomta_timestamp,\n\ttrim(mp.record_externaltransactionid) as record_externaltransactionid,\n\ttrim(mp.sendout_type) as sendout_type,\n\ttrim(mp.sendout_addresseerole) as sendout_addresseerole,\n\ttrim(mp.sendout_recipienttype) as sendout_recipienttype,\n\ttrim(mp.user_id) as user_id,\n\ttrim(mp.user_email) as user_email,\n\ttrim(mp.user_mobilenumber) as user_mobilenumber,\n\ttrim(mp.user_faxnumber) as user_faxnumber,\n\ttrim(mp.user_identifier) as user_identifier,\n\ttrim(mp.user_custom_attribute_batch) as user_custom_attribute_batch,\n\ttrim(mp.user_custom_attribute_cell) as user_custom_attribute_cell,\n\ttrim(mp.user_custom_attribute_name_urn) as user_custom_attribute_name_urn,\n\ttrim(mp.source_file) as source_file,\n\tmp.source_date,\n    xr.ch_campaign_id\nfrom ${Database}.db.mapp_events mp\nleft join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(trim(mp.message_name)) = lower(trim(xr.mapp_message_name))\n                                                           and trim(xr.mapp_message_name) <> ''\nwhere xr.mapp_message_name is null;\n\n\n\n--insert the ones that are in the lookup and have a name_urn\ninsert into ${Database}.live.adestra_events\nselect distinct\n    'Mapp' as platform,\n    xr.cid,\n    chl.campaign_id,\n    lower(mp.user_email) as email,\n    '' as amf_id,\n    mp.message_id as adestra_campaign_id,\n    mp.message_name as adestra_campaign_name,\n    case\n        when mp.record_type = 'SentToMTA' then 'sent_campaign'\n        when mp.record_type = 'Render' then 'read'\n        when mp.record_type = 'Click' then 'click'\n        when mp.record_type = 'Bounce' then 'inbound_bounce'\n        when mp.record_type = 'Feedback' then 'feedback'\n        when mp.record_type = 'Skip' then 'skip'\n        else lower(mp.record_type)\n    end as event_name,\n    mp.record_timestamp as event_timestamp,\n    coalesce(trim(rll.link_label), mp.click_link_category_name) as link_label,\n    mp.click_link_url as link_url,\n    '' as form_builder_id,\n    '' as email_client,\n    '' as email_client_type,\n    '' as browser,\n    '' as kog_pack,\n    mp.source_file,\n    mp.source_date\nfrom ${Database}.temp.mapp_events_in_xref mp\ninner join ${Database}.live.xref_name_urn xr on mp.user_custom_attribute_name_urn = xr.name_urn\ninner join ${Database}.temp.build_comms_history_lookup chl on lower(chl.campaign_id) = lower(mp.ch_campaign_id)\nleft join ${Database}.db.ref_link_label rll on trim(mp.click_link_url) = trim(rll.link_url)\n                                      and trim(lower(mp.message_name)) = trim(lower(rll.campaign_name))                                        \nwhere mp.user_custom_attribute_name_urn > '';\n    \n\n--insert the ones that are in the lookup with no name_urn\ninsert into ${Database}.live.adestra_events\nselect distinct\n    'Mapp' as platform,\n    xr.cid,\n    chl.campaign_id,\n    lower(mp.user_email) as email,\n    '' as amf_id,\n    mp.message_id as adestra_campaign_id,\n    mp.message_name as adestra_campaign_name,\n    case\n        when mp.record_type = 'SentToMTA' then 'sent_campaign'\n        when mp.record_type = 'Render' then 'read'\n        when mp.record_type = 'Click' then 'click'\n        when mp.record_type = 'Bounce' then 'inbound_bounce'\n        when mp.record_type = 'Feedback' then 'feedback'\n        when mp.record_type = 'Skip' then 'skip'\n        else lower(mp.record_type)\n    end as event_name,\n    mp.record_timestamp as event_timestamp,\n    coalesce(trim(rll.link_label), mp.click_link_category_name) as link_label,\n    mp.click_link_url as link_url,\n    '' as form_builder_id,\n    '' as email_client,\n    '' as email_client_type,\n    '' as browser,\n    '' as kog_pack,\n    mp.source_file,\n    mp.source_date\nfrom ${Database}.temp.mapp_events_in_xref mp\ninner join ${Database}.live.xref_email xr on lower(mp.user_email) = lower(xr.email)\ninner join ${Database}.temp.build_comms_history_lookup chl on lower(chl.campaign_id) = lower(mp.ch_campaign_id)\ninner join ${Database}.temp.build_comms_history ch on ch.packid = chl.packid\n                                             and ch.cid = xr.cid\nleft join ${Database}.db.ref_link_label rll on trim(mp.click_link_url) = trim(rll.link_url)\n                                      and trim(lower(mp.message_name)) = trim(lower(rll.campaign_name))\nwhere mp.user_custom_attribute_name_urn = '';\n\n\ndrop table if exists ${Database}.temp.mapp_events_in_xref;\n\n\n--insert the ones that are not in the lookup but with name_urn\ninsert into ${Database}.live.adestra_events\nselect distinct\n    'Mapp' as platform,\n    xr.cid,\n    chl.campaign_id,\n    lower(mp.user_email) as email,\n    '' as amf_id,\n    mp.message_id as adestra_campaign_id,\n    mp.message_name as adestra_campaign_name,\n    case\n        when mp.record_type = 'SentToMTA' then 'sent_campaign'\n        when mp.record_type = 'Render' then 'read'\n        when mp.record_type = 'Click' then 'click'\n        when mp.record_type = 'Bounce' then 'inbound_bounce'\n        when mp.record_type = 'Feedback' then 'feedback'\n        when mp.record_type = 'Skip' then 'skip'\n        else lower(mp.record_type)\n    end as event_name,\n    mp.record_timestamp as event_timestamp,\n    coalesce(trim(rll.link_label), mp.click_link_category_name) as link_label,\n    mp.click_link_url as link_url,\n    '' as form_builder_id,\n    '' as email_client,\n    '' as email_client_type,\n    '' as browser,\n    '' as kog_pack,\n    mp.source_file,\n    mp.source_date\nfrom ${Database}.temp.mapp_events_no_xref mp\ninner join ${Database}.live.xref_name_urn xr on mp.user_custom_attribute_name_urn = xr.name_urn\ninner join ${Database}.temp.build_comms_history_lookup chl on chl.programme_id = 'E'\n                                                     and lower(chl.campaign_id) = lower(case when collate(mp.message_name,'') ilike '%_MTE_%' then tbw.db.strchop(mp.message_name,'_',1,3) else split_part(mp.message_name,'_',1) end)\nleft join ${Database}.db.ref_link_label rll on trim(mp.click_link_url) = trim(rll.link_url)\n                                      and trim(lower(mp.message_name)) = trim(lower(rll.campaign_name))\nwhere mp.user_custom_attribute_name_urn > '';\n\n\n--insert the ones that are not in the lookup with no name_urn\ninsert into ${Database}.live.adestra_events\nselect distinct\n    'Mapp' as platform,\n    xr.cid,\n    chl.campaign_id,\n    lower(mp.user_email) as email,\n    '' as amf_id,\n    mp.message_id as adestra_campaign_id,\n    mp.message_name as adestra_campaign_name,\n    case\n        when mp.record_type = 'SentToMTA' then 'sent_campaign'\n        when mp.record_type = 'Render' then 'read'\n        when mp.record_type = 'Click' then 'click'\n        when mp.record_type = 'Bounce' then 'inbound_bounce'\n        when mp.record_type = 'Feedback' then 'feedback'\n        when mp.record_type = 'Skip' then 'skip'\n        else lower(mp.record_type)\n    end as event_name,\n    mp.record_timestamp as event_timestamp,\n    coalesce(trim(rll.link_label), mp.click_link_category_name) as link_label,\n    mp.click_link_url as link_url,\n    '' as form_builder_id,\n    '' as email_client,\n    '' as email_client_type,\n    '' as browser,\n    '' as kog_pack,\n    mp.source_file,\n    mp.source_date\nfrom ${Database}.temp.mapp_events_no_xref mp\ninner join ${Database}.live.xref_email xr on lower(mp.user_email) = lower(xr.email)\ninner join ${Database}.temp.build_comms_history_lookup chl on chl.programme_id = 'E'\n                                                     and lower(chl.campaign_id) = lower(case when collate(mp.message_name,'') ilike '%_MTE_%' then tbw.db.strchop(mp.message_name,'_',1,3) else split_part(mp.message_name,'_',1) end)\ninner join ${Database}.temp.build_comms_history ch on ch.packid = chl.packid\n                                             and ch.cid = xr.cid\nleft join ${Database}.db.ref_link_label rll on trim(mp.click_link_url) = trim(rll.link_url)\n                                      and trim(lower(mp.message_name)) = trim(lower(rll.campaign_name))                                              \nwhere mp.user_custom_attribute_name_urn = '';\n\nalter warehouse set warehouse_size = 'Small';\n\ndrop table ${Database}.temp.mapp_events_no_xref;\n\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.adestra_events',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.adestra_events;\n\n--select count(*) from ${Database}.live.adestra_events; --20,747,040\n--select count(*) from ${Database}.db.adestra_events; --63,857,827\n--select * from ${Database}.live.adestra_events;\n\n---------------------\n--all those who have opened an email by brand\n\ndrop table if exists ${Database}.temp.build_rollups_cid_brand_emails ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_brand_emails\nas\nselect \n    ae.email,\n    ch.brand_id,\n    max(cast(ae.event_timestamp as date)) as event_date\nfrom ${Database}.live.adestra_events ae\ninner join ${Database}.temp.build_comms_history_lookup ch on ch.campaign_id = ae.campaign_id\nwhere ch.brand_id is not null\n    and lower(collate(ae.event_name,'')) regexp '.*click.*|.*open.*|.*read.*|.*shared.*|.*submit.*'\n    and lower(collate(ae.event_name,'')) not regexp '.*unsubscribe.*'\n    and ae.event_timestamp > add_months(current_date, -60) --now only using data from the last 5 years to determine preference for brand\ngroup by \n    ae.email,\n    ch.brand_id; \n\n--insert SMA emails\ninsert into ${Database}.temp.build_rollups_cid_brand_emails\nselect\n    ae.email,\n    rb.brand_id,\n    max(cast(ae.event_timestamp as date)) as event_date\nfrom ${Database}.db.adestra_events_sma ae\ninner join ${Database}.db.ref_brand rb on lower(trim(rb.brand)) = 'sma'\nwhere lower(ae.event_name) regexp '.*click.*|.*open.*|.*read.*|.*shared.*|.*submit.*'\n    and lower(ae.event_name) not regexp '.*unsubscribe.*'\n    and ae.event_timestamp > add_months(current_date, -60) --now only using data from the last 5 years to determine preference for brand\n    and trim(ae.workspace_name) = 'SMA'\ngroup by \n    ae.email,\n    rb.brand_id; \n\n--insert Cerelac emails\ninsert into ${Database}.temp.build_rollups_cid_brand_emails\nselect\n    ae.email,\n    rb.brand_id,\n    max(cast(ae.event_timestamp as date)) as event_date\nfrom ${Database}.db.adestra_events_sma ae\ninner join ${Database}.db.ref_brand rb on lower(trim(rb.brand)) = 'cerelac'\nwhere lower(ae.event_name) regexp '.*click.*|.*open.*|.*read.*|.*shared.*|.*submit.*'\n    and lower(ae.event_name) not regexp '.*unsubscribe.*'\n    and ae.event_timestamp > add_months(current_date, -60) --now only using data from the last 5 years to determine preference for brand\n    and lower(ae.workspace_name) regexp '.*cerelac.*'\ngroup by \n    ae.email,\n    rb.brand_id; \n\n--insert HCP emails\ninsert into ${Database}.temp.build_rollups_cid_brand_emails\nselect\n    ae.email,\n    rb.brand_id,\n    max(cast(ae.event_timestamp as date)) as event_date\nfrom ${Database}.db.adestra_events_hcp ae\ninner join ${Database}.db.ref_brand rb on lower(trim(rb.brand)) = 'hcp'\nwhere lower(ae.event_name) regexp '.*click.*|.*open.*|.*read.*|.*shared.*|.*submit.*'\n    and lower(ae.event_name) not regexp '.*unsubscribe.*'\n    and ae.event_timestamp > add_months(current_date, -60) --now only using data from the last 5 years to determine preference for brand\ngroup by \n    ae.email,\n    rb.brand_id; \n\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_brand_emails',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_brand_emails;\n\n\n---------------------\n--purina engagement scoring\n\n--Contact CES\n\n\nalter warehouse set warehouse_size = 'Xsmall';\n\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_careline;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_careline\nas \nselect    \n    cid, \n    activity_date,\n    min(activity) as activity,\n    cast(null as int) as activity_brand_id\nfrom      \n(\n    select    \n        trim(name_urn) as name_urn,\n        cast(contact_date as date) as activity_date,\n        'Contacted CES (without completing survey)' as activity\n    from ${Database}.db.npp_ces_contacts\n    union all \n    select    \n        trim(name_urn) as name_urn,\n        cast(contact_date as date) as activity_date,\n        'Completed CES Survey'\n    from ${Database}.db.npp_ces_contacts_and_surveys\n) cs\ninner join ${Database}.live.xref_name_urn xr on xr.name_urn = cs.name_urn\ngroup by 1, 2;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_careline',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_careline;\n\n\n--Coupons\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_coupons;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_coupons\nas \nselect    \n    cid,\n    print_date as activity_date,\n    case \n        when max(trim(redeemed)) = 'Y' then 'Redeemed Coupon'\n        else 'Downloaded Coupon (but did not redeem)'\n    end as activity,\n    qc.brand_id as activity_brand_id\nfrom ${Database}.db.quotient_coupons qc\ninner join ${Database}.live.xref_name_urn xr on trim(qc.name_urn) = xr.name_urn\nwhere trim(qc.name_urn) > ''\ngroup by 1,2,4\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_coupons',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_coupons;\n\n--THG Purchases\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_thg_purchases;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_thg_purchases\nas\nselect distinct\n    n.cid,\n    order_created as activity_date,\n    'Purchased Product' as activity,\n    n.source_brand_id as activity_brand_id\nfrom (\n        select distinct\n                customer_id,\n                order_created,\n                sum(quantity_ordered * transaction_charge_price_per_unit) as order_total_value\n        from ${Database}.db.npp_thg_trans\n        where lower(trim(order_line_status)) = 'despatched'\n        group by customer_id, order_created\n        ) thg\nleft join ${Database}.live.names n on n.name_urn = 'REG_THG|'||cast(thg.customer_id as varchar)\nwhere order_total_value > 0 --1 or more items were not free packs\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_thg_purchases',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_thg_purchases;\n\n--Competition entry/draw\ndrop table if exists ${Database}.temp.build_rollups_npp_competition_entry;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_competition_entry\nas\nselect    \n    cid,\n    max(drop_date) as activity_date,\n    'Competition entry' activity,\n    (select brand_id from ${Database}.live.ref_brand where brand ilike '%masterbrand%') as activity_brand_id\nfrom ${Database}.db.comms_hist cmp\ninner join ${Database}.live.xref_name_urn xr on trim(cmp.name_urn) = xr.name_urn\nwhere trim(cmp.name_urn) > ''\nand cmp.promotion_id = 'NPP07753_2'\ngroup by 1,3,4\nunion all\nselect\n    cid,\n    max(q.data_date) as activity_date,\n    'Competition entry' activity,\n    (select brand_id from ${Database}.live.ref_brand where brand ilike '%masterbrand%') as activity_brand_id\nfrom ${Database}.db.question q\ninner join ${Database}.live.xref_name_urn x on x.name_urn = q.name_urn\nwhere question_id = (select question_id from ${Database}.db.ref_question where question = 'Pet Photo Uploader')\ngroup by 1,3,4\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_competition_entry',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_competition_entry;\n\n\n--Pet Photo Upload\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_photo_upload;\ncreate or replace table ${Database}.temp.build_rollups_npp_engagement_photo_upload\nas\nselect\n    cid,\n    max(q.data_date) as activity_date,\n    'User Generated Content' activity,\n    (select brand_id from ${Database}.live.ref_brand where brand ilike '%masterbrand%') as activity_brand_id\nfrom ${Database}.db.question q\ninner join ${Database}.live.xref_name_urn x on x.name_urn = q.name_urn\nwhere question_id = (select question_id from ${Database}.db.ref_question where question = 'Pet Photo Uploader')\ngroup by 1,3,4\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_photo_upload',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_photo_upload;\n\n\n--Casting a vote\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_voters;\ncreate or replace table ${Database}.temp.build_rollups_npp_engagement_voters\nas\nselect\n    cid,\n    max(q.data_date) as activity_date,\n    'Cast a Vote' activity,\n    (select brand_id from ${Database}.live.ref_brand where brand ilike '%masterbrand%') as activity_brand_id\nfrom ${Database}.db.question q\ninner join ${Database}.live.xref_name_urn x on x.name_urn = q.name_urn\nwhere question_id = (select question_id from ${Database}.db.ref_question where question = 'Pet Photo Voter')\ngroup by 1,3,4\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_voters',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_voters;\n\n\n--Reconsent\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_reconsent;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_reconsent\nas \nselect    \n    xr.cid,\n    dp.data_date as activity_date,\n    'Reconsent' as activity,\n    cast(null as int) as activity_brand_id\nfrom ${Database}.db.names_dp dp\nleft join ${Database}.live.xref_name_urn xr on xr.name_urn = trim(dp.name_urn)\nwhere trim(dp.source) in ('RESP_ADE_10|232','RESP_ADE_10|234','RESP_ADE_10|253','RESP_ADE_10|259','RESP_ADE_10|274','RESP_ADE_10|275','RESP_ADE_10|317')\nand dp_emailable = 1\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_reconsent',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_reconsent;\n\n\n--registered CIAM account\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_CIAM_accounts;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_CIAM_accounts\nas\nselect distinct\ncid\n,data_date as activity_date\n,case when rownum = 1 then 'Registered New CIAM Account' \n         when rownum > 1 then 'Updated CIAM Account'\n         end as activity\n         ,source_brand_id\nfrom\n(\nselect\n    cid\n    ,nm.data_date\n    ,nm.source_brand_id\n    ,row_number() over (partition by cid,nm.data_date order by nm.data_date asc,nm.source_brand_id asc) as rownum\nfrom ${Database}.live.names nm\ninner join ${Database}.db.names_preference np on trim(np.name_urn) = nm.name_urn\nwhere nm.source = 'REG_GIG' --have a gigya account\nand data_controller_id = 5 --gigya account is for a Purina brand\nand lower(nm.source_file) not regexp '.*json.*' --account was not migrated\nand lower(np.source_file) not regexp '.*json.*'\n) t\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_CIAM_accounts',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_CIAM_accounts;\n\n--Registered to Growing Pup\n--drop table if exists ${Database}.temp.build_rollups_npp_engagement_GP_registrants;\n--CREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_GP_registrants\n--as\n--select distinct\n --   xr.cid,\n--    first_value(p.data_date) over (partition by xr.cid order by p.data_date asc) as activity_date,\n--    'Joined Growing Pup' as activity,\n--    first_value(n.source_brand_id) over (partition by xr.cid order by p.data_date asc) as activity_brand_id\n--from     ${Database}.db.pet p\n--left join ${Database}.live.xref_name_urn xr on xr.name_urn = p.name_urn\n--left join ${Database}.live.names n on n.name_urn = p.name_urn\n--where trim(p.source) in ('REG_KC','REG_THG') or (trim(p.source) = 'REG_GIG' and lower(p.name_urn) regexp '.*growing pup.*')\n--;\n--Registered to Growing Pup\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_GP_registrants;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_GP_registrants\nas\n\t\tselect distinct cid, first_date_brand as activity_date,'Joined Growing Pup' as activity,'138' as activity_brand_id  from ${Database}.live.cid_brand \n\t\t\t\t\t  where brand_id = 138 and activity_date is not NULL and brand_preference = 1  \n\t\t\t\t\t  group by 1,2\n\t\t\t\t\t  ;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_GP_registrants',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_GP_registrants;\n\n--Registered to Kitten Code\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_KC_registrants;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_KC_registrants\nas\n    select distinct cid, first_date_brand as activity_date,'Joined Kitten Code' as activity,'143' as activity_brand_id  from ${Database}.live.cid_brand \n                  where brand_id = 143 and activity_date is not NULL and brand_preference = 1  \n                  group by 1,2\n\t\t\t\t  ;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_KC_registrants',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_KC_registrants;\n\n--Cashback\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_cashback;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_cashback\nas\n    select distinct cid, data_date as activity_date,'Cashback' as activity,source_brand_id as activity_brand_id  from ${Database}.live.names \n                   where (NAME_URN ilike '%reg_hashting%' or NAME_URN ilike '%reg_shopm%')  \n                   group by 1,2,3,4\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_cashback',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_cashback;\n\n--Your Purina\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_your_purina;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_your_purina\nas\n  select distinct cid, answer_data_date as ACTIVITY_DATE,'Joined Your Purina' as activity,\n  (select brand_id from ${Database}.live.ref_brand where brand ilike '%masterbrand%') as activity_brand_id\n                        from ${Database}.live.cid_question cq\n                        inner join ${Database}.db.ref_question rq on rq.question_id = cq.question_id\n                        where rq.question = 'Where do you buy food for your pets?' \n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_your_purina',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_your_purina;\n\n\n--Your Purina Survey clicks\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_your_purina_survey;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_your_purina_survey\nas\n  select cid, cast(max(event_timestamp) as date) as ACTIVITY_DATE,'Completed Survey' as activity,\n\t\t(select brand_id from ${Database}.live.ref_brand where brand ilike '%your purina%') as activity_brand_id\n    from ${Database}.live.adestra_events ae\n\tjoin ${Database}.db.ref_your_purina_survey_lookup ref on  ae.adestra_campaign_id = ref.campaign_id and ae.link_url = ref.link_url \n    where  event_name ilike '%click%'\ngroup by 1;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_your_purina_survey',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_your_purina_survey;\n\n\n--Updated Pet Details\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_updated_pet_details;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_updated_pet_details\nas\nselect cid, pet_data_date as ACTIVITY_DATE,'Updated Pet Details' as activity,\n(select brand_id from ${Database}.live.ref_brand where brand ilike '%masterbrand%') as activity_brand_id\nfrom ${Database}.live.cid_pet   group by 1,2\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_updated_pet_details',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_updated_pet_details;\n\n\n--Completed Survey\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_survey;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_survey\nas \nselect distinct \n    cid,\n    data_date as activity_date,\n    'Completed Survey' as activity,\n    source_brand_id as activity_brand_id\nfrom ${Database}.live.names\nwhere collate(name_urn,'') ilike 'RESP_GP%'\nunion all\nselect distinct \n    cid,\n    cast(event_timestamp as date) as activity_date,\n    'Completed Survey' as activity,\n    (select brand_id from ${Database}.db.ref_brand where brand ilike '%masterbrand') as activity_brand_id\nfrom ${Database}.live.adestra_events\nwhere event_name = 'GA Survey';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_survey',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_survey;\n\n-- Registration Opt In\n\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_optin;\ncreate table ${Database}.temp.build_rollups_npp_engagement_optin\nas\nselect \ncid,\ndp_date as activity_date,cast(null as int) as activity_brand_id,'Opt In' as activity\nfrom nestle.db.names_dp nd\njoin nestle.live.names nm\non nd.name_urn = nm.name_urn\nwhere data_controller_id = 5 and dp_emailable = 1 group by 1,2;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_optin',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_optin;\n\n--Registration\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_registered_to_purina;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_registered_to_purina\nas \nselect distinct\n    cbb.cid,\n    first_value(cbb.first_date_brand) over (partition by cbb.cid order by cbb.first_date_brand asc) as activity_date,\n    'Registration' as activity,\n    first_value(cbb.brand_id) over (partition by cbb.cid order by cbb.first_date_brand asc) as activity_brand_id\nfrom ${Database}.temp.build_rollups_cid_brand_base cbb\ninner join ${Database}.live.ref_business_unit_brand rbu on cbb.brand_id = rbu.brand_id\nwhere rbu.business_unit_id in (select business_unit_id from ${Database}.live.ref_business_unit where collate(business_unit,'') ilike 'Nestl_ Purina Petcare (UK) Ltd')\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_registered_to_purina',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_registered_to_purina;\n\n\nalter warehouse set warehouse_size = 'Small';\n\n--Email engagement\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_adestra_prep;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_adestra_prep\nas\nselect     cid,\n    adestra_campaign_id,\n    activity_date,\n    event_name,\n    case when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'A' then 'Clicked for Advice'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'Buy_now' then 'Clicked Buy Now'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'C' then 'Clicked Coupon'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'DC' and updated_ciam = 0 then 'Clicked Update Details'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'I' then 'Clicked for Info'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'P' then 'Clicked Product'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'PDC' then 'Clicked PDC'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'R' then 'Clicked Reconsent'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'S' then 'Clicked Social'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'O' then 'Clicked Other'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is not null then link_type\n         when lower(collate(event_name,'')) regexp '.*read.*' then 'Opened email (no click)'\n         else 'Clicked Other' end as link_type ,\n    brand_id\nfrom (\n        select distinct     \n            ae.cid, \n            ae.adestra_campaign_id,\n            cast(ae.event_timestamp as date) as activity_date,\n            ae.event_name,\n            ae.link_label,\n            trim(lt.link_type) as link_type,\n            case when c.cid is not null \n                 and lower(ae.event_name) regexp '.*click.*' \n                 and (trim(lt.link_type) = 'Update Details' or (lt.link_type is null and split_part(ae.link_label, '|', 1) = 'DC'))\n                 then 1 else 0 end as updated_ciam, --only get points for clicking if they didn't register or update CIAM details\n            case when atl.adestra_campaign_id is null then cast(null as int) else rb.brand_id end as brand_id\n        from ${Database}.live.adestra_events ae \n        left join ${Database}.db.ref_link_label_type lt on lower(ae.link_url) = lower(trim(lt.link_url))\n        left join ${Database}.temp.build_rollups_npp_engagement_CIAM_accounts c on c.cid = ae.cid \n                                                                                   and c.activity_date = cast(ae.event_timestamp as date)\n        left join ${Database}.db.adestra_tag_lookup atl on trim(atl.adestra_campaign_id) = ae.adestra_campaign_id\n        left join ${Database}.live.ref_brand rb on rb.brand = atl.brand\n        where ae.campaign_id ilike 'npp%'\n            and lower(ae.event_name) regexp '.*click.*|.*open.*|.*read.*|.*shared.*|.*submit.*'\n            and lower(ae.link_url) not regexp '.*unsub.*'\n    ) a\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_adestra_prep',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_adestra_prep;\n\n\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_adestra;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_adestra\nas\nselect distinct \n    adestra_campaign_id,  \n    cid, \n    activity_date,\n    first_value\n        (\n            case\n                when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Buy Now' then 'Clicked Buy Now'\n                when lower(event_name) regexp '.*click.*' and link_type = 'Clicked PDC' then 'Clicked PDC'\n                when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Product' then 'Clicked Product'\n                when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Reconsent' then 'Clicked Reconsent'  \n                when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Coupon' then 'Clicked Coupon'  \n\t\t\t\twhen lower(event_name) regexp '.*click.*' and link_type in ('Clicked for Info','Clicked Social','Clicked for Advice','Clicked Update Details','Clicked Other') then 'Clicked Generic'\n                when lower(event_name) regexp '.*click.*|.*submit.*' then 'Clicked Other'\n                when lower(event_name) regexp '.*read.*' then 'Opened email (no click)'\n            end\n        ) over\n        (\n            partition by cid, adestra_campaign_id\n            order by \n                case\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked PDC' then 1\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Buy Now' then 2\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Product' then 3\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Coupon' then 4\n\t\t\t\t\twhen lower(event_name) regexp '.*click.*' and link_type in ('Clicked for Info','Clicked Social','Clicked for Advice','Clicked Update Details','Clicked Other') then 5\n                    when lower(event_name) regexp '.*click.*|.*submit.*' and link_type = 'Clicked Other' then 6\n                    when lower(event_name) regexp '.*read.*' then 7\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Reconsent' then 8\n                end\n        ) as activity,\n    first_value(brand_id)\n          over(\n             partition by cid, adestra_campaign_id\n             order by \n                case\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked PDC' then 1\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Buy Now' then 2\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Product' then 3\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Coupon' then 4\n\t\t\t\t\twhen lower(event_name) regexp '.*click.*' and link_type in ('Clicked for Info','Clicked Social','Clicked for Advice','Clicked Update Details','Clicked Other') then 5\n                    when lower(event_name) regexp '.*click.*|.*submit.*' and link_type = 'Clicked Other' then 6\n                    when lower(event_name) regexp '.*read.*' then 7\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Reconsent' then 8\n                end\n        ) as activity_brand_id  \nfrom ${Database}.temp.build_rollups_npp_engagement_adestra_prep\n;\n\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_adestra',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_adestra;\n\n-- Create tables for Generic clicks/open, one per month per campaign\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_adestra_generic_clicks;\ncreate or replace table ${Database}.temp.build_rollups_npp_engagement_adestra_generic_clicks as\nselect adestra_campaign_id, concat(year(activity_date),month(activity_date)) as year_month,cid,activity,activity_brand_id,max(activity_date) as activity_date\nfrom ${Database}.temp.build_rollups_npp_engagement_adestra\nwhere activity in \n('Clicked Generic','Opened email (no click)')\ngroup by 1,2,3,4,5;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_adestra_generic_clicks',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_adestra_generic_clicks;\n\n-- Create table for non generic clicks to allow more points\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_adestra_nongeneric_clicks;\ncreate or replace table ${Database}.temp.build_rollups_npp_engagement_adestra_nongeneric_clicks as\nselect adestra_campaign_id, activity,cid,activity_brand_id,activity_date\nfrom ${Database}.temp.build_rollups_npp_engagement_adestra\nwhere activity not in \n('Clicked Generic','Opened email (no click)');\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_adestra_nongeneric_clicks',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_adestra_nongeneric_clicks;\n\n  --purina qualifio kitten code campaign\n--drop table if exists ${Database}.temp.build_rollups_npp_Qualifio_participation;\n--create table ${Database}.temp.build_rollups_npp_Qualifio_participation\n--as\n--select distinct   \n--    cid,\n--    first_value(na.data_date) over(partition by cid, REGISTRATION_CAMPAIGN order by na.data_date asc) as activity_date,\n--    'Qualifio participation' as activity,\n--   n.source_brand_id as activity_brand_id\n--from ${Database}.db.names_attributes na\n--inner join ${Database}.db.names n on n.name_urn = na.name_urn and n.data_date = na.data_date\n--inner join ${Database}.live.xref_name_urn xr on trim(n.name_urn) = trim(xr.name_urn)\n--where na.source = 'REG_QUALIFIO'\n--and n.SOURCE_DATA_CONTROLLER_ID = (select data_controller_id from ${Database}.db.ref_data_controller where data_controller like 'Nestl_ Purina Petcare (UK) Ltd')  \n--;\n\n\n--insert into ${Database}.db.build_log \n--select \n--    'nestle_rollups',\n--    '${Database}.temp.build_rollups_npp_Qualifio_participation',\n--    'total records',\n--    cast(count(*) as varchar),\n--    CURRENT_TIMESTAMP\n--from ${Database}.temp.build_rollups_npp_Qualifio_participation;\n\n--purina pet avatar creation\ndrop table if exists ${Database}.temp.build_rollups_npp_pet_avatar_creation;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_pet_avatar_creation\nas\nselect    \n    cid,\n    max(to_date(left(user_date_created,10),'YYYY-MM-DD')) as activity_date,\n    'Pet Avatar Creation' activity,\n    (select brand_id from ${Database}.live.ref_brand where brand ilike '%masterbrand%') as activity_brand_id\nfrom ${Database}.db.npp_pet_avatar_details ppa\ninner join ${Database}.live.xref_name_urn xr on trim(ppa.name_urn) = trim(xr.name_urn)\nwhere trim(ppa.name_urn) > ''\ngroup by 1,3,4\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_pet_avatar_creation',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_pet_avatar_creation;\n\n\n--score rollup\ndrop table if exists ${Database}.live.npp_engagement_scoring_activities;\n\nCREATE OR REPLACE TABLE ${Database}.live.npp_engagement_scoring_activities\nas\nselect    \n    cid,\n    activity_date,\n    activity,\n    activity_brand_id,\n  (((1 / sqrt((datediff(day,activity_date,current_date())/60)+1) * 15 ) + 1)) as   recency_multiplier,\n    case\n        when activity = 'Purchased Product' then 40\n\t\twhen activity = 'Left Positive Rate & Review' then 40\n\t\twhen activity = 'Left Negative Rate & Review' then 40\n\t\twhen activity = 'Joined Your Purina' then 40\n        when activity = 'Pet Avatar Creation' then 40\n        when activity = 'Completed Survey' then 30\n        when activity = 'Clicked PDC' then 30\n\t\twhen activity = 'Clicked Update Details' then 30\n        when activity = 'User Generated Content' then 30\n\t\twhen activity = 'Contacted CES (without completing survey)' then 12\n        when activity = 'Joined Growing Pup' then 12\n\t\twhen activity = 'Joined Kitten Code' then 12\n        when activity = 'Clicked Buy Now' then 12\n\t\twhen activity = 'Updated Pet Details' then 12\n\t\twhen activity = 'Redeemed Coupon' then 12\n\t\twhen activity = 'Cashback' then 12\n\t\twhen activity = 'Requested free product sample' then 12\n\t\twhen activity = 'Joined Loyalty Scheme' then 12\n\t\twhen activity = 'Registered New CIAM Account' then 12\n\t\twhen activity = 'Updated CIAM Account' then 12\n        when activity = 'Completed CES Survey' then 12\n\t\twhen activity = 'Downloaded Coupon (but did not redeem)' then 12\n\t\twhen activity = 'Reconsent' then 12\n\t\twhen activity = 'Clicked Reconsent' then 12\n\t\twhen activity = 'Registration' then 6\n\t\twhen activity = 'Opt In' then 6\n\t\twhen activity = 'Clicked Generic' then 6\n        when activity = 'Cast a Vote' then 6\t\t\t\t\t\t\t\t\t\t\t\n        when activity = 'Competition entry' then 2\n        when activity = 'Opened email (no click)' then 1\n    end as base_score\nfrom      \n(   select cid, activity_date, activity, source_brand_id as activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_CIAM_accounts\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_thg_purchases\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_rate_review\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_loyalty_scheme\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_careline\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_samples\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_coupons\n \tunion all\n\tselect cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_competition_entry\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_adestra_nongeneric_clicks\n\tunion all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_adestra_generic_clicks\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_GP_registrants\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_reconsent\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_survey\n\tunion all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_pet_avatar_creation\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_photo_upload\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_voters \n\tunion all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_KC_registrants\n\tunion all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_cashback\n\tunion all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_your_purina\n\tunion all\n\tselect cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_your_purina_survey\n\tunion all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_updated_pet_details\n\tunion all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_optin\n) activities\n;\n\ndrop table if exists ${Database}.temp.build_npp_engagement_scoring_occurrence_pre;\ncreate or replace table ${Database}.temp.build_npp_engagement_scoring_occurrence_pre as \nselect cid,activity,activity_brand_id,activity_date,recency_multiplier,base_score,\ndatediff(month,diff_date,activity_date) as count_month\nfrom (\nselect cid,activity,activity_brand_id,activity_date,recency_multiplier,base_score,\nlead(activity_date) over (partition by activity   order by cid,activity,activity_date desc) \nas diff_date\nfrom ${Database}.live.npp_engagement_scoring_activities\n) new;\n\n-- Add in occurrence_multiplier\ndrop table if exists ${Database}.temp.build_npp_engagement_scoring_occurrence;\n\ncreate or replace table ${Database}.temp.build_npp_engagement_scoring_occurrence as\nselect\ncid,\nactivity,\nactivity_brand_id,\nactivity_date,\nrecency_multiplier,\nbase_score,\ncase\nwhen row_number() over(partition by cid, activity, rn order by activity_date) < 4 then 1\nwhen row_number() over(partition by cid, activity, rn order by activity_date) = 4 then 0.8\nwhen row_number() over(partition by cid, activity, rn order by activity_date) = 5 then 0.6\nwhen row_number() over(partition by cid, activity, rn order by activity_date) >= 6 then 0.5\nend as occurrence_multiplier\nfrom (select distinct\na.*,\nfirst_value(coalesce(b.rn,9999)) over(partition by a.cid, a.activity, a.activity_date order by b.rn) as rn\nfrom ${Database}.temp.build_npp_engagement_scoring_occurrence_pre a\nleft join (select *, row_number() over(partition by cid, activity order by activity_date) as rn from ${Database}.temp.build_npp_engagement_scoring_occurrence_pre where count_month >= 6) b on a.cid = b.cid\nand a.activity = b.activity\nand a.activity_date < b.activity_date) a\norder by activity, activity_date;\n\nalter warehouse set warehouse_size = 'Xsmall';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_npp_engagement_scoring_occurrence',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_npp_engagement_scoring_occurrence;\n\n-- New Distinct Activity setup for Engagement Score\ncreate or replace table ${Database}.temp.build_rollups_npp_engagement_distinct_activity as\nselect\n cid,activity\nfrom ${Database}.live.npp_engagement_scoring_activities\nwhere activity_date < current_date()\ngroup by 1,2;\n\n-- Summarise the above table to CID level\n\ncreate or replace table ${Database}.temp.build_rollups_npp_engagement_distinct_activity_cid_level\nas \nselect\ncid,count(*) as distinct_activity\nfrom ${Database}.temp.build_rollups_npp_engagement_distinct_activity\ngroup by 1;\n\n\n\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_CIAM_accounts;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_thg_purchases;\ndrop table if exists ${Database}.temp.build_rollups_npp_competition_entry;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_rate_review;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_loyalty_scheme;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_careline;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_samples;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_coupons;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_adestra;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_GP_registrants;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_reconsent;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_registered_to_purina;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_survey;\t \ndrop table if exists ${Database}.temp.build_rollups_npp_pet_avatar_creation;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_adestra_nongeneric_clicks;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_adestra_generic_clicks;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_photo_upload;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_voters;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_KC_registrants;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_cashback;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_your_purina;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_updated_pet_details;\ndrop table if exists ${Database}.temp.build_rollups_npp_test_engagement_optin;\ndrop table if exists ${Database}.temp.build_npp_engagement_scoring_occurrence_pre;\n\n--final engagement table\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_score;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_score \nas\nselect    \n    npsa.cid,\n  sum(coalesce(base_score,0) * coalesce(recency_multiplier,0) * \n  coalesce(occurrence_multiplier,0)\n  * coalesce(case when  npda.distinct_activity <= 3 then 1 when npda.distinct_activity <= 5 then 1.25 else 1.5 end, 0)) as engagement_score\nfrom ${Database}.temp.build_npp_engagement_scoring_occurrence npsa\njoin ${Database}.temp.build_rollups_npp_engagement_distinct_activity_cid_level npda\non npsa.cid = npda.cid\ngroup by 1;\n\ndrop table if exists ${Database}.temp.build_npp_engagement_scoring_occurrence;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_score',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_score;\n\n--lapse risk segment table\ncreate or replace table ${Database}.temp.build_rollups_npp_lapse_risk_segment\nas\nselect\n    ev.cid,\n    case\n        when ev.last_open < add_months(current_date,-10)\n            or ((ev.first_date_business_unit < add_months(current_date,-6) or ev.first_date_business_unit is null) and ev.last_open is null) then 'Very High Risk'\n        when (ev.last_open >= add_months(current_date,-10) and ev.last_open < add_months(current_date,-6))\n            or ((ev.first_date_business_unit < add_months(current_date,-12) or ev.first_date_business_unit is null)\n                and ev.last_click is null\n                and ev.last_open >= add_months(current_date, -6)\n                and ev.last_open < add_months(current_date, -3))\n            or ((ev.first_date_business_unit >= add_months(current_date,-6) and ev.first_date_business_unit < add_months(current_date,-3)) and ev.last_open is null) then 'High Risk'\n        when (ev.last_open >= add_months(current_date, -6) and ev.last_open < add_months(current_date, -3) and (ev.last_click is not null or ev.first_date_business_unit >= add_months(current_date,-12)))\n              or (ev.last_open is null and ev.first_date_business_unit >= add_months(current_date, -3)) then 'Medium Risk'\n        when ev.last_open >= add_months (current_date, -3) then 'Low Risk'\n    end as purina_lapse_risk_segment\nfrom (\n         select\n             cbb.cid,\n             min(cbb.first_date_business_unit) as first_date_business_unit,\n             max(case when lower(ae.event_name) rlike '.*read.*|.*click.*' then cast(ae.event_timestamp as date) end) as last_open,\n             max(case when lower(ae.event_name) rlike '.*click.*' then cast(ae.event_timestamp as date) end) as last_click\n         from ${Database}.temp.build_rollups_cid_bu_base cbb\n         left join ${Database}.live.adestra_events ae on ae.cid = cbb.cid\n                                                     and lower(ae.campaign_id) rlike '^npp.*'\n         where cbb.business_unit_id = 5\n         group by 1\n         union all\n         select\n             ae.cid,\n             cast(null as date) as first_date_business_unit,\n             max(case when lower(ae.event_name) rlike '.*read.*|.*click.*' then cast(ae.event_timestamp as date) end) as last_open,\n             max(case when lower(ae.event_name) rlike '.*click.*' then cast(ae.event_timestamp as date) end) as last_click\n         from ${Database}.live.adestra_events ae\n         left join ${Database}.temp.build_rollups_cid_bu_base cbb on cbb.cid = ae.cid\n                                                     and cbb.business_unit_id = 5\n         where lower(ae.campaign_id) rlike '^npp.*'\n             and cbb.cid is null\n         group by 1\n  ) ev;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_lapse_risk_segment',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_lapse_risk_segment;\n\n---------------------\n---------------------\n-- cid\n\ndrop table if exists ${Database}.live.cid ;  \n\nalter warehouse set warehouse_size = 'Large';\n\nCREATE OR REPLACE TABLE ${Database}.live.cid \nas \nselect \n    cb.cid,\n    cb.hid,\n    cb.bbw_urn,\n    cb.name_urn,\n    cb.created_date,\n    cb.updated_date,\n    case when gf.cid is null then cb.gender else 'X' end                                        as gender,\n    cast(left(upper(cb.postcode),20) as varchar(20))                                            as postcode,\n    postcode_area_home,\n    postcode_district_home,\n    cast\n    (\n        case \n            when lower(cb.country)='united kingdom' then left(upper(split_part(cb.postcode,' ',1)||' '||left(split_part(cb.postcode,' ',-1),1)),10) \n            else '' \n        end as varchar(10)\n    )                                                                                           as postal_sector,\n    cast\n    (\n        case \n            when lower(cb.country)='united kingdom' then left(upper(split_part(cb.postcode,' ',1)),10) \n            else '' \n        end as varchar(10)\n    )                                                                                           as postal_district,\n    cast\n    (\n        upper\n        (\n            case \n                when lower(cb.country)='united kingdom' then \n                    case\n                        when lower(substring(collate(cb.postcode,''),2,1)) regexp '.*[a-z].*' then left(cb.postcode,2) \n                        else left(cb.postcode,1) \n                    end \n                else '' \n            end\n        ) as char(2)\n    )                                                                                           as postal_area,\n    cb.country,   \n    cb.dob,\n    case when cb.mailable_ignoring_dp          = 1 then cb.name_urn_to_mail_ignoring_dp          else cast(null as varchar) end as name_urn_to_mail_ignoring_dp,\n    case when cb.emailable_ignoring_dp         = 1 then cb.name_urn_to_email_ignoring_dp         else cast(null as varchar) end as name_urn_to_email_ignoring_dp,\n    case when cb.phoneable_ignoring_dp         = 1 then cb.name_urn_to_phone_ignoring_dp         else cast(null as varchar) end as name_urn_to_phone_ignoring_dp,\n    case when cb.smsable_ignoring_dp           = 1 then cb.name_urn_to_sms_ignoring_dp           else cast(null as varchar) end as name_urn_to_sms_ignoring_dp,\n    case when np.cid is not null then 1 else cast(null as tinyint) end                          as no_printer, \n    case \n        when hc.cid is not null then 'Y'\n        when ncat.cid is not null then 'Y'  \n        when pcat.cid is not null then 'Y'\n        when cat.cid is not null and lower(cat.answer) = 'y' then 'Y'\n        when cat.cid is not null and lower(cat.answer) = 'n' then 'N'\n        when ic.data_date >= add_months(current_date,-60) then 'IN'\n        when ic.data_date < add_months(current_date,-60) then 'IO'\n        else 'N' \n    end as have_cat,\n    case \n        when hd.cid is not null then 'Y'\n        when ndog.cid is not null then 'Y'  \n        when pdog.cid is not null then 'Y'\n        when dog.cid is not null and lower(dog.answer) = 'y' then 'Y'\n        when dog.cid is not null and lower(dog.answer) = 'n' then 'N'\n        when id.data_date >= add_months(current_date,-60) then 'IN'\n        when id.data_date < add_months(current_date,-60) then 'IO'\n        else 'N' \n    end as have_dog,\n    case \n        when hc.cid is not null then hc.number_of_cats\n        when ncat.cid is not null then cast(ncat.answer as int)          \n        when cat.cid is not null and lower(cat.answer) = 'y' then 1\n        when pcat.cid is not null then 1\n        else 0\n    end as number_of_cats,\n    case \n        when hd.cid is not null then hd.number_of_dogs\n        when ndog.cid is not null then cast(ndog.answer as int)          \n        when dog.cid is not null and lower(dog.answer) = 'y' then 1\n        when pdog.cid is not null then 1\n        else 0\n    end as number_of_dogs,\n    pdc.pet_segment as pdc_click_pet_seg,\n    pdc.activity_date as pdc_click_pet_seg_updated,\n    case \n        when hc.cid is null \n            and ncat.cid is null \n            and cat.cid is null \n            and uhc.cid is not null then 'Y'\n        else '' \n    end as used_to_have_cat,\n    case \n        when hd.cid is null\n            and ndog.cid is null\n            and dog.cid is null\n            and uhd.cid is not null then 'Y'\n        else '' \n    end as used_to_have_dog,\n\tcase \n        when hc.cid is not null\n             and ncat.cid is not null  \n             and pcat.cid is not null\n\t\t\tand pdc.cid is not null and pdc.pet_segment in ('Both','Cat') then 'Y'\n\t\telse 'N' \n    end as pdc_cat_link_update,\n\tcase \n        when hd.cid is not null\n             and ndog.cid is not null  \n             and pdog.cid is not null\n\t\t\tand pdc.cid is not null and pdc.pet_segment in ('Both','Dog') then 'Y'\n\t\telse 'N' \n    end as pdc_dog_link_update,\t\t\t\t\t\t   \n    dp.num_pets_deceased_this_month,\n    es.engagement_score as purina_engagement_score,\n\tlrs.purina_lapse_risk_segment\nfrom ${Database}.temp.build_rollups_cid_base                     cb\nleft join ${Database}.temp.build_rollups_cid_gender_fix          gf   on cb.cid = gf.cid\nleft join ${Database}.temp.build_rollups_cid_have_cat            hc   on cb.cid = hc.cid\nleft join ${Database}.temp.build_rollups_cid_have_dog            hd   on cb.cid = hd.cid\nleft join ${Database}.temp.build_rollups_cid_inferred_cat        ic   on cb.cid = ic.cid\nleft join ${Database}.temp.build_rollups_cid_inferred_dog        id   on cb.cid = id.cid\nleft join ${Database}.temp.build_rollups_cid_used_to_have_cat    uhc  on cb.cid = uhc.cid\nleft join ${Database}.temp.build_rollups_cid_used_to_have_dog    uhd  on cb.cid = uhd.cid\nleft join ${Database}.temp.build_rollups_cid_deceased_pets       dp   on cb.cid = dp.cid\nleft join ${Database}.temp.build_rollups_cid_no_printer          np   on cb.cid = np.cid\nleft join ${Database}.temp.build_rollups_npp_engagement_score    es   on cb.cid = es.cid\nleft join ${Database}.temp.build_rollups_npp_lapse_risk_segment  lrs  on cb.cid = lrs.cid\nleft join ${Database}.live.cid_question                          cat  on cat.cid = cb.cid \n                                                                     and cat.question = 'Have cat'\nleft join ${Database}.live.cid_question                          dog  on dog.cid = cb.cid \n                                                                     and dog.question = 'Have dog'\nleft join ${Database}.live.cid_question                          ncat on ncat.cid = cb.cid \n                                                                     and ncat.question = 'Number of cats'\nleft join ${Database}.live.cid_question                          ndog on ndog.cid = cb.cid \n                                                                     and ndog.question = 'Number of dogs'\nleft join ${Database}.live.cid_question                          pcat on pcat.cid = cb.cid \n                                                                     and lower(collate(pcat.question,'')) regexp '.*which pets do you have.*'\n                                                                     and lower(collate(pcat.answer,'')) regexp '.*cat.*'\nleft join ${Database}.live.cid_question                          pdog on pdog.cid = cb.cid \n                                                                     and lower(collate(pdog.question,'')) regexp '.*which pets do you have.*'\n                                                                     and lower(collate(pdog.answer,'')) regexp '.*dog.*'\nleft join ${Database}.temp.build_rollups_cid_pdc_pet            pdc on pdc.cid = cb.cid \n;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n \n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid;   \n  \ndrop table ${Database}.temp.build_rollups_cid_gender_fix;\ndrop table ${Database}.temp.build_rollups_cid_have_cat;\ndrop table ${Database}.temp.build_rollups_cid_have_dog;\ndrop table ${Database}.temp.build_rollups_cid_inferred_cat;\ndrop table ${Database}.temp.build_rollups_cid_inferred_dog;\ndrop table ${Database}.temp.build_rollups_cid_no_printer;\ndrop table ${Database}.temp.build_rollups_cid_used_to_have_cat;\ndrop table ${Database}.temp.build_rollups_cid_used_to_have_dog;\ndrop table ${Database}.temp.build_rollups_cid_deceased_pets;\ndrop table ${Database}.temp.build_rollups_npp_engagement_score;\n\n---------------------\n-- cid details\n\ndrop table if exists ${Database}.live.cid_details ;  \n\nCREATE OR REPLACE TABLE ${Database}.live.cid_details \nas\nselect distinct\n    ci.cid,\n    ci.hid,\n    coalesce(utm.name_urn, ute.name_urn, utp.name_urn, uts.name_urn, ci.name_urn)                                       as name_urn,\n    cast(regexp_replace(coalesce(utm.title, ute.title, ma.title),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))                                           as title,\n    cast(regexp_replace(coalesce(utm.firstname, ute.firstname, ma.firstname),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))                               as firstname, \n    cast(regexp_replace(coalesce(utm.lastname, ute.lastname, ma.lastname),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))                                  as lastname,\n    --blank address if not mailable\n    cast(regexp_replace(coalesce(utm.add1, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                                            as add1,\n    cast(regexp_replace(coalesce(utm.add2, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                                            as add2,\n    cast(regexp_replace(coalesce(utm.add3, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                                            as add3,\n    cast(regexp_replace(coalesce(utm.add4, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                                            as add4,\n    cast(regexp_replace(coalesce(utm.add5, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                                            as add5,\n    cast(regexp_replace(coalesce(utm.city, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                                            as town,\n    cast(regexp_replace(coalesce(utm.state, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                                           as county,\n    cast(regexp_replace(coalesce(utm.country_clean, ci.country),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                           as country,\n    cast(regexp_replace(upper(coalesce(utm.postcode, ci.postcode)),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))                                         as postcode,\n    cast(regexp_replace(coalesce(utp.phone_home, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))                                                       as phone_home,\n    cast(regexp_replace(coalesce(utp.phone_work, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))                                                       as phone_work,\n    cast(regexp_replace(coalesce(\n        case \n            when uts.phone_mobile like '+44 %' then replace(replace(uts.phone_mobile , '+' , '') , ' ' , '') \n            else uts.phone_mobile\n        end,''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))                                                                                       as phone_mobile,\n    cast(regexp_replace(coalesce(utm.formal_salutation, ute.formal_salutation, ma.formal_salutation),'[\\x00-\\x1F|\\x7F]','')as nvarchar(100))       as salutation, \n    cast(regexp_replace(coalesce(utm.informal_salutation, ute.informal_salutation, ma.informal_salutation),'[\\x00-\\x1F|\\x7F]','')as nvarchar(100)) as salutation_informal\nfrom ${Database}.live.cid ci \nleft join ${Database}.live.names utm   on ci.name_urn_to_mail_ignoring_dp          = utm.name_urn\nleft join ${Database}.live.names ute   on ci.name_urn_to_email_ignoring_dp         = ute.name_urn\nleft join ${Database}.live.names utp   on ci.name_urn_to_phone_ignoring_dp         = utp.name_urn\nleft join ${Database}.live.names uts   on ci.name_urn_to_sms_ignoring_dp           = uts.name_urn\nleft join ${Database}.live.names ma    on ci.name_urn                              = ma.name_urn\n; \n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid_details',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_details;\n\n---------------------\n-- cid brand\n\ndrop table if exists ${Database}.temp.names_supps_dp_brand;\n\nalter warehouse set warehouse_size = 'Medium';\n\nCREATE OR REPLACE TABLE ${Database}.temp.names_supps_dp_brand\nas\nselect distinct\n    cid,\n    business_unit_id,\n    division_id,\n    brand_id,\n    max(first_email) as email,\n    max(dp_last_date)  as dp_last_date,\n    max(last_open_date) as last_open_date,\n    max(last_open_date_ios15) as last_open_date_ios15,\n    max(customer_retention_group_date) as customer_retention_group_date,\n    max(customer_retention_group_date_ios15) as customer_retention_group_date_ios15,\n    max(customer_retention_group_expiry_date_calculated) as customer_retention_group_expiry_date,\n    max(customer_retention_group_expiry_date_ios15_calculated) as customer_retention_group_expiry_date_ios15,\n    min(customer_retention_group_base) as customer_retention_group_base,\n    min(customer_retention_group_base_ios15) as customer_retention_group_base_ios15,\n    min(customer_suppression_group_base) as customer_suppression_group_base,\n    max(mailable) as mailable,\n    max(emailable)  as emailable,\n    max(emailable_newsletter) as emailable_newsletter,\n    max(mailable_ignoring_dp)  as mailable_ignoring_dp,\n    max(emailable_ignoring_dp) as emailable_ignoring_dp\nfrom (\n         select\n             *,\n             case\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where brand = 'SMA') then add_months(customer_retention_group_date,36)\n                 else add_months(customer_retention_group_date,24)\n             end as customer_retention_group_expiry_date_calculated,\n             case\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where brand = 'SMA') then add_months(customer_retention_group_date_ios15,36)\n                 else add_months(customer_retention_group_date_ios15,24)\n             end as customer_retention_group_expiry_date_ios15_calculated\n\t\t\t ,first_value(email) over (partition by cid, business_unit_id, division_id, brand_id order by emailable desc nulls last, emailable_newsletter desc nulls last, dp_last_date desc nulls last, last_open_date desc nulls last,email asc nulls last) as first_email\n         from ${Database}.temp.build_email_brand_contact_flags\n     ) cf\ngroup by 1,2,3,4\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.names_supps_dp_brand',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.names_supps_dp_brand;\n\n\ndrop table if exists ${Database}.temp.xref_cid_email; \n\nCREATE OR REPLACE TABLE ${Database}.temp.xref_cid_email as\nselect *\nfrom ${Database}.live.xref_email\n;\n    \ninsert into ${Database}.temp.xref_cid_email \nselect \n    cid,\n    '' as email,\n    min(bbw_urn) as bbw_urn\nfrom ${Database}.live.xref_name_urn\ngroup by \n    cid;    \n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.xref_cid_email',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.xref_cid_email;\n\n--brand preference & base combine\ndrop table if exists ${Database}.temp.build_rollups_cid_brand_pref_base; \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_brand_pref_base as\nselect distinct\n\tcid,\n\tbrand_id,\n\tfirst_value(pref_emailable) over (partition by cid, brand_id order by pref_date desc, pref_source) as pref_emailable\nfrom\n(\t\n\t\tselect cid,\n\t\t\tbrand_id,\n\t\t\tpref_emailable, \t\t--Ticked/unticked a box on Gigya to confirm they want to/don't want to hear from the brand – i.e. done it themselves\n\t\t\tpref_date,\n\t\t\tcast(1 as int) as pref_source\n\t\tfrom ${Database}.temp.build_rollups_cid_brand_preference\n\t\twhere pref_mig = 0\t\t\t--don't consider preferences from before migration\n\t\tunion all\n\t\tselect cid,\n\t\t\tbrand_id,\n\t\t\t1 as pref_emailable,\t--any positive brand registration action in the last 5 years\n\t\t\tlast_date_brand as pref_date,\n\t\t\tcast(2 as int) as pref_source \n\t\tfrom ${Database}.temp.build_rollups_cid_brand_base\n)\n;\n  \n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_brand_pref_base',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_brand_pref_base;\n\n\ndrop table if exists ${Database}.live.cid_brand ;  \n\nCREATE OR REPLACE TABLE ${Database}.live.cid_brand\nas\nselect\n    to_char(xr.bbw_urn)||'-'||to_char(dp.brand_id) as cid_brand_urn,\n    ci.cid,\n    dp.business_unit_id,\n    dp.division_id,\n    dp.brand_id,\n   case\n        when dp.customer_retention_group_base = 1 then 'Safe'\n        when dp.customer_retention_group_base = 2 then 'Re-consent'\n        when dp.customer_retention_group_base = 3 then 'New'\n        when dp.customer_retention_group_base = 4 then 'At Risk'\n        when dp.customer_retention_group_base = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base = 6 then 'Gone this month'\n        when dp.customer_retention_group_base = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_brand,\n   case\n        when dp.customer_retention_group_base_ios15 = 1 then 'Safe'\n        when dp.customer_retention_group_base_ios15 = 2 then 'Re-consent'\n        when dp.customer_retention_group_base_ios15 = 3 then 'New'\n        when dp.customer_retention_group_base_ios15 = 4 then 'At Risk'\n        when dp.customer_retention_group_base_ios15 = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base_ios15 = 6 then 'Gone this month'\n        when dp.customer_retention_group_base_ios15 = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_brand_ios15,\n    dp.customer_retention_group_date as customer_retention_date_brand,\n    dp.customer_retention_group_date_ios15 as customer_retention_date_brand_ios15,\n    dp.customer_retention_group_expiry_date as customer_retention_expiry_date_brand,\n    dp.customer_retention_group_expiry_date_ios15 as customer_retention_expiry_date_brand_ios15,\n    dp.dp_last_date as last_subscription_date_brand,\n    em.event_date as last_email_open_date_brand,\n    case\n        when pgi.first_pref_date is null then cbb.first_date_brand\n        when cbb.first_date_brand is null then pgi.first_pref_date\n        else least(cbb.first_date_brand, pgi.first_pref_date)\n    end as first_date_brand, --least data date from existing pref_date or first_date_brand\n    cbb.last_date_brand,\n    cbb.first_channel_brand,\n    cbb.last_channel_brand,\n\tcase\n        when bpb.pref_emailable is not null then bpb.pref_emailable \n        else -1 end as brand_preference, \n    case\n        when dp.brand_id = (select brand_id from ${Database}.live.ref_brand where contains(lower(brand),'your purina')) then 0\n        when pro.brand_id is not null then 1 --Has had a product from the brand in the L5Y (sample, coupon, loyalty scheme, left an R&R of 3 and above)\n        when cbb.last_login_brand >= add_months(current_date, -60) then 1 --Has logged into their account on a brand website in last 5 years (Pets Welcome or Gigya)\n        when pref.brand_id is not null then 1 --Has answered a brand question (old golden questions) in the last 5 years\n        when em.brand_id is not null then 1 --Opened or clicked an email from the brand in the last 5 years\n        else 0\n    end as brand_engagement,\n\tcase\n        when bpb.pref_emailable is not null then bpb.pref_emailable \n        when dp.brand_id = (select brand_id from ${Database}.live.ref_brand where contains(lower(brand),'your purina')) then 0\n        when pro.brand_id is not null then 1 --Has had a product from the brand in the L5Y (sample, coupon, loyalty scheme, left an R&R of 3 and above)\n        when cbb.last_login_brand >= add_months(current_date, -60) then 1 --Has logged into their account on a brand website in last 5 years (Pets Welcome or Gigya)\n        when pref.brand_id is not null then 1 --Has answered a brand question (old golden questions) in the last 5 years\n        when em.brand_id is not null then 1 --Opened or clicked an email from the brand in the last 5 years\n        else 0\n    end as brand_campaignable,\n    case\n        when pgi.pref_emailable = 1 and pgi.pref_mig = 0 then 1\n        when pgi.pref_emailable = 1 and pgi.pref_mig = 1 then -1\n        else 0\n    end as preferred_brand_gigya,\n    case\n        when dp.emailable = 1 or dp.emailable_newsletter = 1 then ''\n        when customer_suppression_group_base = 1 then 'Deceased TM'\n        when customer_suppression_group_base = 2 then 'Deceased'\n        when customer_suppression_group_base = 3 then 'Manual TM'\n        when customer_suppression_group_base = 4 then 'Manual'\n        when customer_suppression_group_base = 5 then 'Bounce TM'\n        when customer_suppression_group_base = 6 then 'Bounce'\n        when customer_suppression_group_base = 7 then 'Unsub TM'\n        when customer_suppression_group_base = 8 then 'Unsub'\n        when customer_suppression_group_base = 9 then 'Opt-Out TM'\n        when customer_suppression_group_base = 10 then 'Opt-Out'\n        when customer_suppression_group_base = 11 then 'Engagement'\n        else 'Misc'\n    end as customer_suppression_group_brand,\n    --    contactable status\n    case when dp.mailable = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable,\n    case when dp.emailable = 1 then 1 else 0 end as emailable,\n    case when dp.emailable_newsletter = 1 then 1 else 0 end as emailable_newsletter,\n    case when dp.mailable_ignoring_dp = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable_ignoring_dp,\n    case when dp.emailable_ignoring_dp = 1 then 1 else 0 end as emailable_ignoring_dp,\n    cast(regexp_replace(coalesce(\n        case\n            when dp.emailable = 1\n            or dp.emailable_newsletter = 1 then collate(dp.email,'')\n            else ''\n        end, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100)) as email_brand\nfrom ${Database}.temp.build_rollups_cid_base                 ci\ninner join ${Database}.temp.names_supps_dp_brand             dp   on ci.cid = dp.cid\ninner join ${Database}.temp.xref_cid_email                   xr   on dp.cid = xr.cid\n                                                            and dp.email = xr.email\nleft join ${Database}.temp.build_rollups_cid_brand_base      cbb  on dp.cid = cbb.cid\n                                                            and dp.brand_id = cbb.brand_id\nleft join ${Database}.temp.build_rollups_cid_brand_preferred pref on dp.cid = pref.cid\n                                                            and dp.brand_id = pref.brand_id\nleft join ${Database}.temp.build_rollups_cid_brand_preference pgi on dp.cid = pgi.cid --gigya prefereces\n                                                            and dp.brand_id = pgi.brand_id\nleft join ${Database}.temp.build_rollups_cid_brand_emails    em   on dp.email = em.email\n                                                            and dp.brand_id = em.brand_id\nleft join ${Database}.temp.build_rollups_cid_brand_product   pro  on dp.cid = pro.cid\n                                                            and dp.brand_id = pro.brand_id\nleft join ${Database}.temp.build_rollups_cid_brand_pref_base bpb  on dp.cid = bpb.cid\n                                                            and dp.brand_id = bpb.brand_id;\n \n \ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid_brand',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_brand;   \n\n--drop table ${Database}.temp.build_rollups_cid_brand_preferred;\n--drop table ${Database}.temp.build_rollups_cid_brand_preference;\n--drop table ${Database}.temp.build_rollups_cid_brand_emails;\n--drop table ${Database}.temp.build_rollups_cid_brand_product;\n--drop table ${Database}.temp.build_rollups_cid_brand_pref_base; \n\n---------------------\n-- cid division\n\ndrop table if exists ${Database}.temp.names_supps_dp_division;\n\nCREATE OR REPLACE TABLE ${Database}.temp.names_supps_dp_division\nas\nselect distinct\n    cid,\n    business_unit_id,\n    division_id,\n    max(first_email) as email,\n    max(dp_last_date) as dp_last_date,\n    max(last_open_date) as last_open_date,\n    max(last_open_date_ios15) as last_open_date_ios15,\n    max(customer_retention_group_date) as customer_retention_group_date,\n    max(customer_retention_group_date_ios15) as customer_retention_group_date_ios15,\n    max(customer_retention_group_expiry_date) as customer_retention_group_expiry_date,\n    max(customer_retention_group_expiry_date_ios15) as customer_retention_group_expiry_date_ios15,\n    min(customer_retention_group_base) as customer_retention_group_base,\n    min(customer_retention_group_base_ios15) as customer_retention_group_base_ios15,\n    min(customer_suppression_group_base) as customer_suppression_group_base,\n    max(mailable) as mailable,\n    max(emailable) as emailable,\n    max(emailable_newsletter) as emailable_newsletter,\n    max(mailable_ignoring_dp) as mailable_ignoring_dp,\n    max(emailable_ignoring_dp) as emailable_ignoring_dp\nfrom \n\t(\n\tselect \n\t\t*\n\t\t,first_value(email) over (partition by cid, business_unit_id, division_id order by emailable desc nulls last, emailable_newsletter desc nulls last, dp_last_date desc nulls last,last_open_date desc nulls last,email asc nulls last) as first_email\n\tfrom ${Database}.temp.names_supps_dp_brand\n\t) t\ngroup by 1,2,3\n;\n\nalter warehouse set warehouse_size = 'Small';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.names_supps_dp_division',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.names_supps_dp_division;\n\ndrop table if exists ${Database}.temp.build_rollups_cid_division_base ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_division_base \nas\nselect \n    cbb.cid,\n    rb.division_id,\n    min(cbb.first_date_brand) as first_date_division,\n    max(cbb.last_date_brand) as last_date_division\nfrom ${Database}.temp.build_rollups_cid_brand_base cbb\ninner join ${Database}.live.ref_brand rb on cbb.brand_id = rb.brand_id\ngroup by \n    cbb.cid,\n    rb.division_id;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_division_base',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_division_base;    \n\ndrop table if exists ${Database}.temp.group_division_new_check;\n\n--If grouping New then check if other brands exist with New/At Risk as these will be classed as safe\nCREATE OR REPLACE TABLE ${Database}.temp.group_division_new_check\nas\nselect distinct \n    cbbo.cid,\n    cbbo.division_id\nfrom ${Database}.temp.names_supps_dp_brand cbbo\ninner join ${Database}.temp.names_supps_dp_brand cbbt on cbbo.cid = cbbt.cid\n                                                and cbbo.division_id = cbbt.division_id\nwhere cbbo.customer_retention_group_base = 3 --New\n    and cbbt.customer_retention_group_base in (4,5);  --At Risk/Data Orphan\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.group_division_new_check',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.group_division_new_check;    \n\n\ncreate or replace table ${Database}.temp.group_division_new_check_ios15\nas\nselect distinct\n    cbbo.cid,\n    cbbo.division_id\nfrom ${Database}.temp.names_supps_dp_brand cbbo\ninner join ${Database}.temp.names_supps_dp_brand cbbt on cbbo.cid = cbbt.cid\n                                                     and cbbo.division_id = cbbt.division_id\nwhere cbbo.customer_retention_group_base_ios15 = 3 --New\n    and cbbt.customer_retention_group_base_ios15 in (4,5); --At Risk/Data Orphan\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_rollups',\n    '${Database}.temp.group_division_new_check_ios15',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.group_division_new_check_ios15;\n\n\n--drop table ${Database}.temp.names_supps_dp_brand;\n--drop table ${Database}.temp.build_rollups_cid_brand_base;\n\ndrop table if exists ${Database}.live.cid_division ;  \n\nCREATE OR REPLACE TABLE ${Database}.live.cid_division \nas\nselect \n    to_char(xr.bbw_urn)||'-'||to_char(dp.division_id) as cid_division_urn,\n    ci.cid,\n    dp.business_unit_id,\n    dp.division_id,\n   case \n        when dp.customer_retention_group_base = 1 then 'Safe'\n        when dp.customer_retention_group_base = 2 then 'Re-consent'\n        when gnd.cid is not null then 'Safe'\n        when dp.customer_retention_group_base = 3 then 'New'\n        when dp.customer_retention_group_base = 4 then 'At Risk'\n        when dp.customer_retention_group_base = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base = 6 then 'Gone this month'\n        when dp.customer_retention_group_base = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_division,\n   case \n        when dp.customer_retention_group_base_ios15 = 1 then 'Safe'\n        when dp.customer_retention_group_base_ios15 = 2 then 'Re-consent'\n        when gnd15.cid is not null then 'Safe'\n        when dp.customer_retention_group_base_ios15 = 3 then 'New'\n        when dp.customer_retention_group_base_ios15 = 4 then 'At Risk'\n        when dp.customer_retention_group_base_ios15 = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base_ios15 = 6 then 'Gone this month'\n        when dp.customer_retention_group_base_ios15 = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_division_ios15,\n    dp.customer_retention_group_date as customer_retention_date_division,\n    dp.customer_retention_group_date_ios15 as customer_retention_date_division_ios15,\n    dp.customer_retention_group_expiry_date as customer_retention_expiry_date_division,\n    dp.customer_retention_group_expiry_date_ios15 as customer_retention_expiry_date_division_ios15,\n    dp.dp_last_date as last_subscription_date_division,\n    dp.last_open_date as last_email_open_date_division, \n    dp.last_open_date_ios15 as last_email_open_date_division_ios15, \n    cdb.first_date_division,\n    cdb.last_date_division,\n    case \n        when dp.emailable = 1 or dp.emailable_newsletter = 1 then ''\n        when customer_suppression_group_base = 1 then 'Deceased TM'\n        when customer_suppression_group_base = 2 then 'Deceased'\n        when customer_suppression_group_base = 3 then 'Manual TM'\n        when customer_suppression_group_base = 4 then 'Manual'\n        when customer_suppression_group_base = 5 then 'Bounce TM'\n        when customer_suppression_group_base = 6 then 'Bounce'\n        when customer_suppression_group_base = 7 then 'Unsub TM'\n        when customer_suppression_group_base = 8 then 'Unsub'\n        when customer_suppression_group_base = 9 then 'Opt-Out TM'\n        when customer_suppression_group_base = 10 then 'Opt-Out'\n        when customer_suppression_group_base = 11 then 'Engagement'\n        else 'Misc'\n    end as customer_suppression_group_division,    \n    --    contactable status \n    case when dp.mailable = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable,\n    case when dp.emailable = 1 then 1 else 0 end as emailable,\n    case when dp.emailable_newsletter = 1 then 1 else 0 end as emailable_newsletter,\n    case when dp.mailable_ignoring_dp = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable_ignoring_dp,\n    case when dp.emailable_ignoring_dp = 1 then 1 else 0 end as emailable_ignoring_dp,\n    cast(regexp_replace(coalesce(\n        case \n            when dp.emailable = 1 or dp.emailable_newsletter = 1 then collate(dp.email,'')\n            else '' \n        end, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100)) as email_division\nfrom ${Database}.temp.build_rollups_cid_base ci\ninner join ${Database}.temp.names_supps_dp_division dp on ci.cid = dp.cid\ninner join ${Database}.temp.xref_cid_email                   xr   on dp.cid = xr.cid\n                                                            and dp.email = xr.email\nleft join ${Database}.temp.build_rollups_cid_division_base cdb on dp.cid = cdb.cid \n                                                         and dp.division_id = cdb.division_id\nleft join ${Database}.temp.group_division_new_check gnd on dp.cid = gnd.cid\n                                                  and dp.division_id = gnd.division_id\nleft join ${Database}.temp.group_division_new_check_ios15 gnd15 on dp.cid = gnd15.cid\n                                                             and dp.division_id = gnd15.division_id;\n    \ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid_division',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_division;   \n\n--drop table ${Database}.temp.build_rollups_cid_division_base;\n-----------------\n-- cid business unit \n\ndrop table if exists ${Database}.temp.names_supps_dp_business_unit;\n\nCREATE OR REPLACE TABLE ${Database}.temp.names_supps_dp_business_unit\nas\nselect distinct\n    cid,\n    business_unit_id,\n    max(first_email) as email,\n    max(dp_last_date) as dp_last_date,\n    max(last_open_date) as last_open_date,\n    max(last_open_date_ios15) as last_open_date_ios15,\n    max(customer_retention_group_date) as customer_retention_group_date,\n    max(customer_retention_group_date_ios15) as customer_retention_group_date_ios15,\n    max(customer_retention_group_expiry_date) as customer_retention_group_expiry_date,\n    max(customer_retention_group_expiry_date_ios15) as customer_retention_group_expiry_date_ios15,\n    max(customer_retention_group_expiry_date) as dp_processing_expiry_date,\n    max(customer_retention_group_expiry_date_ios15) as dp_processing_expiry_date_ios15,\n    min(customer_retention_group_base) as customer_retention_group_base,\n    min(customer_retention_group_base_ios15) as customer_retention_group_base_ios15,\n    min(customer_suppression_group_base) as customer_suppression_group_base,\n    max(mailable) as mailable,\n    max(emailable) as emailable,\n    max(emailable_newsletter) as emailable_newsletter,\n    max(mailable_ignoring_dp) as mailable_ignoring_dp,\n    max(emailable_ignoring_dp) as emailable_ignoring_dp\nfrom \n\t(\n\tselect\n\t\t*\n\t\t,first_value(email) over (partition by cid, business_unit_id, division_id order by emailable desc nulls last, emailable_newsletter desc nulls last, dp_last_date desc nulls last,last_open_date desc nulls last,email asc nulls last) as first_email\n\tfrom ${Database}.temp.names_supps_dp_division\n\t) t\ngroup by 1,2\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'db_names_suppressions',\n    '${Database}.temp.names_supps_dp_business_unit',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.names_supps_dp_business_unit;\n\ndrop table if exists ${Database}.temp.group_business_new_check;\n\n--If grouping New then check if other divisions exist with New/At Risk as these will be classed as safe - also check if check was needed before\nCREATE OR REPLACE TABLE ${Database}.temp.group_business_new_check\nas\nselect distinct \n    cbbo.cid,\n    cbbo.business_unit_id\nfrom ${Database}.temp.names_supps_dp_division cbbo\nleft join ${Database}.temp.names_supps_dp_division cbbt on cbbo.cid = cbbt.cid\n                                                  and cbbo.business_unit_id = cbbt.business_unit_id\n                                                  and cbbt.customer_retention_group_base in (4,5)  --At Risk/Data Orphan\nleft join ${Database}.temp.group_division_new_check gdc on cbbo.cid = gdc.cid\n                                                  and cbbo.division_id = gdc.division_id\nwhere cbbo.customer_retention_group_base = 3 --New\n    and (gdc.cid is not null or cbbt.cid is not null); --Either already Safe due to previous checking or new grouping filter needed\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.group_business_new_check',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.group_business_new_check;    \n\n\nCREATE OR REPLACE TABLE ${Database}.temp.group_business_new_check_ios15\nas\nselect distinct\n    cbbo.cid,\n    cbbo.business_unit_id\nfrom ${Database}.temp.names_supps_dp_division cbbo\nleft join ${Database}.temp.names_supps_dp_division cbbt on cbbo.cid = cbbt.cid\n                                                  and cbbo.business_unit_id = cbbt.business_unit_id\n                                                  and cbbt.customer_retention_group_base_ios15 in (4,5)  --At Risk/Data Orphan\nleft join ${Database}.temp.group_division_new_check_ios15 gdc on cbbo.cid = gdc.cid\n                                                             and cbbo.division_id = gdc.division_id\nwhere cbbo.customer_retention_group_base_ios15 = 3 --New\n    and (gdc.cid is not null or cbbt.cid is not null); --Either already Safe due to previous checking or new grouping filter needed\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_rollups',\n    '${Database}.temp.group_business_new_check_ios15',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.group_business_new_check_ios15;\n\n--drop table ${Database}.temp.group_division_new_check;\n--drop table ${Database}.temp.group_division_new_check_ios15;\n--drop table ${Database}.temp.names_supps_dp_division;\n\n\nalter warehouse set warehouse_size = 'Medium';\n\n--acquisition types\nCREATE OR REPLACE TABLE ${Database}.temp.npp_acquisition_type_base\nas\nselect distinct\n    acq.cid,\n    acq.acquisition_name_urn,\n    trim(acq.acquisition_source) as acquisition_source,\n    acq.acquisition_source_brand_id,\n    acq.acquisition_source_file,\n    first_value(trim(na.registration_campaign)) over\n        (\n            partition by cid \n            order by \n                na.data_date nulls last,\n                na.source_date nulls last\n        ) as acquisition_registration_campaign\nfrom (\n         select distinct\n             xr.cid,\n             first_value(n.name_urn) over\n                 (\n                     partition by xr.cid\n                     order by\n                         n.data_date nulls last,\n                         n.reg_date nulls last,\n                         n.source_date nulls last\n                 ) as acquisition_name_urn,\n             first_value(n.source) over\n                 (\n                     partition by xr.cid\n                     order by\n                         n.data_date nulls last,\n                         n.reg_date nulls last,\n                         n.source_date nulls last\n                 ) as acquisition_source,\n             first_value(n.source_brand_id) over\n                 (\n                     partition by xr.cid\n                     order by\n                         n.data_date nulls last,\n                         n.reg_date nulls last,\n                         n.source_date nulls last\n                 ) as acquisition_source_brand_id,\n             first_value(n.source_file) over\n                 (\n                     partition by xr.cid\n                     order by\n                         n.data_date nulls last,\n                         n.reg_date nulls last,\n                         n.source_date nulls last\n                 ) as acquisition_source_file\n         from ${Database}.db.names n\n         left join ${Database}.live.xref_name_urn xr on xr.name_urn = n.name_urn\n         where source_data_controller_id = (select data_controller_id from ${Database}.live.ref_data_controller where data_controller like 'Nestl_ Purina Petcare (UK) Ltd')\n\t\t and n.source <> 'RESP_ADE_RMI'\n) acq\nleft join ${Database}.db.names_attributes na on na.name_urn = acq.acquisition_name_urn \n                                       and (source <> 'REG_GIG' or (na.source = 'REG_GIG' and na.registration_campaign not in  (\n\n                                                                                                                                'GBCERELACWEB_MIG',\n                                                                                                                                'UKAEROCHOCOLATEWEB',\n                                                                                                                                'UKBUXTONWATERWEB',\n                                                                                                                                'UKCARNATIONWEB',\n                                                                                                                                'UKCERELACWEB',\n                                                                                                                                'UKCERELACWEB_MIG',\n                                                                                                                                'UKKITKATWEB',\n                                                                                                                                'UKMAGGIWEB',\n                                                                                                                                'UKMERITENEWEB',\n                                                                                                                                'UKMERITENEWEB_MIG',\n                                                                                                                                'UKMILKYBARWEB',\n                                                                                                                                'UKNESCAFEWEB',\n                                                                                                                                'UKROWNTREESWEB',\n                                                                                                                                'UKYESSNACKSWEB',\n                                                                                                                                'UKNESTLEPURELIFEWEB'))); --CIAM name_urns can join to ${Database} reg_campaigns from names_attibutes\n\nalter warehouse set warehouse_size = 'Small';\n\ninsert into ${Database}.db.build_log \nselect \n    '${Database}_rollups',\n    '${Database}.temp.npp_acquisition_type_base',\n    'total records',\n    cast(count(*) as varchar),\n    current_timestamp \nfrom ${Database}.temp.npp_acquisition_type_base;\n\n--cid level table with acquisition types attributed\ndrop table if exists ${Database}.temp.ref_acquisition_type_joined;\n\nCREATE OR REPLACE TABLE ${Database}.temp.ref_acquisition_type_joined\nas\n--new source - has populated registration_campaign and brand_id\n--join on source, reg_campaign and brand\nselect     distinct \n    b.cid,\n    b.acquisition_source,\n    '' as acquisition_source_file,\n    b.acquisition_source_brand_id,\n    b.acquisition_registration_campaign,\n    case when b.acquisition_source = 'REG_GIG' then 'Website Registrations' else tc.acquisition_type end as acquisition_type, --Issue with reg_campaign when joining CIAM records to names_attributes, but they're all website reg\n    tc.acquisition_channel,\n    '1 - source, reg_campaign and brand' as join_type\nfrom ${Database}.temp.npp_acquisition_type_base b\nleft join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                           and b.acquisition_registration_campaign = tc.registration_campaign\n                                           and b.acquisition_source_brand_id = tc.acquisition_source_brand_id\nwhere (b.acquisition_registration_campaign > '')\n    and b.acquisition_source_brand_id is not null\n    and contains(lower(tc.source_old_new),'new')\nunion all\n--new source - has null or blank registration_campaign and populated brand_id\n--join on source and brand_id\nselect     distinct\n    b.cid,\n    b.acquisition_source,\n    '' as acquisition_source_file,\n    b.acquisition_source_brand_id,\n    b.acquisition_registration_campaign,\n    case when b.acquisition_source = 'REG_GIG' then 'Website Registrations' else tc.acquisition_type end as acquisition_type, --Issue with reg_campaign when joining CIAM records to names_attributes, but they're all website reg\n    tc.acquisition_channel,\n    '2 - source and brand' as join_type\nfrom ${Database}.temp.npp_acquisition_type_base b\nleft join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                           and b.acquisition_source_brand_id = tc.acquisition_source_brand_id\nwhere (b.acquisition_registration_campaign is null or b.acquisition_registration_campaign = '')\n    and tc.registration_campaign is null\n    and b.acquisition_source_brand_id is not null\n    and contains(lower(tc.source_old_new),'new')\nunion all\n--new source - has populated registration_campaign and null brand_id\n--join on source and reg_campaign\nselect     distinct\n    b.cid,\n    b.acquisition_source,\n    '' as acquisition_source_file,\n    b.acquisition_source_brand_id,\n    b.acquisition_registration_campaign,\n    case when b.acquisition_source = 'REG_GIG' then 'Website Registrations' else tc.acquisition_type end as acquisition_type, --Issue with reg_campaign when joining CIAM records to names_attributes, but they're all website reg\n    tc.acquisition_channel,\n    '3 - source and reg_campaign' as join_type\nfrom ${Database}.temp.npp_acquisition_type_base b\nleft join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                           and b.acquisition_registration_campaign = tc.registration_campaign\nwhere (b.acquisition_registration_campaign > '')\n    and b.acquisition_source_brand_id is null\n    and tc.acquisition_source_brand_id is null\n    and contains(lower(tc.source_old_new),'new')\nunion all\n--new source - has null registration_campaign and null brand_id\n--hard coding as Website Registrations\nselect     distinct\n    b.cid,\n    b.acquisition_source,\n    '' as acquisition_source_file,\n    b.acquisition_source_brand_id,\n    b.acquisition_registration_campaign,\n    'Website Registrations' as acquisition_type,\n    tc.acquisition_channel,\n    '4 - all null' as join_type\nfrom ${Database}.temp.npp_acquisition_type_base b\ninner join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                            and tc.acquisition_source_brand_id is null\n                                            and (tc.registration_campaign = '' or tc.registration_campaign is null)\nwhere (b.acquisition_registration_campaign is null or b.acquisition_registration_campaign = '')\n    and b.acquisition_source_brand_id is null\n    and not contains(upper(b.acquisition_source),'NPP')\nunion all\n--old source - non-null acquisition_source_brand_id\nselect     distinct \n    b.cid,\n    b.acquisition_source,\n    b.acquisition_source_file,\n    b.acquisition_source_brand_id,\n    '' as acquisition_registration_campaign,\n    tc.acquisition_type,\n    tc.acquisition_channel,\n    '5 - populated acquisition_source_brand_id ' as join_type\nfrom ${Database}.temp.npp_acquisition_type_base b\nleft join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                           and b.acquisition_source_file = tc.acquisition_source_file\n                                           and b.acquisition_source_brand_id = tc.acquisition_source_brand_id\nwhere contains(lower(tc.source_old_new),'old')\n    and b.acquisition_source_brand_id is not null\nunion all\n--old source - has null acquisition_source_brand_id\nselect     distinct \n    b.cid,\n    b.acquisition_source,\n    b.acquisition_source_file,\n    b.acquisition_source_brand_id,\n    '' as acquisition_registration_campaign,\n    tc.acquisition_type,\n    tc.acquisition_channel,\n    '6 - null acquisition_source_brand_id ' as join_type\nfrom ${Database}.temp.npp_acquisition_type_base b\nleft join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                           and b.acquisition_source_file = tc.acquisition_source_file\nwhere contains(lower(tc.source_old_new),'old')\n    and b.acquisition_source_brand_id is null;\n\ninsert into ${Database}.db.build_log \nselect \n    '${Database}_rollups',\n    '${Database}.temp.ref_acquisition_type_joined',\n    'total records',\n    cast(count(*) as varchar),\n    current_timestamp \nfrom ${Database}.temp.ref_acquisition_type_joined;\n\n--to output email with any missing ones that need actioning\ndrop table if exists ${Database}.jobs.npp_acquisition_types_missing;\ncreate table ${Database}.jobs.npp_acquisition_types_missing\nas\nselect\n    b.acquisition_source, \n    rb.brand,\n    b.acquisition_registration_campaign,\n    count(b.cid) as volume\nfrom ${Database}.temp.npp_acquisition_type_base b\nleft join ${Database}.live.ref_brand rb on b.acquisition_source_brand_id = rb.brand_id\nwhere cid not in (select cid from ${Database}.temp.ref_acquisition_type_joined)\ngroup by 1,2,3\n;\n\ndrop table if exists ${Database}.live.cid_business_unit ;  \n\nCREATE OR REPLACE TABLE ${Database}.live.cid_business_unit \nas\nselect \n    to_char(xr.bbw_urn)||'-'||to_char(dp.business_unit_id) as cid_business_unit_urn,\n    ci.cid,\n    dp.business_unit_id,\n   case \n        when dp.customer_retention_group_base = 1 then 'Safe'\n        when dp.customer_retention_group_base = 2 then 'Re-consent'\n        when gnc.cid is not null then 'Safe'\n        when dp.customer_retention_group_base = 3 then 'New'\n        when dp.customer_retention_group_base = 4 then 'At Risk'\n        when dp.customer_retention_group_base = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base = 6 then 'Gone this month'\n        when dp.customer_retention_group_base = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_business_unit,\n   case \n        when dp.customer_retention_group_base_ios15 = 1 then 'Safe'\n        when dp.customer_retention_group_base_ios15 = 2 then 'Re-consent'\n        when gnc15.cid is not null then 'Safe'\n        when dp.customer_retention_group_base_ios15 = 3 then 'New'\n        when dp.customer_retention_group_base_ios15 = 4 then 'At Risk'\n        when dp.customer_retention_group_base_ios15 = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base_ios15 = 6 then 'Gone this month'\n        when dp.customer_retention_group_base_ios15 = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_business_unit_ios15,\n    dp.customer_retention_group_date as customer_retention_date_business_unit,\n    dp.customer_retention_group_date_ios15 as customer_retention_date_business_unit_ios15,\n    dp.customer_retention_group_expiry_date as customer_retention_expiry_date_business_unit,\n    dp.customer_retention_group_expiry_date_ios15 as customer_retention_expiry_date_business_unit_ios15,\n    dp.dp_processing_expiry_date,\n    dp.dp_processing_expiry_date_ios15,\n    dp.dp_last_date as last_subscription_date_business_unit,\n    dp.last_open_date as last_email_open_date_business_unit,\n    dp.last_open_date_ios15 as last_email_open_date_business_unit_ios15,\n    cdb.first_date_business_unit,\n    cdb.last_date_business_unit,  \n    case \n        when dp.emailable = 1 or dp.emailable_newsletter = 1 then ''\n        when customer_suppression_group_base = 1 then 'Deceased TM'\n        when customer_suppression_group_base = 2 then 'Deceased'\n        when customer_suppression_group_base = 3 then 'Manual TM'\n        when customer_suppression_group_base = 4 then 'Manual'\n        when customer_suppression_group_base = 5 then 'Bounce TM'\n        when customer_suppression_group_base = 6 then 'Bounce'\n        when customer_suppression_group_base = 7 then 'Unsub TM'\n        when customer_suppression_group_base = 8 then 'Unsub'\n        when customer_suppression_group_base = 9 then 'Opt-Out TM'\n        when customer_suppression_group_base = 10 then 'Opt-Out'\n        when customer_suppression_group_base = 11 then 'Engagement'\n        else 'Misc'\n    end as customer_suppression_group_business_unit,     \n    --    contactable status  \n    case when dp.mailable = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable,\n    case when dp.emailable = 1 then 1 else 0 end as emailable,\n    case when dp.emailable_newsletter = 1 then 1 else 0 end as emailable_newsletter,\n    case when dp.mailable_ignoring_dp = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable_ignoring_dp,\n    case when dp.emailable_ignoring_dp = 1 then 1 else 0 end as emailable_ignoring_dp,\n    cast(regexp_replace(coalesce(\n        case \n            when dp.emailable = 1 or dp.emailable_newsletter = 1 then collate(dp.email,'')\n            else '' \n        end, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100)) as email_business_unit,\n        coalesce(acq.acquisition_type, '') as acquisition_type,\n    coalesce(acq.acquisition_channel,'') as acquisition_channel\nfrom ${Database}.temp.build_rollups_cid_base ci\ninner join ${Database}.temp.names_supps_dp_business_unit dp on ci.cid = dp.cid\ninner join ${Database}.temp.xref_cid_email                   xr   on dp.cid = xr.cid\n                                                            and dp.email = xr.email\nleft join ${Database}.temp.build_rollups_cid_bu_base cdb on dp.cid = cdb.cid \n                                                   and dp.business_unit_id = cdb.business_unit_id\nleft join ${Database}.temp.group_business_new_check gnc on dp.cid = gnc.cid\n                                                  and dp.business_unit_id = gnc.business_unit_id\nleft join ${Database}.temp.group_business_new_check_ios15 gnc15 on dp.cid = gnc15.cid\n                                                  and dp.business_unit_id = gnc15.business_unit_id\nleft join ${Database}.temp.ref_acquisition_type_joined acq on acq.cid = ci.cid\n                                                     and dp.business_unit_id = 5\n                                                     and cdb.first_date_business_unit is not null;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid_business_unit',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_business_unit;   \n\n--drop table ${Database}.temp.names_supps_dp_business_unit;\n--drop table ${Database}.temp.build_rollups_cid_bu_base;\n--drop table ${Database}.temp.group_business_new_check;\n--drop table ${Database}.temp.xref_cid_email;\n\n\n--update risk segment of non-anonymised lapsed customer when customer_retention_group_business_unit='new'\nmerge into ${Database}.live.cid c\nusing (\n          select distinct\n              cid\n          from ${Database}.live.cid_business_unit\n          where business_unit_id = 5\n              and customer_retention_group_business_unit='New'\n      ) cbu on c.cid = cbu.cid\nwhen matched and c.purina_lapse_risk_segment in ('Very High Risk','High Risk') then update\nset c.purina_lapse_risk_segment = 'Medium Risk';\n\n\n---------------------  \n---------------------\n-- hid\n\ndrop table if exists ${Database}.live.hid ;  \n\nCREATE OR REPLACE TABLE ${Database}.live.hid \nas \nselect \n    hid\nfrom ${Database}.temp.build_rollups_cid_base\ngroup by hid;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.hid',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.hid;   \n  \n--drop table ${Database}.temp.build_rollups_cid_base;\n\n--Create ${Database}.live.npp_thg_trans table\n\n\ndrop table if exists ${Database}.live.npp_thg_trans;\n\ncreate table ${Database}.live.npp_thg_trans \nas\nselect nt.*\nfrom ${Database}.db.npp_thg_trans nt\ninner join  --this will give me the set of order detail lines for just the latest dated file for the order\n    (\n        select distinct\n            trim(order_number) as order_number,\n            --just incase 2 files are loaded in the same day and so have the same source date (tried to use datadate but it's a time stamp so different for each detail line...)\n            first_value(trim(source_file)) \n            over\n            (\n                partition by trim(order_number)\n                order by \n                    source_date desc nulls last,  \n                    trim(source_file) desc\n            ) as source_file \n        from ${Database}.db.npp_thg_trans\n    ) sq on trim(nt.order_number) = sq.order_number\n        and trim(nt.source_file) = sq.source_file; --this will give me the 1 latest dated file for the order\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.npp_thg_trans',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.npp_thg_trans;  \n\n---------------------\n--coid - not required\n\n---------------------\n--insert seeds for faststats\n\n---------------------\n--fs views\n\n\n---------------------\n--sars views\n\n--collect recent new SARs\ncreate or replace table ${Database}.temp.build_todays_sars\nas\nselect distinct\n    nm.cid,\n    first_value(nm.name_urn) over(partition by nm.cid, s.email order by nm.data_date nulls last) as urn,\n    s.supp_urn,\n    s.email,\n    s.sar_source_date\nfrom (\n         select\n             supp_urn,\n             email1 as email,\n             source_date as sar_source_date\n         from ${Database}.db.supps_sar\n         where supp_urn not in (select supp_urn from ${Database}.db.sar_hist_contact)\n             and source_date >= current_date-3 --it's a rolling record of current SARs\n             and trim(email1) > ''\n         union all\n         select\n             supp_urn,\n             email2 as email,\n             source_date as SAR_source_date\n         from ${Database}.db.supps_sar\n         where supp_urn not in (select supp_urn from ${Database}.db.sar_hist_contact)\n             and source_date >= current_date-3 --it's a rolling record of current SARs\n             and trim(email2) > ''\n     ) s\nleft join ${Database}.live.names nm on lower(trim(s.email)) = lower(trim(nm.email));\n\n\ndelete\nfrom ${Database}.db.sar_hist_contact\nwhere sar_source_date < current_date - 7;\n\n\ninsert into ${Database}.db.sar_hist_contact\n(\n    supp_urn,\n    urn,\n    name_urn,\n    date_of_receipt,\n    title,\n    firstname,\n    lastname,\n    job_title,\n    company,\n    address_line_1,\n    address_line_2,\n    address_line_3,\n    address_line_4,\n    city,\n    county,\n    post_code,\n    country,\n    date_of_birth,\n    gender,\n    work_phone,\n    home_phone,\n    mobile_phone,\n    email,\n    source,\n    data_controller,\n    source_brand,\n    sar_source_date\n)\nselect distinct\n    s.supp_urn,\n    s.urn,\n    nm.name_urn,\n    nm.data_date,\n    nm.title,\n    nm.firstname,\n    nm.lastname,\n    nm.job_title,\n    nm.company,\n    nm.add1,\n    nm.add2,\n    nm.add3,\n    nm.add4,\n    nm.city,\n    nm.state,\n    nm.postcode,\n    nm.country,\n    nm.dob,\n    nm.gender,\n    nm.phone_work,\n    nm.phone_home,\n    nm.phone_mobile,\n    nm.email,\n    nm.source,\n    dc.data_controller,\n    br.brand,\n    s.sar_source_date\nfrom ${Database}.temp.build_todays_sars s\ninner join ${Database}.live.xref_name_urn xref on s.cid = xref.cid\ninner join ${Database}.live.names nm on trim(xref.name_urn) = trim(nm.name_urn)\ninner join ${Database}.live.ref_data_controller dc on nm.source_data_controller_id = dc.data_controller_id\nleft join ${Database}.live.ref_brand br on nm.source_brand_id = br.brand_id;\n\n\ndelete\nfrom ${Database}.db.sar_hist_dp\nwhere sar_source_date < current_date - 7;\n\n\ninsert into ${Database}.db.sar_hist_dp\n(\n    supp_urn,\n    urn,\n    name_urn,\n    opt_in_mail_comms,\n    opt_in_email_comms,\n    opt_in_newsletter,\n    opt_in_date,\n    opt_in_business_unit,\n    opt_in_brand,\n    source,\n    opt_in_statement,\n    sar_source_date\n)\nselect\n    s.supp_urn,\n    s.urn,\n    dp.name_urn,\n    case when dp.dp_mailable = 1 then 'Yes' when dp.dp_mailable = 0 then 'No' else '' end,\n    case when dp.dp_emailable = 1 then 'Yes' when dp.dp_emailable = 0 then 'No' else '' end,\n    case when dp.dp_newsletter = 1 then 'Yes' when dp.dp_newsletter = 0 then 'No' else '' end,\n    dp.dp_date,\n    dc.data_controller,\n    br.brand,\n    dp.source,\n    rdp.dp_statement,\n    s.sar_source_date\nfrom ${Database}.temp.build_todays_sars s\ninner join ${Database}.live.xref_name_urn xref on s.cid = xref.cid\ninner join ${Database}.db.names_dp dp on trim(xref.name_urn) = trim(dp.name_urn)\ninner join ${Database}.live.ref_data_controller dc on dp.data_controller_id = dc.data_controller_id\nleft join ${Database}.live.ref_brand br on dp.brand_id = br.brand_id\nleft join ${Database}.db.ref_dp rdp on trim(dp.source) = trim(rdp.source)\n                              and dp.data_controller_id = rdp.data_controller_id\n                              and coalesce(dp.brand_id,0) = coalesce(rdp.brand_id,0)\n                              and (dp.data_date >= rdp.start_date or rdp.start_date is null)\n                              and (dp.data_date <= rdp.end_date or rdp.end_date is null);\n\n\ndelete\nfrom ${Database}.db.sar_hist_comms\nwhere sar_source_date < current_date - 7;\n\n\ninsert into ${Database}.db.sar_hist_comms\n(\n    supp_urn,\n    urn,\n    name_urn,\n    email,\n    send_date,\n    brand_opted_in_to,\n    campaign_business_unit,\n    campaign_brand,\n    programme_description,\n    campaign_description,\n    promotion_description,\n    cell_description,\n    pack_description,\n    destination,\n    sar_source_date\n)\nselect\n    s.supp_urn,\n    s.urn,\n    ch.name_urn,\n    ch.email,\n    ch.drop_date,\n    br.brand,\n    dc.data_controller,\n    br1.brand,\n    chl.programme_description,\n    chl.campaign_id||' '||chl.campaign_description,\n    chl.promotion_id||' '||chl.promotion_description,\n    chl.cell_id||' '||chl.cell_description,\n    chl.pack_id||' '||chl.pack_description,\n    chl.final_destination,\n    s.sar_source_date\nfrom ${Database}.temp.build_todays_sars s\ninner join ${Database}.live.xref_name_urn xref on s.cid = xref.cid\ninner join ${Database}.db.comms_hist ch on trim(xref.name_urn) = trim(ch.name_urn)\ninner join ${Database}.db.comms_hist_lookup chl on trim(ch.programme_id) = trim(chl.programme_id)\n                                          and trim(ch.campaign_id) = trim(chl.campaign_id)\n                                          and trim(ch.promotion_id) = trim(chl.promotion_id)\n                                          and trim(ch.cell_id) = trim(chl.cell_id)\n                                          and trim(ch.pack_id) = trim(chl.pack_id)\nleft join ${Database}.live.ref_brand br on ch.data_brand_id = br.brand_id\nleft join ${Database}.live.ref_data_controller dc on chl.data_controller_id = dc.data_controller_id\nleft join ${Database}.live.ref_brand br1 on chl.brand_id = br1.brand_id;\n\n\ninsert into ${Database}.db.sar_hist_comms --sma and nestle comms all go into the same tab in the report\n(\n    supp_urn,\n    urn,\n    name_urn,\n    email,\n    send_date,\n    brand_opted_in_to,\n    campaign_business_unit,\n    campaign_brand,\n    programme_description,\n    campaign_description,\n    promotion_description,\n    cell_description,\n    pack_description,\n    destination,\n    sar_source_date\n)\nselect\n    s.supp_urn,\n    s.urn,\n    s.urn,\n    s.email,\n    ch.communication_date,\n    'SMA',\n    'Nestlé UK Ltd',\n    'SMA',\n    chl.programme_name,\n    cast(chl.campaign_id as varchar)||' '||chl.campaign_name,\n    cast(chl.promotion_id as varchar)||' '||chl.promotion_name,\n    cast(chl.cell_id as varchar)||' '||chl.cell_name,\n    cast(chl.pack_id as varchar)||' '||chl.pack_name,\n    'Adestra/Pragmatica',\n    s.sar_source_date\nfrom ${Database}.temp.build_todays_sars s\ninner join ${Database}.live.sma_comms_hist ch on s.cid = ch.cid\nleft join ${Database}.live.sma_comms_hist_lookup chl on trim(ch.pack_id) = trim(chl.pack_id);\n\n\ndelete\nfrom ${Database}.db.sar_hist_pets\nwhere sar_source_date < current_date - 7;\n\n\ninsert into ${Database}.db.sar_hist_pets\n(\n    supp_urn,\n    name_urn,\n    pet_name,\n    pet_type,\n    pet_age_years,\n    pet_age_months,\n    pet_dob,\n    pet_birth_month,\n    pet_birth_year,\n    pet_age_weeks,\n    pet_indoor_outdoor,\n    pet_size,\n    pet_breed,\n    pet_colour,\n    pet_weight,\n    pet_gender,\n    pet_life_stage,\n    pet_bodyshape,\n    pet_lifestyle,\n    pet_deceased,\n    pet_kennel,\n    source,\n    source_date,\n    sar_source_date\n)\nselect\n    s.supp_urn,\n    p.name_urn,\n    p.pet_name,\n    p.pet_type,\n    p.pet_age_years,\n    p.pet_age_months,\n    p.pet_dob,\n    p.pet_birth_month,\n    p.pet_birth_year,\n    p.pet_age_weeks,\n    p.pet_indoor_outdoor,\n    p.pet_size,\n    p.pet_breed,\n    p.pet_colour,\n    p.pet_weight,\n    p.pet_gender,\n    p.pet_life_stage,\n    p.pet_bodyshape,\n    p.pet_lifestyle,\n    p.pet_deceased,\n    p.pet_kennel,\n    p.source,\n    p.source_date,\n    s.sar_source_date\nfrom ${Database}.temp.build_todays_sars s\ninner join ${Database}.live.xref_name_urn xr on s.cid = xr.cid\ninner join ${Database}.db.pet p on trim(xr.name_urn) = trim(p.name_urn);\n\n\ndelete\nfrom ${Database}.db.sar_hist_children\nwhere sar_source_date < current_date - 7;\n\n\ninsert into ${Database}.db.sar_hist_children\n(\n    supp_urn,\n    urn,\n    name_urn,\n    firstname,\n    lastname,\n    gender,\n    yearofbirth,\n    dateofbirth,\n    create_date,\n    source,\n    source_date,\n    sar_source_date\n)\nselect\n    s.supp_urn,\n    s.urn,\n    name_urn,\n    case when firstname = 'Baby' then '' else firstname end,\n    lastname,\n    gender,\n    left(cast(dob as varchar),4),\n    dob,\n    cast(created_date as date),\n    source,\n    cast(created_date as date),\n    s.sar_source_date\nfrom ${Database}.temp.build_todays_sars s\ninner join ${Database}.live.dependant ch on s.cid = ch.cid;\n\n\n--lookup for SARs to output today\ncreate or replace table ${Database}.jobs.build_sars_lookup\nas\nselect distinct\n    first_value(supp_urn) over(order by sar_source_date) as supp_urn,\n    row_number() over(partition by supp_urn order by 1) as rn --order doesn't matter\nfrom (\n         select distinct\n             supp_urn,\n             sar_source_date\n         from ${Database}.db.sar_hist_contact\n         where processed_date is null\n     ) a;\n\n\n/******************************************************************************************\n                                       FINISH PROC\n******************************************************************************************/\n\nupdate ${Database}.db.build_dates\nset nestle_rollups = CURRENT_TIMESTAMP::timestamp_ntz\nwhere build_flag    = 'C';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '*************************',\n    '*************************',\n    'end of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;  \n  \n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 12 Rollups'\n, \t\t'SCRIPT'\n, \t\t'FINISHED'\n;\n\nalter warehouse set warehouse_size = 'Xsmall';"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196039":{"id":196039,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-48,"y":-16,"width":32,"height":32,"inputConnectorIDs":[196056],"outputSuccessConnectorIDs":[196064],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc 13 SMA Rollups"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nProgram           : Nestle SMA Rollup\nAuthor            : John Moreland\nClient Name       : Nestle\nJob Number        :\nStandard Machine  : Kognitio\nAmendment History : v01 - JM 20180919 - Created\n\n******************************************************************************************/\n\n\n/******************************************************************************************\n                                         ROLLUP\n******************************************************************************************/\n\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 13 SMA Rollups'\n, \t\t'SCRIPT'\n, \t\t'STARTED'\n;\n\n\ninsert into ${Database}.db.build_log \nselect \n    'sma_rollups',\n    '*************************',\n    '*************************',\n    'start of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;  \n\n\n/**************************************************************************\nSMA VERSIONS OF NAMES/NAMES ATTRIBUTES\n**************************************************************************/\n\n\nalter warehouse set warehouse_size = 'Large';\n\ndrop table if exists ${Database}.temp.names_sma;\nCREATE OR REPLACE TABLE ${Database}.temp.names_sma\nas\nselect     nm.*\nfrom     ${Database}.live.names nm\ninner join (\n               select distinct\n                   name_urn\n               from ${Database}.db.names\n               where source_brand_id in (select brand_id from ${Database}.db.ref_brand where trim(brand) = 'SMA')\n           ) dbnm on dbnm.name_urn = nm.name_urn;\n\n\ndrop table if exists ${Database}.temp.build_names_attributes;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_names_attributes\nas\nselect distinct\n    n.cid,\n    n.hid,\n    n.reg_date,\n    n.name_urn,\n    first_value(na.data_date)                 over(partition by na.name_urn order by na.source_date desc, na.source_urn desc, na.data_date desc) as data_date,\n    first_value(na.first_time_mum)            over(partition by na.name_urn order by na.source_date desc, na.source_urn desc, na.data_date desc) as first_time_mum,\n    first_value(na.domain_country)            over(partition by na.name_urn order by na.source_date desc, na.source_urn desc, na.data_date desc) as domain_country,\n    first_value(na.welcome_pack_sent)         over(partition by na.name_urn order by na.source_date desc, na.source_urn desc, na.data_date desc) as welcome_pack_sent,\n    first_value(na.userid)                    over(partition by na.name_urn order by na.source_date desc, na.source_urn desc, na.data_date desc) as userid,\n    first_value(na.user_name)                 over(partition by na.name_urn order by na.source_date desc, na.source_urn desc, na.data_date desc) as user_name,\n    first_value(na.umbraco_userno)            over(partition by na.name_urn order by na.source_date desc, na.source_urn desc, na.data_date desc) as umbraco_userno,\n    first_value(na.is_account_verified)       over(partition by na.name_urn order by na.source_date desc, na.source_urn desc, na.data_date desc) as is_account_verified,\n    first_value(na.account_created)           over(partition by na.name_urn order by na.source_date desc, na.source_urn desc, na.data_date desc) as account_created,\n    first_value(na.password_reset_expiration) over(partition by na.name_urn order by na.source_date desc, na.source_urn desc, na.data_date desc) as password_reset_expiration,\n    first_value(na.password_reset_token)      over(partition by na.name_urn order by na.source_date desc, na.source_urn desc, na.data_date desc) as password_reset_token,\n    first_value(na.closed_date)               over(partition by na.name_urn order by na.source_date desc, na.source_urn desc, na.data_date desc) as closed_date,\n    first_value(na.delete_date)               over(partition by na.name_urn order by na.source_date desc, na.source_urn desc, na.data_date desc) as delete_date,\n    first_value(na.last_login)                over(partition by na.name_urn order by na.source_date desc, na.source_urn desc, na.data_date desc) as last_login,\n    first_value(na.joined_source)             over(partition by na.name_urn order by na.source_date desc, na.source_urn desc, na.data_date desc) as joined_source,\n    first_value(na.referrer_url)              over(partition by na.name_urn order by na.source_date desc, na.source_urn desc, na.data_date desc) as referrer_url,\n    first_value(na.marketing_referral)        over(partition by na.name_urn order by na.source_date desc, na.source_urn desc, na.data_date desc) as marketing_referral,\n    first_value(na.landing_url_reg)           over(partition by na.name_urn order by na.source_date desc, na.source_urn desc, na.data_date desc) as landing_url_reg,\n    first_value(na.landing_url_first)         over(partition by na.name_urn order by na.source_date desc, na.source_urn desc, na.data_date desc) as landing_url_first,\n    first_value(na.source)                    over(partition by na.name_urn order by na.source_date desc, na.source_urn desc, na.data_date desc) as source,\n    first_value(na.source_date)               over(partition by na.name_urn order by na.source_date desc, na.source_urn desc, na.data_date desc) as source_date\nfrom ${Database}.db.names_attributes na\ninner join ${Database}.temp.names_sma n on na.name_urn = n.name_urn\nwhere source_brand_id in (select brand_id from ${Database}.db.ref_brand where brand = 'SMA') -- add in soure join to be safe\n;\n\n\n-- DEPENDANT TABLE CREATED IN SEPARATE SCRIPT NOW\n\n\n/**************************************************************************\nATTRIBUTES TABLE\n**************************************************************************/\n\n\ndrop table if exists ${Database}.temp.build_attributes_slim;\nCREATE OR REPLACE TABLE ${Database}.temp.build_attributes_slim\nas\nselect  x.cid,\n        x.hid,\n        x.email,\n        na.name_urn,\n        na.umbraco_userno,\n        na.is_account_verified,\n        na.domain_country,\n        na.reg_date,\ncase  when  amend.name_urn is not null then amend.joined_source\n      when      (     lower(na.referrer_url) regexp '(.*)(clickserve\\.dartsearch|googleadservices|https?://www\\.google.*q=[^&])(.*)'\n                    and    (lower(na.landing_url_reg ) regexp '.*sma.*gclid.*'\n                            or lower(na.landing_url_first) regexp '.*sma.*gclid.*')\n                    and    lower(na.joined_source) regexp '.*organic.*|.*ppc.*'\n                    )\n                    or\n                    (   (lower(na.landing_url_reg ) regexp '.*sma.*ppc.gclid.*'\n                        or lower(na.landing_url_first) regexp '.*sma.*ppc.gclid.*')\n                    and    lower(na.joined_source) regexp '.*organic.*|.*ppc.*'\n                    and     cast(na.reg_date as date) >= '2016-05-03'\n                    )\n                    or\n                    (   (lower(na.landing_url_reg ) regexp 'tabid=137'\n                        or lower(na.landing_url_first) regexp '.*tabid=137.*')\n                    and    lower(na.joined_source) regexp '.*organic.*|.*ppc.*'\n                    and     cast(na.reg_date as date) >= '2016-11-29'\n                    )\n                    then 'PPC'\n                    when    lower(na.joined_source) regexp '.*organic.*|.*ppc.*'\n                    and     (lower(na.landing_url_reg ) regexp '.*tabid=210.*'\n                            or lower(na.landing_url_first) regexp '.*tabid=210.*')\n                    then 'Affiliates'\n                    when    lower(na.landing_url_reg)  regexp '.*campaign=facebook-organic%3dsituation%3dsignup.*'\n                      or    lower(na.landing_url_first) regexp '.*campaign=facebook-organic%3dsituation%3dsignup.*'\n                      or    lower(na.referrer_url)      regexp '.*campaign=facebook-organic%3dsituation%3dsignup.*'\n                    then 'Facebook Organic'\n                    when    lower(na.landing_url_reg)  regexp '.*campaign=facebook-paid%3dsituation%3dsignup.*'\n                      or    lower(na.landing_url_first) regexp '.*campaign=facebook-paid%3dsituation%3dsignup.*'\n                      or    lower(na.referrer_url)      regexp '.*campaign=facebook-paid%3dsituation%3dsignup.*'\n                    then 'Facebook Paid'\n                    when    lower(na.landing_url_reg)  regexp '.*utm_campaign=sma_babycenter_september2017&utm_content=signupie.*'\n                      or    lower(na.landing_url_first) regexp '.*utm_campaign=sma_babycenter_september2017&utm_content=signupie.*'\n                      or    lower(na.referrer_url)      regexp '.*utm_campaign=sma_babycenter_september2017&utm_content=signupie.*'\n                    then '2017 FB IE-Sign Up'\n                    when    lower(na.landing_url_reg)  regexp '.*utm_campaign=sma_babycenter_september2017&utm_content=signup.*'\n                      or    lower(na.landing_url_first) regexp '.*utm_campaign=sma_babycenter_september2017&utm_content=signup.*'\n                      or    lower(na.referrer_url)      regexp '.*utm_campaign=sma_babycenter_september2017&utm_content=signup.*'\n                    then '2017 FB-Sign Up'\n                    when    lower(na.landing_url_reg)  regexp '.*utm_campaign=sma_babycenter_september2017&utm_content=learnmoreie.*'\n                      or    lower(na.landing_url_first) regexp '.*utm_campaign=sma_babycenter_september2017&utm_content=learnmoreie.*'\n                      or    lower(na.referrer_url)      regexp '.*utm_campaign=sma_babycenter_september2017&utm_content=learnmoreie.*'\n                    then '2017 FB IE-Learn More'\n                    when    lower(na.landing_url_reg)  regexp '.*utm_campaign=sma_babycenter_september2017&utm_content=learnmore.*'\n                      or    lower(na.landing_url_first) regexp '.*utm_campaign=sma_babycenter_september2017&utm_content=learnmore.*'\n                      or    lower(na.referrer_url)      regexp '.*utm_campaign=sma_babycenter_september2017&utm_content=learnmore.*'\n                    then '2017 FB-Learn More'\n                    when    lower(na.landing_url_reg)  regexp '.*utm_campaign=sma_babycenter_september2017&utm_content=newbornfirstweek.*'\n                      or    lower(na.landing_url_first) regexp '.*utm_campaign=sma_babycenter_september2017&utm_content=newbornfirstweek.*'\n                      or    lower(na.referrer_url)      regexp '.*utm_campaign=sma_babycenter_september2017&utm_content=newbornfirstweek.*'\n                    then '2017 FB-Newborn 1st Week'\n                    when    lower(na.landing_url_reg)  regexp '.*utm_campaign=sma_babycenter_september2017&utm_content=newbornsleep.*'\n                      or    lower(na.landing_url_first) regexp '.*utm_campaign=sma_babycenter_september2017&utm_content=newbornsleep.*'\n                      or    lower(na.referrer_url)      regexp '.*utm_campaign=sma_babycenter_september2017&utm_content=newbornsleep.*'\n                    then '2017 FB-Newborn Sleep'\n                    when    lower(na.landing_url_reg)  regexp '.*campaign=instagram-organic%3dsituation%3dsignup.*'\n                      or    lower(na.landing_url_first) regexp '.*campaign=instagram-organic%3dsituation%3dsignup.*'\n                      or    lower(na.referrer_url)      regexp '.*campaign=instagram-organic%3dsituation%3dsignup.*'\n                    then 'Instagram Organic'\n                    when    lower(na.landing_url_reg)  regexp '.*campaign=instagram-paid%3dsituation%3dsignup.*'\n                      or    lower(na.landing_url_first) regexp '.*campaign=instagram-paid%3dsituation%3dsignup.*'\n                      or    lower(na.referrer_url)      regexp '.*campaign=instagram-paid%3dsituation%3dsignup.*'\n                    then 'Instagram Paid'\n                    when    lower(na.landing_url_reg)  regexp '.*sma02100.*'\n                      or    lower(na.landing_url_first) regexp '.*sma02100.*'\n                      or    lower(na.referrer_url)      regexp '.*sma02100.*'\n                    then 'Baby Fair Pre Event'\n                    when    lower(na.landing_url_reg)  regexp '.*joinedreference=mgm.*c=mgm.*'\n                      or    lower(na.landing_url_first) regexp '.*joinedreference=mgm.*c=mgm.*'\n                      or    lower(na.referrer_url)      regexp '.*joinedreference=mgm.*c=mgm.*'\n                    then 'Member Get Member'\n                    when    lower(na.joined_source)            regexp '.*organic.*'\n                     and    (lower(na.landing_url_reg)  regexp '.*buzzfeed.*'\n                          or lower(na.landing_url_first) regexp '.*buzzfeed.*'\n                          or lower(na.referrer_url)      regexp '.*buzzfeed.*')\n                    then 'Buzzfeed.com'\n                    when    lower(na.joined_source) regexp '.*organic.*'\n                     and    (lower(na.landing_url_reg)  regexp '.*fathersday=social|fathers\\+day.*'\n                          or lower(na.landing_url_first) regexp '.*fathersday=social|fathers\\+day.*'\n                          or lower(na.referrer_url)      regexp '.*fathersday=social|fathers\\+day.*')\n                    then 'Father''s Day 2017'\n                    when lower(na.joined_source)            regexp '.*babyfairie.*'\n                    then 'April 2017 Baby Fair'\n                    when lower(na.joined_source)            regexp '.*roibfoct17.*'\n                    then 'October 2017 Baby Fair'\n                    when lower(na.joined_source)            regexp '.*roibfapr18.*'\n                     and    (lower(na.landing_url_reg)  regexp '.*https://www.smababy.ie/baby-fair/?utm_source=facebook&utm_medium=social&utm_campaign=sma_babyfairticketpromotionie_february2018&utm_content=drivingawareness.*'\n                          or lower(na.landing_url_first) regexp '.*https://www.smababy.ie/baby-fair/?utm_source=facebook&utm_medium=social&utm_campaign=sma_babyfairticketpromotionie_february2018&utm_content=drivingawareness.*'\n                          or lower(na.referrer_url)      regexp '.*https://www.smababy.ie/baby-fair/?utm_source=facebook&utm_medium=social&utm_campaign=sma_babyfairticketpromotionie_february2018&utm_content=drivingawareness.*')\n                    then 'April 2018 FB Post Baby Fair'\n                    when lower(na.joined_source)            regexp '.*roibfapr18.*'\n                    then 'April 2018 Baby Fair'\n                    when lower(na.joined_source)            regexp '.*roibfsep18.*'\n                    then 'Sept 2018 Baby Fair'\n                    when    lower(na.landing_url_reg)  regexp '.*utm_campaign=sma_baby_club_acquisition_september18&utm_content=signup.*'\n                      or    lower(na.landing_url_first) regexp '.*utm_campaign=sma_baby_club_acquisition_september18&utm_content=signup.*'\n                      or    lower(na.referrer_url)      regexp '.*utm_campaign=sma_baby_club_acquisition_september18&utm_content=signup.*'\n                    then '2018 FB-Acquisition'\n                    when    lower(na.landing_url_reg)  regexp '.*utm_campaign=sma_rewards_scheme_september18.*'\n                      or    lower(na.landing_url_first) regexp '.*utm_campaign=sma_rewards_scheme_september18.*'\n                      or    lower(na.referrer_url)      regexp '.*utm_campaign=sma_rewards_scheme_september18.*'\n                    then '2018 FB-Rewards'\n                    when    lower(na.landing_url_reg)  regexp '.*https://www.instagram.com/smababyclubuki/.*'\n                      or    lower(na.landing_url_first) regexp '.*https://www.instagram.com/smababyclubuki/.*'\n                      or    lower(na.referrer_url)      regexp '.*https://www.instagram.com/smababyclubuki/.*'\n                    then 'Instagram Organic'\n                    when    lower(na.landing_url_reg)  regexp '.*https://www.smababy.co.uk/registration/?fbclid=iwar2y_znd1ihj36gwmd7ubosxod0zbpstylhx58gfngktbqgp2hamtyh5c1g.*'\n                      or    lower(na.landing_url_first) regexp '.*https://www.smababy.co.uk/registration/?fbclid=iwar2y_znd1ihj36gwmd7ubosxod0zbpstylhx58gfngktbqgp2hamtyh5c1g.*'\n                      or    lower(na.referrer_url)      regexp '.*https://www.smababy.co.uk/registration/?fbclid=iwar2y_znd1ihj36gwmd7ubosxod0zbpstylhx58gfngktbqgp2hamtyh5c1g.*'\n                    then '2019 FB-Acquisition'\n                    when    lower(na.landing_url_reg)  regexp '.*https://www.instagram.com/p/bvrw89gjgmx/#advertiser.*'\n                      or    lower(na.landing_url_first) regexp '.*https://www.instagram.com/p/bvrw89gjgmx/#advertiser.*'\n                      or    lower(na.referrer_url)      regexp '.*https://www.instagram.com/p/bvrw89gjgmx/#advertiser.*'\n                    then 'Mother''s Day 2019 - Instagram'\n                    when    lower(na.landing_url_reg)  regexp '.*https://www.facebook.com/2110233755867701/posts/2161008590620345.*'\n                      or    lower(na.landing_url_first) regexp '.*https://www.facebook.com/2110233755867701/posts/2161008590620345.*'\n                      or    lower(na.referrer_url)      regexp '.*https://www.facebook.com/2110233755867701/posts/2161008590620345.*'\n                    then 'Mother''s Day 2019 - Facebook'\n                    when    lower(na.landing_url_reg)              regexp '.*utm_source=facebook&utm_medium=paid-social&utm_campaign=smababyclub_acquisition_jan21.*'\n                      or    lower(na.landing_url_first)             regexp '.*utm_source=facebook&utm_medium=paid-social&utm_campaign=smababyclub_acquisition_jan21.*'\n                      or    lower(na.referrer_url)                  regexp '.*utm_source=facebook&utm_medium=paid-social&utm_campaign=smababyclub_acquisition_jan21.*'\n                    then '2021 Jan FB acquisition'\n                    else\n                        replace(trim(coalesce(na.joined_source,'')),'Fanfinders','FanFinders')\n                end as joined_source,\n       case when rt.source is not null then 1 else 0 end as thirdparty,\n       rt.partnersite,\n       na.account_created,\n       na.password_reset_expiration,\n       na.password_reset_token,\n       na.source_date\nfrom     ${Database}.temp.build_names_attributes na\ninner join ${Database}.temp.names_sma nm on nm.name_urn = na.name_urn\ninner join ${Database}.live.xref_name_urn x on na.name_urn = x.name_urn\nleft join ${Database}.db.sma_prev_lapsed pl on na.name_urn = pl.name_urn\nleft join ${Database}.db.ref_sma_thirdparties rt on na.source = rt.source\nleft join ${Database}.db.sma_source_amends amend on na.name_urn = amend.name_urn\nwhere     lower(na.source) regexp '(.*)(reg_umb|reg_dnn|reg_gig)(.*)'\nor na.name_urn in (select name_urn from ${Database}.db.sma_thirdparty where nestle_return_urn is null)\nor     pl.name_urn is not null;\n\n\n\n\n/**************************************************************************\nCID TABLE\n**************************************************************************/\n\n\ndrop table if exists ${Database}.temp.build_rollups_cid_email_base_sma;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_email_base_sma\nas\nselect distinct\n    nm.source_brand_id as brand_id,\n    nm.cid,\n    nm.email,\n    first_value(nm.hid) over\n        (\n            partition by nm.cid\n            order by\n                nm.data_date desc nulls last,\n                nm.reg_date desc nulls last,\n                nm.source_date desc nulls last\n        )                                                                           as hid,\n    first_value(nm.bbw_urn) over\n        (\n            partition by nm.cid\n            order by\n                nm.data_date nulls last,\n                nm.reg_date nulls last,\n                nm.source_date nulls last\n        )                                                                           as bbw_urn,\n    first_value(nm.name_urn) over\n        (\n            partition by nm.cid\n            order by\n                nm.data_date desc nulls last,\n                nm.reg_date desc nulls last,\n                nm.source_date desc nulls last\n        )                                                                           as name_urn,\n    first_value(nm.reg_date) over\n        (\n            partition by nm.cid\n            order by nm.reg_date nulls last\n        )                                                                           as created_date,\n    first_value(nm.data_date) over\n        (\n            partition by nm.cid\n            order by nm.data_date desc nulls last\n        )                                                                           as updated_date,\n    first_value(nm.country_clean) over\n        (\n            partition by nm.cid\n            order by\n                cf.mailable_ignoring_dp desc nulls last,\n                nm.data_date desc nulls last,\n                nm.reg_date desc nulls last,\n                nm.source_date desc nulls last\n        )                                                                           as country,\n    first_value(case when nm.gender = '' then 'X' else nm.gender end) over\n        (\n            partition by nm.cid\n            order by nm.gender nulls last\n        )                                                                           as gender, -- min works assuming 'm','f','x' (gender conflicts are fixed below)\n    first_value(nm.postcode) over\n        (\n            partition by nm.cid\n            order by\n                cf.mailable_ignoring_dp desc nulls last,\n                nm.data_date desc nulls last,\n                nm.reg_date desc nulls last,\n                nm.source_date desc nulls last\n        )                                                                           as postcode,\n    first_value\n    (\n        case\n            when nm.dob = '2001-01-01' then cast(null as date)\n            when nm.dob >= current_date then cast(null as date)\n            when nm.dob <= '1901-01-01' then cast(null as date)\n            else nm.dob\n        end\n    ) over\n        (\n            partition by nm.cid\n            order by\n                nm.data_date desc nulls last,\n                nm.reg_date desc nulls last,\n                nm.source_date desc nulls last\n        )                                                                           as dob,\n    first_value(cf.mailable_ignoring_dp) over\n        (\n            partition by nm.cid\n            order by cf.mailable_ignoring_dp desc nulls last\n        )                                                                           as mailable_ignoring_dp,\n    first_value(cf.mailable_ignoring_dp_address) over\n        (\n            partition by nm.cid\n            order by cf.mailable_ignoring_dp_address desc nulls last\n        )                                                                           as mailable_ignoring_dp_address,\n    first_value(cf.emailable_ignoring_dp) over\n        (\n            partition by nm.cid\n            order by cf.emailable_ignoring_dp desc nulls last\n        )                                                                           as emailable_ignoring_dp,\n    first_value(nm.name_urn) over\n        (\n            partition by nm.cid\n            order by\n                cf.mailable_ignoring_dp desc nulls last,\n                nm.data_date desc nulls last,\n                nm.reg_date desc nulls last,\n                nm.source_date desc nulls last\n        )                                                                           as name_urn_to_mail_ignoring_dp,\n    first_value(nm.name_urn) over\n        (\n            partition by nm.cid\n            order by\n                cf.emailable_ignoring_dp desc nulls last,\n                nm.data_date desc nulls last,\n                nm.reg_date desc nulls last,\n                nm.source_date desc nulls last\n        )                                                                           as name_urn_to_email_ignoring_dp\nfrom ${Database}.temp.names_sma nm\ninner join ${Database}.temp.build_names_contact_flags cf on nm.name_urn = cf.name_urn\n;\n\n\ndrop table if exists ${Database}.temp.cid_brand_sma;\nCREATE OR REPLACE TABLE ${Database}.temp.cid_brand_sma\nas\nselect  ci.cid,\n        att.email,\n        ci.HID,\n        ci.BBW_URN,\n        ci.NAME_URN,\n        ci.CREATED_DATE,\n        ci.UPDATED_DATE,\n        ci.COUNTRY,\n        ci.GENDER,\n        ci.POSTCODE,\n        ci.DOB,\n        ci.MAILABLE_IGNORING_DP,\n        ci.EMAILABLE_IGNORING_DP,\n        ci.NAME_URN_TO_MAIL_IGNORING_DP,\n        ci.NAME_URN_TO_EMAIL_IGNORING_DP,\n        dp.dp_last_date as last_subscription_date_brand,\n    --    contactable status\n        first_value(case when dp.mailable = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end) over\n        (\n            partition by dp.cid\n            order by\n                dp.mailable desc nulls last,\n                ci.mailable_ignoring_dp desc nulls last\n        ) as mailable,\n        first_value(case when dp.mailable = 1 and ci.mailable_ignoring_dp_address = 1 then 1 else 0 end) over\n        (\n            partition by dp.cid\n            order by\n                dp.mailable desc nulls last,\n                ci.mailable_ignoring_dp_address desc nulls last\n        ) as mailable_ignoring_name_address,\n    first_value(case when dp.emailable = 1 and ci.emailable_ignoring_dp = 1 then 1 else 0 end) over\n        (\n            partition by dp.cid\n            order by\n                dp.emailable desc nulls last,\n                ci.emailable_ignoring_dp desc nulls last\n        ) as emailable\nfrom ${Database}.temp.build_rollups_cid_email_base_sma ci\ninner join ${Database}.temp.build_email_brand_contact_flags dp on ci.cid = dp.cid and ci.email = dp.email and ci.brand_id = dp.brand_id\ninner join (select distinct cid, \n                            first_value(email) over\n                            (     \n                                partition by cid \n                                order by reg_date desc nulls last, \n                                source_date desc\n                            ) as email\n            from ${Database}.temp.build_attributes_slim) att on ci.cid = att.cid and lower(att.email) = lower(ci.email) \n;\n\n\ninsert into ${Database}.db.build_log \nselect \n    'sma_rollups',\n    '${Database}.temp.cid_brand_sma',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.cid_brand_sma;   \n\n\ndrop table if exists ${Database}.live.cid_sma;\nCREATE OR REPLACE TABLE ${Database}.live.cid_sma as\nselect distinct\nc.cid,\nc.hid,\nc.bbw_urn,\nc.name_urn,\nc.gender,\nc.postcode,\ncast\n(\n    case\n        when lower(c.country)='united kingdom' then left(upper(tbw.db.strchop(c.postcode,' ',1,1)||' '||left(tbw.db.strchop(c.postcode,' ',-1,-1),1)),10)\n        else ''\n    end as varchar(10)\n)                                                                                           as postal_sector,\ncast\n(\n    case\n        when lower(c.country)='united kingdom' then left(upper(tbw.db.strchop(c.postcode,' ',1,1)),10)\n        else ''\n    end as varchar(10)\n)                                                                                           as postal_district,\ncast\n(\n    upper\n    (\n        case\n            when lower(c.country)='united kingdom' then\n                case\n                    when lower(substring(c.postcode,2,1)) regexp '.*[a-z].*' then left(c.postcode,2)\n                    else left(c.postcode,1)\n                end\n            else ''\n        end\n    ) as char(2)\n)                                                                                           as postal_area,\nc.country,\nc.dob,\n    case when c.mailable_ignoring_dp          = 1 then c.name_urn_to_mail_ignoring_dp          else cast(null as varchar) end as name_urn_to_mail_ignoring_dp,\n    case when c.emailable_ignoring_dp         = 1 then c.name_urn_to_email_ignoring_dp         else cast(null as varchar) end as name_urn_to_email_ignoring_dp,\nnm.cc_iso as country_iso,\nc.mailable,\nc.emailable,\nc.mailable_ignoring_name_address,\nc.mailable_ignoring_dp,\nc.emailable_ignoring_dp,\ncast(null as date) as last_active_date,\njoined_source.source_careline,\ncase when att.cid is not null then 1 else joined_source.source_nestle end as source_nestle,\njoined_source.source_fanfinders,\njoined_source.source_mums_baby,\njoined_source.source_mummypages,\njoined_source.source_leadgeneration,\njoined_source.source_mfm_website,\njoined_source.source_mfm_app,\njoined_source.source_her,\njoined_source.source_moac,\njoined_source.source_moac_date,\nsupps.dp_emailable as dp_optin_raw,\natt.umbraco_userno              as umbraco_user_id,\njoined_source.first_reg         as first_regdate,\natt.first_joinedsource,\natt.live_regdate                     as live_regdate,\natt.live_joinedsource,\natt.live_name_urn,\ncase when thirdparty.source is not null then 1 else 0 end    as thirdparty,\ncast(null as decimal(4,2) )                                  as live_reg_cost,\ncast('' as varchar(20))                                      as member_status,\ncast('' as varchar(20))                                      as core_status,\ncast('' as varchar(45))                                      as email_cluster,\ncast('' as varchar(45))                                      as email_cluster_new,\ncoalesce(child.children_under_3,0)                           as children_under_3, -- used in fs\ncoalesce(child.child_under_27w,'No')                         as child_under_27w, -- used in fs\ncast(null as int)                                            as stage_indicator,\ncast(null as int)                                            as shopmium_stage_indicator,\ncoalesce(child.due_date_char,'')                             as due_date_char,\ncoalesce(child.pregnancy_status,'No')                        as pregnancy_status,\ncoalesce(child.member,0)                                     as member,\nchild.core,\nchild.previously_lapsed,\natt.passwordresettoken                                       as password_reset,\ncast (null as nvarchar(10))                                  as subject_line,\ncase when  lower(att.live_joinedsource) regexp '.*fanfinders.*'     then 'Your Baby Club'\n      when lower(att.live_joinedsource) regexp '.*mum and baby.*'     then 'Mum & Baby Online'\n      when lower(att.live_joinedsource) regexp '.*captain mum.*'      then 'Captain Mums'\n      when lower(att.live_joinedsource) regexp '.*mfm.*|.*made for mum.*' then 'Made For Mums'\n      when lower(att.live_joinedsource) regexp '.*mummypages.*'       then 'Mummy Pages'\n      when lower(att.live_joinedsource) regexp '.*mother of all checklist.*' then 'The Mother of All Checklists'\n      when lower(att.live_joinedsource) regexp 'her.*' then 'Her.ie'\n      else '' end                                            as partnersite,\ncast(null as timestamp)                                      as babyfair_date,\ncast(null as varchar(30))                                    as babyfair_ticket,\ncast(null as timestamp)                                      as mothers_day_date,\ncast(0 as int)                                               as welcome_mailer_valid,\nwr.claim_date                                                as welcome_pack_claimdate,\ncast(null as varchar(1000))                                  as thirdparty_url,\ncast(0 as int)                                               as little_steps_flag       --used in FS SMA09275\nfrom     ${Database}.temp.cid_brand_sma c\ninner join ${Database}.temp.names_sma nm on c.name_urn = nm.name_urn\nleft  join (select email,\n                   cid,\n                   dp_emailable\n            from     ${Database}.live.names_supps_dp_brand_email\n            where brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n            ) supps on nm.email = supps.email\n              and     nm.cid = supps.cid\ninner join (select cid,\n            max(case when n.source = 'SMA_CARE' then 1 else 0 end)         as source_careline,\n            max(case when n.source in('REG_DNNP','REG_UMB') then 1 else 0 end)     as source_nestle,\n            max(case when r.joined_source = 'FanFinders' then 1 else 0 end)     as source_fanfinders,\n            max(case when r.joined_source = 'Mum and Baby' then 1 else 0 end)     as source_mums_baby,\n            max(case when r.joined_source = 'MummyPages' then 1 else 0 end)     as source_mummypages,\n            max(case when r.joined_source = 'Captain Mums' then 1 else 0 end)     as source_leadgeneration,\n            max(case when r.joined_source = 'MFM Website' then 1 else 0 end)     as source_MFM_Website,\n            max(case when r.joined_source = 'MFM App' then 1 else 0 end)     as source_MFM_App,\n            max(case when r.joined_source = 'Her' then 1 else 0 end)         as source_her,\n\t\t\tmax(case when r.joined_source = 'Mother of all Checklist' then 1 else 0 end) as source_moac,\n            max(case when r.joined_source = 'Mother of all Checklist' then n.reg_date else cast(null as date) end) as source_moac_date,\n            min(n.reg_date)                         as first_reg,\n            max(n.reg_date)                         as max_reg\n            from ${Database}.temp.names_sma n\n            left join ${Database}.db.ref_sma_thirdparties r on n.source = r.source\n            group by cid) joined_source on c.cid = joined_source.cid\nleft join (select distinct a.cid,\n                    first_value(a.umbraco_userno) over(partition by a.cid order by a.account_created desc nulls last, a.source_date desc) as umbraco_userno,\n                    first_value(a.joined_source) over(partition by a.cid order by a.reg_date asc nulls last, a.source_date desc) as first_joinedsource,\n                    first_value(a.joined_source) over(partition by a.cid order by a.reg_date desc nulls last, a.source_date desc) as live_joinedsource,\n                    first_value(a.name_urn) over(partition by a.cid order by a.reg_date desc nulls last, a.source_date desc) as live_name_urn,\n                    first_value(a.reg_date) over(partition by a.cid order by a.reg_date desc nulls last, a.source_date desc) as live_regdate,\n                    first_value(case when cast(a.password_reset_expiration as date) >= current_date then a.password_reset_token else cast(null as varchar) end) over(partition by a.cid order by a.reg_date desc nulls last) as passwordresettoken\n            from ${Database}.temp.build_attributes_slim a\n            inner join ${Database}.live.dependant d on a.name_urn = d.name_urn\n            ) att on c.cid = att.cid\nleft join (select name_urn,\n            max(case when lower(child_stage_now) regexp '(.*)(s1|s2|s3|s4|s5|s6)(.*)' then 1 else 0 end) as children_under_3,\n            max(case when dob > current_date-189 then 'Yes' else 'No' end) as child_under_27w,\n            max(case when lower(child_stage_now) regexp '.*t.*' then to_char(dob,'dd/mm/yyyy') else '' end) as due_date_char,\n            max(case when lower(child_stage_now) regexp '.*t.*' then 'Yes' else 'No' end) as pregnancy_status,\n            max(case when lower(child_stage_now) regexp '.*1.*|.*2.*|.*3.*|.*4.*' then 1 else 0 end) as core,\n            max(case when lower(child_stage_now) regexp '.*1.*|.*2.*|.*3.*|.*4.*|.*5.*|.*6.*' then 1 else 0 end) as member,\n            max(previously_lapsed) as previously_lapsed\n            from ${Database}.live.dependant\n            group by 1\n          ) child on att.live_name_urn = child.name_urn\nleft join ${Database}.db.ref_sma_thirdparties thirdparty on att.live_joinedsource = thirdparty.joined_source\nleft join (select x.cid,\n            max(w.claim_date) as claim_date\n           from ${Database}.db.ref_sma_welcome_requests w\n           inner join ${Database}.live.xref_name_urn x on x.name_urn = w.name_urn\n           group by 1) wr on c.cid = wr.cid;\n\nalter warehouse set warehouse_size = 'Xsmall';\n\ninsert into ${Database}.db.build_log \nselect \n    'sma_rollups',\n    '${Database}.live.cid_sma',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_sma;   \n\n\ninsert into ${Database}.db.build_log \nselect \n    'sma_rollups',\n    '${Database}.live.cid_sma',\n    'members',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_sma where member = 1;   \n\n\ncreate or replace table ${Database}.live.cid_sources_sma\nas\nselect distinct\n    xr.cid,\n    na.*,\n    va.valid,\n    case when tp.source is not null then 1 else 0 end as thirdparty,\n    case\n        when va.name_urn is null then 0\n        else row_number() over\n                 (\n                     partition by xr.cid\n                     order by\n                         na.registrationdate asc nulls last,\n                         case when tp.source is not null then 1 else 0 end asc,\n                         case when lower(na.source) regexp '(.*)(reg_dnn|reg_umb|reg_gig)(.*)' then 1 else 2 end desc,\n                         na.source_date asc nulls last,\n                         nm.bbw_urn asc\n                 )\n    end as royalty_order\nfrom (\n         select\n             name_urn,\n             joined_source as babyclubjoinedreference,\n             account_created as registrationdate,\n             source,\n             source_date,\n             row_number() over\n                 (\n                     partition by name_urn\n                     order by\n                         source_date desc nulls last,\n                         source_urn desc nulls last\n                 ) as rn\n         from ${Database}.db.names_attributes\n     ) na\ninner join (\n               select\n                   name_urn,\n                   min(bbw_urn) as bbw_urn\n               from ${Database}.db.names\n               where source_brand_id = (select brand_id from ${Database}.db.ref_brand where trim(brand) = 'SMA')\n               group by 1\n           ) nm on nm.name_urn = na.name_urn\ninner join ${Database}.live.xref_name_urn xr on xr.name_urn = nm.name_urn\nleft join ${Database}.db.ref_sma_thirdparties tp on tp.source = na.source\nleft join (\n              select\n                  child_urn as name_urn,\n                  max(valid) as valid\n              from ${Database}.live.dependant\n              group by 1\n          ) va on va.name_urn = nm.name_urn\nwhere na.rn = 1;\n\n\ninsert into ${Database}.db.build_log \nselect \n    'sma_rollups',\n    '${Database}.live.cid_sources_sma',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_sources_sma;\n\n\n/**************************************************************************\nADD COST PER ACQUISITION\n**************************************************************************/\n\ndrop table if exists ${Database}.temp.cpa_build_lookup;\nCREATE OR REPLACE TABLE ${Database}.temp.cpa_build_lookup\nAS\nselect  cpa.source,\n        cpa.previous_lapsed_flag,\n        cpa.child_stages,\n        cpa.child_age_start_now as child_age_start,\n        cpa.child_age_end,\n        cpa.cost,\n        cpa.start_date,\n    case    when    lower(cpa.source) regexp '.*ppc.*' and cpa.end_date = ppc_date_fix.max_ppc\n            then    ADD_MONTHS(cpa.end_date,3) else cpa.end_date\n    end as end_date\nfrom ${Database}.db.ref_sma_cpa_lookup cpa\n, (select max(end_date) max_ppc from ${Database}.db.ref_sma_cpa_lookup where lower(source) regexp '.*ppc.*') ppc_date_fix;\n\n\n-- APPLY COSTINGS TO CID SOURCES\nmerge into ${Database}.live.cid_sma c\nusing (\nselect    c.cid\n,    max(case when      c.live_regdate between cpa.start_date and cpa.end_date\n                           and  ((cpa.previous_lapsed_flag = 0 and c.previously_lapsed = 0) or (cpa.previous_lapsed_flag = 1 and c.previously_lapsed  = 1))\n                           and  (lower(cpa.child_stages) regexp '.*all.*'\n                                       or ( coalesce(child_age_start,0) = 42 and coalesce(child_age_end,0) = 0  and coalesce(child_stage_reg,'') in ('T1','T2','T3') )\n                                       or ( coalesce(child_age_start,0) = 42 and coalesce(child_age_end,0) = 3  and coalesce(child_stage_reg,'') in ('T1','T2','T3','S1') )\n                                       or ( coalesce(child_age_start,0) = 0  and coalesce(child_age_end,0) = 35 and coalesce(child_stage_reg,'') in ('S1','S2','S3','S4','S5','S6') )\n                                    )\n                            then cost\n                        else 0\n                   end) as cost\n        FROM  ${Database}.live.cid_sma c LEFT JOIN ${Database}.live.dependant na ON c.live_name_urn = na.name_urn and na.valid = 1\nJOIN ${Database}.temp.cpa_build_lookup cpa on upper(c.live_joinedsource) = upper(cpa.source)\nGROUP BY c.cid\n) mydata\non mydata.cid = c.cid\nwhen matched\nthen update set c.live_reg_cost = coalesce(mydata.cost,0);\n\n\n\n/**************************************************************************\nADD MEMBER STATUS\n**************************************************************************/\n\n-- Reactivated Sign-up: Baby Club Members who have registered again via the SMA website. (NB at the point of being reactivated they were outside the 1,000 days target of -9 to 24M and therefore not receiving Baby Club communications)\n-- Reactivated Co-Reg: Baby Club Members who have registered again via a co-registration site, having previously been in the Baby Club. (NB at the point of being reactivated they were outside the 1,000 days target of -9 to 24M and therefore not receiving Baby Club communications)\n-- SIGNED UP - Baby Club Members (-9 to 36M) who have signed up via the SMA website, or have registered via a 3rd party co-registration site and reset their password on the SMA website to complete sign-up process\n-- Co-Reg: Baby Club members who have signed up via a 3rd party site but not yet reset their password to complete sign-up on SMA website\n\nmerge into ${Database}.live.cid_sma c\nusing (\nselect distinct c.cid,\n      case when member = 1 and previously_lapsed = 0 and nestle_record.cid is not null then 'Reactivated Sign-up'\n           when member = 1 and previously_lapsed = 1 then 'Reactivated Co-Reg'\n           when (member = 1 and previously_lapsed = 0 and thirdparty = 0)  or\n               (na.last_login > na.account_created and member = 1 and previously_lapsed = 0 and thirdparty = 1) then 'Signed Up'\n           when member = 1 and thirdparty = 1 and th.name_urn is null then 'Co-Reg'\n           when member = 1 and thirdparty = 1 and th.name_urn is not null then 'Co-Reg Magic Link'\n           else '' end as member_status\nfrom     ${Database}.live.cid_sma c\nleft join ${Database}.db.sma_thirdparty th on th.name_urn = c.live_name_urn\n                                          and th.nestle_return_urn is null\nleft join (\n            select     cid\n            from     ${Database}.temp.names_sma\n            where     lower(source) regexp '(.*)(reg_umb|reg_dnn|reg_gig)(.*)'\n            group by 1\n            having count(distinct name_urn) > 1\n         ) nestle_record on c.cid = nestle_record.cid\nleft join ${Database}.temp.build_names_attributes na on c.live_name_urn = na.name_urn\n    ) status on c.cid = status.cid\nwhen matched then update\nset c.member_status = status.member_status;\n\n\n/**************************************************************************\n COMMS SCHEDULE\n**************************************************************************/\n\nalter warehouse set warehouse_size = 'Small';\n\nupdate ${Database}.live.dependant live\nset  live.child_name=trim(temp.child_name),\n        live.comms_programme=trim(temp.programme),\n        live.comms_subprogramme=trim(temp.subprogramme),\n        live.comms_programme_description=trim(temp.programme_description),\n        live.comms_duedate =temp.programme_comm_due,\n        live.live_flag = 1\nfrom (\n        select  cid,\n                name_urn,\n                child_id,\n                child_name,\n                case when programme_comm_due >= current_date and rownum_cid = 1 then programme else null end as programme,\n                case when programme_comm_due >= current_date and rownum_cid = 1 then subprogramme else null end as subprogramme,\n                case when programme_comm_due >= current_date and rownum_cid = 1 then description else null end as programme_description,\n                case when programme_comm_due >= current_date and rownum_cid = 1 then programme_comm_due else null end as programme_comm_due\n            from\n                (select  c.cid,\n                        ch.name_urn,\n                        trim(ch.firstname || ' ' || ch.lastname) as child_name,\n                        coalesce(ch.child_id,'') as child_id,\n                        pc.*,\n                        row_number() over(partition by c.cid, child_id order by case when current_date-ch.dob <= 168 then agedaysstart_now else agemonths end asc, expiry_date asc) as rownum_child,\n                        row_number() over(partition by c.cid order by case when current_date-ch.dob <= 168 then agedaysstart_now else agemonths end asc, expiry_date asc) as rownum_cid,\n                        case  when agedaysstart_now<>9999 then ch.dob+agedaysstart_now\n                        else add_months(ch.dob,agemonths)\n                        end as programme_comm_due\n                    from     ${Database}.live.cid_sma c\n                    inner join ${Database}.live.dependant ch on c.live_name_urn = ch.name_urn\n                    left join ${Database}.db.sma_programme_control pc\n            on  (current_date-ch.dob <= agedaysstart_now and agedaysend != 9999 and ch.source_date < pc.expiry_date)\n            or  (current_date-ch.dob > 168 and ceil(months_between(current_date,ch.dob))<=agemonths and ch.source_date < pc.expiry_date)\n                    where  not (child_id = 'D' and ch.dob <= current_date and ch.dob > current_date-14) -- surpress first 14 days where autopromoted\n                    ) all_combinations\n        where rownum_child = 1\n    ) temp\nwhere temp.name_urn = live.name_urn and temp.child_id = coalesce(live.child_id,'')\n;\n\nalter warehouse set warehouse_size = 'Xsmall';\n \ninsert into ${Database}.db.build_log \nselect \n    'sma_rollups',\n    '${Database}.live.dependant',\n    'live flag',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.dependant where live_flag = 1;   \n\n/**************************************************************************\n UPDATE CORE STATUS USED IN QLIK\n**************************************************************************/\n\n\n-- CORE STATUS FIELD (USED IN QLIK)\nUPDATE ${Database}.live.cid_sma cid\nSET cid.core_status=kids_roll.core_status\nFROM\n        (select c.cid\n         , case\n            when floor(datediff(month,d.dob,current_date)) between -3  and 3   then 'Core-Core'\n            when floor(datediff(month,d.dob,current_date)) between -9  and 3   then 'Core'\n            when floor(datediff(month,d.dob,current_date)) between  3  and 24  then '1000 Days'\n            when floor(datediff(month,d.dob,current_date)) between 24  and 36  then 'Member'\n            else '' end as core_status\n         , row_number() over(partition by c.cid order by d.dob desc NULLS LAST) as row_num\n         FROM ${Database}.live.dependant d join ${Database}.live.cid_sma c on d.name_urn = c.live_name_urn) kids_roll\n         WHERE kids_roll.cid=cid.cid and row_num = 1\n         and cid.cid in (select distinct c.cid FROM ${Database}.live.dependant d join ${Database}.live.cid_sma c on d.name_urn = c.live_name_urn);\n\n\n/**************************************************************************\n UPDATE STAGE INDICATORS USED IN FS\n**************************************************************************/\n\n\nupdate ${Database}.live.cid_sma cid\nset cid.stage_indicator=indicator.stage_indicator,\ncid.shopmium_stage_indicator=indicator.shopmium_stage_indicator\nfrom      (\n           select    distinct cid\n           ,         first_value(\n                           case\n                               when current_date - dob < -203 then 1 -- antenatal week 1 to 10\n                               when current_date - dob < 1 then 2 -- antenatal week 11 to duedate\n                               when current_date - dob < 77 then 3 -- postnatal week 1 to 10\n                               when dob > add_months(current_date,-6) then 4 -- postnatal week 11 to 24\n                               when dob > add_months(current_date,-9) then 5 -- postnatal month 6 to 8\n                               when dob > add_months(current_date,-12) then 6 -- postnatal month 9 to 11\n                               when dob > add_months(current_date,-21) then 7 -- postnatal month 12 to 20\n                               when dob > add_months(current_date,-31) then 8 -- postnatal month 21 to 30\n                               else 9 -- postnatal month 31 to 36\n                           end\n                          )\n                     over(\n                          partition by cid\n                          order by case\n                                       when current_date - dob < -203 then 1 -- antenatal week 1 to 10\n                                       when current_date - dob < 1 then 2 -- antenatal week 11 to duedate\n                                       when current_date - dob < 77 then 3 -- postnatal week 1 to 10\n                                       when dob > add_months(current_date,-6) then 4 -- postnatal week 11 to 24\n                                       when dob > add_months(current_date,-9) then 5 -- postnatal month 6 to 8\n                                       when dob > add_months(current_date,-12) then 6 -- postnatal month 9 to 11\n                                       when dob > add_months(current_date,-21) then 7 -- postnatal month 12 to 20\n                                       when dob > add_months(current_date,-31) then 8 -- postnatal month 21 to 30\n                                       else 9 -- postnatal month 31 to 36\n                                   end\n                         ) as stage_indicator\n           ,         first_value(\n                           case\n                               when dob > add_months(current_date,-6) or dob < add_months(current_date,-24) then cast(null as int) -- null those outside of range postnatal month 6 - 24\n                               when dob > add_months(current_date,-6) then 4 -- postnatal week 11 to 24\n                               when dob > add_months(current_date,-9) then 5 -- postnatal month 6 to 8\n                               when dob > add_months(current_date,-12) then 6 -- postnatal month 9 to 11\n                               when dob > add_months(current_date,-21) then 7 -- postnatal month 12 to 20\n                               when dob > add_months(current_date,-31) then 8 -- postnatal month 21 to 30\n                           end\n                          )\n                     over(\n                          partition by cid\n                          order by case\n                                       when dob > add_months(current_date,-6) or dob < add_months(current_date,-24) then cast(null as int) -- null those outside of range postnatal month 6 - 24\n                                       when dob > add_months(current_date,-6) then 4 -- postnatal week 11 to 24\n                                       when dob > add_months(current_date,-9) then 5 -- postnatal month 6 to 8\n                                       when dob > add_months(current_date,-12) then 6 -- postnatal month 9 to 11\n                                       when dob > add_months(current_date,-21) then 7 -- postnatal month 12 to 20\n                                       when dob > add_months(current_date,-31) then 8 -- postnatal month 21 to 30\n                                   end nulls last\n                         ) as shopmium_stage_indicator\n           from      ${Database}.live.dependant \n           where live_flag = 1\n               and lower(child_stage_now) regexp '(.*)(1|2|3|4|5|6)(.*)'\n          ) indicator\nwhere     indicator.cid = cid.cid\n;\n\n\n/**************************************************************************\n  CARELINE\n**************************************************************************/\n\n\ndrop table if exists ${Database}.live.cid_sma_careline;\nCREATE OR REPLACE TABLE ${Database}.live.cid_sma_careline as\nselect\n    cid,\n    regexp_replace(collate(cf.contact_name,''),'[\\x00-\\x1F|\\x7F]','')                 AS contact_name,\n    regexp_replace(collate(cf.contact_id,''),'[\\x00-\\x1F|\\x7F]','')                 AS  contact_id,\n    regexp_replace(collate(cf.consumer_owner,''),'[\\x00-\\x1F|\\x7F]','')                 AS  consumer_owner,\n    regexp_replace(collate(cf.industry,''),'[\\x00-\\x1F|\\x7F]','')                 AS  industry,\n    regexp_replace(collate(cf.employees,''),'[\\x00-\\x1F|\\x7F]','')                 AS  employees,\n    regexp_replace(collate(cf.contact_is_person_consumer,''),'[\\x00-\\x1F|\\x7F]','')         AS  contact_is_person_consumer,\n    regexp_replace(collate(cf.person_consumer_salutation,''),'[\\x00-\\x1F|\\x7F]','')         AS  person_consumer_salutation,\n    regexp_replace(collate(cf.person_consumer_first_name,''),'[\\x00-\\x1F|\\x7F]','')         AS  person_consumer_first_name,\n    regexp_replace(collate(cf.person_consumer_last_name,''),'[\\x00-\\x1F|\\x7F]','')             AS  person_consumer_last_name,\n    regexp_replace(collate(cf.person_consumer_title,''),'[\\x00-\\x1F|\\x7F]','')             AS  person_consumer_title,\n    regexp_replace(collate(cf.person_consumer_department,''),'[\\x00-\\x1F|\\x7F]','')         AS  person_consumer_department,\n    regexp_replace(collate(cf.person_consumer_birthdate,''),'[\\x00-\\x1F|\\x7F]','')             AS  person_consumer_birthdate,\n    regexp_replace(collate(cf.person_consumer_person_consumer,''),'[\\x00-\\x1F|\\x7F]','')         AS  person_consumer_person_consumer,\n    regexp_replace(collate(cf.person_consumer_mailing_street,''),'[\\x00-\\x1F|\\x7F]','')         AS  person_consumer_mailing_street,\n    regexp_replace(collate(cf.person_consumer_mailing_address_line1,''),'[\\x00-\\x1F|\\x7F]','')     AS  person_consumer_mailing_address_line1,\n    regexp_replace(collate(cf.person_consumer_mailing_address_line2,''),'[\\x00-\\x1F|\\x7F]','')     AS  person_consumer_mailing_address_line2,\n    regexp_replace(collate(cf.person_consumer_mailing_address_line3,''),'[\\x00-\\x1F|\\x7F]','')     AS  person_consumer_mailing_address_line3,\n    regexp_replace(collate(cf.person_consumer_mailing_city,''),'[\\x00-\\x1F|\\x7F]','')         AS  person_consumer_mailing_city,\n    regexp_replace(collate(cf.person_consumer_mailing_state_province,''),'[\\x00-\\x1F|\\x7F]','')     AS  person_consumer_mailing_state_province,\n    regexp_replace(collate(cf.person_consumer_mailing_zip_postal_code,''),'[\\x00-\\x1F|\\x7F]','')     AS  person_consumer_mailing_zip_postal_code,\n    regexp_replace(collate(cf.person_consumer_mailing_country,''),'[\\x00-\\x1F|\\x7F]','')         AS  person_consumer_mailing_country,\n    regexp_replace(collate(cf.phone,''),'[\\x00-\\x1F|\\x7F]','')                     AS  phone,\n    regexp_replace(collate(cf.fax,''),'[\\x00-\\x1F|\\x7F]','')                     AS  fax,\n    regexp_replace(collate(cf.website,''),'[\\x00-\\x1F|\\x7F]','')                     AS  website,\n    regexp_replace(collate(cf.person_consumer_mobile,''),'[\\x00-\\x1F|\\x7F]','')             AS  person_consumer_mobile,\n    regexp_replace(collate(cf.person_consumer_email,''),'[\\x00-\\x1F|\\x7F]','')             AS  person_consumer_email,\n    regexp_replace(collate(cf.num_of_consumer_contacts,''),'[\\x00-\\x1F|\\x7F]','')             AS  num_of_consumer_contacts,\n    regexp_replace(collate(cf.batch_code,''),'[\\x00-\\x1F|\\x7F]','')                 AS  batch_code,\n    regexp_replace(collate(cf.batch_time,''),'[\\x00-\\x1F|\\x7F]','')                 AS  batch_time,\n    regexp_replace(collate(cf.best_before_date,''),'[\\x00-\\x1F|\\x7F]','')                 AS  best_before_date,\n    regexp_replace(collate(cf.consumer_provided_full_opt_in,''),'[\\x00-\\x1F|\\x7F]','')         AS  consumer_provided_full_opt_in,\n    regexp_replace(collate(cf.consumer_type,''),'[\\x00-\\x1F|\\x7F]','')                 AS  consumer_type,\n    regexp_replace(collate(cf.contact_date,''),'[\\x00-\\x1F|\\x7F]','')                 AS  contact_date,\n    regexp_replace(collate(cf.contact_qualification,''),'[\\x00-\\x1F|\\x7F]','')             AS  contact_qualification,\n    regexp_replace(collate(cf.consumer_contact_reason,''),'[\\x00-\\x1F|\\x7F]','')             AS  consumer_contact_reason,\n    regexp_replace(collate(cf.contact_reason_global,''),'[\\x00-\\x1F|\\x7F]','')             AS  contact_reason_global,\n    regexp_replace(collate(cf.contact_reason_l3_product_l3,''),'[\\x00-\\x1F|\\x7F]','')         AS  contact_reason_l3_product_l3,\n    regexp_replace(collate(cf.contact_reason_l3_product_l3_batch,''),'[\\x00-\\x1F|\\x7F]','')         AS  contact_reason_l3_product_l3_batch,\n    regexp_replace(collate(cf.contact_source,''),'[\\x00-\\x1F|\\x7F]','')                 AS  contact_source,\n    regexp_replace(collate(cf.contact_way,''),'[\\x00-\\x1F|\\x7F]','')                 AS  contact_way,\n    regexp_replace(collate(cf.contact_ways_global,''),'[\\x00-\\x1F|\\x7F]','')             AS  contact_ways_global,\n    regexp_replace(collate(cf.full_batch_code,''),'[\\x00-\\x1F|\\x7F]','')                 AS  full_batch_code,\n    regexp_replace(collate(cf.issue,''),'[\\x00-\\x1F|\\x7F]','')                     AS  issue,\n    regexp_replace(collate(cf.local_contact_reason_level_1,''),'[\\x00-\\x1F|\\x7F]','')         AS  local_contact_reason_level_1,\n    regexp_replace(collate(cf.local_contact_reason_level_6,''),'[\\x00-\\x1F|\\x7F]','')         AS  local_contact_reason_level_6,\n    regexp_replace(collate(cf.local_contact_reason_level_2,''),'[\\x00-\\x1F|\\x7F]','')         AS  local_contact_reason_level_2,\n    regexp_replace(collate(cf.local_contact_reason_level_3,''),'[\\x00-\\x1F|\\x7F]','')         AS  local_contact_reason_level_3,\n    regexp_replace(collate(cf.local_contact_reason_level_4,''),'[\\x00-\\x1F|\\x7F]','')         AS  local_contact_reason_level_4,\n    regexp_replace(collate(cf.local_contact_reason_level_5,''),'[\\x00-\\x1F|\\x7F]','')         AS  local_contact_reason_level_5,\n    regexp_replace(collate(cf.local_contact_ways_level_1,''),'[\\x00-\\x1F|\\x7F]','')         AS  local_contact_ways_level_1,\n    regexp_replace(collate(cf.local_contact_ways_level_2,''),'[\\x00-\\x1F|\\x7F]','')         AS  local_contact_ways_level_2,\n    regexp_replace(collate(cf.local_contact_ways_level_3,''),'[\\x00-\\x1F|\\x7F]','')         AS  local_contact_ways_level_3,\n    regexp_replace(collate(cf.local_contact_ways_level_4,''),'[\\x00-\\x1F|\\x7F]','')         AS  local_contact_ways_level_4,\n    regexp_replace(collate(cf.local_contact_ways_level_5,''),'[\\x00-\\x1F|\\x7F]','')         AS  local_contact_ways_level_5,\n    regexp_replace(collate(cf.local_contact_ways_level_6,''),'[\\x00-\\x1F|\\x7F]','')         AS  local_contact_ways_level_6,\n    regexp_replace(collate(cf.local_product_level_1,''),'[\\x00-\\x1F|\\x7F]','')             AS  local_product_level_1,\n    regexp_replace(collate(cf.local_product_level_7,''),'[\\x00-\\x1F|\\x7F]','')             AS  local_product_level_7,\n    regexp_replace(collate(cf.local_product_level_6,''),'[\\x00-\\x1F|\\x7F]','')             AS  local_product_level_6,\n    regexp_replace(collate(cf.local_product_level_5,''),'[\\x00-\\x1F|\\x7F]','')             AS  local_product_level_5,\n    regexp_replace(collate(cf.local_product_level_4,''),'[\\x00-\\x1F|\\x7F]','')             AS  local_product_level_4,\n    regexp_replace(collate(cf.local_product_level_3,''),'[\\x00-\\x1F|\\x7F]','')             AS  local_product_level_3,\n    regexp_replace(collate(cf.local_product_level_2,''),'[\\x00-\\x1F|\\x7F]','')             AS  local_product_level_2,\n    regexp_replace(collate(cf.plant,''),'[\\x00-\\x1F|\\x7F]','')                     AS  plant,\n    regexp_replace(collate(cf.product_received_by_qa,''),'[\\x00-\\x1F|\\x7F]','')             AS  product_received_by_qa,\n    regexp_replace(collate(cf.qa_internal_comment,''),'[\\x00-\\x1F|\\x7F]','')             AS  qa_internal_comment,\n    regexp_replace(collate(cf.qa_feedback,''),'[\\x00-\\x1F|\\x7F]','')                 AS  qa_feedback,\n    regexp_replace(collate(cf.qa_feedback_global,''),'[\\x00-\\x1F|\\x7F]','')             AS  qa_feedback_global,\n    regexp_replace(collate(cf.source_global,''),'[\\x00-\\x1F|\\x7F]','')                 AS  source_global,\n    regexp_replace(collate(cf.careline_source,''),'[\\x00-\\x1F|\\x7F]','')                 AS  careline_source,\n    regexp_replace(collate(cf.profession,''),'[\\x00-\\x1F|\\x7F]','')                 AS  profession,\n    regexp_replace(collate(cf.due_date,''),'[\\x00-\\x1F|\\x7F]','')                 AS  due_date,\n    regexp_replace(collate(cf.due_date_new_pregnancy,''),'[\\x00-\\x1F|\\x7F]','')             AS  due_date_new_pregnancy,\n    regexp_replace(collate(cf.expecting_baby,''),'[\\x00-\\x1F|\\x7F]','')                 AS  expecting_baby,\n    regexp_replace(collate(cf.expecting_baby_count,''),'[\\x00-\\x1F|\\x7F]','')             AS  expecting_baby_count,\n    regexp_replace(collate(cf.gender,''),'[\\x00-\\x1F|\\x7F]','')                     AS  gender,\n    regexp_replace(collate(cf.gender_dependent,''),'[\\x00-\\x1F|\\x7F]','')                 AS  gender_dependent,\n    regexp_replace(collate(cf.number_activated_optin,''),'[\\x00-\\x1F|\\x7F]','')             AS  number_activated_optin,\n    regexp_replace(collate(cf.number_childs,''),'[\\x00-\\x1F|\\x7F]','')                 AS  number_childs,\n    regexp_replace(collate(cf.number_of_adults,''),'[\\x00-\\x1F|\\x7F]','')                 AS  number_of_adults,\n    regexp_replace(collate(cf.number_of_children,''),'[\\x00-\\x1F|\\x7F]','')             AS  number_of_children,\n    regexp_replace(collate(cf.person_consumer_company_name,''),'[\\x00-\\x1F|\\x7F]','')         AS  person_consumer_company_name,\n    regexp_replace(collate(cf.person_consumer_work_phone,''),'[\\x00-\\x1F|\\x7F]','')         AS  person_consumer_work_phone,\n    regexp_replace(collate(cf.consumer_contact_owner,''),'[\\x00-\\x1F|\\x7F]','')             AS  consumer_contact_owner,\n    regexp_replace(collate(cf.subject,''),'[\\x00-\\x1F|\\x7F]','')                     AS  subject,\n    regexp_replace(collate(cf.consumer_contact_number,''),'[\\x00-\\x1F|\\x7F]','')             AS  consumer_contact_number,\n    regexp_replace(collate(cf.status,''),'[\\x00-\\x1F|\\x7F]','')                     AS  status,\n\tregexp_replace(collate(cf.priority,''),'[\\x00-\\x1F|\\x7F]','')                 AS priority,\t\t\t\t\t\t\t\t\t\t\t\t   \n    regexp_replace(collate(cf.opened_date,''),'[\\x00-\\x1F|\\x7F]','')                 AS  opened_date,\n    regexp_replace(collate(cf.consumer_contact_date_time_last_modified,''),'[\\x00-\\x1F|\\x7F]','')     AS  consumer_contact_date_time_last_modified,\n    regexp_replace(collate(cf.consumer_contact_last_modified_date,''),'[\\x00-\\x1F|\\x7F]','')     AS  consumer_contact_last_modified_date,\n    regexp_replace(collate(cf.date_time_closed,''),'[\\x00-\\x1F|\\x7F]','')                 AS  date_time_closed,\n    regexp_replace(collate(cf.closed_date,''),'[\\x00-\\x1F|\\x7F]','')                 AS  closed_date,\n    regexp_replace(collate(cf.age_hours,''),'[\\x00-\\x1F|\\x7F]','')                 AS  age_hours,\n    regexp_replace(collate(cf.is_open,''),'[\\x00-\\x1F|\\x7F]','')                     AS  is_open,\n    regexp_replace(collate(cf.closed,''),'[\\x00-\\x1F|\\x7F]','')                     AS  closed,\n    regexp_replace(collate(cf.consumer_contact_id,''),'[\\x00-\\x1F|\\x7F]','')             AS  consumer_contact_id\nFROM\n    ${Database}.db.sma_careline_full cf\nJOIN\n    ${Database}.temp.names_sma ns\nON\n    'SMA_CARE|'||cf.contact_id=ns.name_urn\nWHERE\n    status<>'Rejected' AND contact_id<>'';\n\n--INSERT INTO sma_db.build_log SELECT 'sma_rollups','sma_live.cid_careline','total records' ,CAST(COUNT(*) AS VARCHAR),CURRENT_TIMESTAMP::timestamp_ntz FROM sma_live.cid_careline;\n\n\n\n/**************************************************************************\nCREATE SMA VERSION OF CID_DETAILS\n**************************************************************************/\n\ndrop table if exists ${Database}.live.cid_details_sma ;\nCREATE OR REPLACE TABLE ${Database}.live.cid_details_sma\nas\nselect distinct\n    ci.cid,\n    ci.hid,\n    coalesce(utm.name_urn, ute.name_urn, ci.name_urn)                                       as name_urn,\n    cast(regexp_replace(coalesce(collate(utm.title,''), collate(ute.title,''), collate(ma.title,'')),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))               as title,\n    cast(regexp_replace(coalesce(collate(utm.firstname,''), collate(ute.firstname,''), collate(ma.firstname,'')),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))   as firstname,\n    cast(regexp_replace(coalesce(collate(utm.lastname,''), collate(ute.lastname,''), collate(ma.lastname,'')),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))      as lastname,\n    --blank address if not mailable\n    cast(regexp_replace(coalesce(collate(utm.add1,''), ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                as add1,\n    cast(regexp_replace(coalesce(collate(utm.add2,''), ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                as add2,\n    cast(regexp_replace(coalesce(collate(utm.add3,''), ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                as add3,\n    cast(regexp_replace(coalesce(collate(utm.add4,''), ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                as add4,\n    cast(regexp_replace(coalesce(collate(utm.add5,''), ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                as add5,\n    cast(regexp_replace(coalesce(collate(utm.city,''), ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                as town,\n    cast(regexp_replace(coalesce(collate(utm.state,''), ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                               as county,\n    cast(regexp_replace(coalesce(collate(utm.country_clean,''), ci.country),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))               as country,\n    cast(regexp_replace(upper(coalesce(collate(utm.postcode,''), collate(ci.postcode,''))),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50)) as postcode,\n\tcast(regexp_replace(coalesce(collate(cb.email,''), ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                as email,\n    cast(regexp_replace(coalesce(collate(utm.firstname,''), collate(ute.firstname,''), collate(ma.firstname,'')),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))       as salutation,\n    cast(regexp_replace(coalesce(collate(utm.firstname,''), collate(ute.firstname,''), collate(ma.firstname,'')),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50)) as salutation_informal,\n    cast(null as varchar(255)) as salutation_firstname\nfrom ${Database}.live.cid_sma ci\nleft join ${Database}.live.names utm   on ci.name_urn_to_mail_ignoring_dp          = utm.name_urn\nleft join ${Database}.live.names ute   on ci.name_urn_to_email_ignoring_dp         = ute.name_urn\nleft join ${Database}.live.names ma    on ci.name_urn                              = ma.name_urn\nleft join ${Database}.temp.cid_brand_sma cb on cb.cid                              = ci.cid;\n\n\nupdate ${Database}.live.cid_details_sma cd\nset cd.salutation = salut.salutation\nfrom (\n         select\n             cid,\n             case\n                 when substring(salut.salutation,2,1) = ' '\n                     or replace(regexp_replace(upper(salut.salutation),'\\t| |[A-Z]','A'),'A','') <> ''\n                     or regexp_count(salut.salutation,' ') > 1\n                     or (length(salut.salutation) < 4 and t.firstname is null)\n                     or trim(coalesce(salutation,'')) = ''\n                 then 'Baby Club Member'\n                 when regexp_count(replace(replace(replace(salut.salutation,' - ',' '),'- ',' '),' -',' '),' ') > 0\n                     and replace(replace(replace(salut.salutation,' - ',' '),'- ',' '),' -',' ') <> ''\n                     and length(split_part(replace(replace(replace(salut.salutation,' - ',' '),'- ',' '),' -',' '),' ',2)) < 3\n                 then split_part(replace(replace(replace(salut.salutation,' - ',' '),'- ',' '),' -',' '),' ',1)\n                 else replace(replace(replace(salut.salutation,' - ',' '),'- ',' '),' -',' ')\n             end as salutation\nfrom ${Database}.live.cid_details_sma salut\nleft join tbw.db.firstnames t on lower(salut.salutation) = lower(t.firstname)\n) salut\nwhere cd.cid = salut.cid;\n\n-- ===========================================================================================\n--          SUBJECT LINE TESTING\n-- ===========================================================================================\n\n-- Create table with all people who will need subject line and assign subject line\ndrop table if exists ${Database}.temp.sma_subject_line_temp;\nCREATE OR REPLACE TABLE  ${Database}.temp.sma_subject_line_temp as\nselect  bbw_urn,\n        decode(ntile(2) over(order by rand),1,'A',2,'B') as subject_line\nfrom        (\n            select *, row_number() over(order by 1) as rand\n            from   (\n                    select    distinct b.bbw_urn\n                    from      ${Database}.live.cid_details_sma a\n                    join      ${Database}.live.cid_sma b on a.cid = b.cid\n                    join      ${Database}.live.dependant c on a.cid = c.cid\n                    where     b.emailable = 1\n                    and       b.source_nestle = 1\n                    and       c.comms_duedate is not null\n                   ) d\n           ) x\n;\n\n-- Insert these new records into history table\nmerge into ${Database}.db.sma_subject_line_history db\nusing     (\n           select   *\n           ,        current_date as source_date\n           from     ${Database}.temp.sma_subject_line_temp\n          ) temp on db.bbw_urn = temp.bbw_urn\nwhen not matched then\ninsert (bbw_urn,subject_line,source_date)\nvalues (temp.bbw_urn,temp.subject_line,temp.source_date)\n;\n\n\n-- Update subject_line field in cid_temp table\nupdate   ${Database}.live.cid_sma a\nset      a.subject_line = b.subject_line\nfrom     (                         select   distinct bbw_urn\n                                   ,        subject_line\n                                   from     ${Database}.db.sma_subject_line_history\n                                  ) b\n                         where    a.bbw_urn = b.bbw_urn\n;\n\n\n\n/**************************************************************\n    ADESTRA\n**************************************************************/\n\n\n-- CREATE A BASE TABLE FIRST TO ROLL FROM AS NEED TO DO SEPERATE ROLL FOR LINKS IN QLIKSENSE\n\nalter warehouse set warehouse_size = 'Large';\n\ncreate or replace table ${Database}.temp.sma_adestra_base as\nselect\n        row_number() over(order by 1)                 as engagement_key,\n        coalesce(xr1.name_urn,xr2.name_urn) as name_urn,\n        coalesce(chl.cell_master_category,'')     as master_category,\n        coalesce(chl.cell_category,'')         as category,\n        coalesce(case\n                     when lower(chl.cell_subcategory) regexp '.*insiders recruitment toddler email.*' then 'Insiders'\n                     when lower(chl.cell_subcategory) regexp '.*ecrm programme all stages.*' and lower(split_part(ae.ecrm_pack_id,'|',1)) regexp 'wa28|wa29|wa3.*|wa4.*' then 'Antenatal T3'\n                     when lower(chl.cell_subcategory) regexp '.*ecrm programme all stages.*' and lower(split_part(ae.ecrm_pack_id,'|',1)) not regexp 'wa1|wa2|wa10|wa11|wa12' and lower(split_part(ae.ecrm_pack_id,'|',1)) regexp 'wa1.*|wa2.*' then 'Antenatal T2'\n                     when lower(chl.cell_subcategory) regexp '.*ecrm programme all stages.*' and lower(split_part(ae.ecrm_pack_id,'|',1)) regexp 'wa.*' then 'Antenatal T1'\n                     when lower(chl.cell_subcategory) regexp '.*ecrm programme all stages.*' then chl.cell_category\n                     else chl.cell_subcategory\n                 end,'') as subcategory,\n        trim(case when trim(chl.campaign_name) = 'eCRM Programme' then 'eCRM ' else '' end||trim(replace(replace(initcap(case when lower(chl.pack_name) regexp '.*week[0-9].*' then replace(replace(upper(chl.pack_name), 'WEEK','WEEK '),'_ANTE_',' ')\n                                                                  when  lower(chl.pack_name) regexp '.*month[0-9].*' then replace(upper(chl.pack_name), 'MONTH','MONTH ')\n                                                                  when charindex(chl.pack_name, '(',1) > 0 then substring(chl.pack_name,1,charindex(chl.pack_name, '(',1)-2)\n                                                                  when lower(chl.pack_name) regexp '.*sma12.*' then replace(upper(chl.pack_name),'SMA12_NUTRISTEPS','NUTRI STEPS')\n                                                                  when lower(chl.pack_name) regexp '.*sma35_1_conquest.*' and lower(chl.pack_name) regexp '.*roi.*' then 'Mothers Day 2016 ROI'\n                                                                  when lower(chl.pack_name) regexp '.*sma35_1_conquest.*' and lower(chl.pack_name) regexp '.*uk.*' then 'Mothers Day 2016 UK'\n                                                                  when lower(chl.pack_name) regexp '.*c[1-8] - existing.*' and lower(chl.pack_name) regexp '.*uk.*' then 'Mothers Day 2016 UK'\n                                                                  when lower(chl.pack_name) regexp '.*c[1-8] - existing.*' and lower(chl.pack_name) regexp '.*roi.*' then 'Mothers Day 2016 ROI'\n                                                                  when lower(chl.pack_name) regexp '.*sma35_1_existing.*' and lower(chl.pack_name) regexp '.*uk.*' then 'Mothers Day 2016 UK Follow Up'\n                                                                  when lower(chl.pack_name) regexp '.*sma35_1_existing.*' and lower(chl.pack_name) regexp '.*roi.*' then 'Mothers Day 2016 ROI Follow Up'\n                                                                  when lower(chl.pack_name) regexp '.*sma14_roi_baby_fair.*' then 'Baby Fair 2015'\n                                                                  when lower(chl.pack_name) regexp '.*sma33_1_baby_fair.*' then 'Baby Fair April 2016'\n                                                                  when lower(chl.pack_name) regexp '.*sma02979.*' then 'INSIDERS RECRUITMENT TODDLER EMAIL'\n                                                                  when lower(chl.pack_name) regexp '.*fathers day fu.*' then replace(chl.pack_name,'FU','Follow Up')\n                                                                  when lower(chl.pack_name) regexp '.*protein quiz winners.*' then replace(chl.pack_name,'SMA02034 - ','')\n                                                                  when lower(chl.pack_name) regexp '.*1260.*' then 'Mother''s Day 2018 Mums Baby ROI'\n                                                                  when chl.campaign_name = 'eCRM Programme' then tbw.db.strchop(ae.ecrm_pack_name,'|',1,1)\n                                                                  else  chl.pack_name end),'_',' '),'Postnatal','Post'))) as messagename,\n        case when chl.campaign_name = 'eCRM Programme' then tbw.db.strchop(ae.ecrm_pack_id,'|',2,2)\n             when cell_country is not null then cell_country\n             when cell_country is null and lower(chl.pack_name) regexp '.*roi.*' then 'ROI'\n             when cell_country is null and lower(chl.pack_name) regexp '.* uk.*' then 'UK'\n             else 'Other'             end as country,\n        cell_stage,\n        event_name,\n        event_timestamp,\n        lag(event_timestamp) over(partition by coalesce(xr1.name_urn,xr2.name_urn), chl.cell_master_category, chl.cell_category, chl.cell_subcategory, chl.pack_name, event_name order by event_timestamp desc) as nextevent_timestamp,\n        link_label,\n        link_url,\n        workspace_name,\n        case when sp.email is not null then 1 else 0 end as unsub_event,\n        case when ae.ecrm_pack_id > '' then 1 else 0 end as ecrm\nfrom ${Database}.db.adestra_events_sma ae\nleft join (\n              select distinct\n                  lower(email) as email,\n                  unsub_campaign,\n                  unsub_event,\n                  unsub_timestamp\n              from ${Database}.db.supps_unsubscribe\n              where unsub_campaign > ''\n                  and unsub_campaign <> 'Nestle/Purina'\n          ) sp on sp.email = lower(ae.email)\n              and sp.unsub_campaign = ae.campaign_name\n              and sp.unsub_event = ae.event_name\n              and sp.unsub_timestamp = ae.event_timestamp\ninner join\n (\n    select *,\n            row_number() over(partition by pack_code order by promotion_date_last_ran desc) as row_num\n    from ${Database}.db.sma_cascade_comms_lookup\n  ) chl on ae.pack_id = chl.pack_code\nleft join ${Database}.db.xref_bbw_urn_sma xr1 on xr1.old_bbw_urn = cast(ae.urn as int)\nleft join ${Database}.db.names xr2 on xr2.bbw_urn = cast(ae.urn as int)\nwhere  trim(ae.urn) <> ''\nand    chl.row_num = 1;\n\n\n\ndrop table if exists ${Database}.temp.sma_engagement_base;\nCREATE OR REPLACE TABLE ${Database}.temp.sma_engagement_base\nas\nselect\n      name_urn,\n      master_category,\n      category,\n      subcategory,\n      messagename,\n      country,\n      cell_stage,\n      max(case when lower(event_name) regexp '.*sent_campaign.*' then 1 else 0 end)                     as sent_flag,\n      min(case when lower(event_name) regexp '.*sent_campaign.*' then cast(event_timestamp as date) else cast(null as date) end )     as sent_date,\n      count(distinct case when lower(event_name) regexp '.*read.*|.*webversion_click.*'\n              then cast(event_timestamp as date) else cast(null as date) end )                         as open_qty,\n      max(case when lower(event_name) regexp '.*read.*|.*webversion_click.*'\n              then cast(event_timestamp as date) else cast(null as date) end)                         as open_lastdate,\n      min(case when lower(event_name) regexp '.*read.*|.*webversion_click.*'\n              then cast(event_timestamp as date) else cast(null as date) end)                         as open_firstdate,\n      max(case when lower(event_name) regexp '.*inbound_user.*|.*known_bounce.*'\n              then 1 else 0 end)                                             as bounce_flag,\n      max(case when lower(event_name) regexp\n      '.*inbound_user.*|.*known_bounce.*|.*inbound_addresschange.*|.*inbound_blocked.*|.*inbound_bounce.*|.*inbound_domain.*|.*inbound_ooo.*|.*inbound_quota.*'\n              then 1 else 0 end)                                             as bounce_reporting_flag,\n      min(case when lower(event_name) regexp '.*inbound_user.*|.*known_bounce.*'\n              then cast(event_timestamp as date) else cast(null as date) end)                         as bounce_date,\n      max(unsub_event)                                                                                as optout_flag,\n      min(case when unsub_event = 1 then cast(event_timestamp as date) else cast(null as date) end)   as optout_date,\n      max(case when lower(event_name) regexp '.*suppressed.*|.*suppressed_global.*'\n              then 1 else 0 end)                                             as suppress_flag,\n      min(case when lower(event_name) regexp '.*suppressed.*|.*suppressed_global.*'\n              then cast(event_timestamp as date) else cast(null as date) end)                         as suppress_date,\n      count(distinct case when lower(event_name) regexp '.*click.*' then cast(event_timestamp as date) else cast(null as date) end)     as click_qty,\n      max(case when lower(event_name) regexp '.*click.*' then cast(event_timestamp as date) else cast(null as date) end)         as click_lastdate,\n      min(case when lower(event_name) regexp '.*click.*' then cast(event_timestamp as date) else cast(null as date) end)          as click_firstdate,\n      cast(0 as int)                                                  as close_flag,\n      cast(null as date)                                                  as close_date,\n      'Adestra' as source,\n      case when lower(workspace_name) regexp '.*cerelac.*' then 'cerelac'\n      else 'SMA' end                                                 as brand\nfrom    ${Database}.temp.sma_adestra_base\nwhere   subcategory <> 'Member Get Member'\ngroup by\n      name_urn,\n      master_category,\n      category,\n      subcategory,\n      messagename,\n      country,\n      cell_stage,\n      case when lower(workspace_name) regexp '.*cerelac.*' then 'cerelac'\n      else 'SMA' end;\n\n\ninsert into ${Database}.temp.sma_engagement_base\nselect\n      s.name_urn,\n      s.master_category,\n      s.category,\n      s.subcategory,\n      s.messagename||' - '||to_char(s.event_timestamp, 'YYYY-MM-DD') as messagename,\n      s.country,\n      s.cell_stage,\n      max(case when  lower(s.event_name) regexp '.*sent_campaign.*' then 1 else 0 end)                     as sent_flag,\n      min(case when  lower(s.event_name) regexp '.*sent_campaign.*' then cast(s.event_timestamp as date) else cast(null as date) end )     as sent_date,\n      count(distinct case when  lower(o.event_name) regexp '.*read.*|.*webversion_click.*'\n              then cast(o.event_timestamp as date) else cast(null as date) end )                         as open_qty,\n      max(case when  lower(o.event_name) regexp '.*read.*|.*webversion_click.*'\n              then cast(o.event_timestamp as date) else cast(null as date) end)                         as open_lastdate,\n      min(case when  lower(o.event_name) regexp '.*read.*|.*webversion_click.*'\n              then cast(o.event_timestamp as date) else cast(null as date) end)                         as open_firstdate,\n      max(case when  lower(o.event_name) regexp '.*inbound_user.*|.*known_bounce.*'\n              then 1 else 0 end)                                             as bounce_flag,\n      max(case when  lower(o.event_name) regexp      '.*inbound_user.*|.*known_bounce.*|.*inbound_addresschange.*|.*inbound_blocked.*|.*inbound_bounce.*|.*inbound_domain.*|.*inbound_ooo.*|.*inbound_quota.*'\n              then 1 else 0 end)                                             as bounce_reporting_flag,\n      min(case when  lower(o.event_name) regexp '.*inbound_user.*|.*known_bounce.*'\n              then cast(o.event_timestamp as date) else cast(null as date) end)                         as bounce_date,\n      max(o.unsub_event)                                                                                as optout_flag,\n      min(case when o.unsub_event = 1 then cast(o.event_timestamp as date) else cast(null as date) end) as optout_date,\n      max(case when  lower(o.event_name) regexp '.*suppressed.*|.*suppressed_global.*'\n              then 1 else 0 end)                                             as suppress_flag,\n      min(case when  lower(o.event_name) regexp  '.*suppressed.*|.*suppressed_global.*'\n              then cast(o.event_timestamp as date) else cast(null as date) end)                         as suppress_date,\n      count(distinct case when  lower(o.event_name) regexp  '.*click.*' then cast(o.event_timestamp as date) else cast(null as date) end)     as click_qty,\n      max(case when  lower(o.event_name) regexp  '.*click.*' then cast(o.event_timestamp as date) else cast(null as date) end)         as click_lastdate,\n      min(case when  lower(o.event_name) regexp  '.*click.*' then cast(o.event_timestamp as date) else cast(null as date) end)          as click_firstdate,\n      cast(0 as int)                                                  as close_flag,\n      cast(null as date)                                                  as close_date,\n      'Adestra' as source,\n      case when lower(s.workspace_name) regexp '.*cerelac.*' then 'cerelac'\n      else 'SMA' end                                                 as brand\nfrom (\n         select *\n         from ${Database}.temp.sma_adestra_base\n         where subcategory = 'Member Get Member'\n             and event_name = 'sent_campaign'\n     ) s\nleft join (\n              select *\n              from ${Database}.temp.sma_adestra_base\n              where subcategory = 'Member Get Member'\n                  and event_name <> 'sent_campaign'\n          ) o on s.name_urn = o.name_urn\n             and s.messagename = o.messagename\n             and s.event_timestamp <= o.event_timestamp\n             and (s.event_timestamp > o.event_timestamp or s.nextevent_timestamp is null)\ngroup by\n      s.name_urn,\n      s.master_category,\n      s.category,\n      s.subcategory,\n      s.messagename||' - '||to_char(s.event_timestamp, 'YYYY-MM-DD'),\n      s.country,\n      s.cell_stage,\n      case when lower(s.workspace_name) regexp '.*cerelac.*' then 'cerelac'\n      else 'SMA' end;\n\nalter warehouse set warehouse_size = 'Small';\n\ndrop table if exists ${Database}.live.sma_engagement_levels_messages;\nCREATE OR REPLACE TABLE ${Database}.live.SMA_ENGAGEMENT_LEVELS_MESSAGES as\nselect\n      x.cid,\n      upper(eng.messagename)     AS messagename,\n      eng.master_category,\n      eng.category,\n      eng.subcategory,\n      eng.country,\n      eng.cell_stage as stage,\n      max(sent_flag)         AS sent_flag,\n      min(sent_date)         AS sent_date,\n      max(suppress_flag)         AS suppress_flag,\n      min(suppress_date)         AS suppress_date,\n      max(bounce_flag)         AS bounce_flag,\n      max(bounce_reporting_flag)     AS bounce_reporting_flag,\n      min(bounce_date)         AS bounce_date,\n      sum(open_qty)         AS open_qty,\n      max(open_lastdate)         AS open_lastdate,\n      min(open_firstdate)         AS open_firstdate,\n      sum(click_qty)         AS click_qty,\n      max(click_lastdate)         AS click_lastdate,\n      min(click_firstdate)     AS click_firstdate,\n      max(optout_flag)         AS optout_flag,\n      min(optout_date)         AS optout_date,\n      max(close_flag)         AS close_flag,\n      min(close_date)         AS close_date,\n      eng.brand,\n      cs.hid\nfrom     ${Database}.temp.sma_engagement_base eng\ninner join ${Database}.live.xref_name_urn x on eng.name_urn = x.name_urn\ninner join ${Database}.live.cid_sma cs on cs.cid = x.cid\ngroup by x.cid,\n        upper(messagename),\n        master_category,\n        category,\n        subcategory,\n        eng.country,\n        eng.cell_stage,\n        eng.brand,\n        cs.hid;\n\n\nupdate ${Database}.live.sma_engagement_levels_messages\nset messagename = replace(messagename,right(messagename,13),'')\nwhere subcategory = 'Member Get Member';\n\n\ninsert into ${Database}.db.build_log \nselect \n    'sma_rollups',\n    '${Database}.live.sma_engagement_levels_messages',\n    'Total Records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.sma_engagement_levels_messages;   \n\n\ndrop table if exists ${Database}.live.sma_engagement_levels;\nCREATE OR REPLACE TABLE ${Database}.live.sma_engagement_levels as\nselect\n    x.cid,\n    count(distinct case when sent_flag>0 then eng.messagename else cast(null as varchar)end)     as sent_qty,\n    max(sent_date)                                     as sent_lastdate,\n    min(sent_date)                                     as sent_firstdate,\n    count(distinct case when suppress_flag>0 then eng.messagename else cast(null as varchar) end) as suppress_qty,\n    max(suppress_date)                                     as suppress_lastdate,\n    min(suppress_date)                                     as suppress_firstdate,\n    count(distinct case when bounce_flag>0 then eng.messagename else cast(null as varchar) end)     as bounce_qty,\n    max(bounce_date)                                     as bounce_lastdate,\n    min(bounce_date)                                     as bounce_firstdate,\n    count(distinct case when open_qty>0 then eng.messagename else cast(null as varchar) end)     as open_qty,\n    max(open_lastdate)                                     as open_lastdate,\n    min(open_firstdate)                                     as open_firstdate,\n    count(distinct case when click_qty>0  then eng.messagename else cast(null as varchar) end)     as click_qty,\n    max(click_lastdate)                                     as click_lastdate,\n    min(click_firstdate)                                     as click_firstdate,\n    count(distinct case when optout_flag>0  then eng.messagename else cast(null as varchar) end)     as optout_qty,\n    max(optout_date)                                     as optout_lastdate,\n    min(optout_date)                                     as optout_firstdate,\n    count(distinct case when close_flag>0 then eng.messagename else cast(null as varchar) end)     as close_qty,\n    max(optout_date)                                     as close_lastdate,\n    min(optout_date)                                     as close_firstdate,\n    cs.hid\nFROM ${Database}.temp.sma_engagement_base eng\nINNER JOIN ${Database}.live.xref_name_urn x on eng.name_urn = x.name_urn\ninner join ${Database}.live.cid_sma cs on cs.cid = x.cid\nGROUP BY x.cid,cs.hid;\n\nalter warehouse set warehouse_size = 'Xsmall';\n\ndrop table  ${Database}.temp.sma_engagement_base;\n\n\n/**************************************************************\n    ENGAGEMENT CLUSTERS\n**************************************************************/\n\n\ndrop table if exists ${Database}.temp.sma_email_clustering;\nCREATE OR REPLACE TABLE ${Database}.temp.sma_email_clustering as\nselect    a.cid,\n          case     when insiders.cid is not null                                         then '5 Highly Engaged Responder'\n                  when b.cid is null\n                      or b.sent_qty = 0                                         then 'Not Contacted'\n                  when coalesce(openrate3m,0) >= 0.5\n                          and coalesce(careline.last_careline_date,to_date('01/01/1900'))\n                              >= add_months(current_date,-3)                                     then '6 Most Engaged Responder'\n                  when coalesce(openrate3m,0) >= 0.5                                         then '5 Highly Engaged Responder'\n                  when greatest(coalesce(careline.last_careline_date,to_date('01/01/1900')),coalesce(click_lastdate,to_date('01/01/1900')))\n                              >= add_months(current_date,-3)                                     then '4 Engaged Responder'\n                  when coalesce(open_lastdate,to_date('01/01/1900'))\n                              >= add_months(current_date,-3)\n                          and coalesce(click_lastdate,to_date('01/01/1900'))\n                              < add_months(current_date,-3)                                     then '3 Engaged (Non Responder)'\n                  when coalesce(last_delivered_date,to_date('01/01/1900'))\n                              > add_months(current_date,-3)\n                          and greatest(coalesce(open_lastdate,to_date('01/01/1900')),coalesce(click_lastdate,to_date('01/01/1900')))\n                              < add_months(current_date,-3)                                     then '2 Unengaged Inactive'\n                  when sent_qty > 0\n                          and delivered = 0                                             then '1 Unreachable Inactive'\n                  when sent_qty > 0\n                          and coalesce(last_delivered_date,to_date('01/01/1900'))\n                              <= add_months(current_date,-3)                                     then 'No longer being contacted'\n          else '' end as email_cluster\n          \n          ,\n          \n          case \n\n\n\n when (\n   moac.Last_MOAC_Engagement_Date >= to_char(add_months(current_date, -2), 'YYYY-MM-DD')\n or   \n   rew.Last_Rewards_Engagement_Date >=  to_char(add_months(current_date, -2), 'YYYY-MM-DD')\n or\n   care.Last_Careline_Engagement_Date >=  to_char(add_months(current_date, -2), 'YYYY-MM-DD') \n )\n \n then 'Responders - Recent Proactive'\n \n when ( \n   b.click_lastdate >= to_char(add_months(current_date, -6), 'YYYY-MM-DD') and ((b.sent_qty - b.bounce_qty) > 0 and (b.click_qty/(b.sent_qty - b.bounce_qty) >0.05))\n ) \n \n then 'Responders - Reactive High Engagement'\n \n \n when (\n   moac.Last_MOAC_Engagement_Date < to_char(add_months(current_date, -2), 'YYYY-MM-DD') \n or   \n   rew.Last_Rewards_Engagement_Date <  to_char(add_months(current_date, -2), 'YYYY-MM-DD')\n or\n   care.Last_Careline_Engagement_Date <  to_char(add_months(current_date, -2), 'YYYY-MM-DD') \n )\n \n then 'Responders - Lapsing Proactive' \n \n when ( \n   (b.click_lastdate < to_char(add_months(current_date, -6), 'YYYY-MM-DD') and   b.click_lastdate >= to_char(add_months(current_date, -12), 'YYYY-MM-DD'))\n   or \n   ((b.click_lastdate < to_char(add_months(current_date, -3), 'YYYY-MM-DD') and   b.click_lastdate >= to_char(add_months(current_date, -6), 'YYYY-MM-DD')) and ((b.sent_qty - b.bounce_qty) > 0 and (b.click_qty/(b.sent_qty - b.bounce_qty)) <= 0.10))\n   or \n   ((b.click_lastdate >= to_char(add_months(current_date, -3), 'YYYY-MM-DD') and ((b.sent_qty - b.bounce_qty) > 0 and (b.click_qty/(b.sent_qty - b.bounce_qty)) <= 0.05)))\n ) \n \n then 'Responders - Reactive Low Engagement'\n \n  \n when ( \n   b.click_lastdate < to_char(add_months(current_date, -12), 'YYYY-MM-DD') \n ) \n \n then 'Responders - Reactive Lapsed'\n \n when ( \n   b.click_lastdate is null  and b.open_lastdate >= to_char(add_months(current_date, -2), 'YYYY-MM-DD') \n ) \n \n then 'Non-responders – Recent Opens Only'\n \n  when ( \n   (b.click_lastdate is null  and b.open_lastdate < to_char(add_months(current_date, -2), 'YYYY-MM-DD')) and (b.click_lastdate is null and b.open_lastdate >= to_char(add_months(current_date, -12), 'YYYY-MM-DD'))  \n ) \n \n then 'Non-responders – Lapsing Opens Only'\n \n \n   when ( \n   b.click_lastdate is null  and  b.open_lastdate < to_char(add_months(current_date, -12), 'YYYY-MM-DD')  \n ) \n \n then 'Non-responders – Lapsed Opens Only'\n \n \n    when ( \n   b.click_lastdate is null  and  b.open_lastdate is null   and moac.Last_MOAC_Engagement_Date is null and rew.Last_Rewards_Engagement_Date is null and care.Last_Careline_Engagement_Date is null \n ) \n \n then 'Non-responders - Never engaged'\n \n \n \n \n else 'ERROR' end  as Email_Cluster_New\n \n \nfrom ${Database}.live.cid_sma a\nleft join ${Database}.live.sma_engagement_levels b on a.cid = b.cid\nleft join (select  cid,\n                  sum(case when sent_flag = 1 and suppress_flag = 0 and bounce_flag = 0 then 1 else 0 end) as delivered,\n                  sum(case when open_qty > 0 or  click_qty > 0 then 1 else 0 end) as engaged,\n                  max(case when sent_flag = 1 and suppress_flag = 0 and bounce_flag = 0 then sent_date else null end) as last_delivered_date,\n                  coalesce(case when sum(case when sent_date >= add_months(current_date,-3) then sent_flag else 0 end)=0 then null else cast(sum(case when open_lastdate >= add_months(current_date,-3) then sent_flag else 0 end) as decimal(6,2)) / sum(case when sent_date >= add_months(current_date,-3) then sent_flag else 0 end) end,0)  as openrate3m\n                  from  ${Database}.live.sma_engagement_levels_messages\n                  group by cid) c on a.cid = c.cid\nleft join (select  cid,\n                  max(to_date(opened_date,'dd/mm/yyyy')) as last_careline_date\nfrom     ${Database}.live.cid_sma_careline\ngroup by 1) careline on a.cid = careline.cid\nleft join (\n           select   cid\n           from     ${Database}.temp.names_sma\n           where    source = 'insiders engagement'\n           and      source_date >= add_months(current_date,-3)\n           group by 1\n         ) insiders on a.cid = insiders.cid\n         \n          left join ( select distinct \n           cid,max(source_date) as Last_MOAC_Engagement_Date\n           from ${Database}.temp.names_sma\n           where source_file ilike 'MOAC.Profiles%'\n           group by cid ) moac on a.cid = moac.cid\nleft join ( select distinct cid,max (latest_receipt_submission_date) as Last_Rewards_Engagement_Date \n            from ${Database}.live.sma_shopmium_rewards\n            group by cid ) rew on a.cid = rew.cid \nleft join (select distinct  cid, max(to_date(opened_date,'dd/mm/yyyy')) as Last_Careline_Engagement_Date\nfrom     ${Database}.live.cid_sma_careline\ngroup by cid)  care on a.cid = care.cid\n;\n\n\n\n--ENGAGEMENT CLUSTER RULES\n--No longer being contacted   Not received an email in the last 3 months\n--Unreachable Inactive    Emails sent are not being delivered\n--Unengaged Inactive  Emails delivered, but not opened or clicked in last 3 months (includes those never opened)\n--Engaged (Non Responder) In the last 3 months, opened at least once but not clicked\n--Engaged Responder       In the last 3 months, clicked at least one email OR contacted careline\n--Highly Engaged Responder    In the last 3 months, opened / clicked at least 50% of emails\n--Most Engaged Responder  In the last 3 months, opened / clicked at least 50% of emails AND contacted careline\n--Not Contacted       Never emailed therefore not included within engagement segmentation\n\n\n/*\nupdate ${Database}.live.cid_sma c\nset c.email_cluster =ec.email_cluster\n  from ${Database}.temp.sma_email_clustering  ec\n  where ec.cid = c.cid\n;\n*/\n--replaced 18012022 LW\nupdate ${Database}.live.cid_sma c\nset c.email_cluster =ec.email_cluster\n  from (select distinct cid, \n        first_value(email_cluster) over (partition by cid order by email_cluster) as email_cluster\n        from ${Database}.temp.sma_email_clustering)  ec\n  where ec.cid = c.cid\n;\n\nupdate ${Database}.live.cid_sma c\nset c.email_cluster_new =ec.email_cluster_new\n  from (select distinct cid, \n        first_value(email_cluster_new) over (partition by cid order by email_cluster_new) as email_cluster_new\n        from ${Database}.temp.sma_email_clustering)  ec\n  where ec.cid = c.cid\n;\n\ndrop table ${Database}.temp.sma_email_clustering;\n\n\n/*********************************************************************\n    LAST ACTIVE DATE USED IN FS UNTIL DATA RETENTION WORK FINISHED\n*********************************************************************/\n\n\nupdate ${Database}.live.cid_sma c\nset c.last_active_date = act.last_active_date\nfrom (\n    select cid,\n        max(active_date) as last_active_date\n    from ( \n             select\n                 cid,\n                 max(dp_date) as active_date\n             from ${Database}.db.names_dp dp\n             inner join ${Database}.live.xref_name_urn x on x.name_urn = dp.name_urn\n             where brand_id = (select brand_id from ${Database}.db.ref_brand where brand = 'SMA')\n                 and (dp_mailable = 1 or dp_emailable = 1)\n             group by 1\n             union all\n             select\n                 cid, \n                 live_regdate as active_date\n             from ${Database}.live.cid_sma\n             where live_regdate is not null\n             union all\n             select\n                 cid,\n                 open_lastdate as active_date\n             from ${Database}.live.sma_engagement_levels\n             where open_lastdate is not null\n         ) active\n    where active.active_date is not null group by 1\n) act\n where  act.cid = c.cid\n;\n\n/**************************************************************************\n UPDATE LITTLE STEPS FLAG\n**************************************************************************/\n\nUPDATE ${Database}.live.cid_sma cs\nSET cs.little_steps_flag=1\nFROM\n        (select distinct c.cid, \n            first_value(d.dob) over (partition by c.cid order by d.dob desc) as youngest_dob\n         --select min(d.dob), max(d.dob)\n         from ${Database}.live.dependant d \n         join ${Database}.live.cid_sma c on d.name_urn = c.live_name_urn\n         join ${Database}.live.cid_details_sma cd on c.cid = cd.cid\n         where d.dob<=current_date\n                and d.dob>=add_months(current_date,-36)\n                and d.child_id <> 'D'\t\t\t--due dates not required\n                and c.emailable = 1\n                and cd.country in ('United Kingdom','')\n                and (cd.email in (select distinct lower(email) \n                                  from ${Database}.db.adestra_events_sma \n                                  where campaign_id in ('13505','13504','13449','13447','13753','13752','13751','13741','13662','13661','13660','13659','13658','13657','13656','13655','13654','13645','26824','29144','25273','25272','25009','24804')\n                                  and event_name ilike any ('%read%','%click%'))           \n                     or c.cid in (select distinct cid from ${Database}.live.cid_brand cb join ${Database}.live.ref_brand rb on cb.brand_id=rb.brand_id where rb.brand ilike '%little steps%' and cb.emailable = 1 and cb.brand_campaignable = 1) )\n         ) ls\n         where ls.cid=cs.cid and ls.youngest_dob<=add_months(current_date,-6)\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'sma_rollups',\n    '${Database}.live.cid_sma',\n    'Little Steps Flag',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_sma where little_steps_flag=1;   \n\n\n\n   /******************************************************************************************\n                                          COMMS HIST\n   ******************************************************************************************/\n\n\ndrop table if exists ${Database}.live.sma_comms_hist_lookup;\ncreate or replace table ${Database}.live.sma_comms_hist_lookup as\nselect\n    programme_id,\n    programme_name,\n    programme_status,\n    campaign_id,\n    campaign_name,\n    campaign_status,\n    promotion_id,\n    promotion_name,\n    promotion_status,\n    promotion_configuration_id,\n    promotion_date_last_ran,\n    promotion_date,\n    promotion_activity,\n    promotion_channel,\n    promotion_emailbroadcast,\n    promotion_emailmessage,\n    promotion_live_or_test,\n    promotion_message_type,\n    promotion_product,\n    promotion_offer,\n    promotion_target,\n    promotion_output_files,\n    promotion_output_file_type,\n    promotion_output_sequence,\n    cell_id,\n    cell_name,\n    cell_status,\n    cell_email_message,\n    cell_segment,\n    cell_target,\n    cell_master_category,\n    cell_category,\n    cell_subcategory,\n    pack_id,\n    pack_name,\n    pack_code,\n    pack_operational_code,\n    case pack_is_control when 1 then 'CONTROL' else 'PACK' end as pack_is_control,\n    pack_email_message,\n    pack_incentive,\n    pack_segment\nfrom ${Database}.db.sma_cascade_comms_lookup;\n\n\ndrop table if exists ${Database}.live.sma_comms_hist;\ncreate or replace table ${Database}.live.sma_comms_hist as\nselect\n    cid,\n    cc.pack_id,\n    cast(communication_date as date) as communication_date\nfrom ${Database}.db.sma_cascade_comms cc\njoin (\n         select distinct\n             nm.bbw_urn,\n             xr.cid\n         from ${Database}.db.names nm\n         join ${Database}.live.xref_name_urn xr on xr.name_urn = nm.name_urn\n         union all\n         select distinct\n             nm.old_bbw_urn as bbw_urn,\n             xr.cid\n         from ${Database}.db.xref_bbw_urn_sma nm\n         join ${Database}.live.xref_name_urn xr on xr.name_urn = nm.name_urn\n     ) xref on xref.bbw_urn = cc.customerid\njoin ${Database}.live.sma_comms_hist_lookup chl on chl.pack_id = cc.pack_id;\n\n\n\ninsert into ${Database}.db.build_log \nselect \n    'sma_rollups',\n    '${Database}.live.sma_comms_hist',\n    'Total Records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.sma_comms_hist;   \n\n\n------------------SHOPMIUM REWARDS------------------------\n\n\ndrop table if exists ${Database}.temp.sma_shopmium_rewards;\nCREATE OR REPLACE TABLE ${Database}.temp.sma_shopmium_rewards as\nselect distinct\n    cids.cid,\n\tproduct_bought,\n    trim(customers.sma_user_id) as umbraco_user_id,\n    first_value(trim(customers.firstname)) over (partition by trim(customers.sma_user_id) order by customers.receipt_submitted desc) as firstname,\n    first_value(trim(customers.lastname)) over (partition by trim(customers.sma_user_id) order by customers.receipt_submitted desc) as lastname,\n    first_value(trim(customers.email)) over (partition by trim(customers.sma_user_id) order by customers.receipt_submitted desc) as email,\n    first_value(customers.baby_dob) over (partition by trim(customers.sma_user_id) order by customers.receipt_submitted desc) as baby_dob,\n    first_value(customers.joining_date) over (partition by trim(customers.sma_user_id) order by customers.receipt_submitted desc) as joining_date,\n    first_value(trim(customers.country)) over (partition by trim(customers.sma_user_id) order by customers.receipt_submitted desc) as country,\n    summary.total_receipts_submitted,\n    first_value(customers.receipt_submitted) over (partition by trim(customers.sma_user_id) order by customers.receipt_submitted) as earliest_receipt_submission_date,\n    first_value(customers.receipt_submitted) over (partition by trim(customers.sma_user_id) order by customers.receipt_submitted desc) as latest_receipt_submission_date,\n    first_value(case when customers.product_bought ilike '%pro%' then customers.receipt_submitted end) over(partition by trim(customers.sma_user_id) order by case when customers.product_bought ilike '%pro%' then customers.receipt_submitted end desc nulls last) as latest_receipt_submission_date_bv_pro,\n    first_value(case when customers.product_bought ilike '%advanced%' then customers.receipt_submitted end) over(partition by trim(customers.sma_user_id) order by case when customers.product_bought ilike '%advanced%' then customers.receipt_submitted end desc nulls last) as latest_receipt_submission_date_bv_advance,\n    first_value(case when customers.product_bought ilike '%organic%' then customers.receipt_submitted end) over(partition by trim(customers.sma_user_id) order by case when customers.product_bought ilike '%organic%' then customers.receipt_submitted end desc nulls last) as latest_receipt_submission_date_bv_organic,\n    summary.total_rewards_value,\n    first_value(cast(total_cashback as decimal(18,2))) over (partition by trim(customers.sma_user_id) order by cast(customers.total_cashback as decimal(18,2)) desc) as total_cashback_redeemed,\n    first_value(customers.cashback_date) over (partition by trim(customers.sma_user_id) order by customers.cashback_date) as earliest_cashback_date,\n    first_value(customers.cashback_date) over (partition by trim(customers.sma_user_id) order by customers.cashback_date desc) as latest_cashback_date,\n    coalesce(milestone.milestone_2_receipt_sent,0) as milestone_2_receipt_sent,\n    coalesce(milestone.milestone_5_receipt_sent,0) as milestone_5_receipt_sent,\n    coalesce(milestone.milestone_8_receipt_sent,0) as milestone_8_receipt_sent,\n    coalesce(milestone.milestone_11_receipt_sent,0) as milestone_11_receipt_sent,\n    coalesce(milestone.milestone_14_receipt_sent,0) as milestone_14_receipt_sent,\n    coalesce(milestone.milestone_17_receipt_sent,0) as milestone_17_receipt_sent,\n    coalesce(trim(prods.FO_prods), '') as FO_products,\n    coalesce(trim(prods.GUM_prods), '') as GUM_products,\n    case when prods.sma_user_id is not null then 1 else 0 end as has_uploaded_receipt,\n    case when prods.sma_user_id is not null then 1 else 0 end as successful_upload\nfrom ${Database}.db.sma_shopmium_rewards customers\n--join ${Database}.temp.build_names_attributes b on cast(trim(customers.sma_user_id) as bigint) = b.umbraco_userno\n--                   and lower(b.source) regexp '.*reg_umb.*'\njoin ${Database}.temp.names_sma cids on customers.email = cids.email\ninner join\n    (select\n        trim(sma_user_id) as sma_user_id,\n        count(receipt_submitted) as total_receipts_submitted,\n        sum(case\n                when trim(country) = 'ROI' then offer_value * 0.87\n                else offer_value\n            end) as total_rewards_value\n    from\n        ${Database}.db.sma_shopmium_rewards\n    group by\n        trim(sma_user_id)\n    ) summary on trim(customers.sma_user_id) = summary.sma_user_id\nleft join \n(\n    select  distinct \n        trim(sma_user_id) as sma_user_id,\n        case when  (trim(FO_ADVANCED) > '' and trim(FO_ORGANIC) > '' and trim(FO_PRO) > '') then trim(FO_ADVANCED) || ', ' || trim(FO_ORGANIC) || ' or ' || trim(FO_PRO)\n             when  (trim(FO_ADVANCED) > '' and trim(FO_ORGANIC) > '') then trim(FO_ADVANCED) || ' or ' || trim(FO_ORGANIC)\n             when  (trim(FO_ADVANCED) > '' and trim(FO_PRO) > '') then trim(FO_ADVANCED) || ' or ' || trim(FO_PRO)\n             when  (trim(FO_ORGANIC) > '' and trim(FO_PRO) > '') then trim(FO_ORGANIC) || ' or ' || trim(FO_PRO)\n             when  (trim(FO_ADVANCED) > '') then trim(FO_ADVANCED) \n             when  (trim(FO_ORGANIC) > '') then trim(FO_ORGANIC) \n             when  (trim(FO_PRO) > '') then trim(FO_PRO) \n             end as FO_prods,\n        case when  (trim(GUM_ADVANCED) > '' and trim(GUM_ORGANIC) > '' and trim(GUM_PRO) > '') then trim(GUM_ADVANCED) || ', ' || trim(GUM_ORGANIC) || ' or ' || trim(GUM_PRO)\n             when  (trim(GUM_ADVANCED) > '' and trim(GUM_ORGANIC) > '') then trim(GUM_ADVANCED) || ' or ' || trim(GUM_ORGANIC)\n             when  (trim(GUM_ADVANCED) > '' and trim(GUM_PRO) > '') then trim(GUM_ADVANCED) || ' or ' || trim(GUM_PRO)\n             when  (trim(GUM_ORGANIC) > '' and trim(GUM_PRO) > '') then trim(GUM_ORGANIC) || ' or ' || trim(GUM_PRO)\n             when  (trim(GUM_ADVANCED) > '') then trim(GUM_ADVANCED) \n             when  (trim(GUM_ORGANIC) > '') then trim(GUM_ORGANIC) \n             when  (trim(GUM_PRO) > '') then trim(GUM_PRO) \n             end as GUM_prods\n       from\n           (\n           select distinct\n               sma_user_id,\n               max(trim(FO_PRO)) as FO_PRO,\n               max(trim(FO_ADVANCED)) as FO_ADVANCED,\n               max(trim(FO_ORGANIC)) as FO_ORGANIC,\n               max(trim(GUM_PRO)) as GUM_PRO,\n               max(trim(GUM_ADVANCED)) as GUM_ADVANCED,\n               max(trim(GUM_ORGANIC)) as GUM_ORGANIC\n               --condense into one record per user_id\n           from\n               (\n               select  distinct \n                   trim(elig.sma_user_id) as sma_user_id,\n                   trim(offer_description) as offer_description,\n                   case when eligible_FO_PRO = 1 and (coalesce(FOM_PRO_count, 0) = (next_FO_PRO_milestone - 1)) then trim(offer_description) else '' end as FO_PRO,\n                   case when eligible_FO_ADVANCED = 1 and (coalesce(FOM_ADVANCED_count, 0) = (next_FO_ADVANCED_milestone - 1)) then trim(offer_description) else '' end as FO_ADVANCED,\n                   case when eligible_FO_ORGANIC = 1 and (coalesce(FOM_Organic_count, 0) = (next_FO_ORGANIC_milestone - 1)) then trim(offer_description) else '' end as FO_ORGANIC,\n                   case when eligible_GUM_PRO = 1 and (coalesce(GUM_PRO_count, 0) = (next_GUM_PRO_milestone - 1)) then trim(offer_description) else '' end as GUM_PRO,\n                   case when eligible_GUM_ADVANCED = 1 and (coalesce(GUM_ADVANCED_count, 0) = (next_GUM_ADVANCED_milestone - 1)) then trim(offer_description) else '' end as GUM_ADVANCED,\n                   case when eligible_GUM_ORGANIC = 1 and (coalesce(GUM_Organic_count, 0) = (next_GUM_ORGANIC_milestone - 1)) then trim(offer_description) else '' end as GUM_ORGANIC\n                   --their email should only mention products that they have reached a new milestone for\n               from\n                   (\n                   select  distinct\n                       trim(a.sma_user_id) as sma_user_id,\n                       trim(offer_description) as offer_description,\n                       max(eligible_FO_PRO) as eligible_FO_PRO,\n                       max(next_FO_PRO_milestone) as next_FO_PRO_milestone,\n                       max(eligible_FO_ADVANCED) as eligible_FO_ADVANCED,\n                       max(next_FO_ADVANCED_milestone) as next_FO_ADVANCED_milestone,\n                       max(eligible_FO_ORGANIC) as eligible_FO_ORGANIC,\n                       max(next_FO_ORGANIC_milestone) as next_FO_ORGANIC_milestone,\n                       max(eligible_GUM_PRO) as eligible_GUM_PRO,\n                       max(next_GUM_PRO_milestone) as next_GUM_PRO_milestone,\n                       max(eligible_GUM_ADVANCED) as eligible_GUM_ADVANCED,\n                       max(next_GUM_ADVANCED_milestone) as next_GUM_ADVANCED_milestone,\n                       max(eligible_GUM_ORGANIC) as eligible_GUM_ORGANIC,\n                       max(next_GUM_ORGANIC_milestone) as next_GUM_ORGANIC_milestone\n                   from \n                        (\n                        select\n                             trim(sma_user_id) as sma_user_id,\n                             trim(offer_description) as offer_description,\n                             mod(cast(FO_per_receipt as int),3),\n                             mod(cast(GUM_per_receipt as int),3),\n                             case when mod(total_FO_PRO,3)= 2    then 1 else 0 end as eligible_FO_PRO,\n                             case when mod(total_FO_ADVANCED,3)= 2    then 1 else 0 end as eligible_FO_ADVANCED,\n                             case when mod(total_FO_ORGANIC,3)= 2     then 1 else 0 end as eligible_FO_ORGANIC,\n                             case when mod(total_GUM_PRO,3)= 2        then 1 else 0 end as eligible_GUM_PRO,\n                             case when mod(total_GUM_ADVANCED,3)= 2   then 1 else 0 end as eligible_GUM_ADVANCED,\n                             case when mod(total_GUM_ORGANIC,3)= 2    then 1 else 0 end as eligible_GUM_ORGANIC,\n                             cast((total_FO_PRO/3) + 1 as int) as next_FO_PRO_milestone,\n                             cast((total_FO_ADVANCED/3) + 1 as int) as next_FO_ADVANCED_milestone,\n                             cast((total_FO_ORGANIC/3) + 1 as int) as next_FO_ORGANIC_milestone,\n                             cast((total_GUM_PRO/3) + 1 as int) as next_GUM_PRO_milestone,\n                             cast((total_GUM_ADVANCED/3) + 1 as int) as next_GUM_ADVANCED_milestone,\n                             cast((total_GUM_ORGANIC/3) + 1 as int) as next_GUM_ORGANIC_milestone\n                         from \n                             (\n                             select \n                                trim(sma_user_id) as sma_user_id,\n                                substring(trim(offer_description), 43) as offer_description,\n                                trim(product_user) as product_user,\n                                sum(cast(fo_per_receipt as int)) as fo_per_receipt,\n                                sum(cast(gum_per_receipt as int)) as gum_per_receipt,\n                                sum(cast(case when lower(product_bought) regexp '.*pro follow-on.*' then FO_per_receipt end as int)) as total_FO_PRO,\n                                sum(cast(case when lower(product_bought) regexp '.*advanced follow-on.*' then FO_per_receipt end as int)) as total_FO_ADVANCED,\n                                sum(cast(case when lower(product_bought) regexp '.*organic follow-on.*' then FO_per_receipt end as int)) as total_FO_ORGANIC,\n                                sum(cast(case when lower(product_bought) regexp '.*pro growing up.*' then GUM_per_receipt end as int)) as total_GUM_PRO,\n                                sum(cast(case when lower(product_bought) regexp '.*advanced growing up.*' then GUM_per_receipt end as int)) as total_GUM_ADVANCED,\n                                sum(cast(case when lower(product_bought) regexp '.*organic growing up.*' then GUM_per_receipt end as int)) as total_GUM_ORGANIC\n                                from ${Database}.db.sma_shopmium_rewards\n                                where lower(offer_description) ilike '%5 back on every 3rd tin purchase of SMA%'\n                                group by 1,2,3\n                               )a\n                        ) a \n                        where (eligible_FO_PRO = 1 or eligible_FO_ADVANCED = 1 or eligible_FO_ORGANIC = 1 or eligible_GUM_PRO = 1 or eligible_GUM_ADVANCED = 1 or eligible_GUM_ORGANIC = 1)\n                        group by 1,2\n                    ) elig\n                left join (\n                    select ch.cid\n                    ,       b.umbraco_userno as sma_user_id\n                    ,       sum(case when pack_id in (2244,2245,2247,2248) then 1 else 0 end) as FOM_PRO_count \n                    ,       sum(case when pack_id in (2236,2238,2244,2245) then 1 else 0 end) as FOM_ADVANCED_count \n                    ,       sum(case when pack_id in (2238,2244,2246,2247) then 1 else 0 end) as FOM_Organic_count \n                    ,       sum(case when pack_id in (2251,2252,2254,2255) then 1 else 0 end) as GUM_PRO_count \n                    ,       sum(case when pack_id in (2249,2250,2251,2252) then 1 else 0 end) as GUM_ADVANCED_count \n                    ,       sum(case when pack_id in (2250,2251,2253,2254) then 1 else 0 end) as GUM_Organic_count \n                    from ${Database}.live.sma_comms_hist ch\n                    join ${Database}.live.xref_name_urn xr on xr.cid = ch.cid\n                    join ${Database}.temp.build_names_attributes b on b.name_urn = xr.name_urn\n                                                                  and lower(b.source) regexp '.*reg_umb.*'\n                    where pack_id in (2236,2238,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2255)\n                    group by 1,2\n                    ) comms on cast(comms.sma_user_id as varchar) = cast(elig.sma_user_id as varchar)\n                ) a\n                group by 1\n            ) a\n        ) prods on prods.sma_user_id = customers.sma_user_id\nleft join (\n           select    a.cid\n           ,         count(distinct case when lower(b.cell_name) regexp '.*2 receipts.*' then a.communication_date else null end) as milestone_2_receipt_sent\n           ,         count(distinct case when lower(b.cell_name) regexp '.*5 receipts.*' then a.communication_date else null end) as milestone_5_receipt_sent\n           ,         count(distinct case when lower(b.cell_name) regexp '.*8 receipts.*' then a.communication_date else null end) as milestone_8_receipt_sent\n           ,         count(distinct case when lower(b.cell_name) regexp '.*11 receipts.*' then a.communication_date else null end) as milestone_11_receipt_sent\n           ,         count(distinct case when lower(b.cell_name) regexp '.*14 receipts.*' then a.communication_date else null end) as milestone_14_receipt_sent\n           ,         count(distinct case when lower(b.cell_name) regexp '.*17 receipts.*' then a.communication_date else null end) as milestone_17_receipt_sent\n           from      ${Database}.live.sma_comms_hist a\n           inner join ${Database}.live.sma_comms_hist_lookup b on a.pack_id = b.pack_id\n           where     lower(b.cell_name) regexp '.*shopmium rewards milestone.*'\n           group by  1\n          ) milestone on cids.cid = milestone.cid\n;\n\nupdate ${Database}.temp.sma_shopmium_rewards\nset FO_products = replace(replace(product_bought,'SMA® ',''),'SMAÂ® ','')\nwhere product_bought ilike '%follow%';\n\n\nupdate ${Database}.temp.sma_shopmium_rewards\nset GUM_Products = replace(replace(product_bought,'SMA® ',''),'SMAÂ® ','')\nwhere product_bought ilike '%growing%';\n\ncreate or replace table ${Database}.live.sma_shopmium_rewards as\nselect \nCID,\nUMBRACO_USER_ID,\nFIRSTNAME,\nLASTNAME,\nEMAIL,\nBABY_DOB,\nJOINING_DATE,\nCOUNTRY,\nTOTAL_RECEIPTS_SUBMITTED,\nEARLIEST_RECEIPT_SUBMISSION_DATE,\nLATEST_RECEIPT_SUBMISSION_DATE,\nLATEST_RECEIPT_SUBMISSION_DATE_BV_PRO,\nLATEST_RECEIPT_SUBMISSION_DATE_BV_ADVANCE,\nLATEST_RECEIPT_SUBMISSION_DATE_BV_ORGANIC,\nTOTAL_REWARDS_VALUE,\nTOTAL_CASHBACK_REDEEMED,\nEARLIEST_CASHBACK_DATE,\nLATEST_CASHBACK_DATE,\nMILESTONE_2_RECEIPT_SENT,\nMILESTONE_5_RECEIPT_SENT,\nMILESTONE_8_RECEIPT_SENT,\nMILESTONE_11_RECEIPT_SENT,\nMILESTONE_14_RECEIPT_SENT,\nMILESTONE_17_RECEIPT_SENT,\nFO_PRODUCTS,\nGUM_PRODUCTS,\nHAS_UPLOADED_RECEIPT,\nSUCCESSFUL_UPLOAD\nfrom ${Database}.temp.sma_shopmium_rewards;\n\nmerge into ${Database}.live.sma_shopmium_rewards sr\nusing (\n        select distinct \n            cids.cid,\n            to_char(users.external_ref) as umbraco_user_id,\n            trim(users.first_name) as firstname,\n            trim(users.last_name) as lastname,\n            trim(users.email) as email,\n            users.registered_at as joining_date,\n            case when trim(users.preferred_language_key) = 'en_GB' then 'UK' end as country\n        from ${Database}.db.sma_shopmium_rewards_users users\n        --join ${Database}.temp.build_names_attributes b on cast(users.external_ref as bigint) = b.umbraco_userno\n        --                   and lower(b.source) regexp '.*reg_umb.*'\n        join ${Database}.temp.names_sma cids on users.email = cids.email\n        join ${Database}.db.sma_shopmium_rewards_coupons c on cast(c.uid as bigint) = cast(users.id as bigint)\n        where c.uid not in (\n                            select uid \n                            from ${Database}.db.sma_shopmium_rewards_coupons\n                            where trim(coupon_status) in ('admin_accepted','admin_paid') \n                            ) \n        ) na on na.cid = sr.cid\nwhen not matched then insert\n(\ncid,\numbraco_user_id,\nfirstname,\nlastname,\nemail,\nbaby_dob,\njoining_date,\ncountry,    \ntotal_receipts_submitted,\nearliest_receipt_submission_date,\nlatest_receipt_submission_date,\nlatest_receipt_submission_date_bv_pro,\nlatest_receipt_submission_date_bv_advance,\nlatest_receipt_submission_date_bv_organic,\ntotal_rewards_value,\ntotal_cashback_redeemed,\nearliest_cashback_date,\nlatest_cashback_date,\nmilestone_2_receipt_sent,\nmilestone_5_receipt_sent,\nmilestone_8_receipt_sent,\nmilestone_11_receipt_sent,\nmilestone_14_receipt_sent,\nmilestone_17_receipt_sent,\nFO_products,\nGUM_products,\nhas_uploaded_receipt,\nsuccessful_upload\n)\nvalues\n(\nna.cid,\nna.umbraco_user_id,\nna.firstname,\nna.lastname,\nna.email,\ncast(null as date), --baby_dob\nna.joining_date,\nna.country,    \n0, --as total_receipts_submitted,\ncast('1970-01-01' as date), --earliest_receipt_submission_date\ncast('1970-01-01' as date), --latest_receipt_submission_date\ncast('1970-01-01' as date), --latest_receipt_submission_date_bv_pro\ncast('1970-01-01' as date), --latest_receipt_submission_date_bv_advance\ncast('1970-01-01' as date), --latest_receipt_submission_date_bv_organic\n0, --total_rewards_value\n0, --total_cashback_redeemed\ncast('1970-01-01' as date), --earliest_cashback_date\ncast('1970-01-01' as date), --latest_cashback_date\n0, --milestone_2_receipt_sent\n0, --milestone_5_receipt_sent\n0, --milestone_8_receipt_sent\n0, --milestone_11_receipt_sent\n0, --milestone_14_receipt_sent\n0, --milestone_17_receipt_sent\n'', --as FO_products\n'',--as GUM_products\n1, --has_uploaded_receipt\n0 --successful_upload\n)\n;\n\n\nmerge into ${Database}.db.sma_member_hist hist\nusing (\n          select\n              c.cid,\n              current_timestamp as snapshot_date,\n              min(bbw_urn) as bbw_urn,\n              c.member,\n              case \n                  when bmps.cid is not null then 1 \n                  else 0 \n              end as baby_mps,\n              case\n                  when ch.name_urn is null then -1\n                  when floor(datediff(month,ch.youngest_child,current_date)) > 35 then 1\n                  else 0\n              end as child_over_3\n          from ${Database}.live.cid_sma c\n          left join (\n                        select distinct\n                            de.cid\n                        from ${Database}.live.dependant de\n                        inner join ${Database}.temp.cid_bmps bmps on de.cid = bmps.cid\n                        where de.dob between add_months(bmps.supp_date_min, -6) and add_months(bmps.supp_date_max, 6)\n                    ) bmps on c.cid = bmps.cid\n          left join (\n                        select\n                            name_urn,\n                            max(dob) as youngest_child\n                        from  ${Database}.live.dependant\n                        group by name_urn\n                    ) ch on c.live_name_urn = ch.name_urn\n\t\t  where (select count(*) from ${Database}.db.sma_member_hist where to_char(snapshot_date,'YYYY-MM') = to_char(current_date,'YYYY-MM')) = 0\n          group by 1,2,4,5,6\n      ) this_month on this_month.bbw_urn = hist.bbw_urn\n                  and this_month.member = hist.member\nwhen not matched then insert\n(\n    snapshot_date,\n    bbw_urn,\n    member,\n    baby_mps,\n    child_over_3\n)\nvalues\n(\n    this_month.snapshot_date,\n    this_month.bbw_urn,\n    this_month.member,\n    this_month.baby_mps,\n    this_month.child_over_3\n);\n\n\ninsert into ${Database}.db.build_log \nselect \n    'sma_rollups',\n    'Monthly Member Snapshot',\n    '*************************',\n    case when (select count(*) from ${Database}.db.sma_member_hist where to_char(snapshot_date,'YYYY-MM') = to_char(current_date,'YYYY-MM')) = 0 then 'Completed' else 'Not Run' end,\n    current_timestamp\n;\nmerge into ${Database}.db.sma_engagement_hist hist\nusing (\n        select  cid,\n                  current_timestamp as snapshot_date,\n            min(bbw_urn) as bbw_urn,\n                 email_cluster as engagement_cluster,\n                 emailable\n        from ${Database}.live.cid_sma\n        where member = 1\n\t\tand (select count(*) from  ${Database}.db.sma_engagement_hist where to_char(snapshot_date,'YYYY-MM') = to_char(current_date,'YYYY-MM')) = 0\n        group by 1,2,4,5\n      ) this_month on this_month.bbw_urn = hist.bbw_urn\n        and this_month.engagement_cluster = hist.engagement_cluster\n        and this_month.emailable = hist.emailable\nwhen not matched then insert\n(snapshot_date,bbw_urn,engagement_cluster,emailable)\nvalues\n(this_month.snapshot_date,this_month.bbw_urn,this_month.engagement_cluster,this_month.emailable);\n\n\ninsert into ${Database}.db.build_log \nselect \n    'sma_rollups',\n    'Monthly Engagement Snapshot',\n    '*************************',\n    case when (select count(*) from  ${Database}.db.sma_engagement_hist where to_char(snapshot_date,'YYYY-MM') = to_char(current_date,'YYYY-MM')) = 0 then 'Completed' else 'Not Run' end,\n    current_timestamp\n\t;\n\n\n/******************************************************************************************\n                                       FINISH PROC\n******************************************************************************************/\n\nupdate ${Database}.db.build_dates\nset sma_rollups = CURRENT_TIMESTAMP::timestamp_ntz\nwhere build_flag    = 'C';\n\ninsert into ${Database}.db.build_log \nselect \n    'sma_rollups',\n    '*************************',\n    '*************************',\n    'end of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;  \n  \n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 13 SMA Rollups'\n, \t\t'SCRIPT'\n, \t\t'FINISHED'\n;\n\n--alter warehouse set warehouse_size = 'Xsmall';"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196040":{"id":196040,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":272,"y":-16,"width":32,"height":32,"inputConnectorIDs":[196075],"outputSuccessConnectorIDs":[196068],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc9 Supps"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc9 Supps"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196041":{"id":196041,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":80,"y":-16,"width":32,"height":32,"inputConnectorIDs":[196069],"outputSuccessConnectorIDs":[196056],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc12 Rollups"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc12 Rollups"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196042":{"id":196042,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":256,"y":-96,"width":32,"height":32,"inputConnectorIDs":[196052],"outputSuccessConnectorIDs":[196063],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Log GM Family"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"insert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect\nCURRENT_TIMESTAMP::timestamp_ntz\n,'${Database}'\n,'BUILD'\n,'GraphMap Cust'\n,'SCRIPT'\n,'FINISHED'\n;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196043":{"id":196043,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-480,"y":-16,"width":32,"height":32,"inputConnectorIDs":[196071],"outputSuccessConnectorIDs":[196058,196074],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc 14 Cerelac rollups"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nProgram           : Nestle CERELAC Rollup\nAuthor            : John Moreland\nClient Name       : Nestle\nJob Number        :\nStandard Machine  : Kognitio\nAmendment History : v01 - JM 20180919 - Created\n\n******************************************************************************************/\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 14 Cerelac Rollups'\n, \t\t'SCRIPT'\n, \t\t'STARTED'\n;\n\n\n\n/******************************************************************************************\n                                     CERELAC ROLLUP\n******************************************************************************************/\n\ninsert into ${Database}.db.build_log\nselect\n    'cerelac_rollups',\n    '*************************',\n    '*************************',\n    'start of script',\n    current_timestamp;\n\n\n/**************************************************************************\nSMA VERSIONS OF NAMES\n**************************************************************************/\n\ndrop table if exists ${Database}.temp.names_cerelac;\n\nCREATE OR REPLACE TABLE ${Database}.temp.names_cerelac\nas\nselect\n    *\nfrom ${Database}.live.names\nwhere source_brand_id in (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'cerelac');\n\n\n/******************************************************************************************\n                                        cerelac ORDERS\n******************************************************************************************/\n\n\ndrop table if exists ${Database}.live.cerelac_orders;\n\nCREATE OR REPLACE TABLE ${Database}.live.cerelac_orders\nas\nselect\n    x.cid,\n    x.hid,\n    orders.*\nfrom ${Database}.temp.names_cerelac nm\ninner join ${Database}.db.cerelac_orders orders on nm.name_urn = orders.name_urn\ninner join ${Database}.live.xref_name_urn x on nm.name_urn = x.name_urn;\n-- 0 as db empty\n\ninsert into ${Database}.db.build_log\nselect\n    'cerelac_rollups',\n    'sma_live.cerelac_orders',\n    'total records',\n    cast(count(*) as varchar),\n    current_timestamp \nfrom ${Database}.live.cerelac_orders;\n\n\ndrop table if exists ${Database}.live.cerelac_order_details;\n\nCREATE OR REPLACE TABLE ${Database}.live.cerelac_order_details\nas\nselect\n    nm.cid,\n    nm.hid,\n    orders.*,\n    item_price * item_ordered as sale_price\nfrom ${Database}.temp.names_cerelac nm\ninner join ${Database}.db.cerelac_order_details orders on nm.name_urn = orders.name_urn\nwhere item_price <> 0;\n\ninsert into ${Database}.db.build_log\nselect\n    'cerelac_rollups',\n    'sma_live.cerelac_order_details',\n    'total records',\n    cast(count(*) as varchar),\n    current_timestamp \nfrom ${Database}.live.cerelac_order_details;\n\n\n-- ROLL UP\ndrop table if exists ${Database}.temp.build_rollups_cerelac_orders;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cerelac_orders\nas\nselect\n    od.cid,\n    count(distinct od.order_number) as cerelac_total_orders,\n    min(order_date) as cerelac_first_order_date,\n    max(order_date) as cerelac_last_order_date,\n    sum(sale_price) as cerelac_total_spend,\n    sum(sale_price)/cast(count(distinct od.order_number) as decimal(18,2)) as cerelac_aov,\n    sum(item_ordered) as cerelac_total_items,\n    cast(sum(item_ordered) as decimal(18,2))/cast(count(distinct od.order_number) as decimal(18,2)) as cerelac_avg_items_per_order\nfrom ${Database}.live.cerelac_order_details od\ninner join ${Database}.live.cerelac_orders o on od.order_number = o.order_number\ngroup by od.cid;\n\n\n/**************************************************************************\nCID TABLE\n**************************************************************************/\n\ndrop table if exists ${Database}.temp.build_rollups_cid_base_cerelac;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_base_cerelac\nas\nselect distinct\n    nm.cid,\n    first_value(nm.hid) over\n        (\n            partition by nm.cid\n            order by\n                nm.data_date desc nulls last,\n                nm.reg_date desc nulls last,\n                nm.source_date desc nulls last\n        ) as hid,\n    first_value(nm.bbw_urn) over\n        (\n            partition by nm.cid\n            order by\n                nm.data_date nulls last,\n                nm.reg_date nulls last,\n                nm.source_date nulls last\n        ) as bbw_urn,\n    first_value(nm.name_urn) over\n        (\n            partition by nm.cid\n            order by\n                nm.data_date desc nulls last,\n                nm.reg_date desc nulls last,\n                nm.source_date desc nulls last\n        ) as name_urn,\n    first_value(nm.reg_date) over\n        (\n            partition by nm.cid\n            order by nm.reg_date nulls last\n        ) as created_date,\n    first_value(nm.data_date) over\n        (\n            partition by nm.cid\n            order by nm.data_date desc nulls last\n        ) as updated_date,\n    first_value(nm.country_clean) over\n        (\n            partition by nm.cid\n            order by\n                cf.mailable_ignoring_dp desc nulls last,\n                nm.data_date desc nulls last,\n                nm.reg_date desc nulls last,\n                nm.source_date desc nulls last\n        ) as country,\n    first_value(case when nm.gender = '' then 'X' else nm.gender end) over\n        (\n            partition by nm.cid\n            order by nm.gender nulls last\n        ) as gender, -- min works assuming 'm','f','x' (gender conflicts are fixed below)\n    first_value(nm.postcode) over\n        (\n            partition by nm.cid\n            order by\n                cf.mailable_ignoring_dp desc nulls last,\n                nm.data_date desc nulls last,\n                nm.reg_date desc nulls last,\n                nm.source_date desc nulls last\n        ) as postcode,\n    first_value\n    (\n        case\n            when nm.dob = '2001-01-01' then cast(null as date)\n            when nm.dob >= current_date then cast(null as date)\n            when nm.dob <= '1901-01-01' then cast(null as date)\n            else nm.dob\n        end\n    ) over\n        (\n            partition by nm.cid\n            order by\n                nm.data_date desc nulls last,\n                nm.reg_date desc nulls last,\n                nm.source_date desc nulls last\n        ) as dob,\n    --    contactable status\n    first_value(cf.mailable_ignoring_dp) over\n        (\n            partition by nm.cid\n            order by cf.mailable_ignoring_dp desc nulls last\n        ) as mailable_ignoring_dp,\n    first_value(cf.emailable_ignoring_dp) over\n        (\n            partition by nm.cid\n            order by cf.emailable_ignoring_dp desc nulls last\n        ) as emailable_ignoring_dp,\n    --    which record for that customer is best to contact for each channel\n    first_value(nm.name_urn) over\n        (\n            partition by nm.cid\n            order by\n                cf.mailable_ignoring_dp desc nulls last,\n                nm.data_date desc nulls last,\n                nm.reg_date desc nulls last,\n                nm.source_date desc nulls last\n        ) as name_urn_to_mail_ignoring_dp,\n    first_value(nm.name_urn) over\n        (\n            partition by nm.cid\n            order by\n                cf.emailable_ignoring_dp desc nulls last,\n                nm.data_date desc nulls last,\n                nm.reg_date desc nulls last,\n                nm.source_date desc nulls last\n        ) as name_urn_to_email_ignoring_dp\nfrom ${Database}.temp.names_cerelac nm\ninner join ${Database}.temp.build_names_contact_flags cf on nm.name_urn = cf.name_urn;\n\n\n-- recreate cid brand but just for sma\n-- current cid brand uses cid_base to determine contactable_ignoring_dp flags.\n-- sma needs to only have the sma record considered for that.\ndrop table if exists ${Database}.temp.cid_brand_cerelac;\n\nCREATE OR REPLACE TABLE ${Database}.temp.cid_brand_cerelac\nas\nselect\n    ci.cid,\n    dp.dp_last_date as last_subscription_date_brand,\n    --    contactable status\n    first_value(case when dp_mailable = 1 and supp_unsubscribe_channel_mail = 0 then 1 else 0 end) over\n        (\n            partition by dp.cid, business_unit_id, division_id, brand_id\n            order by\n                dp_mailable desc nulls last,\n                supp_unsubscribe_channel_mail nulls last\n        ) as mailable,\n    first_value(case when dp_emailable = 1 and supp_unsubscribe_channel_email = 0 then 1 else 0 end) over\n        (\n            partition by dp.cid, business_unit_id, division_id, brand_id\n            order by\n                dp_emailable desc nulls last,\n                supp_unsubscribe_channel_mail nulls last\n        ) as emailable,\n    first_value(supp_unsubscribe_channel_mail) over\n        (\n            partition by dp.cid, business_unit_id, division_id, brand_id\n            order by supp_unsubscribe_channel_mail nulls last\n        ) as supp_unsubscribe_channel_mail,\n    first_value(case when supp_unsubscribe_channel_email = 1 then 1 else 0 end) over\n        (\n            partition by dp.cid, business_unit_id, division_id, brand_id\n            order by\n                supp_unsubscribe_channel_email nulls last\n        ) as supp_unsubscribe_channel_email\nfrom ${Database}.temp.build_rollups_cid_base_cerelac ci\ninner join ${Database}.live.names_supps_dp_brand_email dp on ci.cid = dp.cid\nwhere dp.brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'cerelac');\n\n\ndrop table if exists ${Database}.live.cid_cerelac;\n\nCREATE OR REPLACE TABLE ${Database}.live.cid_cerelac\nas\nselect distinct\n    c.cid,\n    c.hid,\n    c.bbw_urn,\n    c.name_urn,\n    c.gender,\n    c.postcode,\n    cast\n    (\n        case\n            when lower(c.country)='united kingdom' then left(upper(tbw.db.strchop(c.postcode,' ',1,1)||' '||left(tbw.db.strchop(c.postcode,' ',-1,-1),1)),10)\n            else ''\n        end as varchar(10)\n    ) as postal_sector,\n    cast\n    (\n        case\n            when lower(c.country)='united kingdom' then left(upper(tbw.db.strchop(c.postcode,' ',1,1)),10)\n            else ''\n        end as varchar(10)\n    ) as postal_district,\n    cast\n    (\n        upper\n        (\n            case\n                when lower(c.country)='united kingdom' then\n                    case\n                        when regexp_like(substring(c.postcode,2,1),'[a-zA-Z]') then left(c.postcode,2)\n                        else left(c.postcode,1)\n                    end\n                else ''\n            end\n        ) as char(2)\n    ) as postal_area,\n    c.country,\n    c.dob,\n    case when c.mailable_ignoring_dp = 1 then c.name_urn_to_mail_ignoring_dp else cast(null as varchar) end as name_urn_to_mail_ignoring_dp,\n    case when c.emailable_ignoring_dp = 1 then c.name_urn_to_email_ignoring_dp else cast(null as varchar) end as name_urn_to_email_ignoring_dp,\n    nm.cc_iso as country_iso,\n    case when c.mailable_ignoring_dp = 1 and cb.mailable = 1 then 1 else 0 end as mailable,\n    case when c.emailable_ignoring_dp = 1 and cb.emailable = 1 then 1 else 0 end as emailable,\n    c.mailable_ignoring_dp,\n    c.emailable_ignoring_dp,\n    cel_orders.cerelac_total_orders,\n    cel_orders.cerelac_first_order_date,\n    cel_orders.cerelac_last_order_date,\n    cel_orders.cerelac_total_spend,\n    cel_orders.cerelac_aov,\n    cel_orders.cerelac_total_items,\n    cel_orders.cerelac_avg_items_per_order,\n    store_flag.cerelac_website,\n    store_flag.cerelac_webshop\nfrom ${Database}.temp.build_rollups_cid_base_cerelac c\ninner join ${Database}.temp.cid_brand_cerelac cb on c.cid = cb.cid\ninner join ${Database}.temp.names_cerelac nm on c.name_urn = nm.name_urn\nleft join ${Database}.temp.build_rollups_cerelac_orders cel_orders on c.cid = cel_orders.cid\nleft join (\n              select\n                  cid,\n                  max(case when lower(source) <> 'reg_cere_1'  then 1 else 0 end) as cerelac_website,\n                  max(case when lower(source) = 'reg_cere_1'  then 1 else 0 end) as cerelac_webshop\n              from ${Database}.temp.names_cerelac\n              group by 1\n          ) store_flag on store_flag.cid = c.cid;\n\n\n/**************************************************************************\nCREATE CERELAC VERSION OF CID_DETAILS\n**************************************************************************/\n\ndrop table if exists ${Database}.live.cid_details_cerelac;\n\nCREATE OR REPLACE TABLE ${Database}.live.cid_details_cerelac\nas\nselect\n    ci.cid,\n    ci.hid,\n    coalesce(utm.name_urn, ute.name_urn, ci.name_urn) as name_urn,\n    cast(regexp_replace(coalesce(utm.title, ute.title, ma.title),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50)) as title,\n    cast(regexp_replace(coalesce(utm.firstname, ute.firstname, ma.firstname),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50)) as firstname,\n    cast(regexp_replace(coalesce(utm.lastname, ute.lastname, ma.lastname),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50)) as lastname,\n    --blank address if not mailable\n    cast(regexp_replace(coalesce(utm.add1,''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100)) as add1,\n    cast(regexp_replace(coalesce(utm.add2,''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100)) as add2,\n    cast(regexp_replace(coalesce(utm.add3,''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100)) as add3,\n    cast(regexp_replace(coalesce(utm.add4,''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100)) as add4,\n    cast(regexp_replace(coalesce(utm.add5,''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100)) as add5,\n    cast(regexp_replace(coalesce(utm.city,''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100)) as town,\n    cast(regexp_replace(coalesce(utm.state,''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100)) as county,\n    cast(regexp_replace(coalesce(utm.country_clean,ci.country),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100)) as country,\n    cast(regexp_replace(upper(coalesce(utm.postcode,ci.postcode)),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50)) as postcode,\n    cast(regexp_replace(coalesce(utm.formal_salutation, ute.formal_salutation, ma.formal_salutation),'[\\x00-\\x1F|\\x7F]','')as nvarchar(100)) as salutation,\n    cast(regexp_replace(coalesce(utm.informal_salutation, ute.informal_salutation, ma.informal_salutation),'[\\x00-\\x1F|\\x7F]','')as nvarchar(100)) as salutation_informal,\n    cast(null as varchar(255)) as salutation_firstname\nfrom ${Database}.live.cid_cerelac ci\nleft join ${Database}.temp.names_cerelac utm on ci.name_urn_to_mail_ignoring_dp = utm.name_urn\nleft join ${Database}.temp.names_cerelac ute on ci.name_urn_to_email_ignoring_dp = ute.name_urn\nleft join ${Database}.temp.names_cerelac ma on ci.name_urn = ma.name_urn;\n\n\n   /******************************************************************************************\n                                             FinISH PROC\n   ******************************************************************************************/\n\nupdate ${Database}.db.build_dates\nset cerelac_rollups = current_timestamp\nwhere build_flag = 'C';\n\n\ninsert into ${Database}.db.build_log\nselect\n    'cerelac_rollups',\n    '*************************',\n    '*************************',\n    'end of script',\n    current_timestamp;\n    \n    \ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 14 Cerelac Rollups'\n, \t\t'SCRIPT'\n, \t\t'FINISHED'\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196044":{"id":196044,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-176,"y":-16,"width":32,"height":32,"inputConnectorIDs":[196064],"outputSuccessConnectorIDs":[196070],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc 13b SMA Thirdparty"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nProgram           : Nestle daily SMA thirdparty processing\nAuthor            : Luke Dudley\nClient Name       : Nestle\nJob Number        :\nStandard Machine  : Kognitio\nAmendment History : v01 - LD 20200709 - Created\n******************************************************************************************/\n\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect  current_timestamp::timestamp_ntz\n,       '${Database}'\n,       'BUILD'\n,       'Proc 13b SMA Thirdparty'\n,       'SCRIPT'\n,       'STARTED'\n;\n\n\ninsert into ${Database}.db.build_log\nselect\n    'sma_3rd_party',\n    '*************************',\n    '*************************',\n    'start of script',\n    current_timestamp;\n\n\n-- ===========================================================================================\n--               CREATE BASE TABLE OF EVERYONE WHO IS FROM 3RD PARTY AND VALID\n-- ===========================================================================================\n\ncreate or replace table ${Database}.temp.sma_3rd_party_suppressions\nas\nselect distinct\n    xr.name_urn,\n    xr.email\nfrom ${Database}.live.names xr\nleft join ${Database}.db.sma_thirdparty ch on ch.name_urn = xr.name_urn\n                                          and cast(ch.extract_date as date) < current_date\nwhere (lower(xr.source) regexp '(.*)(reg_dnn|reg_umb|reg_gig)(.*)' and xr.source_brand_id = (select brand_id from ${Database}.db.ref_brand where trim(brand) = 'SMA'))\n    or ch.name_urn is not null;\n\n\ncreate or replace table ${Database}.temp.sma_3rd_party_extract_base_prep\nas\nselect\n    cs.*\nfrom ${Database}.live.cid_sources_sma cs\nleft join ${Database}.live.cid_sma ci on ci.cid = cs.cid\nwhere cs.registrationdate between date_trunc(month,date_trunc(month,current_date) - 1) and current_date\n    and (cs.source in ('REG_FAN','REG_MBO','REG_MPG','REG_MFM','REG_MFMAPP','REG_MOAC') or cs.source regexp 'REG_HER.*')\n    and cs.thirdparty = 1\n    and coalesce(ci.source_nestle,0) = 0\n    and cs.royalty_order = 1\n    and cs.valid = 1;\n\n\ncreate or replace table ${Database}.temp.sma_3rd_party_extract_base_raw\nas\nselect\n    nm.name_urn,\n    nm.bbw_urn,\n    nm.email,\n    nm.reg_date,\n    nm.source,\n    nm.source_date\nfrom ${Database}.db.names nm\ninner join ${Database}.temp.sma_3rd_party_extract_base_prep pr on pr.name_urn = nm.name_urn\nwhere (nm.source in ('REG_FAN','REG_MBO','REG_MPG','REG_MFM','REG_MFMAPP','REG_MOAC') or nm.source regexp 'REG_HER.*');\n\n\ncreate or replace table ${Database}.temp.sma_3rd_party_extract_base_dp\nas\nselect distinct\n    dp.name_urn,\n    first_value(dp.dp_emailable) over(partition by dp.name_urn order by dp.dp_date desc nulls last, dp.dp_emailable desc nulls last) as emailable\nfrom ${Database}.db.names_dp dp\ninner join ${Database}.temp.sma_3rd_party_extract_base_prep pr on pr.name_urn = dp.name_urn\nwhere dp.brand_id = (select brand_id from ${Database}.db.ref_brand where trim(brand) = 'SMA');\n\n\ncreate or replace table ${Database}.temp.sma_3rd_party_extract_base\nas\nselect\n    *\nfrom (\n         select\n             nm.name_urn,\n             nm.bbw_urn,\n             nm.email,\n             nm.reg_date,\n             nm.source,\n             row_number() over(partition by nm.name_urn order by nm.source_date asc nulls last, nm.bbw_urn asc nulls last) as rn\n         from ${Database}.temp.sma_3rd_party_extract_base_prep pr\n         inner join ${Database}.temp.sma_3rd_party_extract_base_raw nm on nm.name_urn = pr.name_urn\n         left join ${Database}.temp.sma_3rd_party_suppressions supp on supp.name_urn = nm.name_urn\n                                                                    or lower(supp.email) = lower(nm.email)\n         left join ${Database}.temp.sma_3rd_party_extract_base_dp dp on dp.name_urn = pr.name_urn\n         where dp.emailable = 1\n             and supp.name_urn is null\n     ) p\nwhere rn = 1;\n\n\ndrop table if exists ${Database}.temp.sma_3rd_party_extract_base_prep;\ndrop table if exists ${Database}.temp.sma_3rd_party_extract_base_raw;\ndrop table if exists ${Database}.temp.sma_3rd_party_extract_base_dp;\ndrop table if exists ${Database}.temp.sma_3rd_party_suppressions;\n\n\n-- ===========================================================================================\n--                         WRITE TO COMMS HISTORY TABLES FOR REFERENCE\n-- ===========================================================================================\n\n-- Remove records inserted today in case of a rerun\ndelete\nfrom ${Database}.db.sma_thirdparty\nwhere cast(extract_date as date) = current_date;\n\n\n-- Insert new records\ninsert into ${Database}.db.sma_thirdparty\n(\n    name_urn,\n    bbw_urn,\n    extract_date,\n    sent_flag,\n    source,\n    due_date_flag,\n    child_stage\n)\nselect\n    name_urn,\n    bbw_urn,\n    current_timestamp as extract_date,\n    1,\n    source,\n    0,\n    ''\nfrom ${Database}.temp.sma_3rd_party_extract_base;\n\n\n-- ===========================================================================================\n--                   CREATE FINAL OUTPUT TABLES FOR BUILD TO WRITE OUT\n-- ===========================================================================================\n\ncreate or replace table ${Database}.jobs.sma_3rd_party_extract_out\nas\nselect\n    ch.bbw_urn,\n    nm.email,\n    'https://www.smababy.co.uk' as landing_url,\n    cs.babyclubjoinedreference as joined_reference,\n    nm.title,\n    nm.firstname,\n    nm.lastname,\n    max(decode(cd.child_order,0,cd.dob,'')) as duedate,\n    max(decode(cd.child_order,1,cd.dob,'')) as dob1,\n    max(decode(cd.child_order,1,cd.gender,'')) as gender1,\n    max(decode(cd.child_order,1,cd.name,'')) as name1,\n    max(decode(cd.child_order,2,cd.dob,'')) as dob2,\n    max(decode(cd.child_order,2,cd.gender,'')) as gender2,\n    max(decode(cd.child_order,2,cd.name,'')) as name2,\n    max(decode(cd.child_order,3,cd.dob,'')) as dob3,\n    max(decode(cd.child_order,3,cd.gender,'')) as gender3,\n    max(decode(cd.child_order,3,cd.name,'')) as name3,\n    'www.smababy.co.uk/finalise-registration/?T=' as url\nfrom ${Database}.db.sma_thirdparty ch\ninner join ${Database}.live.names nm on nm.name_urn = ch.name_urn\ninner join ${Database}.live.cid_sources_sma cs on cs.name_urn = ch.name_urn\nleft join (\n              select\n                  name_urn,\n                  coalesce(to_char(dob,'DD/MM/YY'),'') as dob,\n                  trim(decode(coalesce(gender,''),'','Unknown',initcap(gender))) as gender,\n                  trim(decode(coalesce(firstname,''),'','Baby',initcap(firstname))) as name,\n                  case\n                      when dob > current_date then 0\n                      else row_number() over (partition by name_urn order by case when dob > current_date then 1 else 0 end, dob desc nulls last)\n                  end as child_order\n              from ${Database}.live.dependant\n          ) cd on cd.name_urn = ch.name_urn\nwhere ch.nestle_return_urn is null\ngroup by 1,2,3,4,5,6,7;\n\n\n-- ===========================================================================================\n--          3RD PARTY REPORTS\n-- ===========================================================================================\n\n-- ===========================================================================================\n--          UPDATE REPORT TABLE WITH COUNTS\n-- ===========================================================================================\n\ncreate or replace table ${Database}.temp.sma_3rd_party_name_urn_level\nas\nselect distinct\n    cs.cid,\n    cs.name_urn,\n    cs.babyclubjoinedreference,\n    case\n        when ch.name_urn is not null then 'New'\n        when cs.valid = 0 then 'Invalid'\n        else 'Dupe'\n    end as flag,\n    cast(cs.registrationdate as date) as reg_date,\n    cs.source_date,\n    yc.dob as youngest_dob\nfrom ${Database}.live.cid_sources_sma cs\nleft join ${Database}.db.sma_thirdparty ch on ch.name_urn = cs.name_urn\nleft join (\n              select\n                  child_urn as name_urn,\n                  max(dob) as dob\n              from ${Database}.live.dependant\n              group by 1\n          ) yc on yc.name_urn = cs.name_urn\nwhere (cs.source in ('REG_FAN','REG_MBO','REG_MPG','REG_MFM','REG_MFMAPP','REG_MOAC') or cs.source regexp 'REG_HER.*')\n    and cast(cs.registrationdate as date) >= case\n                                                 when dayofmonth(current_date) <= 5 then date_trunc(month,add_months(current_date,-1))\n                                                 else date_trunc(month,current_date)\n                                             end;\n\n\nmerge into ${Database}.db.sma_3rd_party_daily_report report\nusing (\n          select\n              case\n                  when babyclubjoinedreference = 'Captain Mums' then 'LG-Captain Mums'\n                  when babyclubjoinedreference = 'Mum and Baby' then 'SMA Mums and Baby'\n                  when babyclubjoinedreference = 'FanFinders' then 'SMA Fanfinders'\n                  when lower(babyclubjoinedreference) regexp 'her.*' then babyclubjoinedreference\n                  when lower(babyclubjoinedreference) regexp '.*mummypages.*' then 'SMA '||babyclubjoinedreference\n                  else babyclubjoinedreference\n              end as source,\n              case\n                  when reg_date < youngest_dob then 'A'\n                  when reg_date >= youngest_dob and add_months(reg_date,-3) <= youngest_dob then 'P0-3'\n                  else 'P3+'\n              end as babystage_at_reg,\n              to_char(reg_date,'YYYYMM') as reg_month,\n              count(*) as total,\n              count(distinct case when flag = 'New' then name_urn end) as new_total,\n              count(distinct case when flag = 'Previously Lapsed' then name_urn end) as prev_lapsed_total,\n              count(distinct case when flag = 'Dupe' then name_urn end) as dupe_total,\n              count(distinct case when flag = 'Invalid' then name_urn end) as invalid_total\n          from ${Database}.temp.sma_3rd_party_name_urn_level\n          group by 1,2,3\n      ) y on y.source = report.source\n         and y.reg_month = report.reg_month\n         and y.babystage_at_reg = report.babystage_at_reg\nwhen not matched then insert\n(\n    source,\n    babystage_at_reg,\n    reg_month,\n    total,\n    new_total,\n    prev_lapsed_total,\n    dupe_total,\n    invalid_total\n)\nvalues\n(\n    y.source,\n    y.babystage_at_reg,\n    y.reg_month,\n    y.total,\n    y.new_total,\n    y.prev_lapsed_total,\n    y.dupe_total,\n    y.invalid_total\n)\nwhen matched then update\nset report.total = y.total,\n    report.new_total = y.new_total,\n    report.prev_lapsed_total = y.prev_lapsed_total,\n    report.dupe_total = y.dupe_total,\n    report.invalid_total = y.invalid_total;\n\n\n-- ===========================================================================================\n--          FORMAT FOR EXCEL TEMPLATE\n-- ===========================================================================================\n\ncreate or replace table ${Database}.temp.sma_3rd_party_daily_report_format_basic\nas\nselect\n    total.source as tab,\n    total.reg_month,\n    replace(total.source,'LG-','') as source,\n    left(total.reg_month,4) as year,\n    to_char(to_date(total.reg_month||'01','YYYYMMDD'),'MMMM') as month,\n    total.total,\n    coalesce(ant.new_total,0) + coalesce(ant.prev_lapsed_total,0) + coalesce(post.new_total,0) + coalesce(post.prev_lapsed_total,0) as new_total,\n    coalesce(ant.invalid_total,0) + coalesce(post.invalid_total,0) + coalesce(ant.dupe_total,0) + coalesce(post.dupe_total,0) as inv_total,\n    coalesce(ant.new_total,0) + coalesce(ant.prev_lapsed_total,0) as ant_val_total,\n    (coalesce(cast(ant.new_total as decimal(10,4)),0) + coalesce(cast(ant.prev_lapsed_total as decimal(10,4)),0))/cast(total.total as decimal(10,4)) as ant_val_perc,\n    coalesce(ant.dupe_total,0) as ant_dup_total,\n    coalesce(cast(ant.dupe_total as decimal(10,4))/cast(total.total as decimal(10,4)),0) as ant_dup_perc,\n    coalesce(ant.invalid_total,0) as ant_inval_total,\n    coalesce(cast(ant.invalid_total as decimal(10,4))/cast(total.total as decimal(10,4)),0) as ant_inval_perc,\n    coalesce(post.new_total,0) + coalesce(post.prev_lapsed_total,0) as post_val_total,\n    (coalesce(cast(post.new_total as decimal(10,4)),0) + coalesce(cast(post.prev_lapsed_total as decimal(10,4)),0))/cast(total.total as decimal(10,4)) as post_val_perc,\n    coalesce(post.dupe_total,0) as post_dup_total,\n    coalesce(cast(post.dupe_total as decimal(10,4))/cast(total.total as decimal(10,4)),0) as post_dup_perc,\n    coalesce(post.invalid_total,0) as post_inval_total,\n    coalesce(cast(post.invalid_total as decimal(10,4))/cast(total.total as decimal(10,4)),0) as post_inval_perc\nfrom (\n         select\n             source,\n             reg_month,\n             sum(total) as total\n         from ${Database}.db.sma_3rd_party_daily_report\n         where babystage_at_reg is not null\n         group by 1,2\n     ) total\nleft join (select * from ${Database}.db.sma_3rd_party_daily_report where babystage_at_reg = 'A') ant on total.source = ant.source\n                                                                                                    and total.reg_month = ant.reg_month\nleft join (\n              select\n                  reg_month,\n                  source,\n                  sum(total) as total,\n                  sum(new_total) as new_total,\n                  sum(prev_lapsed_total) as prev_lapsed_total,\n                  sum(dupe_total) as dupe_total,\n                  sum(invalid_total) as invalid_total\n              from ${Database}.db.sma_3rd_party_daily_report\n              where lower(babystage_at_reg) regexp '.*p.*'\n              group by 1,2\n          ) post on total.source = post.source\n                and total.reg_month = post.reg_month\nwhere to_date(total.reg_month||'01','YYYYMMDD') >= '2016-12-01'\norder by\n    source,\n    to_date(total.reg_month||'01','YYYYMMDD');\n\n\ncreate or replace table ${Database}.temp.sma_3rd_party_daily_report_format_coreg\nas\nselect\n    total.source as tab,\n    total.reg_month,\n    replace(total.source,'LG-','') as source,\n    left(total.reg_month,4) as year,\n    to_char(to_date(total.reg_month||'01','YYYYMMDD'),'MMMM') as month,\n    total.total,\n    coalesce(ant.new_total,0) + coalesce(ant.prev_lapsed_total,0) + coalesce(post1.new_total,0) + coalesce(post1.prev_lapsed_total,0) + coalesce(post3.new_total,0) + coalesce(post3.prev_lapsed_total,0) as new_total,\n    coalesce(ant.invalid_total,0) + coalesce(post1.invalid_total,0)+coalesce(post3.invalid_total,0) + coalesce(ant.dupe_total,0)+coalesce(post1.dupe_total,0) + coalesce(post3.dupe_total,0) as inv_total,\n    coalesce(ant.new_total,0) + coalesce(ant.prev_lapsed_total,0) as ant_val_total,\n    (coalesce(cast(ant.new_total as decimal(10,4)),0) + coalesce(cast(ant.prev_lapsed_total as decimal(10,4)),0))/cast(total.total as decimal(10,4)) as ant_val_perc,\n    coalesce(ant.dupe_total,0) as ant_dup_total,\n    coalesce(cast(ant.dupe_total as decimal(10,4))/cast(total.total as decimal(10,4)),0) as ant_dup_perc,\n    coalesce(ant.invalid_total,0) as ant_inval_total,\n    coalesce(cast(ant.invalid_total as decimal(10,4))/cast(total.total as decimal(10,4)),0) as ant_inval_perc,\n    coalesce(post1.new_total,0) + coalesce(post1.prev_lapsed_total,0) as post1_val_total,\n    (coalesce(cast(post1.new_total as decimal(10,4)),0) + coalesce(cast(post1.prev_lapsed_total as decimal(10,4)),0))/cast(total.total as decimal(10,4)) as post1_val_perc,\n    coalesce(post1.dupe_total,0) as post1_dup_total,\n    coalesce(cast(post1.dupe_total as decimal(10,4))/cast(total.total as decimal(10,4)),0) as post1_dup_perc,\n    coalesce(post1.invalid_total,0) as post1_inval_total,\n    coalesce(cast(post1.invalid_total as decimal(10,4))/cast(total.total as decimal(10,4)),0) as post1_inval_perc,\n    coalesce(post3.new_total,0) + coalesce(post3.prev_lapsed_total,0) as post3_val_total,\n    (coalesce(cast(post3.new_total as decimal(10,4)),0)+coalesce(cast(post3.prev_lapsed_total as decimal(10,4)),0))/cast(total.total as decimal(10,4)) as post3_val_perc,\n    coalesce(post3.dupe_total,0) as post3_dup_total,\n    coalesce(cast(post3.dupe_total as decimal(10,4))/cast(total.total as decimal(10,4)),0) as post3_dup_perc,\n    coalesce(post3.invalid_total,0) as post3_inval_total,\n    coalesce(cast(post3.invalid_total as decimal(10,4))/cast(total.total as decimal(10,4)),0) as post3_inval_perc\nfrom (\n         select\n             source,\n             reg_month,\n             sum(total) as total\n         from ${Database}.db.sma_3rd_party_daily_report\n         where babystage_at_reg is not null\n         group by 1,2\n     ) total\nleft join (select * from ${Database}.db.sma_3rd_party_daily_report where babystage_at_reg = 'A') ant on total.source = ant.source\n                                                                                                    and total.reg_month = ant.reg_month\nleft join (select * from ${Database}.db.sma_3rd_party_daily_report where babystage_at_reg = 'P0-3') post1 on total.source = post1.source\n                                                                                                         and total.reg_month = post1.reg_month\nleft join (select * from ${Database}.db.sma_3rd_party_daily_report where babystage_at_reg = 'P3+') post3 on total.source = post3.source\n                                                                                                        and total.reg_month = post3.reg_month\nwhere to_date(total.reg_month||'01','YYYYMMDD') >= '2016-12-01'\norder by\n    source,\n    to_date(total.reg_month||'01','YYYYMMDD');\n\n\n/******************************************************************************************\n                                          FINISH PROC\n******************************************************************************************/\n\ninsert into ${Database}.db.build_log\nselect\n    'sma_3rd_party',\n    '*************************',\n    '*************************',\n    'end of script',\n    current_timestamp;\n\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect  current_timestamp::timestamp_ntz\n,       '${Database}'\n,       'BUILD'\n,       'Proc 13b SMA Thirdparty'\n,       'SCRIPT'\n,       'FINISHED'\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196045":{"id":196045,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":-336,"y":-16,"width":32,"height":32,"inputConnectorIDs":[196070],"outputSuccessConnectorIDs":[196071],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SMA Thirdparty Processing"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SMA Thirdparty Processing"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196046":{"id":196046,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-640,"y":-192,"width":32,"height":32,"inputConnectorIDs":[196072],"outputSuccessConnectorIDs":[196096],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"IRWF Supps Inserts"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"insert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect\n    current_timestamp::timestamp_ntz,\n    '${Database}',\n    'BUILD',\n    'SARS INSERT',\n    'SARS INSERT',\n    'STARTED';\n\n\n/******************************************************************************************/\n\n--create temp table to deal with Nestle having multiple brands on single record\ncreate or replace table ${Database}.temp.sar_nestle\nas\nselect *, 'nestle' as nestle_brand from tbw.db.sar where dc_allnestle = 1\nunion all\nselect *, 'purina' as nestle_brand from tbw.db.sar where dc_purina = 1\nunion all\nselect *, 'sma' as nestle_brand from tbw.db.sar where dc_sma = 1\nunion all\nselect *, 'healthscience' as nestle_brand from tbw.db.sar where dc_healthscience = 1\nunion all\nselect *, 'cereals' as nestle_brand from tbw.db.sar where dc_cereals = 1\nunion all\nselect *, 'waters' as nestle_brand from tbw.db.sar where dc_waters = 1\nunion all\nselect *, 'hcp' as nestle_brand from tbw.db.sar where dc_hcp = 1\nunion all\nselect *, 'cerelac' as nestle_brand from tbw.db.sar where dc_cerelac = 1\nunion all\nselect *, 'carnation' as nestle_brand from tbw.db.sar where dc_carnation = 1\nunion all\nselect *, 'ndg' as nestle_brand from tbw.db.sar where dc_ndg = 1\nunion all\nselect *, 'beverages' as nestle_brand from tbw.db.sar where dc_nukbeverage = 1\nunion all\nselect *, 'confectionery' as nestle_brand from tbw.db.sar where dc_nukconfectionery = 1\nunion all\nselect *, 'food' as nestle_brand from tbw.db.sar where dc_nukfood = 1\nunion all\nselect *, 'professional' as nestle_brand from tbw.db.sar where dc_nukprofessional = 1\nunion all\nselect *, brand as nestle_brand from tbw.db.sar where client = 'nuk' and dc_allnestle + dc_purina + dc_sma + dc_healthscience + dc_cereals + dc_waters + dc_hcp + dc_cerelac + dc_carnation + dc_ndg + dc_nukbeverage + dc_nukconfectionery + dc_nukfood + dc_nukprofessional = 0;\n\n\n------------------------------------------------\n--SARS\n------------------------------------------------\n\n-- Insert records into sar table where requested sar\ninsert into ${Database}.db.supps_sar\nselect distinct\n    supp_id as supp_urn,\n    data_date,\n    source,\n    source_other,\n    rec_firstname,\n    rec_lastname,\n    rec_identity,\n    rec_identity_other,\n    title,\n    title_other,\n    firstname,\n    lastname,\n    email1,\n    email2,\n    add1,\n    add2,\n    add3,\n    add4,\n    postcode,\n    phone,\n    mobile,\n    dob,\n    customer_id,\n    info,\n    previous,\n    prev_title,\n    prev_firstname,\n    prev_lastname,\n    prev_add1,\n    prev_add2,\n    prev_add3,\n    prev_add4,\n    prev_postcode,\n    prev_email,\n    source_file,\n    source_date\nfrom ${Database}.temp.sar_nestle\nwhere supp_id not in (select supp_id from tbw.db.sar_history where request = 'SAR') --if it's in the history table then it's been dealt with\n    and req_sar > 0\n    and lower(client) = 'nuk'; --all part of the all in one\n\n\n--insert into tbw.db.sar_history the id's that have been processed\ninsert into tbw.db.sar_history\nselect\n    supp_id,\n    client,\n    nestle_brand,\n    'SAR' as request,\n    current_date as actioned_date\nfrom ${Database}.temp.sar_nestle\nwhere supp_id not in (select supp_id from tbw.db.sar_history where request = 'SAR')\n    and req_sar > 0\n    and lower(client) = 'nuk';\n\n\n------------------------------------------------\n--RTBF\n------------------------------------------------\n\n-- Insert records into manual suppression table where requested erasure (actually erasure process not in place yet)\ninsert into ${Database}.db.supps_manual\nselect distinct\n    cast(row_number() over(order by 1) as int)+(select max(supp_urn) from ${Database}.db.supps_manual) as supp_urn,\n    data_date,\n    title,\n    firstname,\n    lastname,\n    '' as company,\n    add1,\n    add2,\n    add3,\n    add4,\n    '' as add5,\n    postcode,\n    'UK' as country,\n    email1 as email,\n    phone as phone_home,\n    mobile as phone_mobile,\n    1 as manual_channel_mail,\n    1 as manual_channel_email,\n    1 as manual_channel_phone,\n    'IR Web Form RTBF' as source,\n    source_file,\n    cast(supp_id as varchar(30)) as source_urn,\n    source_date\nfrom ${Database}.temp.sar_nestle\nwhere supp_id not in (select supp_id from tbw.db.sar_history where request = 'RTBF') --if it's in the history table then it's been dealt with\n    and req_erasure > 0\n    and lower(client) = 'nuk';\n\n\ninsert into ${Database}.db.supps_manual\nselect distinct\n    cast(row_number() over(order by 1) as int)+(select max(supp_urn) from ${Database}.db.supps_manual) as supp_urn,\n    data_date,\n    title,\n    firstname,\n    lastname,\n    '' as company,\n    add1,\n    add2,\n    add3,\n    add4,\n    '' as add5,\n    postcode,\n    'UK' as country,\n    email2 as email,\n    phone as phone_home,\n    mobile as phone_mobile,\n    1 as manual_channel_mail,\n    1 as manual_channel_email,\n    1 as manual_channel_phone,\n    'IR Web Form RTBF' as source,\n    source_file,\n    cast(supp_id as varchar(30)) as source_urn,\n    source_date\nfrom ${Database}.temp.sar_nestle\nwhere supp_id not in (select supp_id from tbw.db.sar_history where request = 'RTBF') --if it's in the history table then it's been dealt with\n    and req_erasure > 0\n    and email2 > ''\n    and lower(client) = 'nuk';\n\n\n--insert into tbw.db.sar_history the id's that have been processed\ninsert into tbw.db.sar_history\nselect \n    supp_id,\n    client,\n    nestle_brand,\n    'RTBF' as request,\n    current_date as actioned_date\nfrom ${Database}.temp.sar_nestle\nwhere supp_id not in (select supp_id from tbw.db.sar_history where request = 'RTBF')\n    and req_erasure > 0\n    and lower(client) = 'nuk';\n\n\n------------------------------------------------\n--Withdrawal of Consent\n------------------------------------------------\n\n-- Insert records into unsubscribe table where requested consent withdrawal\ninsert into ${Database}.db.supps_unsubscribe\nselect distinct\n    cast(row_number() over(order by 1) as int)+(select max(supp_urn) from ${Database}.db.supps_unsubscribe) as supp_urn,\n    data_date,\n    title,\n    firstname,\n    lastname,\n    '' as company,\n    add1,\n    add2,\n    add3,\n    add4,\n    '' as add5,\n    postcode,\n    'UK' as country,\n    email1 as email,\n    phone as phone_home,\n    mobile as phone_mobile,\n    case when dp_mail  ilike '%Opt out%' then 1 else cast(null as int) end as unsubscribe_channel_mail,\n    case when dp_email ilike '%Opt out%' then 1 else cast(null as int) end as unsubscribe_channel_email,\n    case when dp_phone ilike '%Opt out%' then 1 else cast(null as int) end as unsubscribe_channel_phone,\n    data_controller_id,\n    brand_id,\n    campaign_reference as unsub_campaign,\n    'IR Web Form WITHC' as unsub_event,\n    cast(data_date as timestamp) as unsub_timestamp,\n    'IR Web Form WITHC' as source,\n    source_file,\n    cast(supp_id as varchar(30)) as source_urn,\n    source_date\nfrom (\n         select\n             dc.data_controller_id,\n             br.brand_id,\n             sar.*\n         from ${Database}.temp.sar_nestle sar\n         left join ${Database}.db.ref_data_controller dc on dc.data_controller_id = case\n                                                                                        when sar.nestle_brand = 'purina' then 5\n                                                                                        when sar.nestle_brand = 'cereals' then 7\n                                                                                        when sar.nestle_brand = 'waters' then 3\n                                                                                        else 1\n                                                                                    end\n         left join ${Database}.db.ref_division dv on dv.division = case\n                                                                       when sar.nestle_brand = 'healthscience' then 'Nestle Health Science'\n                                                                       when sar.nestle_brand = 'beverages' then 'Beverage'\n                                                                       when sar.nestle_brand = 'confectionery' then 'Confectionery'\n                                                                       when sar.nestle_brand = 'food' then 'Food'\n                                                                       when sar.nestle_brand = 'professional' then 'Nestle Professional'\n                                                                       else ''\n                                                                   end\n         left join ${Database}.db.ref_brand br on br.brand = case\n                                                                 when sar.nestle_brand = 'sma' then 'SMA'\n                                                                 when sar.nestle_brand = 'hcp' then 'HCP'\n                                                                 when sar.nestle_brand = 'cerelac' then 'Cerelac'\n                                                                 when sar.nestle_brand = 'carnation' then 'Carnation'\n                                                                 when sar.nestle_brand = 'ndg' then 'Dolce Gusto'\n                                                                 else ''\n                                                             end\n                                               or br.division_id = dv.division_id\n     ) sar\nwhere supp_id not in (select supp_id from tbw.db.sar_history where request = 'WITHC') --if it's in the history table then it's been dealt with\n    and req_withdrawal > 0\n    and lower(client) = 'nuk';\n\n\ninsert into ${Database}.db.supps_unsubscribe\nselect distinct\n    cast(row_number() over(order by 1) as int)+(select max(supp_urn) from ${Database}.db.supps_unsubscribe) as supp_urn,\n    data_date,\n    title,\n    firstname,\n    lastname,\n    '' as company,\n    add1,\n    add2,\n    add3,\n    add4,\n    '' as add5,\n    postcode,\n    'UK' as country,\n    email2 as email,\n    phone as phone_home,\n    mobile as phone_mobile,\n    case when dp_mail  ilike '%Opt out%' then 1 else cast(null as int) end as unsubscribe_channel_mail,\n    case when dp_email ilike '%Opt out%' then 1 else cast(null as int) end as unsubscribe_channel_email,\n    case when dp_phone ilike '%Opt out%' then 1 else cast(null as int) end as unsubscribe_channel_phone,\n    data_controller_id,\n    brand_id,\n    campaign_reference as unsub_campaign,\n    'IR Web Form WITHC' as unsub_event,\n    cast(data_date as timestamp) as unsub_timestamp,\n    'IR Web Form WITHC' as source,\n    source_file,\n    cast(supp_id as varchar(30)) as source_urn,\n    source_date\nfrom (\n         select\n             dc.data_controller_id,\n             br.brand_id,\n             sar.*\n         from ${Database}.temp.sar_nestle sar\n         left join ${Database}.db.ref_data_controller dc on dc.data_controller_id = case\n                                                                                        when sar.nestle_brand = 'purina' then 5\n                                                                                        when sar.nestle_brand = 'cereals' then 7\n                                                                                        when sar.nestle_brand = 'waters' then 3\n                                                                                        else 1\n                                                                                    end\n         left join ${Database}.db.ref_division dv on dv.division = case\n                                                                       when sar.nestle_brand = 'healthscience' then 'Nestle Health Science'\n                                                                       when sar.nestle_brand = 'beverages' then 'Beverage'\n                                                                       when sar.nestle_brand = 'confectionery' then 'Confectionery'\n                                                                       when sar.nestle_brand = 'food' then 'Food'\n                                                                       when sar.nestle_brand = 'professional' then 'Nestle Professional'\n                                                                       else ''\n                                                                   end\n         left join ${Database}.db.ref_brand br on br.brand = case\n                                                                 when sar.nestle_brand = 'sma' then 'SMA'\n                                                                 when sar.nestle_brand = 'hcp' then 'HCP'\n                                                                 when sar.nestle_brand = 'cerelac' then 'Cerelac'\n                                                                 when sar.nestle_brand = 'carnation' then 'Carnation'\n                                                                 when sar.nestle_brand = 'ndg' then 'Dolce Gusto'\n                                                                 else ''\n                                                             end\n                                               or br.division_id = dv.division_id\n     ) sar\nwhere supp_id not in (select supp_id from tbw.db.sar_history where request = 'WITHC') --if it's in the history table then it's been dealt with\n    and req_withdrawal > 0\n    and lower(client) = 'nuk'\n    and email2 > '';\n\n\n--insert into tbw.db.sar_history the id's that have been processed\ninsert into tbw.db.sar_history\nselect \n    supp_id,\n    client,\n    nestle_brand,\n    'WITHC' as request,\n    current_date as actioned_date\nfrom ${Database}.temp.sar_nestle\nwhere supp_id not in (select supp_id from tbw.db.sar_history where request = 'WITHC')\n    and req_withdrawal > 0\n    and lower(client) = 'nuk';\n\n\n------------------------------------------------\n--Restrict processing\n------------------------------------------------\n\n-- Insert records into unsubscribe table where requested restricted processing\ninsert into ${Database}.db.supps_unsubscribe\nselect distinct\n    cast(row_number() over(order by 1) as int)+(select max(supp_urn) from ${Database}.db.supps_unsubscribe) as supp_urn,\n    data_date,\n    title,\n    firstname,\n    lastname,\n    '' as company,\n    add1,\n    add2,\n    add3,\n    add4,\n    '' as add5,\n    postcode,\n    'UK' as country,\n    email1 as email,\n    phone as phone_home,\n    mobile as phone_mobile,\n    1 as unsubscribe_channel_mail,\n    1 as unsubscribe_channel_email,\n    1 as unsubscribe_channel_phone,\n    1 as data_controller_id,\n    cast(null as int) as brand_id,\n    campaign_reference as unsub_campaign,\n    'IR Web Form NOPROC' as unsub_event,\n    cast(data_date as timestamp) as unsub_timestamp,\n    'IR Web Form NOPROC' as source,\n    source_file,\n    cast(supp_id as varchar(30)) as source_urn,\n    source_date\nfrom ${Database}.temp.sar_nestle\nwhere supp_id not in (select supp_id from tbw.db.sar_history where request = 'NOPROC') --if it's in the history table then it's been dealt with\n    and req_ristrict_process > 0\n    and lower(client) = 'nuk';\n\n\n--insert into tbw.db.sar_history the id's that have been processed\ninsert into tbw.db.sar_history\nselect \n    supp_id,\n    client,\n    nestle_brand,\n    'NOPROC' as request,\n    current_date as actioned_date\nfrom ${Database}.temp.sar_nestle\nwhere supp_id not in (select supp_id from tbw.db.sar_history where request = 'NOPROC')\n    and req_ristrict_process > 0\n    and lower(client) = 'nuk';\n\n\n------------------------------------------------\n--Rectification\n------------------------------------------------\n\n-- Insert records into goneaway table where requested change of record\ninsert into ${Database}.db.supps_goneaway\nselect distinct\n    cast(row_number() over(order by 1) as int)+(select max(supp_urn) from ${Database}.db.supps_goneaway) as supp_urn,\n    data_date,\n    title,\n    firstname,\n    lastname,\n    '' as company,\n    add1,\n    add2,\n    add3,\n    add4,\n    '' as add5,\n    postcode,\n    'UK' as country,\n    email1 as email,\n    new_title as title_new,\n    new_firstname as firstname_new,\n    new_lastname as lastname_new,\n    '' as company_new,\n    new_address1 as add1_new,\n    new_address2 as add2_new,\n    new_address3 as add3_new,\n    new_address4 as add4_new,\n    '' as add5_new,\n    new_postcode as postcode_new,\n    'UK' as country_new,\n    new_email1 as email_new,\n    'IR Web Form RECT' as source,\n    source_file,\n    cast(supp_id as varchar(30)) as source_urn,\n    source_date\nfrom ${Database}.temp.sar_nestle\nwhere supp_id not in (select supp_id from tbw.db.sar_history where request = 'RECT') --if it's in the history table then it's been dealt with\n    and req_rectification > 0\n    and lower(client) = 'nuk';\n\n\n--insert into supps pet where pet is to be deleted\ninsert into ${Database}.db.supps_pet\nselect distinct\n    cast(row_number() over(order by 1) as int)+(select max(supp_urn) from ${Database}.db.supps_pet) as supp_urn,\n    data_date,\n    email1,\n    pet_name,\n    pet_type,\n    'IR Web Form RECT' as source,\n    source_file,\n    cast(supp_id as varchar(30)) as source_urn,\n    source_date\nfrom (\n         select *, pet_name1 as pet_name, pet_type1 as pet_type from ${Database}.temp.sar_nestle where pet_reason1 = 'Deceased'\n         union all\n         select *, pet_name2 as pet_name, pet_type2 as pet_type from ${Database}.temp.sar_nestle where pet_reason2 = 'Deceased'\n         union all\n         select *, pet_name3 as pet_name, pet_type3 as pet_type from ${Database}.temp.sar_nestle where pet_reason3 = 'Deceased'\n     ) sar\nwhere supp_id not in (select supp_id from tbw.db.sar_history where request = 'RECT') --if it's in the history table then it's been dealt with\n    and req_rectification > 0\n    and lower(client) = 'nuk'\n    and lower(nestle_brand) = 'purina';\n\n\n--insert into names for records with pet additions so they can be matched\ninsert into ${Database}.db.names\n(\n    bbw_urn,\n    name_urn,\n    data_date,\n    reg_date,\n    title,\n    firstname,\n    lastname,\n    job_title,\n    company,\n    add1,\n    add2,\n    add3,\n    add4,\n    add5,\n    add6,\n    add7,\n    city,\n    state,\n    postcode,\n    country,\n    region,\n    dob,\n    gender,\n    phone_work,\n    phone_mobile,\n    phone_home,\n    phone_fax,\n    email,\n    www,\n    fullname,\n    initials,\n    source,\n    source_file,\n    source_urn,\n    source_date,\n    source_data_controller_id,\n    source_brand_id\n)\nselect\n    cast(row_number() over(order by 1) as int)+(select max(bbw_urn) from ${Database}.db.names) as bbw_urn,\n    'RECT_IRWF|'||to_char(supp_id) as name_urn,\n    data_date,\n    data_date as reg_date,\n    title,\n    firstname,\n    lastname,\n    '' as job_title,\n    '' as company,\n    add1,\n    add2,\n    add3,\n    add4,\n    '' as add5,\n    '' as add6,\n    '' as add7,\n    '' as city,\n    '' as state,\n    postcode,\n    '' as country,\n    '' as region,\n    dob,\n    '' as gender,\n    '' as phone_work,\n    mobile as phone_mobile,\n    phone as phone_home,\n    '' as phone_fax,\n    email1,\n    '' as www,\n    '' as fullname,\n    '' as initials,\n    'RECT_IRWF' as source,\n    source_file,\n    cast(supp_id as varchar(30)) as source_urn,\n    source_date,\n    (select data_controller_id from ${Database}.db.ref_data_controller where data_controller like 'Nestl_ Purina Petcare (UK) Ltd') as data_controller_id,\n    cast(null as int) as brand_id\nfrom ${Database}.temp.sar_nestle\nwhere supp_id not in (select supp_id from tbw.db.sar_history where request = 'RECT') --if it's in the history table then it's been dealt with\n    and req_rectification > 0\n    and lower(client) = 'nuk'\n    and lower(nestle_brand) = 'purina'\n    and (pet_reason1 = 'New Pet' or pet_reason2 = 'New Pet' or pet_reason3 = 'New Pet');\n\n\n--insert into pets for the pet additions\ninsert into ${Database}.db.pet\n(\n    name_urn,\n    pet_urn,\n    pet_name,\n    pet_type,\n    pet_age_years,\n\tpet_dob,\n    pet_birth_month,\n    pet_breed,\n    pet_gender,\n    data_date,\n    source,\n    source_file,\n    source_urn,\n    source_date\n)\nselect\n    'RECT_IRWF|'||to_char(supp_id) as name_urn,\n    'RECT_IRWF|'||to_char(supp_id)||'|'||to_char(coalesce(pet.pet_urn,0) + row_number() over(partition by supp_id order by 1)) as pet_urn,\n    pet_name,\n    pet_type,\n    pet_years as pet_age_years,\n    pet_dob,\n    case\n        when pet_month > '' then month(to_date(trim(pet_month)||'-1970-01','MON-YYYY-DD')) \n        else cast(null as integer)\n    end as pet_birth_month,\n    case\n        when pet_type = 'Cat' then cat_breed\n        else dog_breed\n    end as pet_breed,\n    pet_gender,\n    data_date,\n    'RECT_IRWF' as source,\n    source_file,\n    cast(supp_id as varchar(30)) as source_urn,\n    source_date\nfrom (\n         select *, pet_name1 as pet_name, pet_type1 as pet_type, case when petdob1 is not null then petdob1 end as pet_dob, case when petdob1 is null then pet_years1 end as pet_years, case when petdob1 is null then pet_month1 end as pet_month, cat_breed1 as cat_breed, dog_breed1 as dog_breed, pet_gender1 as pet_gender from ${Database}.temp.sar_nestle where pet_reason1 = 'New Pet'\n         union all\n         select *, pet_name2 as pet_name, pet_type2 as pet_type, case when petdob2 is not null then petdob2 end as pet_dob, case when petdob2 is null then pet_years2 end as pet_years, case when petdob2 is null then pet_month2 end as pet_month, cat_breed2 as cat_breed, dog_breed2 as dog_breed, pet_gender2 as pet_gender from ${Database}.temp.sar_nestle where pet_reason2 = 'New Pet'\n         union all\n         select *, pet_name3 as pet_name, pet_type3 as pet_type, case when petdob3 is not null then petdob3 end as pet_dob, case when petdob3 is null then pet_years3 end as pet_years, case when petdob3 is null then pet_month3 end as pet_month, cat_breed3 as cat_breed, dog_breed3 as dog_breed, pet_gender3 as pet_gender from ${Database}.temp.sar_nestle where pet_reason3 = 'New Pet'\n     ) sar\nleft join (\n              select\n                  name_urn,\n                  max(cast(tbw.db.strchop(pet_urn,'|',-1,-1) as int)) as pet_urn\n              from ${Database}.db.pet\n              group by 1\n          ) pet on pet.name_urn = 'RECT_IRWF|'||to_char(sar.supp_id)\nwhere supp_id not in (select supp_id from tbw.db.sar_history where request = 'RECT') --if it's in the history table then it's been dealt with\n    and req_rectification > 0\n    and lower(client) = 'nuk'\n    and lower(nestle_brand) = 'purina';\n\n\n--insert into tbw.db.sar_history the id's that have been processed\ninsert into tbw.db.sar_history\nselect \n    supp_id,\n    client,\n    nestle_brand,\n    'RECT' as request,\n    current_date as actioned_date\nfrom ${Database}.temp.sar_nestle\nwhere supp_id not in (select supp_id from tbw.db.sar_history where request = 'RECT')\n    and req_rectification > 0\n    and lower(client) = 'nuk';\n\n\n/******************************************************************************************/\n\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect\n    current_timestamp::timestamp_ntz,\n    '${Database}',\n    'BUILD',\n    'SARS INSERT',\n    'SARS INSERT',\n    'FINISHED';"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196047":{"id":196047,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":-848,"y":-16,"width":32,"height":32,"inputConnectorIDs":[196073],"outputSuccessConnectorIDs":[196065],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Output for SMA FS"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Output for SMA FS"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196048":{"id":196048,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":235671163,"x":-928,"y":80,"width":32,"height":32,"inputConnectorIDs":[196065,196078],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[196077],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196049":{"id":196049,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":-720,"y":160,"width":32,"height":32,"inputConnectorIDs":[196097],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[196078],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"If - Prod2"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Simple"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Database"},"2":{"slot":2,"type":"STRING","value":"Is"},"3":{"slot":3,"type":"STRING","value":"Equal to"},"4":{"slot":4,"type":"STRING","value":"NESTLE"}}}},"visible":true},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196050":{"id":196050,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-560,"y":160,"width":32,"height":32,"inputConnectorIDs":[196058],"outputSuccessConnectorIDs":[196097],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc 15 Peoplestage"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nKognitio Program  : Nestle PeopleStage Build\nAuthor            : Luke Dudley\nClient Name       : Nestle\nStandard Machine  : Snowflake\nAmendment History : v01 - DC 20190823 - Created for FNM\n\t\t\t\t\tv02 - LD 20211222 - Amended for Nestle\n******************************************************************************************/\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect  current_timestamp::timestamp_ntz\n,       '${Database}'\n,       'BUILD'\n,       'Proc 15 Peoplestage'\n,       'SCRIPT'\n,       'STARTED';\n\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_peoplestage_build',\n    '*************************',\n    '*************************',\n    'start of script',\n    current_timestamp::timestamp_ntz;\n\n\n/******************************************************************************************\n                                      PEOPLESTAGE BUILD\n******************************************************************************************/\n\ncreate or replace view ${Database}.temp.ps_approvals\nas\nselect\n    *\nfrom ${Database}.db.ps_approvals;\n\n\ncreate or replace view ${Database}.temp.ps_costhistorydetail\nas\nselect\n    *\nfrom ${Database}.db.ps_costhistorydetail;\n\n\ncreate or replace table ${Database}.temp.ps_fs_decode_content_restrict\nas\nselect\n    contentfieldid\nfrom ${Database}.db.ps_fs_decode_content\nwhere not (\n           -- these will be the standard attributes output as content (so excluded from content table)\n           -- potentially not necessary for nestle\n              contentfielddesc='SomeValue'\n          )\ngroup by ContentFieldID\n--having count(distinct ContentItemId)>1\n;\n\n\ncreate or replace table ${Database}.temp.ps_communicationscontent\nas\nselect\n    *\nfrom ${Database}.db.ps_communicationscontent\nwhere contentfieldid in (\n                            select\n                                contentfieldid\n                            from ${Database}.temp.ps_fs_decode_content_restrict\n                        );\n\n\ncreate or replace table ${Database}.temp.ps_descriptionhistory\nas\nselect\n    dh.*\nfrom ${Database}.db.ps_descriptionhistory dh\nleft join ${Database}.db.ps_deletioncontrol dc on dc.tablename = 'DescriptionHistory'\n                                         and dc.tableid = dh.id\nwhere dc.deletedon is null;\n\n\ncreate or replace table ${Database}.temp.ps_treatmentallocationdefinition\nas\nselect\n    tad.*,\n    dc.deletedon\nfrom ${Database}.db.ps_treatmentallocationdefinition tad\nleft join ${Database}.db.ps_deletioncontrol dc on dc.tablename = 'TreatmentAllocationDefinition'\n                                         and dc.tableid = tad.id;\n\n\ncreate or replace table ${Database}.temp.ps_treatmentdefinitiondetail\nas\nselect\n    tdd.*,\n    dc.deletedon\nfrom ${Database}.db.ps_treatmentdefinitiondetail tdd\nleft join ${Database}.db.ps_deletioncontrol dc on dc.tablename = 'TreatmentDefinitionDetail'\n                                         and dc.tableid = tdd.id;\n\n-- never used?\n\n\ncreate or replace table ${Database}.temp.ps_treatmentoutputdefinitiondetail\nas\nselect\n    todd.*,\n    dc.deletedon\nfrom ${Database}.db.ps_treatmentoutputdefinitiondetail todd\nleft join ${Database}.db.ps_deletioncontrol dc on dc.tablename = 'TreatmentOutputDefinitionDetail'\n                                         and dc.tableid = todd.id;\n\n\ncreate or replace table ${Database}.temp.ps_treatmentlibraryiteminstance\nas\nselect\n    tlii.*,\n    dc.deletedon\nfrom ${Database}.db.ps_treatmentlibraryiteminstance tlii\nleft join ${Database}.db.ps_deletioncontrol dc on dc.tablename = 'TreatmentLibraryItemInstance'\n                                         and dc.tableid = tlii.id;\n\n\n-- never used?\n/*\ncreate or replace table ${Database}.temp.ps_channel\nas\nselect\n    c.*,\n    dc.deletedon\nfrom ${Database}.db.ps_channel c\nleft join ${Database}.db.ps_deletioncontrol dc on dc.tablename = 'Channel' AND dc.tableid = c.id;\n*/\n\n\ncreate or replace table ${Database}.temp.ps_statedefinition\nas\nselect\n    sd.*,\n    dc.deletedon\nfrom ${Database}.db.ps_statedefinition sd\nleft join ${Database}.db.ps_deletioncontrol dc on dc.tablename = 'StateDefinition'\n                                         and dc.tableid = sd.id;\n\n\ncreate or replace table ${Database}.temp.ps_stepdefinitiondetail\nas\nselect\n    sdd.*,\n    dc.deletedon\nfrom ${Database}.db.ps_stepdefinitiondetail sdd\nleft join ${Database}.db.ps_deletioncontrol dc on dc.tablename = 'StepDefinitionDetail'\n                                         and dc.tableid = sdd.id;\n\n\n\ncreate or replace table ${Database}.live.ps_build_areasforcampaign\nas\nselect\n    *\nfrom ${Database}.db.ps_fs_build_areasforcampaign;\n\n\n-- NOT IN fnm BUILD\ncreate or replace table ${Database}.temp.statehistory_lookup\nas\nselect\n    communicationkey\nfrom ${Database}.db.ps_statehistory\nwhere id not in (\n                    select\n                        tableid\n                    from ${Database}.db.ps_deletioncontrol\n                    where tablename = 'StateHistory'\n                );\n\n\ncreate or replace table ${Database}.temp.ps_communications\nas\nselect\n    c.*\nfrom ${Database}.db.ps_communications c\nwhere communicationkey in (\n                              select\n                                  communicationkey\n                              from ${Database}.temp.statehistory_lookup\n                          )\n-- exclude test/training areas - F&M Test Area = 95, Blueberry Wave Test Area = 3 (Nestle could use this in future)\n--and  c.campaignid not in (select distinct campaignid from ${Database}.db.ps_fs_build_areasforcampaign where areaid in (95,3))\n;\n\n\ndrop table if exists ${Database}.temp.statehistory_lookup;\n\n\n-- flow history\ncreate or replace table ${Database}.temp.ps_statehistory\nas\nselect\n    sh.*\nfrom ${Database}.db.ps_statehistory sh\nleft join ${Database}.db.ps_deletioncontrol dc on dc.tablename = 'StateHistory'\n                                         and dc.tableid = sh.id\nwhere dc.deletedon is null\n    and timeentered >= add_months(current_date,-4);\n\n\ncreate or replace table ${Database}.temp.ps_fs_thisstatehistory\nas\nselect\n    thisstatehistory.id,\n    thisstatehistory.urn,\n    thisstatehistory.stateid as poolid,\n    thisstatehistory.batchsetid,\n    thisstatehistory.timeentered as enteredat,\n    stepdefinitiondetail.inputstateid as enteredfromid,\n    thisstatehistory.urndefinitionid\nfrom ${Database}.temp.ps_statehistory as thisstatehistory\ninner join ${Database}.temp.ps_stepdefinitiondetail as stepdefinitiondetail on thisstatehistory.stepdetailenteredon = stepdefinitiondetail.id\ninner join ${Database}.temp.ps_statedefinition as thisstatedefinition on thisstatehistory.stateid = thisstatedefinition.id;\n\n\ndrop table if exists ${Database}.temp.ps_stepdefinitiondetail;\ndrop table if exists ${Database}.temp.ps_statedefinition;\n\n\ncreate or replace table ${Database}.temp.ps_fs_nextstatehistory\nas\nselect\n    statehistoryleft,\n    timeentered as exitedat,\n    stateid as exitedtoid\nfrom ${Database}.temp.ps_statehistory as nextstatehistory\nwhere statehistoryleft > 0;\n\n\n/*********************************************************************************\n    NEED TO DECIDE WHERE COMMS ARE HANGING OUT\n*********************************************************************************/\n\ncreate or replace table ${Database}.temp.ps_build_flowhistory\nas\nselect\n    tsh.id,\n    tsh.urn,\n    tsh.poolid,\n    tsh.batchsetid,\n    tsh.enteredat,\n    tsh.enteredfromid,\n    nextstatehistory.exitedat,\n    nextstatehistory.exitedtoid,\n    cast(timestampdiff('SECS',enteredat,coalesce(exitedat,current_timestamp::TIMESTAMP_NTZ))/24.00/60.00/60.00 as decimal(10,2)) as dayswaiting,\n    cast(timestampdiff('SECS',enteredat,coalesce(exitedat,current_timestamp::TIMESTAMP_NTZ))/60.00/60.00 as decimal(10,2)) as hourswaiting\n    --  tsh.UrnDefinitionId -- currently unused needs adding\nfrom ${Database}.temp.ps_fs_thisstatehistory tsh\nleft join ${Database}.temp.ps_fs_nextstatehistory as nextstatehistory on tsh.id = nextstatehistory.statehistoryleft;\n\n\ndrop table if exists ${Database}.temp.ps_fs_thisstatehistory;\ndrop table if exists ${Database}.temp.ps_fs_nextstatehistory;\n\n\ncreate or replace table ${Database}.live.ps_build_flowhistory_fs\nas\nselect\n    *\nfrom ${Database}.temp.ps_build_flowhistory;\n\n\n/*\ncreate or replace table ${Database}.live.ps_build_flowhistory_fs\nas\nselect\n    psbfh.id,\n    --xref.cid,\n    psbfh.poolid,\n    psbfh.batchsetid,\n    psbfh.enteredat,\n    psbfh.enteredfromid,\n    psbfh.exitedat,\n    psbfh.exitedtoid,\n    psbfh.dayswaiting,\n    psbfh.hourswaiting\nfrom ${Database}.temp.ps_build_flowhistory psbfh\n--join ${Database}.live.xref_bbw_urn xref on cast(xref.bbw_urn as varchar) = psbfh.urn\nwhere enteredat >=add_months(curdate(),-4);\n*/\n\n\ndrop table if exists ${Database}.temp.ps_build_flowhistory;\n\n\n-- content\ncreate or replace table ${Database}.temp.ps_build_content\nas\nselect\n    communicationscontent.id as id,\n    communicationscontent.contentfieldid as contentfieldid,\n    communicationscontent.contentitemid as contentitemid,\n    cast(sum((\n        (costhistorydetail.instancecost +\n        costhistorydetail.estimatedfixedcost +\n        costhistorydetail.estimatedpercentagecost +\n        costhistorydetail.estimatedinstancecostneedingresponserate +\n        costhistorydetail.estimatedfixedcostneedingresponserate +\n        costhistorydetail.estimatedpercentagecostneedingresponserate) / costhistorydetail.communications)) as decimal(18,4)) as cost,\n    communicationscontent.iscontrolforcontent as iscontrolforcontent,\n    communicationscontent.communicationkey as communicationkey,\n    communications.communicationtime\n--  communications.urndefinitionid as urndefinitionid -- currently unused needs adding\nfrom ${Database}.temp.ps_communicationscontent as communicationscontent\ninner join ${Database}.temp.ps_communications as communications on communications.communicationkey = communicationscontent.communicationkey\nleft join ${Database}.temp.ps_approvals as approvals on approvals.run = communications.run\n                                               and approvals.stepid = communications.stepid\n                                               and approvals.dateapproved is null\n                                               and approvals.daterejected is null\nleft join ${Database}.temp.ps_costhistorydetail as costhistorydetail on costhistorydetail.stateid = communications.stateid\n                                                               and costhistorydetail.batchsetid = communications.batchsetid\n                                                               and costhistorydetail.treatmentoutputid = communications.treatmentoutputid\n                                                               and costhistorydetail.treatmentlibraryitemid = communicationscontent.contentitemid\nwhere approvals.id is null\ngroup by\n    communicationscontent.id,\n    communicationscontent.contentfieldid,\n    communicationscontent.contentitemid,\n    communicationscontent.iscontrolforcontent,\n    communicationscontent.communicationkey,\n    communications.communicationtime,\n    communications.urndefinitionid;\n\n\ndrop table if exists ${Database}.temp.ps_communicationscontent;\n\n\ncreate or replace table ${Database}.live.ps_build_content_fs\nas\nselect\n    *\nfrom ${Database}.temp.ps_build_content\nwhere contentfieldid in (\n                            select\n                                contentfieldid\n                            from ${Database}.temp.ps_fs_decode_content_restrict\n                        );\n\n\ndrop table if exists ${Database}.temp.ps_build_content;\ndrop table if exists ${Database}.temp.ps_fs_decode_content_restrict;\n\n\n-- communications\ncreate or replace table ${Database}.temp.ps_build_communications_temp\nas\nselect\n    communications.urn as urn,\n    communications.id as id,\n    communications.campaignid as campaignid,\n    communications.messageid as messageid,\n    coalesce(communications.channelid, 0) as channelid,\n    communications.stepid as stepid,\n    communications.communicationtime as commtimestamp,\n    cast( ((costhistorydetail.instancecost +\n        costhistorydetail.estimatedfixedcost +\n        costhistorydetail.estimatedpercentagecost +\n        costhistorydetail.estimatedinstancecostneedingresponserate +\n        costhistorydetail.estimatedfixedcostneedingresponserate +\n        costhistorydetail.estimatedpercentagecostneedingresponserate) / costhistorydetail.communications) as decimal(18,4)) as cost,\n    communications.iscontrolfordelivery as iscontrolfordelivery,\n    communications.compoundkeycode as compoundkeycode,\n    communications.batchsetid as batchsetid,\n    communications.run as run,\n    communications.communicationkey as communicationkey,\n    approvals.dateapproved,\n    approvals.daterejected\n    --  communications.urndefinitionid as urndefinitionid  -- currently unused needs adding\nfrom ${Database}.temp.ps_communications as communications\nleft join (\n              select\n                  stepid,\n                  run,\n                  max(dateapproved) as dateapproved,\n                  max(daterejected) as daterejected\n              from ${Database}.temp.ps_approvals\n              group by stepid,run\n          ) as approvals on approvals.run = communications.run\n                        and approvals.stepid = communications.stepid\nleft join (\n              select\n                  costhistorydetail.batchsetid as batchsetid,\n                  costhistorydetail.stateid as stateid,\n                  costhistorydetail.treatmentoutputid as treatmentoutputid,\n                  sum(costhistorydetail.instancecost) as instancecost,\n                  sum(costhistorydetail.estimatedfixedcost) as estimatedfixedcost,\n                  sum(costhistorydetail.estimatedpercentagecost) as estimatedpercentagecost,\n                  sum(costhistorydetail.estimatedinstancecostneedingresponserate) as estimatedinstancecostneedingresponserate,\n                  sum(costhistorydetail.estimatedfixedcostneedingresponserate) as estimatedfixedcostneedingresponserate,\n                  sum(costhistorydetail.estimatedpercentagecostneedingresponserate) as estimatedpercentagecostneedingresponserate,\n                  max(costhistorydetail.communications) as communications\n              from ${Database}.temp.ps_costhistorydetail as costhistorydetail\n              group by\n                  batchsetid,\n                  stateid,\n                  treatmentoutputid\n          ) as costhistorydetail on costhistorydetail.stateid = communications.stateid\n                                and costhistorydetail.batchsetid = communications.batchsetid\n                                and costhistorydetail.treatmentoutputid = communications.treatmentoutputid;\n\n\ncreate or replace table ${Database}.temp.ps_fs_decode_content_temp\nas\nselect distinct\n    contentitemid,\n    contentitemdesc as channel_description\nfrom ${Database}.db.ps_fs_decode_content\nwhere ischannel = 1;\n\n\ncreate or replace table ${Database}.live.ps_build_communications\nas\nselect\n--    xref.cid\n    urn,\n    id,\n    campaignid,\n    messageid,\n    channelid,\n    stepid,\n    commtimestamp,\n    cost,\n    iscontrolfordelivery,\n    regexp_replace(compoundkeycode,'[\\x00-\\x1F|\\x7F]','') as compoundkeycode,\n    batchsetid,\n    run,\n    upper(communicationkey) as communicationkey,\n    dateapproved,\n    daterejected,\n    channel_description\nfrom ${Database}.temp.ps_build_communications_temp psbc\n--join ${Database}.live.xref_bbw_urn xref on cast(xref.bbw_urn as varchar)=psbc.urn\nleft join ${Database}.temp.ps_fs_decode_content_temp channel_decode on channel_decode.contentitemid = psbc.channelid;\n\n\ndrop table if exists ${Database}.temp.ps_fs_decode_content_temp cascade;\ndrop table if exists ${Database}.temp.ps_build_communications_temp cascade;\n\n\ncreate or replace table ${Database}.temp.ps_communicationstrackinghistory\nas\nselect\n    *\nfrom ${Database}.db.ps_communicationstrackinghistory;\n\n\n/*\ncreate or replace table ${Database}.live.ps_build_attributes as\nselect distinct\n    communications.communicationkey\n    ,first(case when lower(treatmentdetaildescriptionlookup.description) = 'mediacode' then communicationstrackinghistory.contentitemvalue else '' end)\n        over(partition by communications.communicationkey order by communications.communicationtime desc) as media_code\n    ,first(case when lower(treatmentdetaildescriptionlookup.description) = 'leadsource' then communicationstrackinghistory.contentitemvalue else '' end)\n        over(partition by communications.communicationkey order by communications.communicationtime desc) as lead_source\n    ,first(case when lower(treatmentdetaildescriptionlookup.description) = 'campaigndescription' then communicationstrackinghistory.contentitemvalue else '' end)\n        over(partition by communications.communicationkey order by communications.communicationtime desc) as campaign_description\n    ,first(case when lower(treatmentdetaildescriptionlookup.description) = 'description' then communicationstrackinghistory.contentitemvalue else '' end)\n        over(partition by communications.communicationkey order by communications.communicationtime desc) as description\n    ,first(case when lower(treatmentdetaildescriptionlookup.description) = 'source' then communicationstrackinghistory.contentitemvalue else '' end)\n        over(partition by communications.communicationkey order by communications.communicationtime desc) as source\n    ,first(case when lower(treatmentdetaildescriptionlookup.description) = 'extractdate' then communicationstrackinghistory.contentitemvalue else '' end)\n        over(partition by communications.communicationkey order by communications.communicationtime desc) as extract_date\nfrom ${Database}.temp.ps_communications as communications\nleft join ${Database}.temp.ps_approvals as approvals on approvals.run = communications.run\n                                                    and approvals.stepid = communications.stepid\n                                                    and approvals.dateapproved is null\n                                                    and approvals.daterejected is null\ninner join ${Database}.temp.ps_communicationstrackinghistory as communicationstrackinghistory on communicationstrackinghistory.communicationkey = communications.communicationkey\ninner join ${Database}.temp.ps_treatmentdefinitiondetail as treatmentdefinitiondetail    on treatmentdefinitiondetail.treatmentdetailgroupid = communicationstrackinghistory.contentfieldid\ninner join\n(\n    select distinct description, tableid\n    from ${Database}.temp.ps_descriptionhistory as descriptionhistory\n    where descriptionhistory.tablename = 'TreatmentDefinitionDetail'\n        and lower(description) in\n                (\n                    -- these will only be the standard attributes output\n                    -- just examples for now, needs updating\n                    'mediacode'\n                    ,'leadsource'\n                    ,'campaigndescription'\n                    ,'description'\n                    ,'source'\n                    ,'extractdate'\n                )\n)treatmentdetaildescriptionlookup ON treatmentdetaildescriptionlookup.tableid = treatmentdefinitiondetail.id\nwhere treatmentdefinitiondetail.deletedon is null\n    and approvals.id is null\n;\n*/\n\n\ncreate or replace table ${Database}.temp.ps_build_attributes_working\nas\nselect distinct\n    communicationkey,\n    treatmentdefinitiondetail.id,\n    1 as hasdetailedtracking\nfrom ${Database}.temp.ps_communicationstrackinghistory as communicationstrackinghistory\ninner join ${Database}.temp.ps_treatmentdefinitiondetail as treatmentdefinitiondetail on treatmentdefinitiondetail.treatmentdetailgroupid = communicationstrackinghistory.contentfieldid;\n\n\ncreate or replace table ${Database}.temp.ps_build_attributes_part1\nas\nselect\n    statehistory.urn,\n    statehistory.communicationkey,\n    statehistory.timeentered as attributetime,\n    treatmentallocationdefinition.id as attributeid,\n    treatmentdetaildescriptionlookup.description as attributename,\n    treatmentlibrarydescriptionlookup.description as attributevalue,\n    treatmentallocationdefinition.iscontrol,\n    communications.stepid as stepid,\n    statehistory.urndefinitionid as urndefinitionid\nfrom ${Database}.temp.ps_statehistory as statehistory\ninner join ${Database}.temp.ps_treatmentoutputdefinitiondetail as treatmentoutputdefinitiondetail on treatmentoutputdefinitiondetail.treatmentoutputid = statehistory.treatmentoutputid\ninner join ${Database}.temp.ps_treatmentallocationdefinition as treatmentallocationdefinition on treatmentallocationdefinition.id = treatmentoutputdefinitiondetail.allocationid\ninner join ${Database}.temp.ps_treatmentlibraryiteminstance as treatmentlibraryiteminstance on treatmentlibraryiteminstance.id = treatmentallocationdefinition.treatmentlibraryiteminstanceid\ninner join ${Database}.temp.ps_communications as communications on statehistory.communicationkey = communications.communicationkey\nleft join ${Database}.temp.ps_approvals as approvals on approvals.run = communications.run\n                                               and approvals.stepid = communications.stepid\n                                               and approvals.dateapproved is null\n                                               and approvals.daterejected is null\nleft join ${Database}.temp.ps_build_attributes_working as checkdetailedtracking on checkdetailedtracking.communicationkey = communications.communicationkey\n                                                                          and checkdetailedtracking.id = treatmentallocationdefinition.treatmentdetailid\nleft join (\n              select distinct\n                  description,\n                  tableid\n              from ${Database}.temp.ps_descriptionhistory as descriptionhistory\n              where lower(descriptionhistory.tablename) = 'treatmentlibraryitem'\n          ) treatmentlibrarydescriptionlookup on treatmentlibrarydescriptionlookup.tableid = treatmentlibraryiteminstance.treatmentlibraryitemid\nleft join (\n              select distinct\n                  description,\n                  tableid\n              from ${Database}.temp.ps_descriptionhistory as descriptionhistory\n              where lower(descriptionhistory.tablename) = 'treatmentdefinitiondetail'\n          ) treatmentdetaildescriptionlookup on treatmentdetaildescriptionlookup.tableid = treatmentallocationdefinition.treatmentdetailid\nleft join (\n              select distinct\n                  channeltype,\n                  treatmentlibraryitemid\n              from ${Database}.db.ps_channel as channel\n          ) channellookup on channellookup.treatmentlibraryitemid = treatmentlibraryiteminstance.treatmentlibraryitemid\nwhere approvals.id is null\n    and channeltype is null\n    and lower(treatmentdetaildescriptionlookup.description) <> 'message name'\n    and coalesce(hasdetailedtracking,0) = 0;\n\n\ndrop table if exists ${Database}.temp.ps_build_attributes_working;\n\n\ncreate or replace table ${Database}.temp.ps_build_attributes_part2\nas\nselect\n    communications.urn,\n    communications.communicationkey,\n    communications.communicationtime as attributetime,\n    communicationstrackinghistory.contentfieldid as attributeid,\n    treatmentdetaildescriptionlookup.description as attributename,\n    communicationstrackinghistory.contentitemvalue as attributevalue,\n    0 as iscontrol,\n    communications.stepid as stepid,\n    communications.urndefinitionid as urndefinitionid\nfrom ${Database}.temp.ps_communications as communications\nleft join ${Database}.temp.ps_approvals as approvals on approvals.run = communications.run\n                                               and approvals.stepid = communications.stepid\n                                               and approvals.dateapproved is null\n                                               and approvals.daterejected is null\ninner join ${Database}.temp.ps_communicationstrackinghistory as communicationstrackinghistory on communicationstrackinghistory.communicationkey = communications.communicationkey\ninner join ${Database}.temp.ps_treatmentdefinitiondetail as treatmentdefinitiondetail on treatmentdefinitiondetail.treatmentdetailgroupid = communicationstrackinghistory.contentfieldid\nleft join (\n              select distinct\n                  description,\n                  tableid\n              from ${Database}.temp.ps_descriptionhistory as descriptionhistory\n              where lower(descriptionhistory.tablename) = 'treatmentdefinitiondetail'\n          ) treatmentdetaildescriptionlookup on treatmentdetaildescriptionlookup.tableid = treatmentdefinitiondetail.id\nwhere treatmentdefinitiondetail.deletedon is null\n    and approvals.id is null;\n\n\ncreate or replace table ${Database}.live.ps_build_attributes\nas\nselect\n    *\nfrom ${Database}.temp.ps_build_attributes_part1\nunion all\nselect\n    *\nfrom ${Database}.temp.ps_build_attributes_part2;\n\n\ndrop table if exists ${Database}.temp.ps_build_attributes_part1;\ndrop table if exists ${Database}.temp.ps_build_attributes_part2;\ndrop view if exists ${Database}.temp.ps_approvals;\ndrop view if exists ${Database}.temp.ps_costhistorydetail;\ndrop table if exists ${Database}.temp.ps_statehistory;\ndrop table if exists ${Database}.temp.ps_treatmentoutputdefinitiondetail;\ndrop table if exists ${Database}.temp.ps_treatmentlibraryiteminstance;\ndrop table if exists ${Database}.temp.ps_treatmentallocationdefinition;\n\ndrop table if exists ${Database}.temp.ps_communicationstrackinghistory;\ndrop table if exists ${Database}.temp.ps_descriptionhistory;\ndrop table if exists ${Database}.temp.ps_treatmentdefinitiondetail;\n\n-- attributes\ndrop table if exists ${Database}.temp.ps_communications cascade;\n\n\n/******************************************************************************************\n                                       FINISH PROC\n******************************************************************************************/\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_peoplestage_build',\n    '*************************',\n    '*************************',\n    'end of script',\n    current_timestamp::timestamp_ntz;\n\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect  current_timestamp::timestamp_ntz\n,       '${Database}'\n,       'BUILD'\n,       'Proc 15 Peoplestage'\n,       'SCRIPT'\n,       'FINISHED'\n;\n\n\n/******************************************************************************************\n                                       EOC\n******************************************************************************************/"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196098":{"id":196098,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":-720,"y":-16,"width":32,"height":32,"inputConnectorIDs":[196074],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[196073],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"If - Prod"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Simple"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Database"},"2":{"slot":2,"type":"STRING","value":"Is"},"3":{"slot":3,"type":"STRING","value":"Equal to"},"4":{"slot":4,"type":"STRING","value":"NESTLE"}}}},"visible":true},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"196051":{"id":196051,"sourceID":196021,"targetID":196026},"196052":{"id":196052,"sourceID":196024,"targetID":196042},"196053":{"id":196053,"sourceID":196026,"targetID":196027},"196054":{"id":196054,"sourceID":196033,"targetID":196038},"196055":{"id":196055,"sourceID":196028,"targetID":196034},"196056":{"id":196056,"sourceID":196041,"targetID":196039},"196057":{"id":196057,"sourceID":196035,"targetID":196032},"196058":{"id":196058,"sourceID":196043,"targetID":196050},"196059":{"id":196059,"sourceID":196029,"targetID":196021},"196060":{"id":196060,"sourceID":196027,"targetID":196037},"196061":{"id":196061,"sourceID":196030,"targetID":196031},"196062":{"id":196062,"sourceID":196025,"targetID":196030},"196063":{"id":196063,"sourceID":196042,"targetID":196028},"196064":{"id":196064,"sourceID":196039,"targetID":196044},"196065":{"id":196065,"sourceID":196047,"targetID":196048},"196066":{"id":196066,"sourceID":196037,"targetID":196024},"196067":{"id":196067,"sourceID":196031,"targetID":196029},"196068":{"id":196068,"sourceID":196040,"targetID":196033},"196069":{"id":196069,"sourceID":196033,"targetID":196041},"196070":{"id":196070,"sourceID":196044,"targetID":196045},"196071":{"id":196071,"sourceID":196045,"targetID":196043},"196074":{"id":196074,"sourceID":196043,"targetID":196098},"196075":{"id":196075,"sourceID":196035,"targetID":196040},"196096":{"id":196096,"sourceID":196046,"targetID":196025},"196097":{"id":196097,"sourceID":196050,"targetID":196049},"196099":{"id":196099,"sourceID":196034,"targetID":196035},"196100":{"id":196100,"sourceID":196022,"targetID":196023}},"failureConnectors":{},"unconditionalConnectors":{"196076":{"id":196076,"sourceID":196017,"targetID":196022},"196077":{"id":196077,"sourceID":196048,"targetID":196036}},"trueConnectors":{"196072":{"id":196072,"sourceID":196023,"targetID":196046},"196073":{"id":196073,"sourceID":196098,"targetID":196047},"196078":{"id":196078,"sourceID":196049,"targetID":196048}},"falseConnectors":{"196079":{"id":196079,"sourceID":196023,"targetID":196020}},"iterationConnectors":{},"noteConnectors":{},"notes":{"196016":{"id":196016,"x":-1099,"y":-50,"width":470,"height":292,"text":"Both FS Outputs use the same stage \nso can't be run in parallel","colour":"00ce4f"},"196019":{"id":196019,"x":-437,"y":100,"width":442,"height":158,"text":"**In QC**","colour":"e6e63c"}},"variables":{"DateForQueue":{"definition":{"name":"DateForQueue","type":"DATETIME","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"2020-01-01"},"GA_Unique":{"definition":{"name":"GA_Unique","type":"DECIMAL","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"SkipCode":{"definition":{"name":"SkipCode","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"0"}},"grids":{}},"info":{"name":"Nestle Build Live","description":"","type":"ORCHESTRATION","tag":"cdd8527c-480f-4419-8a4d-44306440407e"}}