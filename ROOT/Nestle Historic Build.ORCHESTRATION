{"job":{"components":{"195977":{"id":195977,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-992,"y":-192,"width":32,"height":32,"inputConnectorIDs":[195986],"outputSuccessConnectorIDs":[195981],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Historic Build Run Prep"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"-- Create copies of the DB historic qlik table to edit without affecting the build tables.\n\ncreate or replace table ${Database}.db.npp_qlik_reports_historic_total_rerun\nas\nselect * from ${Database}.db.npp_qlik_reports_historic_total;\n\n\ncreate or replace table ${Database}.db.npp_qlik_reports_historic_brand_acquisition_rerun\nas\nselect * from ${Database}.db.npp_qlik_reports_historic_brand_acquisition;\n\n\ncreate or replace table ${Database}.db.npp_qlik_reports_historic_engagement_rerun\nas\nselect * from ${Database}.db.npp_qlik_reports_historic_engagement;\n\n\ncreate or replace table ${Database}.db.npp_qlik_reports_historic_profile_rerun\nas\nselect * from ${Database}.db.npp_qlik_reports_historic_profile;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"195980":{"id":195980,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"ITERATE","implementationID":1025742816,"x":-864,"y":-192,"width":32,"height":16,"inputConnectorIDs":[195981],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Loop Iterator 0"}}}},"visible":true},"2":{"slot":2,"name":"Variable to Iterate","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"HistoricMonths"}}}},"visible":true},"3":{"slot":3,"name":"Starting Value","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"12"}}}},"visible":true},"4":{"slot":4,"name":"Increment Value","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"-1"}}}},"visible":true},"5":{"slot":5,"name":"End Value","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"1"}}}},"visible":true},"6":{"slot":6,"name":"Break on Failure","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"No"}}}},"visible":true},"7":{"slot":7,"name":"Concurrency","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Sequential"}}}},"visible":true},"8":{"slot":8,"name":"Stop on Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"No"}}}},"visible":true},"9":{"slot":9,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Simple"}}}},"visible":false},"10":{"slot":10,"name":"Condition","elements":{},"visible":false},"11":{"slot":11,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":false},"12":{"slot":12,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"999":{"slot":999,"name":"Record Values In Task History","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Yes"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[195987],"inputIterationConnectorIDs":[]},"195982":{"id":195982,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-864,"y":-160,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Historic Build Run with Reports"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"-- Create versions of names_tmp and ram_names on our unused schemas\n\ncreate or replace table ${Database}.data_layer.names_tmp\nas\nselect * from ${Database}.temp.names_tmp;\n\n\ncreate or replace table ${Database}.data_layer.ram_names\nas\nselect * from ${Database}.temp.ram_names;\n\n\n\n-- Create table of month to run build at\ncreate or replace table ${Database}.data_layer.historic_build_date\nas\nselect\n    date_trunc(month,add_months(current_date,-(${HistoricMonths}-1))) as historic_build_date;\n\n\n-- Create table of all name_urns that existed at historic point\ncreate or replace table ${Database}.data_layer.historic_name_urn_removal\nas\nselect distinct\n    name_urn\nfrom (\n         select distinct 'dead-'||cast(supp_urn as varchar(20)) as name_urn from ${Database}.db.supps_dead where source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date) union all\n         select distinct 'gone-'||cast(supp_urn as varchar(20)) as name_urn from ${Database}.db.supps_goneaway where source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date) union all\n         select distinct 'manual-'||cast(supp_urn as varchar(20)) as name_urn from ${Database}.db.supps_manual where source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date) union all\n         select distinct 'unsub-'||cast(supp_urn as varchar(20)) as name_urn from ${Database}.db.supps_unsubscribe where source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date) union all\n         select distinct name_urn from ${Database}.db.names where source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n     ) a;\n\n\n-- Remove name_urns that didn't exist at historic point\ndelete\nfrom ${Database}.data_layer.names_tmp\nwhere source_date > (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    and name_urn not in (select name_urn from ${Database}.data_layer.historic_name_urn_removal);\n\n\n-- Remove name_urns that didn't exist at historic point\ndelete\nfrom ${Database}.data_layer.ram_names\nwhere source_date > (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    and name_urn not in (select name_urn from ${Database}.data_layer.historic_name_urn_removal);\n\n\n-- Create lookups on unused schemas\ndrop table if exists ${Database}.dedupe.xref_name_urn;\n\nCREATE OR REPLACE TABLE ${Database}.dedupe.xref_name_urn  \nas\nselect \n    name_urn,\n    bbw_urn,     \n    email,\n    c_id as cid,\n    hh_id as hid,\n    source,\n    data_date\nfrom ${Database}.data_layer.ram_names;\n\n\ndrop table if exists ${Database}.data_layer.email_lookup;\nCREATE OR REPLACE TABLE ${Database}.data_layer.email_lookup as\nselect distinct\n    trim(name_urn) as name_urn\n    ,lower(trim(email)) as email\n    ,first_value(bbw_urn) over (partition by name_urn,email order by bbw_urn asc) as bbw_urn\nfrom ${Database}.db.names\nwhere source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\nand email > ''\n;\n\ndrop table if exists ${Database}.dedupe.xref_email;\nCREATE OR REPLACE TABLE ${Database}.dedupe.xref_email as\nselect \n    x.cid\n    ,el.email\n    ,min(el.bbw_urn) as bbw_urn\nfrom ${Database}.dedupe.xref_name_urn x\ninner join ${Database}.data_layer.email_lookup el on x.name_urn = el.name_urn\ngroup by x.cid,el.email\n;\n\ndrop table if exists ${Database}.data_layer.email_lookup;\n\n\n\n/**************************************************\n   RUN THE SUPPRESSIONS PROC AS OF HISTORIC DATE\n   USING UNUSED SCHEMA\n***************************************************/\n\n\n\n/******************************************************************************************\nMatillion Component  : Nestle Names Suppressions\nAuthor               : Lindsay Timms\nClient Name          : Nestle\nUpdate Job Numbers   : NUK08617(01/22)\nStandard Machine     : Snowflake\nAmendment History    : v01 Kog - LT 20161220 - Created\n                       v01 SF - LukeD\n                       v02 SF - LeeW 28/02/2022 Tidied up a bit, additional source field temp.build_dp_prep and follow through\n******************************************************************************************/\n\n\n/******************************************************************************************\n                                   NAMES SUPPRESSIONS\n******************************************************************************************/\n\n\n--master name urn table\ndrop table if exists ${Database}.data_layer.build_supps_prep_name_urn;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_prep_name_urn\nas\nselect\n    cid,\n    hid,\n    name_urn,\n    source_data_controller_id,\n    source_brand_id,\n    source_date,\n    data_date,\n    email,\n    phone_home,\n    phone_work,\n    phone_mobile,\n    add1\nfrom ${Database}.data_layer.names_tmp;\n\n\n/******************************************************************************************\n                                     DATA PROTECTION\n******************************************************************************************/\n\n\ndrop table if exists ${Database}.data_layer.build_dp_1_prep;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_dp_1_prep\nas\nselect\n    nmt.cid,\n    nmt.hid,\n    nmt.name_urn,\n    nmt.email,\n    dp.data_controller_id, --dc for opt ins\n    dp.brand_id, --brand is for opt in brand rather than source\n    dp.dp_date,\n    dp.dp_mailable,\n    dp.dp_emailable,\n    dp.dp_phoneable,\n    dp.dp_smsable,\n    dp.dp_newsletter,\n    dp.source_date,\n    dp.data_date,\n    dp.source as dp_source,\n    to_date(to_char(((select historic_build_date from ${Database}.data_layer.historic_build_date)-1),'YYYYMM01'), 'YYYYMMDD') as month_start_dt\nfrom ${Database}.data_layer.build_supps_prep_name_urn nmt\ninner join ${Database}.db.names_dp dp on trim(nmt.name_urn) = trim(dp.name_urn)\nwhere dp.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)--must have at least 1 permission\nand (\n    dp.dp_mailable is not null\n    or dp.dp_emailable is not null\n    or dp.dp_phoneable is not null\n    or dp.dp_smsable is not null\n    or dp.dp_newsletter is not null\n    );\n\nalter warehouse set warehouse_size = 'Large';\n\ndrop table if exists ${Database}.data_layer.build_supps_names_dp_roll_base;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_dp_roll_base\nas\nselect distinct\n    email,\n    cid,\n    data_controller_id, --if no brand then we need the dc to work out permissions\n    brand_id,\n    first_value(dp_date) over\n        (\n            partition by cid, data_controller_id, brand_id\n            order by dp_date desc nulls last, data_date desc\n        )                                                       as dp_last_date,\n    first_value(case when source_date < month_start_dt then dp_date else cast(null as date) end) over\n        (\n            partition by cid, data_controller_id, brand_id\n            order by case when source_date < month_start_dt then 1 else 0 end desc,\n                dp_date desc nulls last, data_date desc\n        )                                                       as dp_last_date_lm,   \n    first_value(dp_source) over\n        (\n            partition by cid, data_controller_id, brand_id\n            order by dp_date desc nulls last, data_date desc, name_urn desc\n        )                                                       as dp_last_source,  \n    first_value(dp_date) over\n        (\n            partition by cid, data_controller_id , brand_id\n            order by dp_date nulls last, data_date\n        )                                                       as dp_first_date,  \n    first_value(dp_source) over\n        (\n            partition by cid, data_controller_id, brand_id\n            order by dp_date nulls last, data_date, name_urn \n        )                                                       as dp_first_source\nfrom ${Database}.data_layer.build_dp_1_prep;\n\n\ndrop table if exists ${Database}.data_layer.build_supps_names_dp_roll_positive;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_dp_roll_positive\nas\nselect distinct\n    cid,\n    data_controller_id,\n    brand_id,\n    first_value(case when dp_emailable = 1 or dp_mailable = 1 or dp_newsletter = 1 then dp_date else cast(null as date) end) over\n        (\n            partition by cid, data_controller_id, brand_id\n            order by\n                case when dp_emailable = 1 or dp_mailable = 1 or dp_newsletter = 1 then 1 else 0 end desc,\n                dp_date desc nulls last,\n                data_date desc nulls last,\n                source_date desc nulls last\n        )  as dp_last_positive_date,\n    first_value(case when source_date < month_start_dt and (dp_emailable = 1 or dp_mailable = 1 or dp_newsletter = 1) then dp_date else cast(null as date) end) over\n        (\n            partition by cid, data_controller_id, brand_id\n            order by\n                case when source_date < month_start_dt then 1 else 0 end desc,\n                case when dp_emailable = 1 or dp_mailable = 1 or dp_newsletter = 1 then 1 else 0 end desc,\n                dp_date desc nulls last,\n                data_date desc nulls last,\n                source_date desc nulls last\n        ) as dp_last_positive_date_lm,\n    first_value(case when dp_emailable = 1 or dp_mailable = 1 or dp_newsletter = 1 then dp_source else null end) over\n        (\n            partition by cid, data_controller_id, brand_id\n            order by\n                case when dp_emailable = 1 or dp_mailable = 1 or dp_newsletter = 1 then 1 else 0 end desc,\n                dp_date desc nulls last,\n                data_date desc nulls last,\n                source_date desc nulls last\n        )  as dp_last_positive_source\nfrom ${Database}.data_layer.build_dp_1_prep;\n\nalter warehouse set warehouse_size = 'Medium';\n\ndrop table if exists ${Database}.data_layer.build_supps_names_dp_roll_positive_email;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_dp_roll_positive_email\nas\nselect\n    email,\n    data_controller_id,\n    brand_id,\n    dp_last_positive_emailable_date,\n    dp_last_positive_emailable_source\nfrom (\n         select\n             email,\n             data_controller_id,\n             brand_id,\n             case when dp_emailable = 1 then dp_date else cast(null as date) end as dp_last_positive_emailable_date,\n             case when dp_emailable = 1 then dp_source else null end as dp_last_positive_emailable_source,\n             row_number() over\n                 (\n                     partition by email, data_controller_id, brand_id\n                     order by\n                         dp_emailable desc nulls last,\n                         dp_date desc nulls last,\n                         data_date desc nulls last,\n                         source_date desc nulls last\n                 ) as row_num\n         from ${Database}.data_layer.build_dp_1_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.data_layer.build_supps_names_dp_roll_positive_email_lm;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_dp_roll_positive_email_lm\nas\nselect\n    email,\n    data_controller_id,\n    brand_id,\n    dp_last_positive_emailable_date_lm\nfrom (\n         select\n             email,\n             data_controller_id,\n             brand_id,\n             case when source_date < month_start_dt and dp_emailable = 1 then dp_date else cast(null as date) end as dp_last_positive_emailable_date_lm,\n             case when source_date < month_start_dt and dp_emailable = 1 then dp_source else null end as dp_last_positive_emailable_source_lm,\n             row_number() over\n                 (\n                     partition by email, data_controller_id, brand_id\n                     order by\n                         case when source_date < month_start_dt then 1 else 0 end desc,\n                         dp_emailable desc nulls last,\n                         dp_date desc nulls last,\n                         data_date desc nulls last,\n                         source_date desc nulls last\n                 ) as row_num\n         from ${Database}.data_layer.build_dp_1_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.data_layer.build_supps_names_dp_roll_mail;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_dp_roll_mail\nas\nselect\n    cid,\n    data_controller_id, --if no brand then we need the dc to work out permissions\n    brand_id,\n    dp_mailable,\n    dp_last_mailable_date,\n    dp_last_mailable_source\nfrom (\n         select\n             cid,\n             data_controller_id,\n             brand_id,\n             dp_mailable,\n             dp_date as dp_last_mailable_date,\n             dp_source as dp_last_mailable_source,\n             row_number() over\n                 (\n                     partition by cid, data_controller_id, brand_id\n                     order by\n                         case when dp_mailable is null then 0 else 1 end desc,\n                         dp_date desc nulls last,\n                         data_date desc nulls last,\n                         source_date desc nulls last,\n                         dp_mailable nulls last\n                 ) as row_num\n         from ${Database}.data_layer.build_dp_1_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.data_layer.build_supps_names_dp_roll_email;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_dp_roll_email\nas\nselect\n    email,\n    data_controller_id, --if no brand then we need the dc to work out permissions\n    brand_id,\n    dp_emailable,\n    dp_last_emailable_date,\n    dp_last_emailable_source\nfrom (\n         select\n             email,\n             data_controller_id,\n             brand_id,\n             dp_emailable,\n             dp_date as dp_last_emailable_date,\n             dp_source as dp_last_emailable_source,\n             row_number() over\n                 (\n                     partition by email, data_controller_id, brand_id --for gigya/gdpr we now need to permission by email address\n                     order by\n                         case when dp_emailable is null then 0 else 1 end desc,\n                         dp_date desc nulls last,\n                         data_date desc nulls last,\n                         source_date desc nulls last,\n                         dp_emailable nulls last, \n                         data_controller_id\n                 ) as row_num\n         from ${Database}.data_layer.build_dp_1_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.data_layer.build_supps_names_dp_roll_newsletter;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_dp_roll_newsletter\nas\nselect\n    email,\n    data_controller_id, --if no brand then we need the dc to work out permissions\n    brand_id,\n    dp_newsletter,\n    dp_last_newsletter_date\nfrom (\n         select\n             email,\n             data_controller_id,\n             brand_id,\n             dp_newsletter,\n             dp_date as dp_last_newsletter_date,\n             row_number() over\n                 (\n                     partition by email, data_controller_id, brand_id --for gigya/gdpr we now need to permission by email address\n                     order by\n                         case when dp_newsletter is null then 0 else 1 end desc,\n                         dp_date desc nulls last,\n                         data_date desc nulls last,\n                         source_date desc nulls last,\n                         dp_newsletter nulls last, \n                         data_controller_id\n                 ) as row_num\n         from ${Database}.data_layer.build_dp_1_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.data_layer.build_supps_names_dp_roll_email_lm;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_dp_roll_email_lm\nas\nselect\n    email,\n    data_controller_id, --if no brand then we need the dc to work out permissions\n    brand_id,\n    dp_emailable_lm,\n    dp_last_emailable_date_lm\nfrom (\n         select\n             email,\n             data_controller_id,\n             brand_id,\n             case when source_date < month_start_dt then dp_emailable else cast(null as int) end as dp_emailable_lm,\n             case when source_date < month_start_dt then dp_date else cast(null as date) end as dp_last_emailable_date_lm,\n             row_number() over\n                 (\n                     partition by email, data_controller_id, brand_id --for gigya/gdpr we now need to permission by email address\n                     order by\n                         case when source_date < month_start_dt then 1 else 0 end desc,\n                         case when dp_emailable is null then 0 else 1 end desc,\n                         dp_date desc nulls last,\n                         data_date desc nulls last,\n                         source_date desc nulls last,\n                         dp_emailable nulls last, \n                         data_controller_id\n                 ) as row_num\n         from ${Database}.data_layer.build_dp_1_prep\n     ) dp\nwhere row_num = 1;\n\nalter warehouse set warehouse_size = 'Large';\n\ndrop table if exists ${Database}.data_layer.build_supps_names_dp_roll;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_dp_roll\nas\nselect distinct\n    ba.email,\n    ba.cid,\n    ba.data_controller_id, --if no brand then we need the dc to work out permissions\n    ba.brand_id,\n    ma.dp_mailable,\n    em.dp_emailable,\n    el.dp_emailable_lm,\n    ne.dp_newsletter,\n    ma.dp_last_mailable_date,\n    em.dp_last_emailable_date,\n    pe.dp_last_positive_emailable_date,\n    el.dp_last_emailable_date_lm,\n    pl.dp_last_positive_emailable_date_lm,\n    ne.dp_last_newsletter_date,\n    ba.dp_last_date,\n    ba.dp_last_date_lm,\n    po.dp_last_positive_date,\n    po.dp_last_positive_date_lm,\n    --sources\n    ma.dp_last_mailable_source,\n    em.dp_last_emailable_source,\n    pe.dp_last_positive_emailable_source,\n    --ne.dp_last_newsletter_source,\n    ba.dp_last_source,\n    po.dp_last_positive_source,\n    --acquisition\n    ba.dp_first_date,\n    ba.dp_first_source\nfrom ${Database}.data_layer.build_supps_names_dp_roll_base ba\nleft join ${Database}.data_layer.build_supps_names_dp_roll_positive po on po.cid = ba.cid\n                                                           and po.data_controller_id = ba.data_controller_id\n                                                           and coalesce(po.brand_id,0) = coalesce(ba.brand_id,0)\nleft join ${Database}.data_layer.build_supps_names_dp_roll_positive_email pe on lower(trim(pe.email)) = lower(trim(ba.email))\n                                                                 and pe.data_controller_id = ba.data_controller_id\n                                                                 and coalesce(pe.brand_id,0) = coalesce(ba.brand_id,0)\nleft join ${Database}.data_layer.build_supps_names_dp_roll_positive_email_lm pl on lower(trim(pl.email)) = lower(trim(ba.email))\n                                                                     and pl.data_controller_id = ba.data_controller_id\n                                                                     and coalesce(pl.brand_id,0) = coalesce(ba.brand_id,0)\nleft join ${Database}.data_layer.build_supps_names_dp_roll_email em on lower(trim(em.email)) = lower(trim(ba.email))\n                                                        and em.data_controller_id = ba.data_controller_id\n                                                        and coalesce(em.brand_id,0) = coalesce(ba.brand_id,0)\nleft join ${Database}.data_layer.build_supps_names_dp_roll_mail ma on ma.cid = ba.cid\n                                                       and ma.data_controller_id = ba.data_controller_id\n                                                       and coalesce(ma.brand_id,0) = coalesce(ba.brand_id,0)\nleft join ${Database}.data_layer.build_supps_names_dp_roll_newsletter ne on lower(trim(ne.email)) = lower(trim(ba.email))\n                                                             and ne.data_controller_id = ba.data_controller_id\n                                                             and coalesce(ne.brand_id,0) = coalesce(ba.brand_id,0)\nleft join ${Database}.data_layer.build_supps_names_dp_roll_email_lm el on lower(trim(el.email)) = lower(trim(ba.email))\n                                                           and el.data_controller_id = ba.data_controller_id\n                                                           and coalesce(el.brand_id,0) = coalesce(ba.brand_id,0);\n\nalter warehouse set warehouse_size = 'Medium';\n\n--drop table if exists ${Database}.data_layer.build_supps_names_dp_roll_base;\n--drop table if exists ${Database}.data_layer.build_supps_names_dp_roll_positive;\n--drop table if exists ${Database}.data_layer.build_supps_names_dp_roll_positive_email;\n--drop table if exists ${Database}.data_layer.build_supps_names_dp_roll_positive_email_lm;\n--drop table if exists ${Database}.data_layer.build_supps_names_dp_roll_email;\n--drop table if exists ${Database}.data_layer.build_supps_names_dp_roll_mail;\n--drop table if exists ${Database}.data_layer.build_supps_names_dp_roll_newsletter;\n--drop table if exists ${Database}.data_layer.build_supps_names_dp_roll_email_lm;\n--drop table if exists ${Database}.data_layer.build_dp_1_prep;\n\n\n--build the cross ref on the fly\n--build the reverse live lookup - dc/brand combos = business unit\n--be aware of same brand under different dc - both need to inherit the latest permission per brand\n\ndrop table if exists ${Database}.data_layer.build_ref_data_controller_division_xref;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_ref_data_controller_division_xref\nas\nselect\n    di.data_controller_id,\n    di.division_id,\n    br.brand_id\nfrom ${Database}.db.ref_data_controller_division_xref di\ninner join ${Database}.db.ref_brand br on di.division_id = br.division_id;\n\n\n--Main business level reference table (eventually will replace the above 'build_ref_data_controller_division_xref' table)\ndrop table if exists ${Database}.dedupe.xref_business_level;\n\nCREATE OR REPLACE TABLE ${Database}.dedupe.xref_business_level\nas\nselect\n    data_controller_id,\n    business_unit_id,\n    division_id,\n    brand_id,\n    case when rn = 1 then rn end as primary_division_map,\n    case when rn2 = 1 then rn2 end as primary_brand_map\nfrom\n    (select\n        x.data_controller_id,\n        case\n            when di.business_unit_id is not null then di.business_unit_id\n            else br.brand_id + (select max(data_controller_id) from ${Database}.db.ref_data_controller) --insert the missing ones with fake bu's\n        end as business_unit_id,\n        di.division_id,\n        br.brand_id,\n        row_number() over (partition by di.division_id order by case when x.data_controller_id = (select data_controller_id from ${Database}.db.ref_data_controller where data_controller ilike 'Nestl_ (Ireland) Ltd') then 0 else data_controller_id end desc, br.brand_id) rn,\n        row_number() over (partition by br.brand_id    order by case when x.data_controller_id = (select data_controller_id from ${Database}.db.ref_data_controller where data_controller ilike 'Nestl_ (Ireland) Ltd') then 0 else data_controller_id end desc, di.division_id) rn2\n    from ${Database}.db.ref_brand br\n    left join ${Database}.db.ref_data_controller_division_xref x on x.division_id = br.division_id\n    left join ${Database}.db.ref_division di on x.division_id = di.division_id)\n;\n\n\n------------------------------------------------------------\n--mail permissions by cid\n\ndrop table if exists ${Database}.data_layer.build_supps_names_dp_result;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_dp_result\nas\nselect distinct\n    cid,\n    email,\n    brand_id,\n    dp_mailable,\n    dp_last_mailable_date,\n    dp_last_date,\n    dp_last_positive_date,\n    dp_last_date_lm,\n    dp_last_positive_date_lm,\n    --sources\n    dp_last_mailable_source,\n    dp_last_source,\n    dp_last_positive_source,\n    --acquisition\n    dp_first_date,\n    dp_first_source\nfrom ${Database}.data_layer.build_supps_names_dp_roll\nwhere brand_id is not null;\n\n\nalter warehouse set warehouse_size = 'Large';\n\n--work out all the possible brand opt ins unsing the xref\ndrop table if exists ${Database}.data_layer.build_supps_names_dp_result_no_brand_1_prep;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_dp_result_no_brand_1_prep\nas\nselect distinct\n    rl.cid,\n    rl.email,\n    xref.brand_id,\n    rl.dp_mailable,\n    rl.dp_last_mailable_date,\n    rl.dp_last_date,\n    rl.dp_last_positive_date,\n    rl.dp_last_date_lm,\n    rl.dp_last_positive_date_lm,\n    --sources\n    rl.dp_last_mailable_source,\n    rl.dp_last_source,\n    rl.dp_last_positive_source,\n    --acquisition\n    rl.dp_first_date,\n    rl.dp_first_source\nfrom ${Database}.data_layer.build_supps_names_dp_roll rl\ninner join ${Database}.dedupe.xref_business_level xref on rl.data_controller_id = xref.data_controller_id\nwhere rl.brand_id is null;\n\n\n--find the latest per brand to take care of multi permisions per brand\ndrop table if exists ${Database}.data_layer.build_supps_names_dp_result_no_brand_mail;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_dp_result_no_brand_mail\nas\nselect\n    cid,\n    brand_id,\n    dp_mailable,\n    dp_last_mailable_date,\n    dp_last_mailable_source\nfrom (\n         select\n             cid,\n             brand_id,\n             dp_mailable,\n             dp_last_mailable_date,\n             dp_last_mailable_source,\n             row_number() over\n                 (\n                     partition by cid, brand_id\n                     order by\n                         case when dp_mailable is null then 0 else 1 end desc,\n                         dp_last_mailable_date desc nulls last,\n                         dp_mailable nulls last\n                 ) as row_num\n         from ${Database}.data_layer.build_supps_names_dp_result_no_brand_1_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.data_layer.build_supps_names_dp_result_no_brand_dates;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_dp_result_no_brand_dates\nas\nselect\n    cid,\n    brand_id,\n    max(dp_last_date) as dp_last_date,\n    max(dp_last_positive_date) as dp_last_positive_date,\n    max(dp_last_date_lm) as dp_last_date_lm,\n    max(dp_last_positive_date_lm) as dp_last_positive_date_lm,\n    min(dp_first_date) as dp_first_date\nfrom ${Database}.data_layer.build_supps_names_dp_result_no_brand_1_prep\ngroup by cid, brand_id;\n\n\ndrop table if exists ${Database}.data_layer.build_supps_names_dp_result_no_brand_sources;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_dp_result_no_brand_sources\nas\nselect distinct\n    cid,\n    brand_id,\n    first_value(dp_last_source)          over (partition by cid, brand_id order by dp_last_date desc nulls last, dp_last_source)        as dp_last_source,\n    first_value(dp_last_positive_source) over (partition by cid, brand_id order by dp_last_positive_date desc nulls last, dp_last_date desc nulls last, dp_last_positive_source) as dp_last_positive_source,\n    first_value(dp_first_source)         over (partition by cid, brand_id order by dp_last_date nulls last, dp_first_source)            as dp_first_source\nfrom ${Database}.data_layer.build_supps_names_dp_result_no_brand_1_prep\n;\n\n\ndrop table if exists ${Database}.data_layer.build_supps_names_dp_result_no_brand_1;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_dp_result_no_brand_1\nas\nselect\n    pr.cid,\n    pr.email,\n    pr.brand_id,\n    ma.dp_mailable,\n    ma.dp_last_mailable_date,\n    da.dp_last_date,\n    da.dp_last_positive_date,\n    da.dp_last_date_lm,\n    da.dp_last_positive_date_lm,\n    --sources\n    ma.dp_last_mailable_source,\n    sc.dp_last_source,\n    sc.dp_last_positive_source,\n    --acquisition\n    da.dp_first_date,\n    sc.dp_first_source\nfrom (\n         select distinct\n             cid,\n             email,\n             brand_id\n         from ${Database}.data_layer.build_supps_names_dp_result_no_brand_1_prep\n     ) pr\nleft join ${Database}.data_layer.build_supps_names_dp_result_no_brand_mail ma on ma.cid = pr.cid\n                                                                  and ma.brand_id = pr.brand_id\nleft join ${Database}.data_layer.build_supps_names_dp_result_no_brand_dates da on da.cid = pr.cid\n                                                                  and da.brand_id = pr.brand_id\nleft join ${Database}.data_layer.build_supps_names_dp_result_no_brand_sources sc on sc.cid = pr.cid\n                                                                  and sc.brand_id = pr.brand_id;\n\n--drop table if exists ${Database}.data_layer.build_supps_names_dp_result_no_brand_mail;\n--drop table if exists ${Database}.data_layer.build_supps_names_dp_result_no_brand_dates;\n--drop table if exists ${Database}.data_layer.build_supps_names_dp_result_no_brand_sources;\n--drop table if exists ${Database}.data_layer.build_supps_names_dp_result_no_brand_1_prep;\n\n\n--insert dp for all brands under a data controller (if no brand id specified)\nmerge into ${Database}.data_layer.build_supps_names_dp_result dpbr\nusing ${Database}.data_layer.build_supps_names_dp_result_no_brand_1 mg on mg.cid = dpbr.cid\n                                                         and lower(trim(mg.email)) = lower(trim(dpbr.email))\n                                                         and mg.brand_id = dpbr.brand_id --brand specific opt ins always have priority\nwhen not matched then insert\n(\n    cid,\n    email,\n    brand_id,\n    dp_mailable,\n    dp_last_mailable_date,\n    dp_last_date,\n    dp_last_positive_date,\n    dp_last_date_lm,\n    dp_last_positive_date_lm,\n    --sources\n    dp_last_mailable_source,\n    dp_last_source,\n    dp_last_positive_source,\n    --acquisition\n    dp_first_date,\n    dp_first_source\n)\nvalues\n(\n    mg.cid,\n    mg.email,\n    mg.brand_id,\n    mg.dp_mailable,\n    mg.dp_last_mailable_date,\n    mg.dp_last_date,\n    mg.dp_last_positive_date,\n    mg.dp_last_date_lm,\n    mg.dp_last_positive_date_lm,\n    --sources\n    mg.dp_last_mailable_source,\n    mg.dp_last_source,\n    mg.dp_last_positive_source,\n    --acquisition\n    mg.dp_first_date,\n    mg.dp_first_source\n);\n\n--drop table if exists ${Database}.data_layer.build_supps_names_dp_result_no_brand_1;\n\n\n--insert all the records with missing/null dp\nmerge into ${Database}.data_layer.build_supps_names_dp_result dpbr\nusing (\n          select distinct\n              cid,\n              email,\n              source_brand_id\n          from ${Database}.data_layer.build_supps_prep_name_urn\n          where source_brand_id is not null\n      ) mg on mg.cid = dpbr.cid\n          and mg.email = dpbr.email\n          and mg.source_brand_id = dpbr.brand_id\nwhen not matched then insert\n(\n    cid,\n    email,\n    brand_id\n)\nvalues\n(\n    mg.cid,\n    mg.email,\n    mg.source_brand_id\n);\n\n\nmerge into ${Database}.data_layer.build_supps_names_dp_result dpbr\nusing (\n          select distinct\n              prep.cid,\n              prep.email,\n              xref.brand_id\n          from ${Database}.data_layer.build_supps_prep_name_urn prep\n          inner join ${Database}.dedupe.xref_business_level xref on prep.source_data_controller_id = xref.data_controller_id\n          where prep.source_brand_id is null\n      ) mg on mg.cid = dpbr.cid\n          and lower(trim(mg.email)) = lower(trim(dpbr.email))\n          and mg.brand_id = dpbr.brand_id\nwhen not matched then insert\n(\n    cid,\n    email,\n    brand_id\n)\nvalues\n(\n    mg.cid,\n    mg.email,\n    mg.brand_id\n);\n\n\n------------------------------------------------------------\n--same again but for email address\n\ndrop table if exists ${Database}.data_layer.build_supps_names_dp_result_email;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_dp_result_email\nas\nselect distinct\n    email,\n    brand_id,\n    dp_emailable,\n    dp_emailable_lm,\n    dp_newsletter,\n    dp_last_emailable_date,\n    dp_last_positive_emailable_date,\n    dp_last_emailable_date_lm,\n    dp_last_positive_emailable_date_lm,\n    dp_last_newsletter_date,\n    --sources\n    dp_last_emailable_source,\n    dp_last_positive_emailable_source,\n    data_controller_id\nfrom ${Database}.data_layer.build_supps_names_dp_roll\nwhere brand_id is not null\n    and email > ''\n    and (\n            dp_emailable is not null\n            or dp_newsletter is not null\n        );\n\n\n--work out all the possible brand opt ins unsing the xref\ndrop table if exists ${Database}.data_layer.build_supps_names_dp_result_no_brand_2_prep;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_dp_result_no_brand_2_prep\nas\nselect distinct\n    rl.email,\n    xref.brand_id,\n    rl.dp_emailable,\n    rl.dp_emailable_lm,\n    rl.dp_newsletter,\n    rl.dp_last_emailable_date,\n    rl.dp_last_positive_emailable_date,\n    rl.dp_last_emailable_date_lm,\n    rl.dp_last_positive_emailable_date_lm,\n    rl.dp_last_newsletter_date,\n    --sources\n    rl.dp_last_emailable_source,\n    rl.dp_last_positive_emailable_source,\n    rl.data_controller_id\nfrom ${Database}.data_layer.build_supps_names_dp_roll rl\ninner join ${Database}.dedupe.xref_business_level xref on rl.data_controller_id = xref.data_controller_id\nwhere rl.brand_id is null\n    and email > ''\n    and (\n            rl.dp_emailable is not null\n            or rl.dp_newsletter is not null\n        );\n\n\n--drop table if exists ${Database}.data_layer.build_supps_names_dp_roll;\n\n\n--find the latest per brand to take care of multi permisions per brand\ndrop table if exists ${Database}.data_layer.build_supps_names_dp_result_no_brand_email;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_dp_result_no_brand_email\nas\nselect\n    email,\n    brand_id,\n    dp_emailable,\n    dp_last_emailable_date,\n    dp_last_emailable_source\nfrom (\n         select\n             email,\n             brand_id,\n             dp_emailable,\n             dp_last_emailable_date,\n             dp_last_emailable_source,\n             row_number() over\n                 (\n                     partition by email, brand_id\n                     order by\n                         case when dp_emailable is null then 0 else 1 end desc,\n                         dp_last_emailable_date desc nulls last,\n                         dp_emailable nulls last\n                 ) as row_num\n         from ${Database}.data_layer.build_supps_names_dp_result_no_brand_2_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.data_layer.build_supps_names_dp_result_no_brand_email_lm;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_dp_result_no_brand_email_lm\nas\nselect\n    email,\n    brand_id,\n    dp_emailable_lm,\n    dp_last_emailable_date_lm\nfrom (\n         select\n             email,\n             brand_id,\n             dp_emailable_lm,\n             dp_last_emailable_date_lm,\n             row_number() over\n                 (\n                     partition by email, brand_id\n                     order by\n                         case when dp_emailable_lm is null then 0 else 1 end desc,\n                         dp_last_emailable_date_lm desc nulls last,\n                         dp_emailable_lm nulls last\n                 ) as row_num\n         from ${Database}.data_layer.build_supps_names_dp_result_no_brand_2_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.data_layer.build_supps_names_dp_result_no_brand_newsletter;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_dp_result_no_brand_newsletter\nas\nselect\n    email,\n    brand_id,\n    dp_newsletter,\n    dp_last_newsletter_date\nfrom (\n         select\n             email,\n             brand_id,\n             dp_newsletter,\n             dp_last_newsletter_date,\n             row_number() over\n                 (\n                     partition by email, brand_id\n                     order by\n                         case when dp_newsletter is null then 0 else 1 end desc,\n                         dp_last_newsletter_date desc nulls last,\n                         dp_newsletter nulls last\n                 ) as row_num\n         from ${Database}.data_layer.build_supps_names_dp_result_no_brand_2_prep\n     ) dp\nwhere row_num = 1;\n\ndrop table if exists ${Database}.data_layer.build_supps_names_dp_result_no_brand_positive;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_dp_result_no_brand_positive\nas\nselect\n    email,\n    brand_id,\n    dp_last_positive_emailable_date,\n    dp_last_positive_emailable_source\nfrom (\n         select\n             email,\n             brand_id,\n             dp_last_positive_emailable_date,\n             dp_last_positive_emailable_source,\n             row_number() over\n                 (\n                     partition by email, brand_id\n                     order by\n                         case when dp_emailable is null then 0 else 1 end desc,\n                         dp_last_positive_emailable_date desc nulls last\n                 ) as row_num\n         from ${Database}.data_layer.build_supps_names_dp_result_no_brand_2_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.data_layer.build_supps_names_dp_result_no_brand_positive_lm;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_dp_result_no_brand_positive_lm\nas\nselect\n    email,\n    brand_id,\n    dp_last_positive_emailable_date_lm\nfrom (\n         select\n             email,\n             brand_id,\n             dp_last_positive_emailable_date_lm,\n             row_number() over\n                 (\n                     partition by email, brand_id\n                     order by\n                         case when dp_emailable_lm is null then 0 else 1 end desc,\n                         dp_last_positive_emailable_date_lm desc nulls last\n                 ) as row_num\n         from ${Database}.data_layer.build_supps_names_dp_result_no_brand_2_prep\n     ) dp\nwhere row_num = 1;\n\n\nalter warehouse set warehouse_size = 'Large';\n\ndrop table if exists ${Database}.data_layer.build_supps_names_dp_result_no_brand_2;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_dp_result_no_brand_2\nas\nselect\n    em.email,\n    em.brand_id,\n    em.dp_emailable,\n    el.dp_emailable_lm,\n    ne.dp_newsletter,\n    em.dp_last_emailable_date,\n    po.dp_last_positive_emailable_date,\n    el.dp_last_emailable_date_lm,\n    pl.dp_last_positive_emailable_date_lm,\n    ne.dp_last_newsletter_date,\n    --sources\n    em.dp_last_emailable_source,\n    po.dp_last_positive_emailable_source\nfrom ${Database}.data_layer.build_supps_names_dp_result_no_brand_email em\nleft join ${Database}.data_layer.build_supps_names_dp_result_no_brand_email_lm el on lower(trim(el.email)) = lower(trim(em.email))\n                                                                      and el.brand_id = em.brand_id\nleft join ${Database}.data_layer.build_supps_names_dp_result_no_brand_newsletter ne on lower(trim(ne.email)) = lower(trim(em.email))\n                                                                        and ne.brand_id = em.brand_id\nleft join ${Database}.data_layer.build_supps_names_dp_result_no_brand_positive po on lower(trim(po.email)) = lower(trim(em.email))\n                                                                      and po.brand_id = em.brand_id\nleft join ${Database}.data_layer.build_supps_names_dp_result_no_brand_positive_lm pl on lower(trim(pl.email)) = lower(trim(em.email))\n                                                                         and pl.brand_id = em.brand_id;\n\n--drop table if exists ${Database}.data_layer.build_supps_names_dp_result_no_brand_2_prep;\n--drop table if exists ${Database}.data_layer.build_supps_names_dp_result_no_brand_email;\n--drop table if exists ${Database}.data_layer.build_supps_names_dp_result_no_brand_email_lm;\n--drop table if exists ${Database}.data_layer.build_supps_names_dp_result_no_brand_newsletter;\n--drop table if exists ${Database}.data_layer.build_supps_names_dp_result_no_brand_positive;\n--drop table if exists ${Database}.data_layer.build_supps_names_dp_result_no_brand_positive_lm;\n\nalter warehouse set warehouse_size = 'Medium';\n\n\n\n--insert dp for all brands under a data controller (if no brand id specified)\nmerge into ${Database}.data_layer.build_supps_names_dp_result_email dpbr\nusing ${Database}.data_layer.build_supps_names_dp_result_no_brand_2 mg on lower(trim(mg.email)) = lower(trim(dpbr.email))\n                                                         and mg.brand_id = dpbr.brand_id --brand specific opt ins always have priority\nwhen not matched then insert\n(\n    email,\n    brand_id,\n    dp_emailable,\n    dp_emailable_lm,\n    dp_newsletter,\n    dp_last_emailable_date,\n    dp_last_positive_emailable_date,\n    dp_last_emailable_date_lm,\n    dp_last_positive_emailable_date_lm,\n    dp_last_newsletter_date,\n    --sources\n    dp_last_emailable_source,\n    dp_last_positive_emailable_source\n)\nvalues\n(\n    mg.email,\n    mg.brand_id,\n    mg.dp_emailable,\n    mg.dp_emailable_lm,\n    mg.dp_newsletter,\n    mg.dp_last_emailable_date,\n    mg.dp_last_positive_emailable_date,\n    mg.dp_last_emailable_date_lm,\n    mg.dp_last_positive_emailable_date_lm,\n    mg.dp_last_newsletter_date,\n    --sources\n    mg.dp_last_emailable_source,\n    mg.dp_last_positive_emailable_source\n);\n\n\n--drop table if exists ${Database}.data_layer.build_supps_names_dp_result_no_brand_2;\n\n\n/********************************************************************************************\n*                                     BAD QUALITY DATA                                        *\n*********************************************************************************************/\n\ndrop table if exists ${Database}.data_layer.build_supps_names_supps_quality;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_supps_quality\nas\nselect\n    name_urn,\n    phone_home_score,\n    phone_work_score,\n    phone_mobile_score,\n    case when email = '0' or lower(email) regexp '.*[^-a-z0-9_@\\+\\\\.&].*' then -1 else email_score end as email_score,\n    case when email_score = 1 then cast(null as date) else data_date end as first_supp_email_date,\n    -- some pass paf but have completely wrong org allocated so fail them\n    -- will need more work for overseas\n    -- irish rule as well\n    case\n        when lower(address_quality) in ('paf standard (v)','paf standard (c)')\n            and paf_organisation > '' and cap_org_match = 'n'\n            and not --special case sma/hcp\n                (\n                    lower(paf_organisation) regexp '(.*)(hospital|trust|medical|pct|p c t|pharmacy|surgery|nhs|infirmary|doctors|health|chemist|nursery|sure start|surestart|practice|children|dr)(.*)'\n                    or (lower(email_domain) regexp '.*\\.ac\\..*' and lower(collate(paf_organisation,'')) regexp '(.*)(university|college)(.*)')\n                )\n            then -1\n        --special hcp rule for irish addresses\n        when lower(cc_iso) = 'ie'\n            and\n            (\n                lower(add1) regexp '(.*)(pm[0-9]|pm [0-9]|parcel motel|store it|storeit)(.*)'\n                or  lower(firstname||' '||lastname) like '%urgent%'\n                or lower(firstname||' '||lastname) like '%removed%'\n                or lower(firstname||' '||lastname) like '%customer%'\n                or add1 regexp '.*[0-9]{6}.*'\n                or add2 regexp '.*[0-9]{6}.*'\n                or add3 regexp '.*[0-9]{6}.*'\n                or add4 regexp '.*[0-9]{6}.*'\n                or add5 regexp '.*[0-9]{6}.*'\n            )\n            then -1\n        when lower(cc_iso) = 'ie' and\n            case when add1 > '' and lower(add1) <> 'eire' and lower(add1) <> 'n/a' then 1 else 0 end +\n            case when add2 > '' and lower(add2) <> 'eire' and lower(add2) <> 'n/a' then 1 else 0 end +\n            case when add3 > '' and lower(add3) <> 'eire' and lower(add3) <> 'n/a' then 1 else 0 end +\n            case when add4 > '' and lower(add4) <> 'eire' and lower(add4) <> 'n/a' then 1 else 0 end +\n            case when city > '' and lower(city) <> 'eire' and lower(city) <> 'n/a' then 1 else 0 end +\n            case when state > '' and lower(state) <> 'eire' and lower(state) <> 'n/a' then 1 else 0 end > 2\n            then 1\n        -- temp fix for dates in addresses passing address clean\n        when\n            lower(add1||add2) regexp '.*-jan.*' or lower(add1||add2) regexp '.*-feb.*' or lower(add1||add2) regexp '.*-mar.*' or lower(add1||add2) regexp '.*-apr.*' or\n            lower(add1||add2) regexp '.*-may.*' or lower(add1||add2) regexp '.*-jun.*' or lower(add1||add2) regexp '.*-jul.*' or lower(add1||add2) regexp '.*-aug.*' or\n            lower(add1||add2) regexp '.*-sep.*' or lower(add1||add2) regexp '.*-oct.*' or lower(add1||add2) regexp '.*-nov.*' or lower(add1||add2) regexp '.*-dec.*'\n            then -1\n        else address_score\n    end as address_score,\n    -- get rid of test records\n    case when firstname regexp '.*@.*' then -1 else name_score end as name_score\nfrom ${Database}.data_layer.ram_names;\n\n\n/******************************************************************************************\n*                                     MANUAL SUPPRESSION\n******************************************************************************************/\n\n\n-- email - any person whose email address is on the manual file should be suppressed for ever\ndrop table if exists ${Database}.data_layer.build_supps_names_supps_manual_email;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_supps_manual_email\nas\nselect\n    lower(rn.email) as email,\n    1 as manual_channel_email,\n    min(sm.data_date) as first_supp_manual_date\nfrom ${Database}.data_layer.ram_names rn\ninner join ${Database}.db.supps_manual sm on split_part(rn.name_urn,'-',-1) = cast(sm.supp_urn as varchar)\nwhere sm.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    and rn.email > ''\n    and rn.email_score = 1\n    and lower(rn.source) = 'manual'\n    and manual_channel_email = 1\ngroup by lower(rn.email);\n\n\n-- phone number matches\n-- phone and mobile number and person whos home or mobile number appears on the manual file should be suppressed\ndrop table if exists ${Database}.data_layer.build_supps_names_supps_manual_phone_temp;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_supps_manual_phone_temp\nas\nselect\n    rn.phone_home as phone,\n    1 as manual_channel_phone\nfrom     ${Database}.data_layer.ram_names rn\ninner join ${Database}.db.supps_manual sm on split_part(rn.name_urn,'-',-1) = cast(sm.supp_urn as varchar)\nwhere sm.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    and rn.phone_home > ''\n    and rn.phone_home_score = 1\n    and lower(rn.source) = 'manual'\n    and manual_channel_phone = 1\ngroup by rn.phone_home;\n\n\ninsert into ${Database}.data_layer.build_supps_names_supps_manual_phone_temp\nselect rn.phone_mobile as phone,\n    1 as manual_channel_phone\nfrom ${Database}.data_layer.ram_names rn\ninner join ${Database}.db.supps_manual sm on split_part(rn.name_urn,'-',-1) = cast(sm.supp_urn as varchar)\nwhere sm.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    and rn.phone_mobile > ''\n    and rn.phone_mobile_score = 1\n    and lower(rn.source) = 'manual'\n    and manual_channel_phone = 1\ngroup by rn.phone_mobile;\n\n\ninsert into ${Database}.data_layer.build_supps_names_supps_manual_phone_temp\nselect rn.phone_work as phone,\n    1 as manual_channel_phone\nfrom ${Database}.data_layer.ram_names rn\ninner join ${Database}.db.supps_manual sm on split_part(rn.name_urn,'-',-1)  = cast(sm.supp_urn as varchar)\nwhere sm.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    and rn.phone_work > ''\n    and rn.phone_work_score = 1\n    and lower(rn.source) = 'manual'\n    and manual_channel_phone = 1\ngroup by rn.phone_work;\n\n\n-- create distinct list of valid numbers to screen against database\ndrop table if exists ${Database}.data_layer.build_supps_names_supps_manual_phone;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_supps_manual_phone\nas\nselect phone,\n    max(manual_channel_phone) as manual_channel_phone\nfrom ${Database}.data_layer.build_supps_names_supps_manual_phone_temp\ngroup by phone;\n\n\n--drop table if exists ${Database}.data_layer.build_supps_names_supps_manual_phone_temp;\n\n\n-- address matches\ndrop table if exists ${Database}.data_layer.build_supps_names_supps_manual_hh_id;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_supps_manual_hh_id\nas\nselect\n    coalesce(rn.hh_id,rn.bbw_urn) as hid,\n    1 as manual_channel_mail\nfrom ${Database}.data_layer.ram_names rn\ninner join ${Database}.db.supps_manual sm on split_part(rn.name_urn,'-',-1)  = cast(sm.supp_urn as varchar)\nwhere sm.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    and lower(rn.source) = 'manual'\n    and manual_channel_mail = 1\ngroup by coalesce(rn.hh_id,rn.bbw_urn);\n\n\n\n/******************************************************************************************\n                                     UNSUBSCRIBE SUPPRESSION\n******************************************************************************************/\n\n--  email - any person whose email address is on the unsubscribe file should be suppressed by brand\ndrop table if exists ${Database}.data_layer.build_supps_names_supps_unsubscribe_email;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_supps_unsubscribe_email\nas\nselect\n    rn.email,\n    su.brand_id,\n    max(su.data_date) as unsubscribe_channel_email_date,\n    min(su.data_date) as first_supp_unsub_date\nfrom ${Database}.dedupe.xref_name_urn rn\ninner join ${Database}.db.supps_unsubscribe su on split_part(rn.name_urn,'-',-1)  = cast(su.supp_urn as varchar)\nwhere su.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    and rn.email > ''\n    and lower(rn.source) = 'unsub'\n    and su.unsubscribe_channel_email = 1\ngroup by\n    rn.email,\n    su.brand_id;\n\n\n--add the unsubs for every brand for the dc's for ease of joining later...\ndrop table if exists ${Database}.data_layer.build_supps_names_supps_unsubscribe_email_brand;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_supps_unsubscribe_email_brand\nas\nselect\n    email,\n    brand_id,\n    unsubscribe_channel_email_date,\n    first_supp_unsub_date\nfrom ${Database}.data_layer.build_supps_names_supps_unsubscribe_email\nwhere brand_id is not null; --if they have a brand then they mean to be opted out of this brand\n\ninsert into ${Database}.data_layer.build_supps_names_supps_unsubscribe_email_brand\n    select\n        su.email,\n        br.brand_id,\n        su.unsubscribe_channel_email_date,\n        su.first_supp_unsub_date\n    from ${Database}.data_layer.build_supps_names_supps_unsubscribe_email su\n    --inner join ${Database}.dedupe.xref_business_level xref on su.data_controller_id = xref.data_controller_id and xref.primary_brand_map = 1\n    cross join ${Database}.db.ref_brand br\n    where su.brand_id is null --if they have no brand then we exclude them from everything\nand su.email||'|'||to_char(br.brand_id) not in--brand specific opt outs have priority\n(\nselect email||'|'||to_char(brand_id)\nfrom ${Database}.data_layer.build_supps_names_supps_unsubscribe_email_brand\n)\n;\n\n\n--drop table if exists ${Database}.data_layer.build_supps_names_supps_unsubscribe_email;\n\n\n--  region address matches\ndrop table if exists ${Database}.data_layer.build_supps_names_supps_unsubscribe_c_id;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_supps_unsubscribe_c_id\nas\nselect\n    rn.cid as cid,\n    su.brand_id,\n    max(su.data_date) as unsubscribe_channel_mail_date\nfrom ${Database}.dedupe.xref_name_urn rn\ninner join ${Database}.db.supps_unsubscribe su on split_part(rn.name_urn,'-',-1)  = cast(su.supp_urn as varchar)\nwhere su.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    and lower(rn.source) = 'unsub'\n    and unsubscribe_channel_mail = 1\ngroup by\n    rn.cid,\n    su.brand_id;\n\n\n--add the unsubs for every brand for the dc's for ease of joining later...\ndrop table if exists ${Database}.data_layer.build_supps_names_supps_unsubscribe_cid_brand;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_supps_unsubscribe_cid_brand\nas\nselect\n    cid,\n    brand_id,\n    unsubscribe_channel_mail_date\nfrom ${Database}.data_layer.build_supps_names_supps_unsubscribe_c_id\nwhere brand_id is not null; --if they have a brand then they mean to be opted out of this brand\n\ninsert into ${Database}.data_layer.build_supps_names_supps_unsubscribe_cid_brand\n    select\n        su.cid,\n        br.brand_id,\n        su.unsubscribe_channel_mail_date\n    from ${Database}.data_layer.build_supps_names_supps_unsubscribe_c_id su\n    --inner join ${Database}.dedupe.xref_business_level xref on su.data_controller_id = xref.data_controller_id and xref.primary_brand_map = 1\n    cross join ${Database}.db.ref_brand br\n    where su.brand_id is null --if they have no brand then we exclude them from everything\nand to_char(su.cid)||'|'||to_char(br.brand_id) not in\n    (\n    select\n        to_char(cid)||'|'||to_char(brand_id)\n    from ${Database}.data_layer.build_supps_names_supps_unsubscribe_cid_brand\n    )\n    ;\n\n\n--drop table if exists ${Database}.data_layer.build_supps_names_supps_unsubscribe_c_id;\n--drop table if exists ${Database}.data_layer.build_ref_data_controller_division_xref;\n\n\n/******************************************************************************************\n*                                      DEAD SUPPRESSION\n******************************************************************************************/\n\n-- dead supressions\ndrop table if exists ${Database}.data_layer.build_supps_names_supps_dead_cid;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_supps_dead_cid\nas\nselect\n    cid    as cid,\n    1       as dead_cid,\n    min(data_date) as first_supp_dead_date\nfrom ${Database}.dedupe.xref_name_urn\nwhere lower(source) = 'dead'\ngroup by cid;\n\n\n/******************************************************************************************\n*                                    GONEAWAY SUPPRESSION\n******************************************************************************************/\n\n-- goneaway supressions\ndrop table if exists ${Database}.data_layer.build_supps_names_supps_goneaway_cid;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_supps_goneaway_cid\nas\nselect\n    cid,\n    hid,\n    1                       as gone_cid\nfrom ${Database}.dedupe.xref_name_urn\nwhere lower(source) = 'gone'\ngroup by cid, hid;\n\n\n/******************************************************************************************\n                                         CHILDREN\n******************************************************************************************/\n\ndrop table if exists ${Database}.data_layer.build_supps_names_supps_child;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_supps_child\nas\nselect\n    c_id as cid,\n    1    as child_cid,\n    min(data_date) as first_supp_child_date\nfrom ${Database}.data_layer.ram_names\nwhere\n    (\n        dob between dateadd(year,-16,(select historic_build_date from ${Database}.data_layer.historic_build_date)) and (select historic_build_date from ${Database}.data_layer.historic_build_date)\n        or lower(title) in ('master','mstr','mast')\n    )\n    and dob <> '2001-01-01' --some default date for some reason\ngroup by c_id;\n\n\n/******************************************************************************************\n                                       EMAIL BOUNCE\n******************************************************************************************/\n\n\n-- email bounces\ndrop table if exists ${Database}.data_layer.build_supps_names_supps_bounce_email;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_names_supps_bounce_email\nas\nselect\n    lower(trim(email)) as email,\n    max(case when trim(bounce_type) in ('known_bounce','suppressed_global') then 1 else 0 end) as bounce_email,\n    max(case when trim(bounce_type) not in ('known_bounce','suppressed_global') then 1 else 0 end) as old_bounce_email,\n    max(data_date) as bounce_date,\n    min(data_date) as first_supp_bounce_date\nfrom ${Database}.db.supps_bounce\nwhere source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    and trim(email) > ''\ngroup by lower(trim(email));\n\n\n--flame needs 3 x flames in last 2 months\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_adestra_events_supps_roll\nas\nselect\n    lower(trim(email)) as email,\n    max(event_timestamp) as flame_date,\n    count(*) as num_flame\nfrom ${Database}.db.adestra_events\nwhere source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    and trim(event_name) = 'inbound_flame'\n    and event_timestamp >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -2)\ngroup by 1;\n\ninsert into ${Database}.data_layer.build_supps_names_supps_bounce_email\nselect distinct\n    email,\n    1 as bounce_email,\n    0 as old_bounce_email,\n    flame_date as bounce_date,\n    flame_date as first_supp_bounce_date\nfrom ${Database}.data_layer.build_adestra_events_supps_roll\nwhere num_flame > 2\n    and email not in (select email from ${Database}.data_layer.build_supps_names_supps_bounce_email);\n\n--drop table if exists ${Database}.data_layer.build_adestra_events_supps_roll;\n\n\n/******************************************************************************************\n                                       OFFSHORE\n******************************************************************************************/\n\n-- offshore\ndrop table if exists ${Database}.data_layer.build_supps_offshore;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_offshore\nas\nselect\n    distinct coalesce(hh_id,bbw_urn) as hid,\n    1                                as offshore\nfrom ${Database}.data_layer.ram_names\nwhere lower(postcode) like 'je%'\n    or lower(postcode) like 'gy%'\n    or lower(postcode) like 'im%';\n\n\n\n/******************************************************************************************\n                                       Business\n******************************************************************************************/\n\n--not currently required\n\n\n/******************************************************************************************\n                                       BabyMPS\n******************************************************************************************/\n\n--not currently required\n\n\n/******************************************************************************************\n                                     DATA RETENTION\n******************************************************************************************/\n\n-- NOTE TO BE REMOVED: This has moved up to be available for use with the email engagement section. Moved the other ref tables from rollups too.\n\n------------------------------------------------------------\n-- REF TABLES\n\n--build new xref for business units\ndrop table if exists ${Database}.data_layer.build_ref_data_controller_bus_unit_xref;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_ref_data_controller_bus_unit_xref\nas\nselect\n    case\n        when di.business_unit_id is not null then di.business_unit_id\n        else br.brand_id + (select max(data_controller_id) from ${Database}.db.ref_data_controller) --insert the missing ones with fake bu's\n    end as business_unit_id,\n    di.division_id,\n    br.brand_id\nfrom ${Database}.db.ref_brand br\ninner join ${Database}.db.ref_division di on di.division_id = br.division_id;\n\n\ndrop table if exists ${Database}.dedupe.ref_brand;\n\nCREATE OR REPLACE TABLE ${Database}.dedupe.ref_brand\nas\nselect\n    br.brand_id,\n    trim(br.brand) as brand,\n    trim(br.brand_pet_type) as brand_pet_type,\n    di.division_id,\n    trim(di.division) as division\nfrom ${Database}.db.ref_brand br\ninner join ${Database}.db.ref_division di on di.division_id = br.division_id;\n\n\ndrop table if exists ${Database}.dedupe.ref_division;\n\nCREATE OR REPLACE TABLE ${Database}.dedupe.ref_division\nas\nselect\n    division_id,\n    trim(division) as division\nfrom ${Database}.db.ref_division;\n\n\ndrop table if exists ${Database}.dedupe.ref_data_controller;\n\nCREATE OR REPLACE TABLE ${Database}.dedupe.ref_data_controller\nas\nselect\n    data_controller_id,\n    trim(data_controller) as data_controller,\n    trim(nestle_country) as nestle_country\nfrom ${Database}.db.ref_data_controller;\n\n\ndrop table if exists ${Database}.dedupe.ref_business_unit;\n\nCREATE OR REPLACE TABLE ${Database}.dedupe.ref_business_unit\nas\nselect distinct\n    xref.business_unit_id,\n    case when dc.data_controller_id is null then br.brand else dc.data_controller end as business_unit\nfrom ${Database}.data_layer.build_ref_data_controller_bus_unit_xref xref\nleft join ${Database}.dedupe.ref_data_controller dc on dc.data_controller_id = xref.business_unit_id\ninner join ${Database}.dedupe.ref_brand br on br.brand_id = xref.brand_id;\n\n\ndrop table if exists ${Database}.dedupe.ref_business_unit_brand;\n\nCREATE OR REPLACE TABLE ${Database}.dedupe.ref_business_unit_brand\nas\nselect\n    bu.business_unit_id,\n    bu.business_unit,\n    br.brand_id,\n    br.brand\nfrom ${Database}.data_layer.build_ref_data_controller_bus_unit_xref xref\ninner join ${Database}.dedupe.ref_business_unit bu on bu.business_unit_id = xref.business_unit_id\ninner join ${Database}.dedupe.ref_brand br on br.brand_id = xref.brand_id;\n\n\nalter warehouse set warehouse_size = 'Xlarge';\n\n------------------------------------------------------------\n-- EMAIL ENGAGEMENT\n\ndrop table if exists ${Database}.data_layer.build_supps_email_engagement;\n\n-- Nestle Adestra\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_email_engagement\nas\nselect\n    lower(trim(ae.email)) as email,\n    case\n        when bu.business_unit_id is not null then bu.business_unit_id\n        when chl.data_controller_id is not null then chl.data_controller_id\n        when lower(trim(ae.campaign_name)) regexp '^npp.*' then (select business_unit_id from ${Database}.dedupe.ref_business_unit where trim(business_unit) like 'Nestl_ Purina Petcare (UK) Ltd')\n        else (select business_unit_id from ${Database}.dedupe.ref_business_unit where trim(business_unit) like 'Nestl_ UK Ltd')\n    end as business_unit_id,\n    max(cast(ae.event_timestamp as date)) as last_open_date,\n    max(case when ae.source_date < date_trunc('MONTH', (select historic_build_date from ${Database}.data_layer.historic_build_date)-1) then cast(ae.event_timestamp as date) else cast(null as date) end) as last_open_date_lm,\n    max(case\n            when lower(ae.event_name) regexp '(.*)(open|read)(.*)' and cast(ae.event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            else cast(ae.event_timestamp as date)\n        end) as last_open_date_ios15,\n    max(case\n            when lower(ae.event_name) regexp '(.*)(open|read)(.*)' and cast(ae.event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            when ae.source_date < date_trunc('MONTH', (select historic_build_date from ${Database}.data_layer.historic_build_date)-1) then cast(ae.event_timestamp as date)\n            else cast(null as date)\n        end) as last_open_date_ios15_lm\nfrom ${Database}.db.adestra_events ae\nleft join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(ae.campaign_name) = lower(xr.adestra_campaign_name)\nleft join ${Database}.db.comms_hist_lookup chl on lower(chl.campaign_id) = lower(xr.ch_campaign_id)\n                                          or lower(chl.campaign_id) = lower(case when trim(ae.campaign_name) ilike '%_MTE_%' then split_part(trim(ae.campaign_name),'_',3) else split_part(trim(ae.campaign_name),'_',1) end)\nleft join ${Database}.dedupe.ref_business_unit_brand bu on bu.brand_id = chl.brand_id\nwhere ae.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    and lower(trim(ae.event_name)) regexp '(.*)(click|open|read|shared|submit)(.*)'\n    and lower(trim(ae.link_url)) not regexp '.*unsub.*'\n    and lower(trim(ae.email)) > ''\ngroup by 1,2;\n\nalter warehouse set warehouse_size = 'Large';\n\n-- Nestle Mapp\ninsert into ${Database}.data_layer.build_supps_email_engagement\nselect\n    lower(trim(mp.user_email)) as email,\n    case\n        when bu.business_unit_id is not null then bu.business_unit_id\n        when chl.data_controller_id is not null then chl.data_controller_id\n        when lower(trim(mp.message_name)) regexp '^npp.*' then (select business_unit_id from ${Database}.dedupe.ref_business_unit where trim(business_unit) like 'Nestl_ Purina Petcare (UK) Ltd')\n        else (select business_unit_id from ${Database}.dedupe.ref_business_unit where trim(business_unit) like 'Nestl_ UK Ltd')\n    end as business_unit_id,\n    max(mp.record_timestamp) as last_open_date,\n    max(case when mp.source_date < date_trunc('MONTH', dateadd(day,-1,(select historic_build_date from ${Database}.data_layer.historic_build_date))) then cast(mp.record_timestamp as date) else cast(null as date) end) as last_open_date_lm,\n    max(case\n            when lower(mp.record_type) regexp '.*render.*' and cast(mp.record_timestamp as date) >= '2021-09-20' then cast(null as date)\n            else cast(mp.record_timestamp as date)\n        end) as last_open_date_ios15,\n    max(case\n            when lower(mp.record_type) regexp '.*render.*' and cast(mp.record_timestamp as date) >= '2021-09-20' then cast(null as date)\n            when mp.source_date < date_trunc('MONTH', dateadd(day,-1,(select historic_build_date from ${Database}.data_layer.historic_build_date))) then cast(mp.record_timestamp as date)\n            else cast(null as date)\n        end) as last_open_date_ios15_lm\nfrom ${Database}.db.mapp_events mp\nleft join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(trim(mp.message_name)) = lower(trim(xr.mapp_message_name))\nleft join ${Database}.db.comms_hist_lookup chl on lower(trim(chl.campaign_id)) = lower(trim(xr.ch_campaign_id))\n                                          or lower(trim(chl.campaign_id)) = lower(case when trim(mp.message_name) ilike '%_MTE_%' then split_part(trim(mp.message_name),'_',3) else split_part(trim(mp.message_name),'_',1) end)\nleft join ${Database}.dedupe.ref_business_unit_brand bu on bu.brand_id = chl.brand_id\nwhere mp.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    and lower(trim(mp.record_type)) regexp '.*click.*|.*render.*'\n    and lower(trim(mp.click_link_url)) not regexp '.*unsub.*'\n    and lower(trim(mp.user_email)) > ''\ngroup by 1,2;\n\n\n\n-- SMA Adestra\ninsert into ${Database}.data_layer.build_supps_email_engagement\nselect\n    lower(trim(email)) as email,\n    (select business_unit_id from ${Database}.dedupe.ref_business_unit where lower(trim(business_unit)) = 'sma') as business_unit_id,\n    max(cast(event_timestamp as date)) as last_open_date,\n    max(case when source_date < date_trunc('MONTH', (select historic_build_date from ${Database}.data_layer.historic_build_date)-1) then cast(event_timestamp as date) else cast(null as date) end) as last_open_date_lm,\n    max(case\n            when lower(event_name) regexp '(.*)(open|read)(.*)' and cast(event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            else cast(event_timestamp as date)\n        end) as last_open_date_ios15,\n    max(case\n            when lower(event_name) regexp '(.*)(open|read)(.*)' and cast(event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            when source_date < date_trunc('MONTH', (select historic_build_date from ${Database}.data_layer.historic_build_date)-1) then cast(event_timestamp as date)\n            else cast(null as date)\n        end) as last_open_date_ios15_lm\nfrom ${Database}.db.adestra_events_sma\nwhere source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    and lower(event_name) regexp '(.*)(click|open|read|shared|submit)(.*)'\n    and lower(trim(link_url)) not regexp '.*unsub.*'\n    and lower(trim(email)) > ''\n    and lower(trim(workspace_name)) not regexp '.*cerelac.*'\ngroup by 1,2;\n\n\n-- Cerelac Adestra\ninsert into ${Database}.data_layer.build_supps_email_engagement\nselect\n    lower(trim(email)) as email,\n    (select business_unit_id from ${Database}.dedupe.ref_business_unit where lower(trim(business_unit)) = 'cerelac') as business_unit_id,\n    max(cast(event_timestamp as date)) as last_open_date,\n    max(case when source_date < date_trunc('MONTH', (select historic_build_date from ${Database}.data_layer.historic_build_date)-1) then cast(event_timestamp as date) else cast(null as date) end) as last_open_date_lm,\n    max(case\n            when lower(event_name) regexp '(.*)(open|read)(.*)' and cast(event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            else cast(event_timestamp as date)\n        end) as last_open_date_ios15,\n    max(case\n            when lower(event_name) regexp '(.*)(open|read)(.*)' and cast(event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            when source_date < date_trunc('MONTH', (select historic_build_date from ${Database}.data_layer.historic_build_date)-1) then cast(event_timestamp as date)\n            else cast(null as date)\n        end) as last_open_date_ios15_lm\nfrom ${Database}.db.adestra_events_sma\nwhere source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    and lower(event_name) regexp '(.*)(click|open|read|shared|submit)(.*)'\n    and lower(trim(link_url)) not regexp '.*unsub.*'\n    and lower(trim(email)) > ''\n    and lower(trim(workspace_name)) regexp '.*cerelac.*'\ngroup by 1,2;\n\n\n\n-- HCP Adestra\ninsert into ${Database}.data_layer.build_supps_email_engagement\nselect\n    lower(trim(email)) as email,\n    (select business_unit_id from ${Database}.dedupe.ref_business_unit where lower(trim(business_unit)) = 'hcp') as business_unit_id,\n    max(cast(event_timestamp as date)) as last_open_date,\n    max(case when source_date < date_trunc('MONTH', (select historic_build_date from ${Database}.data_layer.historic_build_date)-1) then cast(event_timestamp as date) else cast(null as date) end) as last_open_date_lm,\n    max(case\n            when lower(event_name) regexp '(.*)(open|read)(.*)' and cast(event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            else cast(event_timestamp as date)\n        end) as last_open_date_ios15,\n    max(case\n            when lower(event_name) regexp '(.*)(open|read)(.*)' and cast(event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            when source_date < date_trunc('MONTH', (select historic_build_date from ${Database}.data_layer.historic_build_date)-1) then cast(event_timestamp as date)\n            else cast(null as date)\n        end) as last_open_date_ios15_lm\nfrom ${Database}.db.adestra_events_hcp\nwhere source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    and lower(trim(event_name)) regexp '(.*)(click|open|read|shared|submit)(.*)'\n    and lower(trim(link_url)) not regexp '.*unsub.*'\n    and lower(trim(email)) > ''\ngroup by 1,2;\n\n\n\n------------------------------------------------------------\n-- ACCOUNT ENGAGEMENT\n\ndrop table if exists ${Database}.data_layer.build_dp_2_prep;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_dp_2_prep\nas\nselect\n    nmt.cid,\n    nmt.hid,\n    nmt.name_urn,\n    nmt.email,\n    dp.data_controller_id, --dc for opt ins\n    dp.brand_id, --brand is for opt in brand rather than source\n    dp.dp_date,\n    dp.dp_mailable,\n    dp.dp_emailable,\n    dp.dp_phoneable,\n    dp.dp_smsable,\n    dp.dp_newsletter,\n    dp.source_date,\n    dp.data_date,\n    date_trunc('MONTH', dateadd(day,-1,(select historic_build_date from ${Database}.data_layer.historic_build_date))) as month_start_dt\nfrom ${Database}.data_layer.build_supps_prep_name_urn nmt\ninner join ${Database}.db.names_dp dp on nmt.name_urn = trim(dp.name_urn)\nwhere dp.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\nand (--must have at least 1 permission\n    dp.dp_mailable is not null\n    or dp.dp_emailable is not null\n    or dp.dp_phoneable is not null\n    or dp.dp_smsable is not null\n    or dp.dp_newsletter is not null\n    );\n\n\ndrop table if exists ${Database}.data_layer.build_supps_last_login;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_last_login\nas\nselect\n    xr.cid,\n    case\n        when bu.business_unit_id is not null then bu.business_unit_id\n        else wh.data_controller_id\n    end as business_unit_id,\n    max(cast(wh.browser_date as date)) as last_login_date,\n    max(case when wh.source_date < date_trunc('MONTH', (select historic_build_date from ${Database}.data_layer.historic_build_date)-1) then cast(wh.browser_date as date) else cast(null as date) end) as last_login_date_lm\nfrom ${Database}.db.web_browser_hist wh\ninner join ${Database}.dedupe.xref_name_urn xr on xr.name_urn = trim(wh.name_urn)\ninner join ${Database}.dedupe.ref_business_unit_brand bu on bu.brand_id = wh.brand_id\nleft join ${Database}.data_layer.build_dp_2_prep dp on dp.name_urn = wh.name_urn\n                                      and dp.data_controller_id = wh.data_controller_id\n                                      and dp.dp_date = cast(wh.browser_date as date)\n                                      and dp.dp_mailable = 0\n                                      and dp.dp_emailable = 0\nwhere wh.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    and dp.name_urn is null\n    and trim(wh.source) <> 'REG_GIG_Initial_Load'\ngroup by 1,2;\n\n--drop table if exists ${Database}.data_layer.build_dp_2_prep;\n\ndrop table if exists ${Database}.data_layer.build_supps_first_reg;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_first_reg\nas\nselect\n    xr.cid,\n    case\n        when bu.business_unit_id is not null then bu.business_unit_id\n        else nm.source_data_controller_id\n    end as business_unit_id,\n    min(nm.reg_date) as first_reg_date,\n    min(case when nm.source_date < date_trunc('MONTH', (select historic_build_date from ${Database}.data_layer.historic_build_date)-1) then nm.reg_date else cast(null as date) end) as first_reg_date_lm\nfrom ${Database}.db.names nm\ninner join ${Database}.dedupe.xref_name_urn xr on xr.name_urn = trim(nm.name_urn)\ninner join ${Database}.dedupe.ref_business_unit_brand bu on bu.brand_id = nm.source_brand_id\nwhere nm.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\ngroup by 1,2;\n\n\n\n/******************************************************************************************\n*                                      Final Suppressions Tables\n******************************************************************************************/\n\n-- preserve names supps\ndrop table if exists ${Database}.dedupe.names_supps;\n\nCREATE OR REPLACE TABLE ${Database}.dedupe.names_supps\nas\nselect\n    pr.name_urn,\n    pr.cid,\n    --        data quality flags - if the record has a bad record then flag them as a suppression\n    coalesce(case when sso.address_score      = 1 then 0 else 1 end,1) as supp_bad_address,\n    coalesce(case when sso.name_score         = 1 then 0 else 1 end,1) as supp_bad_name,\n    coalesce(case when sso.phone_home_score   = 1 then 0 else 1 end,1) as supp_bad_phone_home,\n    coalesce(case when sso.phone_mobile_score = 1 then 0 else 1 end,1) as supp_bad_phone_mobile,\n    coalesce(case when sso.phone_work_score   = 1 then 0 else 1 end,1) as supp_bad_phone_work,\n    coalesce(case when sso.email_score        = 1 then 0 else 1 end,1) as supp_bad_email,\n    --        manual suppressions - if the household, phone number or email appears in the manual supps file then flag as a suppression\n    coalesce(smsg.manual_channel_mail,0)        as supp_manual_channel_mail,\n    coalesce(sme.manual_channel_email,0)        as supp_manual_channel_email,\n    greatest\n    (\n        coalesce(smpsg.manual_channel_phone,0),\n        coalesce(smpsue.manual_channel_phone,0),\n        coalesce(smpw.manual_channel_phone,0)\n    )                                           as supp_manual_channel_phone,\n    --        deads and goneaways from suppression matching above\n    coalesce(sd.dead_cid,0)                     as supp_dead,\n    coalesce(sg.gone_cid,0)                     as supp_goneaway,\n    coalesce(sc.child_cid,0)                    as supp_child,\n    --        email bounces\n    case\n        when sb.bounce_email = 1 then 1\n        when sb.old_bounce_email = 1 and pr.data_date <= sb.bounce_date then 1\n        else 0\n    end                                         as supp_bounce,\n    coalesce(so.offshore      ,0)               as supp_offshore,\n    sso.first_supp_email_date,\n    sme.first_supp_manual_date,\n    sb.first_supp_bounce_date,\n    sd.first_supp_dead_date,\n    sc.first_supp_child_date,\n    pr.add1,\n    pr.email,\n    pr.phone_home,\n    pr.phone_mobile,\n    pr.phone_work\nfrom ${Database}.data_layer.build_supps_prep_name_urn pr\nleft join ${Database}.data_layer.build_supps_names_supps_quality            sso    on pr.name_urn     = sso.name_urn\nleft join ${Database}.data_layer.build_supps_names_supps_manual_hh_id       smsg   on pr.hid          = smsg.hid\nleft join ${Database}.data_layer.build_supps_names_supps_manual_email       sme    on lower(trim(pr.email))        = lower(trim(sme.email))\nleft join ${Database}.data_layer.build_supps_names_supps_manual_phone       smpsg  on pr.phone_home   = smpsg.phone\nleft join ${Database}.data_layer.build_supps_names_supps_manual_phone       smpsue on pr.phone_mobile = smpsue.phone\nleft join ${Database}.data_layer.build_supps_names_supps_manual_phone       smpw   on pr.phone_work   = smpw.phone\nleft join ${Database}.data_layer.build_supps_names_supps_goneaway_cid       sg     on pr.cid          = sg.cid        and pr.hid = sg.hid\nleft join ${Database}.data_layer.build_supps_names_supps_dead_cid           sd     on pr.cid          = sd.cid\nleft join ${Database}.data_layer.build_supps_names_supps_child              sc     on pr.cid          = sc.cid\nleft join ${Database}.data_layer.build_supps_names_supps_bounce_email       sb     on lower(trim(pr.email))        = lower(trim(sb.email))\nleft join ${Database}.data_layer.build_supps_offshore                       so     on pr.hid          = so.hid;\n\n\n-- tidy a bit\n--drop table if exists ${Database}.data_layer.build_supps_offshore;\n--drop table if exists ${Database}.data_layer.build_supps_names_supps_quality;\n--drop table if exists ${Database}.data_layer.build_supps_names_supps_manual_phone;\n--drop table if exists ${Database}.data_layer.build_supps_names_supps_manual_hh_id;\n--drop table if exists ${Database}.data_layer.build_supps_names_supps_manual_email;\n--drop table if exists ${Database}.data_layer.build_supps_names_supps_goneaway_cid;\n--drop table if exists ${Database}.data_layer.build_supps_names_supps_dead_cid;\n--drop table if exists ${Database}.data_layer.build_supps_names_supps_child;\n--drop table if exists ${Database}.data_layer.build_supps_names_supps_bounce_email;\n--drop table if exists ${Database}.data_layer.build_supps_prep_name_urn;\n\n\ndrop table if exists ${Database}.data_layer.build_supps_email;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_email\nas\nselect\n    email,\n    max(supp_bad_email) as supp_bad_email,\n    max(supp_manual_channel_email) as supp_manual_channel_email,\n    max(supp_bounce) as supp_bounce,\n    min(first_supp_email_date) as first_supp_email_date,\n    min(first_supp_manual_date) as first_supp_manual_date,\n    min(first_supp_bounce_date) as first_supp_bounce_date\nfrom ${Database}.dedupe.names_supps\nwhere email > ''\ngroup by email;\n\n\ndrop table if exists ${Database}.data_layer.build_supps_cid;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_supps_cid\nas\nselect\n    cid,\n    max(supp_dead) as supp_dead,\n    max(supp_child) as supp_child,\n    min(first_supp_dead_date) as first_supp_dead_date,\n    min(first_supp_child_date) as first_supp_child_date\nfrom ${Database}.dedupe.names_supps\ngroup by cid;\n\n\n\n-----------------------------------------------------------\n\n-- create contact flags table\ndrop table if exists ${Database}.data_layer.build_names_contact_flags;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_names_contact_flags\nas\nselect\n    name_urn,\n    cid,\n    case\n        when\n            supp_bad_address                         = 0 and\n            supp_manual_channel_mail                 = 0 and\n            supp_goneaway                            = 0 and\n            supp_dead                                = 0 and\n            supp_child                               = 0 and\n            add1                                     > ''\n        then 1\n        else 0\n    end as mailable_ignoring_dp,\n    case\n        when\n            supp_manual_channel_mail                 = 0 and\n            supp_goneaway                            = 0 and\n            supp_dead                                = 0 and\n            supp_child                               = 0\n        then 1\n        else 0\n    end as mailable_ignoring_dp_address,\n    case\n        when\n            supp_bad_email                           = 0 and\n            supp_manual_channel_email                = 0 and\n            supp_bounce                              = 0 and\n            supp_dead                                = 0 and\n            supp_child                               = 0 and\n            email                                    > ''\n        then 1\n        else 0\n    end as emailable_ignoring_dp,\n    case\n        when\n            (\n                supp_bad_phone_home = 0\n                or supp_bad_phone_work = 0\n            )                                            and\n            supp_manual_channel_phone                = 0 and\n            supp_goneaway                            = 0 and\n            supp_dead                                = 0 and\n            supp_child                               = 0 and\n            (phone_home > '' or phone_work > '')\n        then 1\n        else 0\n    end as phoneable_ignoring_dp,\n    case\n        when\n            supp_bad_phone_mobile                    = 0 and\n            supp_manual_channel_phone                = 0 and\n            supp_dead                                = 0 and\n            supp_child                               = 0 and\n            phone_mobile                             > ''\n        then 1\n        else 0\n    end as smsable_ignoring_dp\nfrom ${Database}.dedupe.names_supps;\n\n-----------------------------------------------------------\n\n-- Create table for SMA youngest child\ndrop table if exists ${Database}.data_layer.names_supps_dp_brand_sma;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.names_supps_dp_brand_sma\nas\nselect distinct\n    (select brand_id from ${Database}.dedupe.ref_brand where lower(brand) = 'sma') as brand_id,\n    coalesce(nt.cid,dea.cid) as cid,\n    first_value(coalesce(dea.dob,nt.reg_date)) over\n        (\n            partition by coalesce(nt.cid,dea.cid)\n            order by coalesce(dea.dob,nt.reg_date) desc nulls last\n        ) as m_dob\nfrom ${Database}.data_layer.names_tmp nt\nfull outer join ${Database}.dedupe.dependant dea on dea.cid = nt.cid\n                                         and dea.valid = 1\nwhere lower(nt.source) regexp '.*reg_umb.*'\n    or dea.cid is not null;\n\n\nalter warehouse set warehouse_size = 'Xlarge';\n\ndrop table if exists ${Database}.dedupe.names_supps_dp_brand_email;\n\nCREATE OR REPLACE TABLE ${Database}.dedupe.names_supps_dp_brand_email\nas\nselect\n    dp.cid,\n    dp.email,\n    xref.business_unit_id,\n    xref.division_id,\n    dp.brand_id,\n    dp.dp_first_date,\n    coalesce(dpe.dp_last_emailable_date,dp.dp_last_date) as dp_last_date,\n\tdp_last_mailable_date,\n\tdp_last_emailable_date,\n    coalesce(dpe.dp_last_positive_emailable_date,dp.dp_last_positive_date) as dp_last_positive_date,\n\tdp_last_positive_date as dp_last_positive_mailable_date,\n\tdp_last_positive_emailable_date,\n    coalesce(dpe.dp_last_emailable_date_lm,dp.dp_last_date_lm) as dp_last_date_lm,\n\tdp_last_date_lm as dp_last_mailable_date_lm,\n\tdp_last_emailable_date_lm,\n    coalesce(dpe.dp_last_positive_emailable_date_lm,dp.dp_last_positive_date_lm) as dp_last_positive_date_lm,\n\tdp_last_positive_date_lm as dp_last_positive_mailable_date_lm,\n\tdp_last_positive_emailable_date_lm,\n    sma.m_dob as sma_m_dob,\n    ee.last_open_date,\n    ee.last_open_date_lm,\n    ee.last_open_date_ios15,\n    ee.last_open_date_ios15_lm,\n    lo.last_login_date,\n    lo.last_login_date_lm,\n    fr.first_reg_date,\n    fr.first_reg_date_lm,\n    case\n        when dpe.dp_last_positive_emailable_date is null\n            and dp.dp_last_positive_date is null\n            and ee.last_open_date is null\n            and lo.last_login_date is null\n            and fr.first_reg_date is null then cast(null as date)\n        else greatest\n                 (\n                     coalesce(dpe.dp_last_positive_emailable_date,dp.dp_last_positive_date,cast('1900-01-01' as date)),\n                     coalesce(ee.last_open_date,cast('1900-01-01' as date)),\n                     coalesce(lo.last_login_date,cast('1900-01-01' as date)),\n                     coalesce(fr.first_reg_date,cast('1900-01-01' as date))\n                 )\n    end as customer_retention_date,\n    case\n        when dpe.dp_last_positive_emailable_date_lm is null\n            and dp.dp_last_positive_date_lm is null\n            and ee.last_open_date_lm is null\n            and lo.last_login_date_lm is null\n            and fr.first_reg_date_lm is null then cast(null as date)\n        else greatest\n                 (\n                     coalesce(dpe.dp_last_positive_emailable_date_lm,dp.dp_last_positive_date_lm,cast('1900-01-01' as date)),\n                     coalesce(ee.last_open_date_lm,cast('1900-01-01' as date)),\n                     coalesce(lo.last_login_date_lm,cast('1900-01-01' as date)),\n                     coalesce(fr.first_reg_date_lm,cast('1900-01-01' as date))\n                 )\n    end as customer_retention_date_lm,\n    case\n        when dpe.dp_last_positive_emailable_date is null\n            and dp.dp_last_positive_date is null\n            and ee.last_open_date_ios15 is null\n            and lo.last_login_date is null\n            and fr.first_reg_date is null then cast(null as date)\n        else greatest\n                 (\n                     coalesce(dpe.dp_last_positive_emailable_date,dp.dp_last_positive_date,cast('1900-01-01' as date)),\n                     coalesce(ee.last_open_date_ios15,cast('1900-01-01' as date)),\n                     coalesce(lo.last_login_date,cast('1900-01-01' as date)),\n                     coalesce(fr.first_reg_date,cast('1900-01-01' as date))\n                 )\n    end as customer_retention_date_ios15,\n    case\n        when dpe.dp_last_positive_emailable_date_lm is null\n            and dp.dp_last_positive_date_lm is null\n            and ee.last_open_date_ios15_lm is null\n            and lo.last_login_date_lm is null\n            and fr.first_reg_date_lm is null then cast(null as date)\n        else greatest\n                 (\n                     coalesce(dpe.dp_last_positive_emailable_date_lm,dp.dp_last_positive_date_lm,cast('1900-01-01' as date)),\n                     coalesce(ee.last_open_date_ios15_lm,cast('1900-01-01' as date)),\n                     coalesce(lo.last_login_date_lm,cast('1900-01-01' as date)),\n                     coalesce(fr.first_reg_date_lm,cast('1900-01-01' as date))\n                 )\n    end as customer_retention_date_ios15_lm,\n    dp.dp_mailable,\n    coalesce(dpe.dp_emailable,0) as dp_emailable,\n    coalesce(dpe.dp_emailable_lm,0) as dp_emailable_lm,\n    coalesce(dpe.dp_newsletter,0) as dp_newsletter,\n    case when suc.unsubscribe_channel_mail_date >= dp.dp_last_mailable_date - 1 then 1 else 0 end as supp_unsubscribe_channel_mail,\n    case\n        when sue.unsubscribe_channel_email_date >= dpe.dp_last_emailable_date - 1 then 1\n        when sue.unsubscribe_channel_email_date >= dpe.dp_last_newsletter_date - 1 then 1\n        else 0\n    end as supp_unsubscribe_channel_email,\n    coalesce(es.supp_bad_email,1) as supp_bad_email,\n    coalesce(es.supp_manual_channel_email,0) as supp_manual_channel_email,\n    coalesce(es.supp_bounce,0) as supp_bounce,\n    coalesce(cs.supp_dead,0) as supp_dead,\n    coalesce(cs.supp_child,0) as supp_child,\n    case\n        when dp.brand_id = (select brand_id from ${Database}.dedupe.ref_brand where lower(brand) = 'sma')\n            and (coalesce(dpe.dp_last_emailable_date_lm, dp.dp_last_date_lm) is null or coalesce(dpe.dp_last_emailable_date_lm, dp.dp_last_date_lm) < add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-33))\n            and coalesce(dpe.dp_last_emailable_date, dp.dp_last_date) >= to_date(to_char((select historic_build_date from ${Database}.data_layer.historic_build_date),'YYYYMM01'),'YYYYMMDD') then 0\n        when dp.brand_id = (select brand_id from ${Database}.dedupe.ref_brand where lower(brand) = 'sma')\n            and sma.m_dob >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date)-7,-36) then 0\n        when dp.brand_id = (select brand_id from ${Database}.dedupe.ref_brand where lower(brand) = 'sma') then 1\n        when coalesce(dpe.dp_last_positive_emailable_date,dp.dp_last_positive_date) >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-24)\n            or ee.last_open_date >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-24)\n            or lo.last_login_date >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-24)\n            or fr.first_reg_date >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-24) then 0\n        else 1\n    end as supp_engagement,\n    sue.first_supp_unsub_date,\n    es.first_supp_email_date,\n    es.first_supp_manual_date,\n    es.first_supp_bounce_date,\n    cs.first_supp_dead_date,\n    cs.first_supp_child_date,\n    --sources\n    dp.dp_first_source,\n    coalesce(dpe.dp_last_emailable_source,dp.dp_last_source) as dp_last_source,\n    dp.dp_last_mailable_source,\n    dp.dp_last_positive_source as dp_last_positive_mailable_source,\n    dpe.dp_last_emailable_source,\n    dpe.dp_last_positive_emailable_source\nfrom ${Database}.data_layer.build_supps_names_dp_result dp\ninner join ${Database}.data_layer.build_ref_data_controller_bus_unit_xref xref on xref.brand_id = dp.brand_id\nleft join ${Database}.data_layer.build_supps_names_dp_result_email dpe on lower(trim(dpe.email)) = lower(trim(dp.email))\n                                                           and dpe.brand_id = dp.brand_id\nleft join ${Database}.data_layer.build_supps_names_supps_unsubscribe_cid_brand suc on suc.cid = dp.cid\n                                                                       and suc.brand_id = dp.brand_id\nleft join ${Database}.data_layer.build_supps_names_supps_unsubscribe_email_brand sue on lower(trim(sue.email)) = lower(trim(dp.email))\n                                                                         and sue.brand_id = dp.brand_id\nleft join ${Database}.data_layer.build_supps_cid cs on cs.cid = dp.cid\nleft join ${Database}.data_layer.build_supps_email es on lower(trim(es.email)) = lower(trim(dp.email))\nleft join ${Database}.data_layer.build_supps_email_engagement ee on lower(trim(ee.email)) = lower(trim(dp.email))\n                                                     and ee.business_unit_id = xref.business_unit_id\nleft join ${Database}.data_layer.build_supps_last_login lo on lo.cid = dp.cid\n                                               and lo.business_unit_id = xref.business_unit_id\nleft join ${Database}.data_layer.build_supps_first_reg fr on fr.cid = dp.cid\n                                              and fr.business_unit_id = xref.business_unit_id\nleft join ${Database}.data_layer.names_supps_dp_brand_sma sma on sma.cid = dp.cid\n                                                  and sma.brand_id = dp.brand_id;\n\nalter warehouse set warehouse_size = 'Large';\n\n--drop table if exists ${Database}.data_layer.build_supps_names_dp_result;\n--drop table if exists ${Database}.data_layer.build_ref_data_controller_bus_unit_xref;\n--drop table if exists ${Database}.data_layer.build_supps_names_dp_result_email;\n--drop table if exists ${Database}.data_layer.build_supps_names_supps_unsubscribe_cid_brand;\n--drop table if exists ${Database}.data_layer.build_supps_names_supps_unsubscribe_email_brand;\n--drop table if exists ${Database}.data_layer.build_supps_email;\n--drop table if exists ${Database}.data_layer.build_supps_cid;\n--drop table if exists ${Database}.data_layer.build_supps_email_engagement;\n--drop table if exists ${Database}.data_layer.build_supps_last_login;\n--drop table if exists ${Database}.data_layer.build_supps_first_reg;\n--drop table if exists ${Database}.data_layer.names_supps_dp_brand_sma;\n\n\n\n-- create email contact flags table\ndrop table if exists ${Database}.data_layer.build_email_brand_contact_flags;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_email_brand_contact_flags\nas\nselect\n    *\nfrom (\n         select\n             cid,\n             email,\n             business_unit_id,\n             division_id,\n             brand_id,\n             dp_first_date,\n             dp_last_date,\n            --mail\n\t\t\t dp_last_mailable_date,\n\t\t\t dp_last_positive_mailable_date,\n\t\t\t dp_last_mailable_date_lm,\n\t\t\t dp_last_positive_mailable_date_lm,\n            --email\n\t\t\t dp_last_emailable_date,\n\t\t\t dp_last_positive_emailable_date,\n\t\t\t dp_last_emailable_date_lm,\n\t\t\t dp_last_positive_emailable_date_lm,\n             last_open_date,\n             last_open_date_ios15,\n             case\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where brand = 'SMA') then sma_m_dob\n                 when customer_retention_date = '1900-01-01' then cast(null as date)\n                 else customer_retention_date\n             end as customer_retention_group_date,\n             case\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where brand = 'SMA') then sma_m_dob\n                 when customer_retention_date_ios15 = '1900-01-01' then cast(null as date)\n                 else customer_retention_date_ios15\n             end as customer_retention_group_date_ios15,\n             case\n                 --SMA specific - start\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and dp_last_date_lm between add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-36) and add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-33)\n                     and dp_last_date >= to_date(to_char(((select historic_build_date from ${Database}.data_layer.historic_build_date)-1),'YYYYMM01'), 'YYYYMMDD') then 2 --reactivated\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and (dp_last_date_lm is null or dp_last_date_lm < add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-36))\n                     and dp_last_date >= to_date(to_char(((select historic_build_date from ${Database}.data_layer.historic_build_date)-1),'YYYYMM01'), 'YYYYMMDD') then 3 --new\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-33) then 1 --safe base\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-35) then 4  --at risk base\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date)-7,-36) then 5  --data orphan\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-37) then 6  --Gone this month\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma') then 7 --Gone gone - or no dob\n                 --SMA specific - end\n                 when customer_retention_date_lm between add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-24) and add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-21)\n                     and customer_retention_date >= to_date(to_char(((select historic_build_date from ${Database}.data_layer.historic_build_date)-1),'YYYYMM01'), 'YYYYMMDD') then 2 --reactivated\n                 when (customer_retention_date_lm is null or customer_retention_date_lm < add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-24))\n                     and customer_retention_date >= to_date(to_char(((select historic_build_date from ${Database}.data_layer.historic_build_date)-1),'YYYYMM01'), 'YYYYMMDD') then 3 --new\n                 when customer_retention_date >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-21) then 1  --safe base\n                 when customer_retention_date >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-23) then 4  --at risk base\n                 when customer_retention_date >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-24) then 5  --data orphans\n                 when customer_retention_date >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-25) then 6  --gone this month\n                 when customer_retention_date is not null then 7 --gone ever\n                 else 8 --no opted in/out\n             end as customer_retention_group_base,\n             case\n                 --SMA specific - start\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and dp_last_date_lm between add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-36) and add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-33)\n                     and dp_last_date >= to_date(to_char(((select historic_build_date from ${Database}.data_layer.historic_build_date)-1),'YYYYMM01'), 'YYYYMMDD') then 2 --reactivated\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and (dp_last_date_lm is null or dp_last_date_lm < add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-36))\n                     and dp_last_date >= to_date(to_char(((select historic_build_date from ${Database}.data_layer.historic_build_date)-1),'YYYYMM01'), 'YYYYMMDD') then 3 --new\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-33) then 1 --safe base\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-35) then 4  --at risk base\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date)-7,-36) then 5  --data orphan\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-37) then 6  --Gone this month\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma') then 7 --Gone gone - or no dob\n                 --SMA specific - end\n                 when customer_retention_date_ios15_lm between add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-24) and add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-21)\n                     and customer_retention_date_ios15 >= to_date(to_char(((select historic_build_date from ${Database}.data_layer.historic_build_date)-1),'YYYYMM01'), 'YYYYMMDD') then 2 --reactivated\n                 when (customer_retention_date_ios15_lm is null or customer_retention_date_ios15_lm < add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-24))\n                     and customer_retention_date_ios15 >= to_date(to_char(((select historic_build_date from ${Database}.data_layer.historic_build_date)-1),'YYYYMM01'), 'YYYYMMDD') then 3 --new\n                 when customer_retention_date_ios15 >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-21) then 1  --safe base\n                 when customer_retention_date_ios15 >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-23) then 4  --at risk base\n                 when customer_retention_date_ios15 >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-24) then 5  --data orphans\n                 when customer_retention_date_ios15 >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-25) then 6  --gone this month\n                 when customer_retention_date_ios15 is not null then 7 --gone ever\n                 else 8 --no opted in/out\n             end as customer_retention_group_base_ios15,\n             case\n                 when first_supp_dead_date >= to_date(to_char(((select historic_build_date from ${Database}.data_layer.historic_build_date)-1),'YYYYMM01'), 'YYYYMMDD') and supp_dead = 1 then 1 --dead this month\n                 when supp_dead = 1 then 2\n                 when first_supp_manual_date >= to_date(to_char(((select historic_build_date from ${Database}.data_layer.historic_build_date)-1),'YYYYMM01'), 'YYYYMMDD') and supp_manual_channel_email = 1 then 3\n                 when supp_manual_channel_email = 1 then 4\n                 when first_supp_bounce_date >= to_date(to_char(((select historic_build_date from ${Database}.data_layer.historic_build_date)-1),'YYYYMM01'), 'YYYYMMDD') and supp_bounce = 1 then 5\n                 when supp_bounce = 1 then 6\n                 when first_supp_unsub_date >= to_date(to_char(((select historic_build_date from ${Database}.data_layer.historic_build_date)-1),'YYYYMM01'), 'YYYYMMDD') and supp_unsubscribe_channel_email = 1 then 7\n                 when supp_unsubscribe_channel_email = 1 then 8\n                 when dp_emailable_lm = 1 and dp_emailable = 0 then 9\n                 when dp_emailable = 0 then 10\n                 when supp_engagement = 1 then 11\n                 else 12\n             end as customer_suppression_group_base,\n             case\n                 when\n                     dp_mailable                              = 1 and\n                     supp_unsubscribe_channel_mail            = 0 and\n                     supp_dead                                = 0 and\n                     supp_child                               = 0 and\n                     supp_engagement                          = 0\n                 then 1\n                 else 0\n             end as mailable,\n             case\n                 when\n                     dp_emailable                             = 1 and\n                     supp_unsubscribe_channel_email           = 0 and\n                     supp_engagement                          = 0 and\n                     supp_bad_email                           = 0 and\n                     supp_manual_channel_email                = 0 and\n                     supp_bounce                              = 0 and\n                     supp_dead                                = 0 and\n                     supp_child                               = 0 and\n                     email                                    > ''\n                 then 1\n                 else 0\n             end as emailable,\n             case\n                 when\n                     dp_newsletter                            = 1 and\n                     supp_unsubscribe_channel_email           = 0 and\n                     supp_engagement                          = 0 and\n                     supp_bad_email                           = 0 and\n                     supp_manual_channel_email                = 0 and\n                     supp_bounce                              = 0 and\n                     supp_dead                                = 0 and\n                     supp_child                               = 0 and\n                     email                                    > ''\n                 then 1\n                 else 0\n             end as emailable_newsletter,\n             case\n                 when\n                     supp_unsubscribe_channel_mail            = 0 and\n                     supp_dead                                = 0 and\n                     supp_child                               = 0 and\n                     supp_engagement                          = 0\n                 then 1\n                 else 0\n             end as mailable_ignoring_dp,\n             case\n                 when\n                     supp_unsubscribe_channel_email           = 0 and\n                     supp_engagement                          = 0 and\n                     supp_bad_email                           = 0 and\n                     supp_manual_channel_email                = 0 and\n                     supp_bounce                              = 0 and\n                     supp_dead                                = 0 and\n                     supp_child                               = 0 and\n                     email                                    > ''\n                 then 1\n                 else 0\n             end as emailable_ignoring_dp,\n             --sources\n             dp_first_source,\n             dp_last_source,\n            --mail\n             dp_last_mailable_source,\n             dp_last_positive_mailable_source,\n            --email\n             dp_last_emailable_source,\n             dp_last_positive_emailable_source\n         from ${Database}.dedupe.names_supps_dp_brand_email\n     ) supp\nwhere customer_retention_group_base < 7\n    or brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma');\n\nalter warehouse set warehouse_size = 'Xsmall';\n\n\n\n/******************************************************************************************\n*                                         End Procedure\n******************************************************************************************/\n\n-- Create our live names table on unused schema\ndrop table if exists ${Database}.dedupe.names ;\n\nCREATE OR REPLACE TABLE ${Database}.dedupe.names \nas\nselect * from ${Database}.data_layer.names_tmp; \n\n\n\n/**************************************************\n    RUN THE ROLLUPS PROC AS OF HISTORIC DATE\n    USING UNUSED SCHEMA\n***************************************************/\n\n\n/******************************************************************************************\nProgram           : Nestle Rollups\nAuthor            : Lindsay Timms\nClient Name       : Nestle\nJob Number        : \nStandard Machine  : Snowflake\nAmendment History : v01 - LT 20170207 - Created\n                    ... various undocumented changes\n                    v02 - LW 20210803 brand_preference change (NUK05862 rework)\n\t\t\t\t\tv03 - Shira 20220421 exclude RESP_ADE_RMI from acquistion type base creation as this is not an acquired source (it is a response source)\n******************************************************************************************/\n\n\n/******************************************************************************************\n                                         ROLLUP\n******************************************************************************************/\n\n\n---------------------\n-- cid base\n\ndrop table if exists ${Database}.data_layer.build_rollups_cid_base;\n   \nalter warehouse set warehouse_size = 'Large';\n   \nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_cid_base  \nas\nselect \n    cid,\n    max(case when name_urn = latest_name_urn then hid end) as hid,\n    min(bbw_urn) as bbw_urn,\n    max(latest_name_urn) as name_urn,    \n    min(reg_date) as created_date,\n    max(data_date) as updated_date, \n    max(case when name_urn = name_urn_to_mail_ignoring_dp then country_clean end) as country,        \n    min(case when gender = '' then 'X' else gender end) as gender, -- min works assuming 'm','f','x' (gender conflicts are fixed below)\n    max(case when name_urn = name_urn_to_mail_ignoring_dp then postcode end) as postcode,\n    max(case when name_urn = name_urn_to_mail_ignoring_dp then postcode_area_home end) as postcode_area_home,    \n    max(case when name_urn = name_urn_to_mail_ignoring_dp then postcode_district_home end) as postcode_district_home,   \n    max(case when name_urn = name_urn_to_dob then dob end) as dob,\n    --    contactable status     \n    max(mailable_ignoring_dp) as mailable_ignoring_dp,\n    max(emailable_ignoring_dp) as emailable_ignoring_dp,\n    max(phoneable_ignoring_dp) as phoneable_ignoring_dp,\n    max(smsable_ignoring_dp) as smsable_ignoring_dp,    \n    --    which record for that customer is best to contact for each channel   \n    max(name_urn_to_mail_ignoring_dp) as name_urn_to_mail_ignoring_dp,\n    max(name_urn_to_email_ignoring_dp) as name_urn_to_email_ignoring_dp,       \n    max(name_urn_to_phone_ignoring_dp) as name_urn_to_phone_ignoring_dp,   \n    max(name_urn_to_sms_ignoring_dp) as name_urn_to_sms_ignoring_dp\nfrom\n\t(\n\tselect \n\t\tnm.cid\n\t\t,nm.hid\n\t\t,nm.name_urn\n\t\t,nm.bbw_urn\n\t\t,nm.reg_date\n\t\t,nm.data_date\n\t\t,nm.country_clean\n\t\t,nm.gender\n\t\t,nm.postcode\n\t\t,cf.mailable_ignoring_dp\n\t\t,cf.emailable_ignoring_dp\n\t\t,cf.phoneable_ignoring_dp\n\t\t,cf.smsable_ignoring_dp\n\t\t,case\n\t\t\twhen lower(collate(nm.name_urn,'')) not regexp '.*work.*' and upper(nm.postcode) in ('IRELAND','EIRE')                     then 'RO'\n\t\t\twhen lower(collate(nm.name_urn,'')) not regexp '.*work.*' then  case\n\t\t\t\t\t\twhen lower(substring(collate(nm.postcode,''),2,1)) regexp '.*[a-z].*' then left(nm.postcode,2) \n\t\t\t\t\t\telse left(nm.postcode,1) \n\t\t\t\t\tend \n\t\t\telse ''\n\t\tend as postcode_area_home\n\t\t,case\n\t\t\twhen lower(collate(nm.name_urn,'')) not regexp '.*work.*' then case \n\t\t\t\twhen lower(nm.country)='united kingdom' then left(upper(split_part(nm.postcode,' ',1)),10) \n\t\t\t\telse '' \n\t\t\t\tend\n\t\t\telse ''\n\t\tend as postcode_district_home\n\t\t,case \n\t\t\twhen nm.dob = '2001-01-01' then cast(null as date) \n\t\t\twhen nm.dob >= (select historic_build_date from ${Database}.data_layer.historic_build_date) then cast(null as date) \n\t\t\twhen nm.dob <= '1901-01-01' then cast(null as date) \n\t\t\telse nm.dob \n\t\tend as dob\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc, nm.name_urn asc) as Latest_name_urn\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by nm.data_date asc nulls last, nm.reg_date asc nulls last, nm.source_date asc nulls last, nm.bbw_urn asc, nm.name_urn asc) as Earliest_name_urn\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by case when nm.dob is not null then 1 else 0 end desc nulls last, nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc,nm.name_urn asc) as name_urn_to_dob\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by cf.mailable_ignoring_dp desc nulls last, nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc,nm.name_urn asc) as name_urn_to_mail_ignoring_dp\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by cf.emailable_ignoring_dp desc nulls last, nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc,nm.name_urn asc) as name_urn_to_email_ignoring_dp\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by cf.phoneable_ignoring_dp desc nulls last, nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc,nm.name_urn asc) as name_urn_to_phone_ignoring_dp\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by cf.smsable_ignoring_dp desc nulls last, nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc,nm.name_urn asc) as name_urn_to_sms_ignoring_dp\n\tfrom ${Database}.dedupe.names nm \n\tinner join ${Database}.data_layer.build_names_contact_flags cf on nm.name_urn = cf.name_urn\n\t) t\ngroup by 1\n;\n\nalter warehouse set warehouse_size = 'Xsmall';\n\n---------------------\n--  gender fix\n\ndrop table if exists ${Database}.data_layer.build_rollups_cid_gender_fix;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_cid_gender_fix \nas\nselect   \n    cid,\n    max(case when lower(gender) = 'm' then 1 else 0 end) as male,\n    max(case when lower(gender) = 'f' then 1 else 0 end) as female\nfrom ${Database}.dedupe.names\ngroup by cid\nhaving  max(case when lower(gender) = 'm' then 1 else 0 end) = 1\n    and max(case when lower(gender) = 'f' then 1 else 0 end) = 1;\n\n\n---------------------\n--cid pets\n\n--Create list of \"DECEASED\" names\ndrop table if exists ${Database}.data_layer.deceased_name;\nCREATE OR REPLACE TABLE ${Database}.data_layer.deceased_name as\nselect \n    distinct trim(pet_name) as pet_name\nfrom ${Database}.db.pet\nwhere source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\nand (lower(trim(pet_name)) regexp '(.*)(dcsd|decd|deceased|r\\.i\\.p|dec\\.)(.*)'\nor (lower(trim(pet_name)) regexp '.*died.*' and lower(trim(pet_name)) not regexp '(.*)(diedre|diedu|ndied)(.*)')\nor (lower(trim(pet_name)) regexp '.*rip.*' and lower(trim(pet_name)) not regexp '(.*)(ripl|ripe|strip|ripp|trip|crip|rips|grip|ripu|ript|frip|ripo|ripa|prip|riph|ripk)(.*)' and lower(trim(pet_name)) not in ('rip','little rip'))\nor (lower(trim(pet_name)) regexp '.*dead.*' and lower(trim(pet_name)) not regexp '(.*)(deads|dead p|deadr|deadl|deadm|p dead)(.*)'))\n;\n\n-- Create list of all pet names for cleaning\ndrop table if exists ${Database}.data_layer.pet_name_lookup_1;\nCREATE OR REPLACE TABLE ${Database}.data_layer.pet_name_lookup_1 as\nselect \n    distinct upper(trim(pet_name)) as pet_name\nfrom ${Database}.db.pet\nwhere source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n;\n\n--Split names to try and get multiple valid names\ndrop table if exists ${Database}.data_layer.pet_names_split;\nCREATE OR REPLACE TABLE ${Database}.data_layer.pet_names_split as\nselect \n        pet_name\n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 1) as pet_name_1   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 2) as pet_name_2   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 3) as pet_name_3   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 4) as pet_name_4   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 5) as pet_name_5   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 6) as pet_name_6   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 7) as pet_name_7   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 8) as pet_name_8   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 9) as pet_name_9\n    from ${Database}.data_layer.pet_name_lookup_1\n    ;\n\n\ndrop table if exists ${Database}.data_layer.pet_name_lookup_1;\n\n--Create thin table for mapping pet names to all cleaned pet names\ndrop table if exists ${Database}.data_layer.all_pet_names_1;\nCREATE OR REPLACE TABLE ${Database}.data_layer.all_pet_names_1 as   \n--REMOVE UNWANTED CHARACTERS\nselect distinct\n    split.pet_name\n    ,trim(initcap(translate(upper(regexp_replace(split.pet_name_split,'[\\x00-\\x1F|\\x7F]','')), 'ÀÁÂÃÄÅÇÐÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜÝŸŽL©¶³¤¢§º¼½¦®ª«¡¨¯¹»›‰¾†¬±˜~\\|`!\"£$%^*_-=:;@~#<>?', 'aaaaaacdeeeeiiiinoooooosuuuuyyzl'))) as pet_name_split\nfrom\n    (\n    select pet_name, initcap(replace(replace(replace(trim(pet_name_1),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.data_layer.pet_names_split where pet_name_1 > ''\n    union all   \n    select pet_name, initcap(replace(replace(replace(trim(pet_name_2),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.data_layer.pet_names_split where pet_name_2 > ''\n    union all  \n    select pet_name, initcap(replace(replace(replace(trim(pet_name_3),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.data_layer.pet_names_split where pet_name_3 > '' \n    union all\n    select pet_name, initcap(replace(replace(replace(trim(pet_name_4),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.data_layer.pet_names_split where pet_name_4 > '' \n    union all  \n    select pet_name, initcap(replace(replace(replace(trim(pet_name_5),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.data_layer.pet_names_split where pet_name_5 > '' \n    union all\n    select pet_name, initcap(replace(replace(replace(trim(pet_name_6),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.data_layer.pet_names_split where pet_name_6 > '' \n    union all  \n    select pet_name, initcap(replace(replace(replace(trim(pet_name_7),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.data_layer.pet_names_split where pet_name_7 > '' \n    union all\n    select pet_name, initcap(replace(replace(replace(trim(pet_name_8),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.data_layer.pet_names_split where pet_name_8 > '' \n    union all  \n    select pet_name, initcap(replace(replace(replace(trim(pet_name_9),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.data_layer.pet_names_split where pet_name_9 > '' \n    ) split\nwhere trim(initcap(translate(upper(regexp_replace(split.pet_name_split,'[\\x00-\\x1F|\\x7F]','')), 'ÀÁÂÃÄÅÇÐÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜÝŸŽL©¶³¤¢§º¼½¦®ª«¡¨¯¹»›‰¾†¬±˜~\\|`!\"£$%^*_-=:;@~#<>?', 'aaaaaacdeeeeiiiinoooooosuuuuyyzl'))) > ''\n;\n\ndrop table if exists ${Database}.data_layer.pet_name_split;\n\n--Remove everything brackets\nupdate ${Database}.data_layer.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'('||tbw.db.suckchars(pet_name_split,'(',')')||')','');\nupdate ${Database}.data_layer.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'('||tbw.db.suckchars(pet_name_split,'(',')')||')','');\nupdate ${Database}.data_layer.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'('||tbw.db.suckchars(pet_name_split,'(',')')||')','');\nupdate ${Database}.data_layer.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'('||tbw.db.suckchars(pet_name_split,'(',')')||')','');\n\n--Remove everything in square brackets\nupdate ${Database}.data_layer.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'['||tbw.db.suckchars(pet_name_split,'[',']')||']','');\nupdate ${Database}.data_layer.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'['||tbw.db.suckchars(pet_name_split,'[',']')||']','');\nupdate ${Database}.data_layer.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'['||tbw.db.suckchars(pet_name_split,'[',']')||']','');\nupdate ${Database}.data_layer.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'['||tbw.db.suckchars(pet_name_split,'[',']')||']','');\n\n--Remove everything in curly brackets\nupdate ${Database}.data_layer.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'{'||tbw.db.suckchars(pet_name_split,'{','}')||'}','');\nupdate ${Database}.data_layer.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'{'||tbw.db.suckchars(pet_name_split,'{','}')||'}','');\nupdate ${Database}.data_layer.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'{'||tbw.db.suckchars(pet_name_split,'{','}')||'}','');\nupdate ${Database}.data_layer.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'{'||tbw.db.suckchars(pet_name_split,'{','}')||'}','');\n\n--Remove everything following unclosed brackets\nupdate ${Database}.data_layer.all_pet_names_1\nset pet_name_split = replace(pet_name_split,substr(pet_name_split,CHARINDEX('(',pet_name_split,-1)),'')\nwhere CHARINDEX('(',pet_name_split,-1) > CHARINDEX(')',pet_name_split,-1)\n;\n\nupdate ${Database}.data_layer.all_pet_names_1\nset pet_name_split = replace(pet_name_split,substr(pet_name_split,CHARINDEX('[',pet_name_split,-1)),'')\nwhere CHARINDEX('[',pet_name_split,-1) > CHARINDEX(']',pet_name_split,-1)\n;\n\nupdate ${Database}.data_layer.all_pet_names_1\nset pet_name_split = replace(pet_name_split,substr(pet_name_split,CHARINDEX('{',pet_name_split,-1)),'')\nwhere CHARINDEX('{',pet_name_split,-1) > CHARINDEX('}',pet_name_split,-1)\n;\n\nupdate ${Database}.data_layer.all_pet_names_1\nset pet_name_split = trim(right(pet_name_split,length(pet_name_split) - 1))\nwhere left(pet_name_split,1) = '.'\n;\n\n--Create cleaned pet name lookup\ndrop table if exists ${Database}.data_layer.all_pet_names;\nCREATE OR REPLACE TABLE ${Database}.data_layer.all_pet_names as\nselect \n    pet_name\n    ,case \n        when left(pet_name_split,1) = '-' then trim(replace(pet_name_split,'-','')) \n        else trim(pet_name_split) \n    end as pet_name_split\nfrom ${Database}.data_layer.all_pet_names_1\n;\n\ndrop table if exists ${Database}.data_layer.all_pet_names_1;\n\n--Create lookup table with flags for reference\ndrop table if exists ${Database}.dedupe.pet_name_lookup;\nCREATE OR REPLACE TABLE ${Database}.dedupe.pet_name_lookup as\nwith flags \nas\n(\n    select \n        pet_name\n        ,case\n             when left(upper(pet_name_split),4) = 'AGE ' then ''\n             when charindex(' AGE ',upper(pet_name_split)) > 1 then left(pet_name_split,charindex(' AGE ',upper(pet_name_split)) - 1)\n             else pet_name_split\n         end as pet_name_split\n        ,case \n            when  replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') in ('gook','spick','spik','prat','stupid')\n                 or       lower(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'CANAL','')) regexp '.*anal.*'           and lower(pet_name_split) not in ('analoui','analts','analuwa','aspanall','banal','branall','bwanali','campanale','canal','canale','canalella','canale-parola','canales','canali','canals','chanal','courbanally','cuanalo','danaldson','ganalon','gnanalingam','gnanalingham','hajyzamanali','hassanali','hassanally','janal','janali','kanal','kanala','kanalas','kanalos','kanalosova','kankanala','khanal','macanally','manalac','manalan','manalang','manalansan','manalastas','manalaysay','manaley','manalili','manally','manalo','manaloto','mcanallen','mcanally','mcdanald','mcdoanald','panal','panaligan','rabanal','rajanala','ramjanali','ramjanally','ramzanali','ranaldi','ranaldo','ranall','ranalli','ranallo','roshanali','sanalitro')\n                 or       replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'URANUS','') in ('ANUS','SMELLMYANUS','HUGHJANUS')           --and lower(pet_name_split) not in ('anush','anusha','anusic','anusiewicz','anusionwu','anuszkiewicz','banushi','banuso','bhanushali','blanusa','deanus','emanus','emmanus','ganuszko','hanus','hanusch','hanusiak','hanusova','hanuszewicz','hermanus','iloanusi','iwanuschak','jaanus','janus','janusaitis','janusas','janusauskaite','janusauskas','janusauskiene','janusevicius','januska','januskaite','januskeviciene','januskevicius','januskeviciute','janusonis','janusz','januszczak','januszczyk','januszek','januszewska','januszewski','januszkiewicz','januszko','mac manus','macmanus','mamanus','manus','manuschka','manuszewski','mc manus','mchanus','mcmanus','mcnanus','ndanusa','ohanusi','ranus','romanus','sanusi','silvanus','stanuszek','tanushi','zanussi')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*arse.*'           and lower(pet_name_split) not in ('arseen','arsenault','arsene','arseneault','arsenio','arsenis','arseniuk','banarse','barseghian','barsellotti','barsey','carse','carsell','carsen','carser','carsewell','carsey','darsey','farser','garsed','gerard-pearse','harse','harsent','hearse','hearsey','karsenbarg','karsera','karseras','kearse','kearsey','larsen','lund-larsen','marse','marseden','marseglia','marseille','marseilles','marsek','marsel','marsell','marsella','marsello','marsen','marsenic','marsey','narse','parse','parsell','parselle','parsells','parsely','parsens','parsey','pearse','pearsey','posarsek','sarsero','scarse','scarsebrook','scarsella','summarsell','swearse','tarsey','tearse')\n            --     or       replace(replace(replace(replace(collate(pet_name_split,''),'''',''),' ',''),'-',''),'&','') regexp 'ass'            and lower(pet_name_split) not in ('abass','abassah','abassi','abbass','abbassi','abbassian','abbassy','abdelmassih','abecassis','abu hassan','abuhassan','admassu','afrassiabi','agass','agassiz','aghassi','aghdassi','akass','akhrass','al hassan','alassad','al-assadi','alassaf','albassam','al-bassam','aldabass','alhassan','al-hassan','alhassani','al-hassani','alhasso','al-hasso','alihassan','ali-hassan','aljassar','alkass','alkassim','allass','allassani','allpass','almassi','alnassar','alnasser','al-nasser','alqassab','al-qassab','alqassimi','altass','altwasser','al-yassin','amass','amasse','amassoul','amirghassemi','anastassi','anastassiades','anastassiou','andrassy','andreassen','andreasson','appassamy','asparassa','assa','assaad','assab','assad','assadi','assadian','assadourian','assadullah','assaed','assael','assaf','assah','assakarah','assal','assali','assall','assalone','assam','assamoi','assamoua','assan','assanah','assanand','assani','assante','assar','assareh','assari','assaritti','assas','assassa','assassi','assayag','assaye','asscher','assefa','assefaw','assefuah','asseily','asselin','assell','assem','assemakis','assemian','assen','assender','assenheim','assenjee','assenso','assenti','asser','asserati','assersohn','asset','asseter','assey','assheton','assheton-smith','assi','assia','assiamah','assibey','assid','assif','assifuah','assig','assili','assim','assimakopoulos','assin','assinder','assing','assini','assiotes','assirati','assiratti','assis','assiter','assitt','asslanian','assmann','asso','associates','assock','assoku','assomull','asson','assor','assou','assouad','assoufi','assoul','assouline','assour','assra','assrafally','assucena','assumpcao','assuncao','assur','atanassov','atanassova','atassi','athanassiou','athanassopoulos','ayadassen','ayassamy','babassana','balassa','baldassari','baldassarra','baldassarre','baldassarri','barass','barkass','barlass','barrass','barrasso','bass','bassa','bassadone','bassage','bassah','bassaid','bassakaropoulos','bassal','bassalian','bassam','bassan','bassani','bassano','bassant','bassaragh','bassas','bassatt','basse','bassell','bassen','bassendale','bassendine','bassenger','bassent','basser','basset','bassett','bassett-cross','bassett-jones','bassett-smith','bassettt','bassey','bassford','bassham','bassi','bassie','bassier','bassil','bassilious','bassill','bassily','bassin','bassindale','bassinder','bassingdale','bassinger','bassingham','bassingthwaighte','bassingthwaite','bassington','bassiony','bassiouni','bassir','bassiri','bassit','bassitt','bassman','bassnett','basso','bassoli','bassom','basson','bassot','bassou','bassous','bassr','bassra','bassral','basstoe','bassue','bass-woodcock','bassy','baylass','bedassie','beedassee','beedassy','belassie','bellass','benassi','benhassine','benriassa','blass','blasse','blennerhasset','blennerhassett','bonass','bonassera','bordass','boumerdassi','bourassa','bownass','brass','brassart','brasse','brasseaux','brassel','brassell','brasser','brassett','brasseur','brassey','brassfield','brassil','brassill','brassington','brassinton','brassley','buglass','bullass','bumpass','burdass','burgass','burglass','byass','cabassi','cafasso','calamassi','camrass','canassa','capasso','carass','carassale','carasso','carcass','carmassi','casamassa','cass','cassa','cassady','cassagne','cassam','cassama','cassambai','cassamo','cassamobai','cassan','cassandra','cassandro','cassanell','cassani','cassano','cassanova','cassap','cassapi','cassar','cassaretto','cassata','casse','cassedy','cassee','cassel','casselden','casseldine','cassell','cassella','casselle','casselles','cassells','casselman','cassels','casselton','cassely','cassem','cassemis','cassen','casser','cassera','cassere','casserley','casserly','cassese','cassettare','cassettari','cassey','cassford','cassi','cassia','cassiano','cassiday','cassiddy','cassidey','cassidi','cassidy','cassie','cassiey','cassillis','cassily','cassim','cassimatis','cassin','cassinelli','cassing','cassingena','cassingham','cassini','cassinos','cassis','cassisa','cassisi','cassisy','cassity','cassius','cassles','cassley','cassling','cassman','cassom','cassomini','casson','cassone','cassoni','casson-smith','cassop','casssidy','casstles','cassule','casswell','cassy','chandradass','chassagnette','chassar','chasseaud','chassebi','chassels','chasser','chassin','chavasse','cherkassky','chevassut','chiassaro','chiasson','christtmass','claassen','claassens','class','classen','classens','classey','classic','classick','classon','colliass','compass','corlass','corrass','cortopassi','crass','crasswell','crassweller','creasser','croudass','crudass','currass','dalmasso','dass','dassa','dassama','dassanaike','dassanayake','dassani','dassaur','dasseville','dassler','dasso','dasson','dassonville','dassow','dassu','dassut','dassy','d''brass','de assis','de grasse','de pass','degrasse','degrassi','del basso','depass','depasse','devassy','devassykutty','diarrassouba','diassona','dilasser','djelassi','d''lasselle','dos passos','douglass','dowglass','dracass','du casse','ducasse','dugasse','duglass','dundass','eassie','eassom','easson','el fassi','el hassan','el-assaad','elassal','elfassi','elfassy','elhassan','el-hassan','elhassani','eliassen','eliasson','el-kassir','elmhassani','elyassi','espinasse','faassen','fairbass','fairbrass','falwasser','fass','fassam','fassan','fassbender','fasseau','fassenfeld','fassenfelt','fasser','fassett','fassihi','fassinger','fassio','fassioms','fassis','fassler','fassnidge','fassom','fassoms','fasson','fassum','fassy','fewlass','fieldgrass','finglass','fracassi','fracasso','frasson','frassoni','furnass','gabbitass','gaddass','galassi','galasso','gass','gassama','gassan','gassar','gasse','gasser','gassick','gasside','gassis','gassman','gassmann','gassner','gasson','gassor','gasston','gassy','gebreselassie','gebreslassie','ghassan','ghassemi','ghassemian','ghiassi','gilgrass','gillgrass','glass','glassar','glassberg','glassborow','glassbrook','glassby','glassco','glasscock','glasscoe','glasscoo','glasse','glassell','glassenbury','glasser','glassett','glassey','glassfield','glassford','glassgow','glassington','glassman','glassock','glasson','glassonbury','glasspell','glasspole','glasspool','glasspoole','glasstone','glassup','glassup-smith','glasswell','goldwasser','goodlass','grass','grassa','grassam','grassby','grasse','grasset','grassham','grassi','grassick','grassie','grassing','grassington','grassini','grasske','grasso','grassom','grasson','grassroots','greenglass','greengrass','grossnass','habassi','habteselassie','hadassi','haileselassie','hajivassiliou','halpass','hass','hassa','hassaan','hassaballa','hassabu','hassack','hassad','hassain','hassaine','hassal','hassall','hassalls','hassam','hassan','hassan ali','hassanali','hassan-ali','hassanally','hassane','hassanein','hassani','hassania','hassanian','hassanien','hassanin','hassaniyeh','hassanjee','hassanpour','hassany','hassanyeh','hassanzada','hassanzadeh','hassard','hassay','hassbani','hasse','hassea','hassein','hassel','hasselbach','hasselby','hasselder','hasseldine','hasseler','hasselgren','hassell','hassells','hasselman','hasselmann','hasselt','hassen','hassent','hasser','hasset','hassett','hassey','hassi','hassiakos','hassian','hassib','hassid','hassie','hassim','hassin','hassine','hassing','hassini','hassion','hassiotis','hasslacher','hassle','hassler','hasslett','hassman','hassn','hasso','hassock','hasson','hassoon','hassoun','hassouna','hassouni','hassy','hawkings-byass','hochstrasser','hoodlass','hudlass','hudlass-galley','hvass','ingrassia','jackson-bass','jamnadass','jarass','jass','jassad','jassal','jassam','jassan','jassar','jassat','jasse','jasseh','jassel','jassell','jasser','jassey','jassi','jassie','jassim','jassin','jasso','jasson','jassop','jassy','jelassi','jhass','jonassen','jonasson','kalbassi','kaltwasser','karahassan','karassek','karassellos','karbassi','karrass','kass','kassa','kassab','kassabian','kassah','kassahun','kassai','kassam','kassama','kassamali','kassan','kassanga','kassanis','kassapian','kassar','kassardjian','kassas','kassay','kassaye','kasse','kasseean','kassel','kassell','kasselman','kassem','kassen','kasser','kassey','kassi','kassidy','kassie','kassier','kassim','kassimatis','kassimi','kassin','kassir','kassiram','kassiras','kassiri','kassis','kassler','kassman','kassner','kasson','kassongo','kassouf','kassous','kassrai','kasstan','kassulke','kassy','khamassi','khass','khassal','klaassen','klass','klassa','klassen','klassnik','klasson','knass','kouassi','kounasso','koylass','krass','krasser','krassnitzer','krassos','krassowska','krassowski','kutassy','labassi','labassiere','lachasseigne','larrassey','lass','lassa','lassak','lassalle','lassam','lassan','lasse','lassen','lasser','lasserre','lasserson','lasseter','lassetter','lassey','lassiter','lasslett','lassman','lassmans','lassnig','lasso','lasson','lassoued','lassu','lassus','lawlass','laxton-bass','le gassick','le gassicke','lebrasse','lecrass','legassick','lemass','lemasson','levasseur','lhassani','liassi','liassides','lomass','losasso','lovelass','lowmass','lucass','lucassi','lynass','maass','maassen','macassey','magassa','mallpass','malpass','manasse','manasseh','manassian','manassie','mandon-gassman','mass','massa','massaccesi','massad','massah','massaio','massalay','massall','massally','massam','massamba','massan','massanet','massaquoi','massar','massara','massarano','massard','massarella','massarelli','massari','massaro','massart','massawe','massay','massbery','masscy','masse','massee','massei','massel','masselis','massell','massen','massender','massengo','massenhove','masser','masserella','masseri','masseroli','masset','massett','massetti','massey','massey-chase','masshar','masshedar','massheder','massi','massia','massiah','massias','massicks','massicott','massicotte','massidda','massie','massie-taylor','massih','massimi','massimiliano','massimino','massimo','massin','massing','massingale','massingberd','massingberd-mundy','massingham','massinghan','massini','massink','massion','massironi','massiter','massmann','masso','massocchi','massod','massom','masson','massone','massood','massop','massos','massot','massotti','massoud','massoudi','massoudinia','massouh','massoumi','massoumian','massoura','massouras','massow','massri','masssey','massudi','massum','massumi','massy','massy-collier','massyn','matassa','matassi','matthiasson','mattrass','mayassi','mcassey','mcglasson','mcnasser','menassa','middlemass','minassian','moass','mobasser','mobasseri','modasser','mohades-kassai','montasser','morhtassi','motavassel','mouqtassid','mouyiassi','movassagh','movassaghi','mudassar','mudasser','mudassir','mullasseril','munasser','muntasser','nambi-lasseko','nass','nassa','nassab','nassali','nassan','nassanga','nassar','nassari','nassaris','nassau','nasse','nasseem','nassef','nassehi','nassem','nasser','nasseraldeen','nassereddine','nasseri','nassery','nasseur','nassey','nassi','nassib','nassie','nassif','nassim','nassir','nassiri','nassir-pour','nassiry','nasskau','nasso','nassolo','nasson','nassor','nassour','nassr','nassralla','nassrat','nassuna','nassuphis','nassur','natrass','nattrass','negassi','neiass','nekrassov','ngassa','nicholass','nicklasson','niklasson','nyass','nyassi','onassis','osei-assibey','ouassine','overmass','pallagrass','pallass','papavassiliou','pass','passa','passafonti','passalacqua','passam','passan','passano','passant','passantino','passap','passaportis','passard','passarelli','passarello','passariello','passaris','passaro','passas','passat','passaway','passby','passchier','passco','passe','passee','passell','passells','passenger','passer','passera','passerello','passeri','passerini','passes','passet','passett','passey','passfield','passhore','passi','passiatore','passingham','passinghan','passley','passman','passmoor','passmoore','passmore','passon','passoni','passons','passos','passow','passwala','passway','passy','pawass','payassis','pendegrass','petrassi','petrasso','peyrasse','picasso','pintassilgo','pitassi','plass','plassard','plasse','plassing','pleass','polglass','poonwassie','portass','pragassen','prassas','prassede','prasser','purgass','qassem','qassemi','qassim','qassin','quassim','quatermass','rabassa','rabasse','ramadass','ramasso','ramdass','rashbass','rass','rassa','rassad','rassam','rassan','rassekh','rassel','rassell','rasser','rassi','rassid','rassim','rassiter','rasson','rassool','rassouli','rassul','regassa','rohrbasser','rouass','rungassamy','salmassian','sanassee','sanassy','sancassani','sant-cassia','sass','sassa','sassano','sassarini','sasse','sassella','sassen','sasserath','sassi','sassienie','sasso','sasson','sassone','sassone-corsi','sassons','sassoon','sassu','schmassmann','scott-masson','seeneevassen','selassie','sepassi','shallcrass','shanassy','shankardass','shaughnassy','shere-massey','simonassi','slassor','smargiassi','snodgrass','spassov','spassova','stallabrass','stallebrass','stallibrass','stallybrass','stass','stassen','stassi','stassiouk','strass','strassacappa','strassen','strasser','strassheim','strasshine','sunassee','sunnassee','syass','tabassam','tabassum','tabassun','tahmassebi','tamassy','targrass','tass','tassa','tassabehji','tassadaq','tassaker','tassan','tassano','tassara','tassart','tassawar','tasse','tassel','tassell','tasselli','tassi','tassie','tassier','tassiker','tassinari','tasso','tassone','tassou','tavassoli','tesfaselassie','thassim','thomass','thomassen','thomasset','thomassin','thomasson','thoulass','tirabasso','titmass','tobiassen','tomass','tomassen','tomassi','tomassini','tomasso','tomasson','toplass','trapasso','travasso','travassos','treppass','trippass','trivass','ul hassan','ulhassan','ul-hassan','valassis','van assen','van hasselt','vanassche','vangasse','vass','vassa','vassal','vassall','vassalli','vassallo','vassalos','vassan','vassantlal','vassar','vassaramo','vassay','vasse','vasseghi','vassel','vasselin','vassell','vassello','vassen','vasser','vasseur','vassey','vassi','vassib','vassie','vassil','vassila','vassilakis','vassilas','vassileiou','vassilev','vassileva','vassili','vassiliades','vassiliadis','vassiliev','vassilieva','vassiliou','vassilis','vassiljev','vassiljeva','vassilopoulos','vassiloulis','vasso','vasson','vassoodaven','vassos','vassou','vettasseri','vigrass','vincatassin','vlassis','vlassov','wanlass','wass','wassal','wassall','wassan','wasse','wassef','wassel','wassell','wassem','wassenaar','wasser','wasserberg','wasserman','wassermann','wasserstein','wassi','wassie','wassiee','wassif','wassili','wassim','wassing','wassink','wassmer','wasson','wasswa','wattass','willgrass','windass','windgassen','windrass','wiseglass','woldeselassie','woodmass','woolass','wrong assistant','xassan','yass','yassa','yassar','yasseen','yassen','yasser','yassi','yassien','yassim','yassin','yassine','yassini','yassir','yassrebi','zachariassen')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') in ('ass','asshole')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*ballsack.*'       and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bastard.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bitch.*'          and lower(pet_name_split) not in ('babitcheva','bitcha','bitchakdjian','bitcham','bitchanka','bitchard','bitchass','bitchburn','bitchel','bitchell','bitchen','bitchener','bitchenkova','bitcheno','bitchenor','bitcher','bitcherla','bitchers','bitchfield','bitchford','dembitchi','subitcha')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*biatch.*'         and lower(pet_name_split) not in ('biatchoe','biatchon','mbiatchou','mbiatchou-nya')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bloody.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*blowjob.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bollock.*'        and lower(lower(pet_name_split)) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bollok.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bollox.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*boner.*'          and lower(pet_name_split) not in ('amboner','bonera','bonera-callan','boner-cambell','bonere','boneret','bonerhygena','boneri','bonerjea','bonerpairet','bonerr','carboner','carbonera','carboneras','carbonere','carboneri','carbonero','eboner','kabonero','ortiz carboneres','osboner','rabonerabone','rathboner','rathboners')\n                 or       lower(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'BOOBEAR',''),'BOOBOO','')) regexp '.*boob.*'           and lower(pet_name_split) not in ('aboobacker','aboobakar','aboobaker','aboobucker','boobbyer','boobis','mahboob','mahboobani','mehboob','mohoboob')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bugger.*'         and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'BUMBLE',''),'BINGBUM','')) regexp '.*bum.*'            and lower(pet_name_split) not in ('album','babumba','bumatay','bumba','bumbra','bumble','bumby','bumford','bumfrey','bumpas','bumpstead','bumpsteed','bumpus','bumrah','mbumba')\n                 or       lower(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'BUTTON',''),'BUTTER','')) regexp '.*butt.*'           and lower(pet_name_split) not in ('albutt','allbutt','archbutt','baybutt','bhabutta','butt','buttaci','buttall','buttar','buttarazzi','buttarelli','buttars','buttel','buttell','butten','buttenshaw','butter','buttercase','butterell','butterfeild','butterfield','butterfiled','butterfill','butterfly','butterick','butterill','butteris','butteriss','butterley','butterly','butters','buttersworth','butterton','butterwick','butterwith','butterwood','butterworth','butterwoth','buttery','buttfield','butti','buttice','buttifant','buttifint','buttigieg','buttimer','buttimore','buttiner','butting','buttinger','buttivant','buttle','buttleman','buttler','buttley','buttling','buttner','buttolph','button','buttons','button-stephens','buttress','buttrey','buttrick','buttrill','buttriss','buttrum','butts','buttwell','buttworth','callbutt','carbutt','ebbutt','gabbutt','garbutt','gorbutt','gurbutt','harbutt','holbutt','hurlbutt','lebutt','mabbutt','ollenbuttel','parbutt','sarbutt','sarbutts','sbuttoni','sobutta','sowerbutts','stuart-buttle','talbutt','tarbutt','tebbutt','tebutt','tibbutt','tobutt','turbutt','wallbutton','warbutton')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*clitoris.*'       and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'PEACOCK',''),'COCKAPOO',''),'HITCHCOCK',''),'COCKER','')) regexp '.*cock.*'           and lower(pet_name_split) not in ('cockram','adcock','adcocks','addcock','alcock','alecock','allcock','allicock','ancock','aucock','awcock','aycock','babcock','barcock','batcock','battcock','baycock','beacock','beercock','bilcock','bocock','boocock','bowcock','bulcock','bullcock','cockain','cockar','cockarill','cockayne','cockbain','cockbaine','cockbill','cockborn','cockburn','cockcroft','cocke','cockel','cockell','cocken','cocker','cockerall','cockeram','cockeran','cockerell','cockerham','cockerhan','cockerhill','cockeril','cockerill','cockerline','cockersell','cockersole','cockerton','cockett','cockette','cockfield','cockford','cockhill','cockill','cockin','cockland','cockle','cocklin','cockling','cockran','cockrane','cockrel','cockrell','cockrem','cockren','cockrill','cockrin','cockroft','cocksedge','cocksey','cockshull','cockshutt','cockson','cocksworth','cockton','cockwell','cockwill','crocock','dancock','dancocks','deacock','decock','didcock','dilcock','eacock','ecock','edgecock','elcock','elcocks','ellcock','ellicock','filcock','grewcock','grocock','groocock','growcock','hacock','hadcock','haincock','hallcock','hamcock','hancock','hancocke','hancocks','handcock','hankcock','hanncock','harcock','hawcock','haycock','haycocks','heacock','heathcock','hedgcock','hedgecock','heircock','hencock','hercock','heycock','hichcock','highcock','hillcock','hircock','hiscock','hiscocks','hitchcock','hitchcocks','hitcock','hithcock','hudson-peacock','jeacock','jeacocke','jeycock','johncock','lacock','lawcock','laycock','leacock','lewcock','leycock','locock','lowcock','luccock','luckcock','lucock','lurcock','maycock','meacock','milcock','miscock','mocock','moorcock','morecock','mulcock','mycock','nancock','ocock','paecock','peacock','peacocke','peacocks','peakcock','pecock','peecock','philcock','pidcock','pitcock','pocock','purcocks','pycock','radford-hancock','raincock','sandercock','saundercock','shellcock','shilcock','shillcock','silcock','silcocks','sillcock','simcock','simcocks','sincock','slocock','slucock','symcock','tancock','tilcock','tillcock','tocock','trebilcock','trebillcock','twocock','veacock','wadcock','walcock','wallcock','westcock','whadcock','wilcock','wilcocks','wilcockson','willcock','willcocks','willcockson','woocock','woodcock','wookcock','woolcock','woolcocks')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*coon.*'           and lower(pet_name_split) not in ('coonagh','coonan','coonar','coonber','coonbes','coonbs','coone','cooner','coonerty','coones','cooney','coong','coonick','coonie','coonor','ocooner','ocoonor','scoon','scoones','scoons')\n                 or       lower(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'SCRAP','')) regexp '.*crap.*'           and lower(pet_name_split) not in ('scrap')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*cunt.*'           and lower(pet_name_split) not in ('scunthorpe')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*damn.*'           and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'DICKSON',''),'DICKENS','')) regexp '.*dick.*'           and lower(pet_name_split) not in ('benedick','benedickter','biddick','boldick','braddick','bradick','briddick','brodick','bundick','burdick','caddick','chiddick','chiddicks','cobbledick','condick','craddick','cradick','cundick','dickason','dickaty','dicke','dickel','dicken','dickens','dickenson','dicker','dickers','dickerson','dickes','dickeson','dicketts','dickey','dickham','dickie','dickin','dickings','dickingson','dickins','dickinson','dickinson-smith','dickison','dickle','dickon','dickons','dickonson','dickov','dicksee','dickson','dicksons','dicky','fendick','forsdick','forsdicke','fosdick','fredick','frosdick','grimsdick','haddick','haedicke','hedicker','hildick','hildick-smith','kaddick','kendick','landick','ludick','luedicke','maddick','maddicks','mccordick','mcdicken','mcdickson','meddick','meddicks','paddick','pundick','reddick','rhodick','riddick','riddicks','roddick','rodick','ruddick','rudick','sadick','sandick','shaddick','shadick','siddick','suddick','thorndick','vodicka','waddicker','weadick','wedick','widdick','widdicks','zserdicky')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*dildo.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&','') = 'DYKE'           --and lower(pet_name_split) not in ('dyker','fendyke','forsdyke','thorndyke','van dyke','vandyke')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*erect.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&','') in ('FAG','FAGGOT','FAGOT','FAGGOTS','FAGGOTCAT')            --and lower(pet_name_split) not in ('alfageme','fagade','fagaly','fagan','fagandini','fagbemi','fagbenle','fagbenro','fagbohun','fagbohungbe','fagbola','fagboyegun','fagbure','fage','fagelman','fagelson','fagen','fagence','fagents','fager','fagerlund','fages','faggetter','faggin','faghany','faghihi','faghirzadeh','faghy','fagin','fagioli','fagnani','fagon','fagundes','fagunwa','fagura','graffagnino','mcfagan','tesfagaber','zolfaghari')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*fatass.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*feck.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*fellate.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*fellatio.*'       and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*felching.*'       and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*fuck.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*fudgepack.*'      and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*flange.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*goddamn.*'        and lower(pet_name_split) not in ('')\n            --     --or       replace(replace(replace(replace(pet_name_split,'''',''),' ',''),'-',''),'&','') regexp 'hell'           and lower(pet_name_split) not in ('abethell','archell','bachell','barichello','backshell','batcheller','batchellor','battershell','beachell','bearchell','bechelli','beckhelling','bethell','bexhell','bhella','birchell','bishell','bithell','boshell','boshelle','bowshell','bratchell','buchell','bulheller','burchell','bushell','bythell','cashell','chell','chella','chelladurai','chellam','chellamuthu','chellappah','chellappan','chellar','chelle','chellen','chellew','chelley','chelliah','chellingsworth','chellingworth','chellis','chellum','coshell','critchell','cuthell','dichello','etchell','etchells','ethell','formichella','getchell','ghelle','hanschell','hatchell','hella','hellaby','hellal','hellam','hellan','helland','hellard','hellary','hellas','hellawell','hellberg','helle','hellebrand','hellel','hellen','hellend','hellens','heller','hellerman','hellery','hellett','helleur','hellewell','helley','hellgren','helliar','hellicar','hellier','helliker','hellin','helling','hellinger','hellings','hellingsworth','hellis','hellish','helliwell','hellman','hellmann','hellmers','hellmich','hellmuth','hellon','hellor','hellors','hellowell','hellsten','hellstrom','hellwell','hellwig','hellwing','helly','hellyar','hellyer','hellyn','hellywell','hempshell','henshell','herschell','hitchell','houchell','ithell','kearney-mitchell','kemshell','ketchell','khella','kinchella','kitchell','larochelle','licchelli','llewhellin','llewhellyn','lythell','machell','maitchell','marchell','marshell','matchell','maychell','mcmitchell','mechell','michell','michelle','michelli','mictchell','micthell','mighell','mihell','minchell','minchella','minghella','minshell','mirchell','mitchell','mitchell-davis','mitchell-dawson','mitchelle','mitchell-gears','mitchell-harris','mitchell-innes','mitchelll','mitchellmore','mitchells','mitchell-smith','mitchellson','mithchell','mithell','mittchell','monachello','mtchell','mutchell','neachell','nethell','nichells','nihell','nitchell','ochello','page-mitchell','patchell','peachell','pechell','petchell','phellas','phellps','pitchell','purchell','rachell','rachelle','renshell','richell','rochell','rochelle','rotchell','rothell','satchell','satchelle','schell','schellekens','schellenberg','scheller','senchell','setchell','seychell','shell','shellabear','shellam','shellan','shellard','shellbourne','shellcock','shellcross','shelldon','shelldrake','shellem','shellens','sheller','shelley','shellhorn','shellie','shellien','shelliker','shellim','shelling','shellis','shellito','shellock','shells','shellshear','shellswell','shellton','shellum','shelly','smithells','stitchell','tatchell','tempest-mitchell','thellman','thellmann','thellusson','titchell','tortoishell','trewhella','trushell','twitchell','vachell','vencatachellum','weighell','whell','whellam','whellams','whellan','whellans','wheller','whelligan','whichello','whitchell','witchell','withell','zucchelli')     \n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') = 'hell'       \n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*homo.*'           and lower(pet_name_split) not in ('homoki','homoky','homola','homolka','homoncik','mojakhomo','odhomor','sohomow','thomond','thomopson','thomos','thomoson')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*illegal.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*immigrant.*'      and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*jerk.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*jizz.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*labia.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*lardass.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*lmao.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*lmfao.*'          and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'MUFFIN','')) regexp '.*muff.*'           and lower(pet_name_split) not in ('muffat','muffet','muffett','muffin','muffitt','mufford')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*nigga.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*nigger.*'         and lower(pet_name_split) not in ('')\n            --     or       replace(replace(replace(replace(pet_name_split,'''',''),' ',''),'-',''),'&','') regexp 'nob'            and lower(pet_name_split) not in ('agwunobi','akzo nobel','annobil','anunobi','asinobi','conoboy','czarnobaj','danobrega','de nobrega','de nobriga','denobrega','denobriga','dinobi','dodd-noble','donoban','enobakhare','igbinoba','knobb','knobbs','knobel','knoblauch','knoble','knobloch','nobakht','nobari','nobb','nobble','nobbs','nobe','nobeebaccus','nobeen','nobel','noberts','nobertson','nobes','nobi','nobile','nobin','nobinson','noble','noble-nesbitt','nobles','noblet','noblett','noblin','nobo','noboa','nobody','nobre','nobrega','nobson','nwadinobi','obanobi','onobrauche','pronobis','sinobad','snober','stride-noble','sznober')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') = 'nob'      \n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*penis.*'          and lower(pet_name_split) not in ('penistan','peniston','penistone','')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*piss.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*poof.*'           and lower(pet_name_split) not in ('')\n                 --POOP not in use for pet name swear words\n                 --or       replace(replace(replace(replace(pet_name_split,'''',''),' ',''),'-',''),'&','') regexp 'poop'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*prick.*'          and lower(pet_name_split) not in ('prickett')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*pube.*'           and lower(pet_name_split) not in ('')\n                 --PUFF not in use for pet name swear words\n                 --or       replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'LOVEPUFF',''),'HUFFLEPUFF','') regexp 'puff'           and lower(pet_name_split) not in ('puffer','puffett','puffitt','spuffard')                \n                 or       replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&','') in ('PUSSYFLAP','PUSSYFLAPS','YOURPUSSY','PERVERTEDPUSSYCAT','PUSSYDESTROYER')          --and lower(pet_name_split) not in ('') and pet_name_split not regexp 'pussycat'\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*scrotum.*'        and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'ESSEX',''),'SUSSEX','')) regexp '.*sex.*'            and lower(pet_name_split) not in ('bessex','bissex','essex','essex-crosby','sexby','sexon','sexstone','sexton','sussex','wessex')\n                --SHAG not in use for pet name swear words\n                --or       replace(replace(replace(replace(pet_name_split,'''',''),' ',''),'-',''),'&','') regexp 'shag'           and lower(pet_name_split) not in ('ashagbe','eshag','shagari','shagaya','shaghaghi')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*shit.*'           and lower(pet_name_split) not in ('ashitey','feshitan','kinoshita','mashiter','matsushita','miyashita','morishita','mwashita','oshitola','rakshit','rashit','rushiti','shith','shitta-bey','shittabey','shittu','shitu','yamashita')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*slag.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*slut.*'           and lower(pet_name_split) not in ('sluter')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*smegma.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*spunk.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*smelly.*'         and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'HONEYSUCKLE','')) regexp '.*suck.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*suicide.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*terrorist.*'      and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*testical.*'       and lower(pet_name_split) not in ('')\n            --     or          replace(replace(replace(replace(pet_name_split,'''',''),' ',''),'-',''),'&','') regexp 'tit'            and lower(pet_name_split) not in ('footitt','titcombe','bultitude','daintith','dentith','footit','foottit','futtit','grittith','grittiths','laetitia','le petit','lepetit','le-petit','lostitch','loutit','louttit','mititelu','mutiti','muttitt','otite','otitoju','pentith','petit','petite','petitjean','petitpierre','petitt','pettit','pettite','pettitt','ptitchard','satite','stitch','stitchell','stitcher','stitchman','stitfall','stitkovac','stitou','stitson','stitt','stittle','tita','titan','titchard','titchell','titchen','titchener','titchin','titchiner','titchmarsh','titchner','tite','titera','titerickx','titford','tithecott','tither','titheradge','titheridge','titherington','titherley','titherly','titi','titilayo','titiloye','titjen','title','titler','titley','titlow','titmarsh','titmas','titmass','titmus','titmuss','tito','titorenko','titov','titova','titre','titshall','titt','tittensor','titterington','titterrell','tittershill','titterton','tittle','tittley','titton','tittonis','tituana','titus','titus-glover','titze','whittit')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') = 'tit'            \n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*tosser.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*turd.*'           and lower(pet_name_split) not in ('sturdee','sturdey','sturdgess','sturdivant','sturdy')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*twat.*'           and lower(pet_name_split) not in ('attwater','attwaters','atwater','westwater')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*vagina.*'         and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'TWANKEY','')) regexp '.*wank.*'           and lower(pet_name_split) not in ('mufwankolo','nwankpa','nwankwo','nwankwor','nwankwu','schwank','swankie','wanklyn','wankowicz')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*whore.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bottomlicker.*'   and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*spannerpants.*'   and lower(pet_name_split) not in ('')\n                then 1 else 0\n        end as swear_flag\n        ,case when length(pet_name_split) > 100 then 1 else 0 end as max_length_flag\n        ,case \n            when length(replace(replace(replace(lower(pet_name_split),' ',''),'-',''),'&','')) = 1 then 1 \n            else 0 \n        end as min_length_flag\n        ,case \n            when lower(pet_name_split) not regexp '.*[a-zA-Z].*' or lower(pet_name) not regexp '.*[a-zA-Z].*' then 1 \n            else 0 \n        end no_alphabetic_flag\n        ,case \n            when lower(pet_name_split) regexp '(.*)(no name|unknown|not known|new cat|not named yet|see below|unamed|unnamed|not decided|not yet named|to be named|decided|not chosen)(.*)' then 1 --List of clearly bad names\n            when lower(pet_name_split) regexp '(.*)(sister|white|cat|dog|yes|brother)(.*)' and  pet_name_split regexp '.*\\\\).*' then 1 --List from searching for close brackets left over\n            when pet_name_split regexp '.*[0-9].*' and pet_name_split regexp '.*\\\\).*' then 1 --Identifies names that contain a number and a close bracket\n            when lower(pet_name_split) regexp '(.*)( years old|years old|0atis|0liver|0lly|0pel|0scar|0z|1 max. 2 pippa|1 poppy 2 dottie|1. vasska 2. sherman|10 years|12 cats|14 others|15 boy|1sheba|2 cats  barry|2 cats  demi|2 catsbrahma|2 dogs|2 dogs  coco|2 dogs coco|2 honey|2 kerry|2 s|2 siamese cats jasmin|2 x dogs star|3 cats|3 cats eve|3 cats oldest garfield|3 jack|3 moggie|3 others|3 s|34c25|3d|3hree|4 cats|4 cats bingo|5 cats|5 kittens|6 cats  lucy|7even|8 cats owned|9yrs|''bea''|''bertha simmering light|cant name them yet|cat 1|cat 2|cat 3|cat 4|cat a|cat name|cat1|cat1 tom|cat12|cat13|cat1bentley|cat2|cat3|''cea|''cooper'' magic pulse|do not have one|dog 1|dog 2|dog 3|dog 4|dog 5|dog1|dog11|dog2|dog3|dont have any|dont have names yet|dont have one|don''t know|dont know yet|don''t know yet|''dre|dunno|dunno yet|éva|gaylord|have 5 cats|have 6 cats|have not named them|havent chosen yet|havent named them|havent named yet|i have 11|i have 2 maisie|i have 2 micky|i have 3 cats|i have 3 twinkle|i have 4 cats|i have 5|i have 5 cats|i have 5 cat''s|i have lots|i have six molly|i havent got one|ive got 24 cats|i''ve got 4 cats|ive got 6 mia|just born|just born2|''kc''|no cat|no idea|no kittens|no more|no.1|no.2|no1 no2 no3 no|not given yet|not got adult|not keeping|not named|not named as yet|not named her yet|not picked on yet|not sure|not sure new kitten|not sure yet|not yet|not yet chose one|not yey named|nothing yet|''olly|only 1 dog|out door cat|pup1|pup2|pup3|puppies 10|puppies x 10|puppy 1|puppy 2|puppy 3|puss 1|puss 2|still thinking of name|still to name them|\uD83C\uDF40 clover|used to this)(.*)' \n                      and NOT(lower(pet_name_split) ilike any ('%dunnock%','%snowcat amber%','%kenynten say no more%','%kentixen no more drama%','%worry no more%','%dream no more%')) then 1 --bad names requested by CS to be blanked\n            else 0 end as invalid_name_flag\n        ,case\n            when length(pet_name_split) > 15 and (length(pet_name_split) - length(replace(replace(pet_name_split,' ',''),'-',''))) = 0 then 1\n            when length(split_part(replace(pet_name_split,'-',' '),' ',1)) > 15 then 1\n            when length(split_part(replace(pet_name_split,'-',' '),' ',2)) > 15 then 1\n            when length(split_part(replace(pet_name_split,'-',' '),' ',3)) > 15 then 1\n            when length(split_part(replace(pet_name_split,'-',' '),' ',4)) > 15 then 1\n            when length(split_part(replace(pet_name_split,'-',' '),' ',5)) > 15 then 1\n        else 0 end as long_name_flag\n        ,case when length(pet_name_split) - length(replace(pet_name_split,' ','')) > 3 then 1 else 0 end as multi_word_flag\n    from ${Database}.data_layer.all_pet_names\n)\nselect  \n    pet_name\n    ,case \n        when swear_flag = 1 or max_length_flag = 1 or min_length_flag = 1 or no_alphabetic_flag = 1 or invalid_name_flag = 1 or long_name_flag = 1 then '' \n        else replace(pet_name_split,')','') \n    end as pet_name_cleaned\n    ,swear_flag\n    ,max_length_flag\n    ,min_length_flag\n    ,no_alphabetic_flag\n    ,invalid_name_flag\n    ,long_name_flag\n    ,multi_word_flag\n    ,cast(0 as tinyint) as deceased_flag\nfrom flags\n;\n\ndrop table if exists ${Database}.data_layer.all_pet_names;\n\n--Add deceased marker to pet suppression markers\nupdate ${Database}.dedupe.pet_name_lookup\nset deceased_flag = 1\nwhere upper(pet_name) in\n(\nselect upper(pet_name)\nfrom ${Database}.data_layer.deceased_name\n)\n;\n\n\nalter warehouse set warehouse_size = 'Small';\n\n--Work out suppressions from supps_pet table\ndrop table if exists ${Database}.data_layer.supps_pets;\ncreate or replace table ${Database}.data_layer.supps_pets\nas\nselect distinct\n    deceased_urn\nfrom (\n         select distinct\n              upper(x2.name_urn||'|'||trim(sp.pet_name)) as deceased_urn\n         from ${Database}.db.supps_pet sp\n         inner join ${Database}.dedupe.xref_name_urn x1 on lower(x1.email) = lower(trim(sp.email))\n         inner join ${Database}.dedupe.xref_name_urn x2 on x2.cid = x1.cid\n         where sp.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n             and trim(sp.email) > ''\n         union all\n         select distinct\n              upper(x2.name_urn||'|'||trim(sp.pet_name)) as deceased_urn\n         from ${Database}.db.supps_pet sp\n         inner join ${Database}.dedupe.xref_name_urn x1 on x1.name_urn = trim(sp.source_urn)\n         inner join ${Database}.dedupe.xref_name_urn x2 on x2.cid = x1.cid\n         where sp.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n     ) s;\n\n\n--Create full version of pet information (will be deduped later)\ndrop table if exists ${Database}.data_layer.cid_pet_temp;\nCREATE OR REPLACE TABLE ${Database}.data_layer.cid_pet_temp as\nselect\n    cid\n    ,name_urn\n    ,pet_type\n    ,pet_breed\n    ,nvl(pet_gender,'') as pet_gender\n    ,upper(nvl(pet_size,'')) as pet_size\n    ,pet_indoor_outdoor\n    ,pet_colour\n    ,nvl(pet_name_cleaned,'') as pet_name_cleaned\n    ,case\n        when pet_dob is not null then pet_dob --CIAM actual DOB\n        when pet_age_years is not null and pet_age_months is not null then add_months(pet_dob_first_data_date, -((pet_age_years*12)+pet_age_months)) --CIAM pet age years or months\n        when pet_birth_month is not null and pet_birth_year is not null\n            then case\n                     when try_to_date(cast(pet_birth_year as varchar)||'-'||pet_birth_month||'-'||to_char(pet_dob_first_data_date,'DD')) is not null\n                         then cast(cast(pet_birth_year as varchar)||'-'||pet_birth_month||'-'||to_char(pet_dob_first_data_date,'DD') as date)\n                     else last_day(cast(cast(pet_birth_year as varchar)||'-'||pet_birth_month||'-'||'01' as date))\n                 end --Birthday email \n        when pet_age_years is not null and pet_birth_month is not null\n            then case\n                     when try_to_date(cast(cast(to_char(pet_dob_first_data_date,'YYYY') as int) - cast(pet_age_years as int) - case when pet_birth_month_int <= month(pet_dob_first_data_date) then 0 else 1 end as varchar)||'-'||pet_birth_month||'-'||to_char(pet_dob_first_data_date,'DD')) is not null\n                         then cast(cast(cast(to_char(pet_dob_first_data_date,'YYYY') as int) - cast(pet_age_years as int) - case when pet_birth_month_int <= month(pet_dob_first_data_date) then 0 else 1 end as varchar)||'-'||pet_birth_month||'-'||to_char(pet_dob_first_data_date,'DD') as date)\n                     else last_day(cast(cast(cast(to_char(pet_dob_first_data_date,'YYYY') as int) - cast(pet_age_years as int) - case when pet_birth_month_int <= month(pet_dob_first_data_date) then 0 else 1 end as varchar)||'-'||pet_birth_month||'-'||'01' as date))\n                 end --Winalot campaign and eCRM 'sorry' email\n        when pet_age_weeks is not null then (pet_dob_first_data_date - (pet_age_weeks*7)) --Purina GP signup (age given in weeks)\n        when pet_age_months is not null then add_months(pet_dob_first_data_date, -pet_age_months) --Purina GP signup (age given in months)\n    end as derived_pet_dob\n    ,case\n        when pet_dob is not null then 'Actual pet DOB'\n        when pet_age_years is not null and pet_age_months is not null then 'Pet age years and months'\n        when pet_birth_month is not null and pet_birth_year is not null then 'Pet birth month and year'\n        when pet_age_years is not null and pet_birth_month is not null then 'Pet age years and pet birth month'\n        when pet_age_weeks is not null then 'Pet age weeks'\n        when pet_age_months is not null then 'Pet age months'  \n        else 'No DOB details'\n    end as dob_type\n    ,pet_life_stage\n    ,source\n    ,pet_dob_last_data_date\n    ,data_date\nfrom\n    (\n    select distinct\n        cid\n        ,x.name_urn\n        ,case \n        when lower(p.pet_type) regexp '.*cat.*' then 'Cat'\n        when lower(p.pet_type) regexp '.*dog.*' then 'Dog'\n        else initcap(trim(p.pet_type)) end as pet_type\n        ,trim(coalesce(pbc.clean_breed_name,'')) as pet_breed\n        ,trim(pet_gender) as pet_gender\n        ,trim(pet_size) as pet_size\n        ,trim(pet_indoor_outdoor) as pet_indoor_outdoor\n        ,coalesce(trim(cl.purina_colour),trim(p.pet_colour)) as pet_colour\n        ,case when l.multi_word_flag = 1 and left(upper(x.name_urn),6) <> 'REG_KC' then '' else pet_name_cleaned end as pet_name_cleaned\n        ,pet_dob\n        ,lpad(to_char(pet_birth_month),2,'0') as pet_birth_month\n        ,pet_birth_month as pet_birth_month_int\n        ,pet_birth_year\n        ,pet_age_years\n        ,pet_age_months\n        ,pet_age_weeks\n      \t,pet_life_stage\n        ,trim(p.source) as source\n        ,least(p.data_date,source_date) as data_date\n        ,first_value(least(p.data_date,source_date)) over (partition by cid,case when lower(p.pet_type) regexp '.*cat.*' then 'Cat' when lower(collate(p.pet_type,'')) regexp 'dog' then 'Dog' else initcap(p.pet_type) end,pet_name_cleaned,pet_dob,pet_birth_month,pet_age_years,pet_age_months,pet_age_weeks order by least(p.data_date,source_date) asc) as pet_dob_first_data_date\n        ,first_value(least(p.data_date,source_date)) over (partition by cid,case when lower(p.pet_type) regexp '.*cat.*' then 'Cat' when lower(collate(p.pet_type,'')) regexp 'dog' then 'Dog' else initcap(p.pet_type) end,pet_name_cleaned,pet_dob,pet_birth_month,pet_age_years,pet_age_months,pet_age_weeks order by least(p.data_date,source_date) desc) as pet_dob_last_data_date\n    from ${Database}.dedupe.xref_name_urn x\n    inner join ${Database}.db.pet p on x.name_urn = p.name_urn\n    left join ${Database}.dedupe.pet_name_lookup l on upper(trim(p.pet_name)) = upper(l.pet_name)\n    left join ${Database}.db.ref_pet_breeds_clean pbc on lower(trim(pbc.breed_name)) = lower(trim(p.pet_breed))\n                                                and lower(trim(pbc.pet_type)) = lower(trim(p.pet_type))\nleft join ${Database}.db.pet_avatar_colour_lookup cl on upper(trim(p.pet_breed)) = upper(trim(cl.breed))\n                                                    and upper(trim(p.pet_colour)) = upper(trim(cl.passed_colour))\n    where p.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    and nvl(l.deceased_flag,0) = 0\n    and upper(x.name_urn||'|'||trim(p.pet_name)) not in\n    (\n        select \n            deceased_urn\n        from ${Database}.data_layer.supps_pets\n    )\n    ) t\n;\n\ndrop table if exists ${Database}.data_layer.supps_pets;\n\n--Create deduped table of pet names with information\ndrop table if exists ${Database}.dedupe.cid_pet;\nCREATE OR REPLACE TABLE ${Database}.dedupe.cid_pet as\nselect \n    row_number() over (partition by cid order by case when nvl(pet_name,'') > '' then 1 else 0 end desc,pet_dob asc,case when nvl(pet_breed,'') > '' then 1 else 0 end desc,case when nvl(pet_gender,'') > '' then 1 else 0 end desc,name_urn desc,pet_name asc) as pet_number\n    ,* \nfrom\n(\nselect *\n       ,  case when pet_name > '' then pet_name\n               when pet_name = '' and lead(pet_name, 1) over(partition by cid, pet_type order by pet_name asc) > '' \n                                  and pet_data_date < lead(pet_data_date, 1) over(partition by cid, pet_type order by pet_data_date asc) then 'new name added' \n            else pet_name end as new_pets\nfrom\n(\nselect \n    cid\n    ,name_urn\n  \t,cast('' as varchar(50)) as pet_id\n    ,pet_type\n    ,pet_name_cleaned as pet_name\n    ,pet_breed\n    ,pet_gender\n    ,first_value(derived_pet_dob) over (partition by cid,pet_type,pet_name_cleaned order by case when derived_pet_dob is null then 0 else 1 end desc,pet_dob_last_data_date desc,derived_pet_dob desc) as pet_dob\n    ,first_value(dob_type) over (partition by cid,pet_type,pet_name_cleaned order by case when derived_pet_dob is null then 0 else 1 end desc,pet_dob_last_data_date desc,derived_pet_dob desc,dob_type desc) as pet_dob_type\n    ,coalesce(trim(lk.size),pt.pet_size) as pet_size\n    ,pet_indoor_outdoor\n    ,trim(pt.pet_colour) as pet_colour\n    ,pet_dob_last_data_date as pet_data_date\n    ,case\n  \t\twhen pet_life_stage > '' then pet_life_stage\n        when pet_type = 'Dog' and derived_pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-12)  and coalesce(lk.size,pt.pet_size) in ('T','S')          then 'Puppy'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-24)  and coalesce(lk.size,pt.pet_size) in ('L','XL')         then 'Puppy'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-120) and coalesce(lk.size,pt.pet_size) in ('T','S')          then 'Adult'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-60)  and coalesce(lk.size,pt.pet_size) in ('L','XL')         then 'Adult'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-156) and coalesce(lk.size,pt.pet_size) in ('T','S','L','XL') then 'Senior'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-12)                                                          then 'Puppy'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-84)                                                          then 'Adult'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-156)                                                         then 'Senior'\n        when pet_type = 'Dog' and derived_pet_dob <= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-156)                                                         then 'Older'\n        when pet_type = 'Cat' and derived_pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-12)                                                          then 'Kitten'\n        when pet_type = 'Cat' and derived_pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-84)                                                          then 'Adult'\n        when pet_type = 'Cat' and derived_pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-192)                                                         then 'Senior'\n        when pet_type = 'Cat' and derived_pet_dob <= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-192)                                                         then 'Older'\n        else 'Unknown'\n    end as pet_life_stage\n    ,cast(0 as int) as pdc_gender_link_update\n    ,cast(0 as int) as pdc_breed_link_update\n    ,cast(0 as int) as pdc_colour_link_update\n    ,cast(0 as int) as pdc_outdoor_link_update\n    ,source\n    ,row_number() over (partition by cid,pet_type,pet_name_cleaned order by data_date desc,pet_dob_last_data_date desc,derived_pet_dob desc,pet_size desc,pet_indoor_outdoor desc,pet_gender desc,pet_breed desc) as rownum\nfrom ${Database}.data_layer.cid_pet_temp pt\nleft join ${Database}.db.dog_breed_size_lookup lk on upper(pt.pet_breed) =  upper(trim(lk.breed))\nwhere pet_type in ('Cat','Dog')\n) t\nwhere rownum = 1\nand\n    (\n        (\n            pet_type = 'Dog' \n            and pet_dob > add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -240) --Dogs must be under 20\n        )\n        or \n        (\n            pet_type = 'Cat' \n            and pet_dob > add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -360) --Cats must be under 30\n        )\n        or\n        (\n            pet_type in ('Dog', 'Cat') --remove anything other than cat/dog\n            and pet_data_date >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -12) --everything captured in the last 12 months is valid\n        )\n    )\nand name_urn not in (\n                    select distinct c.name_urn\n                    from ${Database}.data_layer.cid_pet_temp c\n                    inner join ${Database}.data_layer.cid_pet_temp c2 on c.cid = c2.cid \n                                                          and c.pet_type = c2.pet_type \n                                                          and c2.source = 'RESP_REV_DAILY'\n                    where c.pet_name_cleaned = ''\n                    ) \n) np \nwhere new_pets <> 'new name added'\n;\n\nalter warehouse set warehouse_size = 'Xsmall';\n                         \ndrop table if exists ${Database}.data_layer.cid_pet_temp ;\n\n\n--merge pdc ages\nmerge into ${Database}.dedupe.cid_pet pt\nusing (\n          select\n              xr.cid,\n              ae.npp_ecrm_pdc_age as pet_name,\n              case when lower(link_url) ilike '%utm_content=twoyears%' then cast(add_months(event_timestamp, -24) as date)\n                   when lower(link_url) ilike '%utm_content=fiveyears%' then cast(add_months(event_timestamp, -60) as date)\n                   when lower(link_url) ilike '%utm_content=eightyears%' then cast(add_months(event_timestamp, -96) as date)\n                   when lower(link_url) ilike '%utm_content=tenyears%' then cast(add_months(event_timestamp, -120) as date)\n                   end as pet_dob,\n              cast(event_timestamp as date) as data_date,\n              row_number() over(partition by xr.cid, ae.npp_ecrm_pdc_age order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.dedupe.xref_name_urn xr on xr.name_urn = ae.name_urn\n          where ae.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n          and lower(event_name) regexp '.*click.*'\n          and link_label = 'PDC | Service | PDC'\n          and link_url ilike any  (\n                                  '%utm_content=twoyears%',\n                                  '%utm_content=fiveyears%',\n                                  '%utm_content=eightyears%',\n                                  '%utm_content=tenyears%'\n                                 )\n          --and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population))\n      ) ax on ax.cid = pt.cid\n          and lower(ax.pet_name) = lower(pt.pet_name)\n          and ax.rn = 1\n          and ax.pet_dob <> pt.pet_dob\nwhen matched and ax.data_date > pt.pet_data_date  then update\nset pt.pet_dob = ax.pet_dob,\n    pt.PET_DOB_TYPE = 'PDC click',\n    pt.pet_data_date = ax.data_date;\n\n\n--merge pdc breeds\nmerge into ${Database}.dedupe.cid_pet pt\nusing (\n          select\n              xr.cid,\n              ae.npp_ecrm_pdc_breed as pet_name,\n              case when lower(link_url) ilike '%utm_content=crossbreed%' then 'Cross Breed'\n                   when lower(link_url) ilike '%utm_content=labrador%' then 'Retriever (Labrador)'\n                   when lower(link_url) ilike '%utm_content=collie%' then 'Border Collie'\n                   when lower(link_url) ilike '%utm_ content=cocker%' then 'Spaniel (Cocker)'\n                   when lower(link_url) ilike '%utm_content=french%' then 'French Bulldog'\n                   end as pet_breed,\n              cast(event_timestamp as date) as data_date,\n              row_number() over(partition by xr.cid, ae.npp_ecrm_pdc_breed order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.dedupe.xref_name_urn xr on xr.name_urn = ae.name_urn\n          where ae.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n          and lower(event_name) regexp '.*click.*'\n          and link_label = 'PDC | Service | PDC' --check\n          and link_url ilike any  (\n                                  '%utm_content=crossbreed%', \n                                  '%utm_content=labrador%',\n                                  '%utm_content=collie%',\n                                  '%utm_content=cocker%',\n                                  '%utm_content=french%'\n                                 )\n          --and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population))\n      ) ax on ax.cid = pt.cid\n          and lower(ax.pet_name) = lower(pt.pet_name)\n          and ax.rn = 1\n          and ax.pet_breed <> pt.pet_breed\nwhen matched and ax.data_date > pt.pet_data_date and pet_type = 'Dog' then update\nset pt.pet_breed = ax.pet_breed,\n    pt.pdc_breed_link_update = 1,\n    pt.pet_data_date = ax.data_date;\n;\n\n--merge pdc colours\nmerge into ${Database}.dedupe.cid_pet pt\nusing (\n          select\n              xr.cid,\n              ae.npp_ecrm_pdc_colour as pet_name,\n              case when lower(link_url) ilike '%utm_content=white%' then 'White'\n                   when lower(link_url) ilike '%utm_content=blackwhite%'  then 'Black & White'\n                   when lower(link_url) ilike '%utm_content=black%'  then 'Black'\n                   when lower(link_url) ilike '%utm_content=tabby%' then 'Tabby'\n                   when lower(link_url) ilike '%utm_content=ginger%' then 'Ginger'\n                   when lower(link_url) ilike '%utm_content=multi%' then 'Multi'\n                   when lower(link_url) ilike '%utm_content=brown%' then 'Brown'\n                   when lower(link_url) ilike '%utm_content=grey%' then 'Grey'\n                   when lower(link_url) ilike '%utm_content=hairless%' then 'Hairless'\n                   end as pet_colour,\n              cast(event_timestamp as date) as data_date,\n              row_number() over(partition by xr.cid, ae.npp_ecrm_pdc_colour order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.dedupe.xref_name_urn xr on xr.name_urn = ae.name_urn\n          where ae.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n          and lower(event_name) regexp '.*click.*'\n          and link_label = 'PDC | Service | PDC' --check\n          and link_url ilike any  (\n                                  '%utm_content=white%',\n                                  '%utm_content=blackwhite%',\n                                  '%utm_content=black%' ,\n                                  '%utm_content=tabby%',\n                                  '%utm_content=ginger%',\n                                  '%utm_content=multi%',\n                                  '%utm_content=brown%',\n                                  '%utm_content=grey%',\n                                  '%utm_content=hairless%'\n                                 )\n          --and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population))\n      ) ax on ax.cid = pt.cid\n          and lower(ax.pet_name) = lower(pt.pet_name)\n          and ax.rn = 1\n          and ax.pet_colour <> pt.pet_colour\nwhen matched and ax.data_date > pt.pet_data_date and pet_type = 'Cat' then update\nset pt.pet_colour = ax.pet_colour,\n    pt.pdc_colour_link_update = 1,\n    pt.pet_data_date = ax.data_date;\n;\n    \n--merge pdc npp_ecrm_pdc_outdoor\nmerge into ${Database}.dedupe.cid_pet pt\nusing (\n          select\n              xr.cid,\n              ae.npp_ecrm_pdc_outdoor as pet_name,\n              case when lower(link_url) ilike '%utm_content=indoor%' then 'I'\n                   when lower(link_url) ilike '%utm_content=outdoor%'  then 'O'\n                   end as PET_INDOOR_OUTDOOR,\n              cast(event_timestamp as date) as data_date,\n              row_number() over(partition by xr.cid, ae.npp_ecrm_pdc_outdoor order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.dedupe.xref_name_urn xr on xr.name_urn = ae.name_urn\n          where ae.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n          and lower(event_name) regexp '.*click.*'\n          and link_label = 'PDC | Service | PDC' --check\n          and link_url ilike any  (\n                                  '%utm_content=indoor%',\n                                  '%utm_content=outdoor%'\n                                 )\n          --and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population))\n      ) ax on ax.cid = pt.cid\n          and lower(ax.pet_name) = lower(pt.pet_name)\n          and ax.rn = 1\n          and ax.PET_INDOOR_OUTDOOR <> pt.PET_INDOOR_OUTDOOR\nwhen matched and ax.data_date > pt.pet_data_date and pet_type = 'Cat' then update\nset pt.PET_INDOOR_OUTDOOR = ax.PET_INDOOR_OUTDOOR,\n    pt.pdc_outdoor_link_update = 1,\n    pt.pet_data_date = ax.data_date;\n;\n\n--merge pdc genders\n--gender merged directly from adestra event to live cid pet, some links were missing (purina-pdc.tbw-apps.net)\nmerge into ${Database}.dedupe.cid_pet pt\nusing (\n          select\n              xr.cid,\n              ae.npp_ecrm_pdc_gender as pet_name,\n              case when lower(link_url) regexp '.*=female.*' then 'Female'\n                   when lower(link_url) regexp '.*=male.*' then 'Male' \n                   end as pet_gender,\n              cast(event_timestamp as date) as data_date,\n              row_number() over(partition by xr.cid, ae.npp_ecrm_pdc_gender order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.dedupe.xref_name_urn xr on xr.name_urn = ae.name_urn\n          where ae.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n          and lower(event_name) regexp '.*click.*'\n          and link_label = 'PDC | Service | PDC'\n          and link_url ilike any (\n                            '%utm_content=female%',\n                            '%utm_content=male%'\n                          )\n          --and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population))\n      ) ax on ax.cid = pt.cid\n          and lower(ax.pet_name) = lower(pt.pet_name)\n          and ax.rn = 1\n          and pt.pet_gender <> ax.pet_gender\nwhen matched and ax.data_date > pt.pet_data_date then update\nset pt.pet_gender = ax.pet_gender,\n    pt.pdc_gender_link_update = 1,\n    pt.pet_data_date = ax.data_date;\n;\n\n\n-- Insert new pets into pet id table\nmerge into ${Database}.db.ref_pet_id rp\nusing (\n          select\n              bbw_urn,\n              pet_type,\n              pet_name,\n              date_code||'-'||unique_code||'-'||pet_type_code||'-'||bbw_urn_code as pet_id\n          from (\n                   select\n                       xr.bbw_urn,\n                       pt.pet_type,\n                       lower(pt.pet_name) as pet_name,\n\t\t\t\t\t   --Note that the bit below will only work as long as the length of hte Hex string doesn't exceed 8 characters\n                       replace(to_char(to_char((select historic_build_date from ${Database}.data_layer.historic_build_date),'YYYYMMDD')::integer,'XXXXXXXX'),' ','0') as date_code,\n                       replace(to_char(row_number() over (order by 1),'XXXXXX'),' ','0') as unique_code,\n\t\t\t\t\t   --Not totally sure why the hex isn't hard coded here?\n                       replace(to_char(case when pet_type = 'Cat' then 3120 else 4157 end,'XXXX'),' ','0') as pet_type_code,\n                       replace(to_char(xr.bbw_urn,'XXXXXXXXXXXX'),' ','0') as bbw_urn_code\n                   from ${Database}.dedupe.cid_pet pt\n                   inner join (\n                                  select\n                                      cid,\n                                      min(bbw_urn) as bbw_urn\n                                  from ${Database}.dedupe.xref_name_urn\n                                  group by 1\n                              ) xr on xr.cid = pt.cid\n               ) p\n      ) id on id.bbw_urn = rp.bbw_urn\n          and id.pet_type = rp.pet_type\n          and id.pet_name = rp.pet_name\nwhen not matched then insert\n(\n    bbw_urn,\n    pet_type,\n    pet_name,\n    pet_id,\n    data_date\n)\nvalues\n(\n    id.bbw_urn,\n    id.pet_type,\n    id.pet_name,\n    id.pet_id,\n    (select historic_build_date from ${Database}.data_layer.historic_build_date)\n);\n\n\n-- Set pet_id in live pet table\nmerge into ${Database}.dedupe.cid_pet pt\nusing (\n          select\n              xr.cid,\n              rp.pet_id,\n              rp.pet_type,\n              rp.pet_name,\n              row_number() over(partition by xr.cid, rp.pet_type, rp.pet_name order by rp.bbw_urn) as rn\n          from ${Database}.db.ref_pet_id rp\n          inner join ${Database}.dedupe.xref_name_urn xr on xr.bbw_urn = rp.bbw_urn\n      ) rp on rp.cid = pt.cid\n          and rp.pet_type = pt.pet_type\n          and lower(rp.pet_name) = lower(pt.pet_name)\n          and rp.rn = 1\nwhen matched then update\nset pt.pet_id = rp.pet_id;\n\n---------------------\n--have cat/have dog\n\ndrop table if exists ${Database}.data_layer.build_rollups_cid_have_cat ;  \n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_cid_have_cat \nas\nselect cid, count(*) as number_of_cats \nfrom ${Database}.dedupe.cid_pet\nwhere lower(pet_type) regexp '.*cat.*'\ngroup by cid;\n\n\ndrop table if exists ${Database}.data_layer.build_rollups_cid_have_dog ;  \n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_cid_have_dog \nas\nselect cid, count(*) as number_of_dogs \nfrom ${Database}.dedupe.cid_pet\nwhere lower(pet_type) regexp '.*dog.*'\ngroup by cid;\n\n\ndrop table if exists ${Database}.data_layer.build_rollups_cid_pdc_pet ;  \n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_cid_pdc_pet \nas\nselect cid,\n       case when pet_segment > '' then activity_date end as activity_date,\n       pet_segment\nfrom ( select        \n              xr.cid,\n              case when lower(link_url) regexp '.*=neither.*' then 'Neither'\n                   when lower(link_url) regexp '.*=both.*' and hc.cid is null and hd.cid is null then 'Both'\n                   when lower(link_url) regexp '.*=dog.*' and hd.cid is null then 'Dog'\n                   when lower(link_url) regexp '.*=cat.*' and hc.cid is null then 'Cat' \n                    else ''\n                   end as pet_segment,\n              cast(event_timestamp as date) as activity_date,\n              row_number() over(partition by xr.cid order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.dedupe.xref_name_urn xr on xr.name_urn = ae.name_urn\n          left join ${Database}.data_layer.build_rollups_cid_have_cat hc on hc.cid = xr.cid\n          left join ${Database}.data_layer.build_rollups_cid_have_dog hd on hd.cid = xr.cid\n          where ae.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n            and lower(event_name) regexp '.*click.*'\n            and campaign_name ilike '%Better_Together%'\n            and link_label = 'PDC | Service | PDC'\n            and link_url ilike '%/purina-pdc.tbw-apps.net%'\n            and link_url ilike any ('%=dog%','%=cat%','%=both%','%=neither%')\n                           \n            and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population where source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)) and source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)) --not sure if this should be included, copied from gender\n       )\nwhere rn = 1\n;\n\n---------------------\n--inferred cat/inferred dog\n\ndrop table if exists ${Database}.data_layer.build_rollups_cid_inferred_cat;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_cid_inferred_cat\nas\nselect\n    cid,\n    max(ic.data_date) as data_date\nfrom ${Database}.dedupe.xref_name_urn xr\ninner join (\n               --coupons\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.quotient_coupons qc\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = qc.brand_id\n               where qc.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n               and trim(brand_pet_type) = 'Cat'\n               union all\n               --coupons/samples\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.names_attributes\n               where source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n                 and (\n                            (trim(source) = 'REG_WUN' and trim(registration_campaign) in ('Gourmet Coupon','gourmet_coupon','Felix Try Now','Go-CAT Free Sample','Go-Cat Free Sample'))\n                         or\n                            (trim(source) = 'REG_KE' and lower(source_file) regexp '(.*)(purinaone|uk-3wc-freesample|uk-gocat)(.*)' and last_login is not null)\n                         or\n                            (trim(source) = 'SAMP_GOU_1')\n                     )\n               union all\n               --registrations\n               select distinct\n                   trim(nm.name_urn) as name_urn,\n                   reg_date as data_date\n               from ${Database}.db.names nm\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = nm.source_brand_id\n               where nm.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n               and trim(brand_pet_type) = 'Cat'\n               union all\n               --preferences\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.names_preference np\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = np.brand_id\n               where np.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n                   and lower(source_file) not regexp '.*json.*'\n                   and (pref_emailable = 1 or pref_mailable = 1)\n                   and trim(brand_pet_type) = 'Cat'\n           ) ic on ic.name_urn = xr.name_urn\ngroup by xr.cid;\n\n\ndrop table if exists ${Database}.data_layer.build_rollups_cid_inferred_dog;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_cid_inferred_dog\nas\nselect\n    cid,\n    max(id.data_date) as data_date\nfrom ${Database}.dedupe.xref_name_urn xr\ninner join (\n               --coupons\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.quotient_coupons qc\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = qc.brand_id\n               where qc.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n               and trim(brand_pet_type) = 'Dog'\n               union all\n               --samples\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.names_attributes\n               where source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n                 and (\n                            (trim(source) = 'REG_WUN' and trim(registration_campaign) in ('Try For Free','Dentalife Dog Free Sample'))\n                         or\n                            (trim(source) = 'REG_KE' and lower(source_file) regexp '.*uk-dentalife.*' and last_login is not null)\n                     )\n               union all\n               --registrations\n               select distinct\n                   trim(name_urn) as name_urn,\n                   reg_date as data_date\n               from ${Database}.db.names nm\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = nm.source_brand_id\n               where nm.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n               and trim(brand_pet_type) = 'Dog'\n               union all\n               --preferences\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.names_preference np\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = np.brand_id\n               where np.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n                   and lower(source_file) not regexp '.*json.*'\n                   and (pref_emailable = 1 or pref_mailable = 1)\n                   and trim(brand_pet_type) = 'Dog'\n           ) id on id.name_urn = xr.name_urn\ngroup by xr.cid;\n\n\n---------------------\n--used to have cat/have dog (we 'expired' the pet)\n\ndrop table if exists ${Database}.data_layer.build_rollups_cid_used_to_have_cat ;  \n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_cid_used_to_have_cat \nas\nselect cid\nfrom ${Database}.dedupe.cid_pet\nwhere lower(pet_type) regexp '.*cat.*'\ngroup by cid;\n\n\ndrop table if exists ${Database}.data_layer.build_rollups_cid_used_to_have_dog ;  \n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_cid_used_to_have_dog \nas\nselect cid\nfrom ${Database}.dedupe.cid_pet\nwhere lower(pet_type) regexp '.*dog.*'\ngroup by cid;\n\n\ndrop table if exists ${Database}.data_layer.build_rollups_cid_deceased_pets ;  \n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_cid_deceased_pets \nas\nselect cid, \n    sum\n    (\n        case \n            when \n                (\n                    pet_data_date >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -1) --data in the last month\n                    and pet_type = 'Dog' \n                    and pet_dob <= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -240) --dog is over 20\n                )\n                or\n                (\n                    pet_data_date >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -1) --data in the last month\n                    and pet_type = 'Cat' \n                    and pet_dob <= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -360) --cat is over 30\n                ) \n                or\n                (\n                    pet_dob is null \n                    and pet_data_date < add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -12) --just gone over 12 months old data\n                    and pet_data_date >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -13) \n                ) then 1 \n            else 0 \n        end\n    ) as num_pets_deceased_this_month\nfrom ${Database}.dedupe.cid_pet\ngroup by cid;\n\n\n--CREATE cid_LitterTable\n\ndrop table if exists ${Database}.dedupe.cid_litter;\n\nCREATE OR REPLACE TABLE ${Database}.dedupe.cid_litter\nas\nselect\n    cid,\n    coalesce(sire_name,'') as sire_name,\n    coalesce(dam_name,'') as dam_name,\n    litter_type,\n    litter_dob,\n    case when litter_size = 'T' then 'S'\n               when litter_size = '' then Size\n               else litter_size end as litter_size,\n    litter_breed,\n    litter_puppies_kittens,\n    litter_kennel,\n    data_date,\n    source,\n    source_file,\n    source_urn,\n    source_date\nfrom (\n         select\n             xr.cid,\n  \t\t\ttrim(lt.name_urn) as NAME_URN,\n\t\t\ttrim(lt.sire_name) as SIRE_NAME,\n\t\t\ttrim(lt.dam_name) as DAM_NAME,\n\t\t\ttrim(lt.litter_type) as LITTER_TYPE,\n\t\t\tlt.litter_dob,\n\t\t\ttrim(lt.litter_size) as LITTER_SIZE,\n\t\t\ttrim(lt.litter_breed) as LITTER_BREED,\n\t\t\tlitter_puppies_kittens,\n\t\t\ttrim(litter_kennel) as LITTER_KENNEL,\n\t\t\tlt.data_date,\n\t\t\ttrim(lt.source) as SOURCE,\n\t\t\ttrim(lt.source_file) as SOURCE_FILE,\n\t\t\ttrim(lt.source_urn) as SOURCE_URN,\n\t\t\tlt.source_date,\n             row_number() over\n             (\n                 partition by \n                     xr.cid,\n                     trim(lt.sire_name),\n                     trim(lt.dam_name),\n                     trim(lt.litter_type),\n                     lt.litter_dob,\n                     trim(lt.litter_size),\n                     trim(lt.litter_breed),\n                     lt.litter_puppies_kittens,\n                     trim(lt.litter_kennel)\n                 order by \n                     lt.data_date desc nulls last,\n                     lt.source_date desc nulls last\n             ) as row_num\n         from ${Database}.dedupe.xref_name_urn xr\n         inner join ${Database}.db.litter lt on trim(lt.name_urn) = xr.name_urn\n         where lt.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n     ) dlt\n     left outer join ${Database}.db.DOG_BREED_SIZE_LOOKUP sl on lower(left(dlt.Litter_breed,15)) = lower(left(trim(sl.breed),15))\nwhere row_num = 1;\n\n---------------------\n--cid questions\n\ndrop table if exists ${Database}.dedupe.cid_question ;  \n\nCREATE OR REPLACE TABLE ${Database}.dedupe.cid_question \nas\nselect distinct\n    nm.cid,\n    qu.question_id,\n    trim(rqu.question) as question,\n    first_value(lower(trim(qu.answer))) over \n        (\n            partition by nm.cid, qu.question_id\n            order by \n                qu.data_date desc nulls last,\n                qu.source_date desc nulls last\n        ) as answer,\n    first_value(qu.data_date) over \n        (\n            partition by nm.cid, qu.question_id\n            order by \n                qu.data_date desc nulls last,\n                qu.source_date desc nulls last\n        ) as answer_data_date       \nfrom ${Database}.dedupe.names nm    \ninner join ${Database}.db.question qu on nm.name_urn = trim(qu.name_urn)\ninner join ${Database}.db.ref_question rqu on qu.question_id = rqu.question_id\nwhere qu.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    and qu.data_date > add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -60) --now only using data from the last 5 years for questions\n    and qu.brand_id is null;\n\n---------------------\n--brand questions\n\ndrop table if exists ${Database}.dedupe.cid_brand_question ;  \n\nCREATE OR REPLACE TABLE ${Database}.dedupe.cid_brand_question \nas\nselect distinct\n    nm.cid,\n    qu.brand_id,\n    qu.question_id,\n    trim(rqu.question) as question, \n    first_value(lower(trim(qu.answer))) over \n        (\n            partition by nm.cid, qu.brand_id, qu.question_id\n            order by \n                qu.data_date desc nulls last,\n                qu.source_date desc nulls last\n        ) as answer,\n    first_value(qu.data_date) over \n        (\n            partition by nm.cid, qu.brand_id, qu.question_id\n            order by \n                qu.data_date desc nulls last,\n                qu.source_date desc nulls last\n        ) as answer_data_date    \nfrom ${Database}.dedupe.names nm    \ninner join ${Database}.db.question qu on nm.name_urn = trim(qu.name_urn)\ninner join ${Database}.db.ref_question rqu on qu.question_id = rqu.question_id\nwhere qu.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    and qu.data_date > add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -60) --now only using data from the last 5 years for questions\n    and qu.brand_id is not null;\n\n---------------------\n--preferred brand questions\n\ndrop table if exists ${Database}.data_layer.build_rollups_cid_brand_preferred ;  \n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_cid_brand_preferred \nas\nselect distinct\n    cid,\n    brand_id\nfrom ${Database}.dedupe.cid_brand_question\nwhere answer_data_date > add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -60) --now only using data from the last 5 years to determine preference for brand\n    and brand_id is not null\n    and\n    (\n        question = 'Brand of pet food fed to pet'\n        or question = 'What type of food does your pet eat (Brand)'\n        or question = 'Brand of dry cat food fed to pet'\n        or \n        (\n            question = 'How often do you feed your pet (Brand)'\n            and answer in ('a couple of times per month', 'a couple of times per week', 'a couple of times per year','every day')\n        )\n        or \n        (\n            lower(question) regexp '.*consumption - coffee brand.*' \n            and lower(answer) not regexp '.*none.*'\n        )\n        or \n        (\n            lower(question) regexp '.*consumption - coffee product.*' \n            and lower(answer) not regexp '.*none.*'\n        )\n        or lower(question) regexp '.*drinking location - coffee product.*'\n        or lower(question) regexp '.*drinking time - coffee brand.*'\n        --dont use 'Brand of Pet Food you are interested in' - is bollox\n    );\n    \n\n---------------------\n--purina engagement scoring\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_rate_review;\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_npp_engagement_rate_review \nas\nselect    \n    cid,\n    answer_data_date as activity_date,\n    case when answer in ('3','4','5') then 'Left Positive Rate & Review'\n         when answer in ('1','2') then 'Left Negative Rate & Review'\n         end as activity,\n    qu.brand_id as activity_brand_id\nfrom ${Database}.dedupe.cid_brand_question qu\ninner join ${Database}.dedupe.ref_brand br on qu.brand_id = br.brand_id \n                                   and br.division_id = 12\nwhere question ilike '%overall%';\n\n\n---------------------\n--first/last source date by brand\n\ndrop table if exists ${Database}.data_layer.build_rollups_cid_brand_base ;  \n\nalter warehouse set warehouse_size = 'Large';\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_cid_brand_base \nas\nselect distinct\n    nm.cid,\n    dbnm.source_brand_id as brand_id,\n    0 as assigned_master_brand,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by dbnm.data_date nulls last\n        )                                            as first_date_brand,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by dbnm.data_date desc nulls last\n        )                                            as last_date_brand,\n    first_value(nat.last_login) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by \n                nat.last_login desc, \n                dbnm.data_date nulls last, \n                nm.reg_date nulls last,\n                nm.source_date nulls last\n        )                                            as last_login_brand,      \n    first_value(trim(nat.channel)) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by \n                case when nat.channel > '' then 1 else 0 end desc, --only want populated channels\n                dbnm.data_date nulls last, \n                nm.reg_date nulls last,\n                nm.source_date nulls last\n        )                                            as first_channel_brand,    \n    first_value(trim(nat.channel)) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by \n                case when nat.channel > '' then 1 else 0 end desc, --only want populated channels\n                dbnm.data_date desc nulls last, \n                dbnm.reg_date desc nulls last,\n                dbnm.source_date desc nulls last\n        )                                            as last_channel_brand\nfrom ${Database}.dedupe.names nm\ninner join ${Database}.db.names dbnm on trim(dbnm.name_urn) = nm.name_urn\nleft join ${Database}.db.names_attributes nat on trim(nat.name_urn) = trim(dbnm.name_urn)\n                                     and trim(nat.source) = trim(dbnm.source)\n                                     and nat.source_date = dbnm.source_date\n                                     and nat.source_urn = dbnm.source_urn\nwhere dbnm.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    and dbnm.source_brand_id is not null;\n\n\n---------------------\n--first/last source date by bu\n\ndrop table if exists ${Database}.data_layer.build_rollups_cid_bu_base ;  \n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_cid_bu_base \nas\nselect distinct\n    nm.cid,\n    dbnm.source_data_controller_id as business_unit_id,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_data_controller_id \n            order by dbnm.data_date nulls last\n        )                                            as first_date_business_unit,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_data_controller_id \n            order by dbnm.data_date desc nulls last\n        )                                            as last_date_business_unit\nfrom ${Database}.dedupe.names nm\ninner join ${Database}.db.names dbnm on trim(dbnm.name_urn) = nm.name_urn\nwhere dbnm.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date);\n\n--insert the brands that are actually business units \nmerge into ${Database}.data_layer.build_rollups_cid_bu_base bu\nusing \n(\n    select distinct \n        cbb.cid,\n        rbu.business_unit_id,\n        first_value(cbb.first_date_brand) over \n            (\n                partition by cbb.cid, rbu.business_unit_id\n                order by cbb.first_date_brand nulls last\n            ) as first_date_business_unit,\n        first_value(cbb.last_date_brand) over \n            (\n                partition by cbb.cid, rbu.business_unit_id\n                order by cbb.last_date_brand desc nulls last\n            ) as last_date_business_unit\n    from ${Database}.data_layer.build_rollups_cid_brand_base cbb\n    inner join ${Database}.dedupe.ref_business_unit_brand rbu on cbb.brand_id = rbu.brand_id\n) mg on mg.cid = bu.cid \n    and mg.business_unit_id = bu.business_unit_id\nwhen not matched then insert\n(\n    cid,\n    business_unit_id,\n    first_date_business_unit,\n    last_date_business_unit\n)\nvalues \n(\n    mg.cid,\n    mg.business_unit_id,\n    mg.first_date_business_unit,\n    mg.last_date_business_unit\n);   \n\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_cid_npp_no_brand_base \nas\nselect distinct\n    nm.cid,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by dbnm.data_date nulls last\n        )                                            as first_date_brand,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by dbnm.data_date desc nulls last\n        )                                            as last_date_brand\nfrom ${Database}.dedupe.names nm\ninner join ${Database}.db.names dbnm on dbnm.name_urn = nm.name_urn\nwhere dbnm.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    and dbnm.source_data_controller_id = (select data_controller_id from ${Database}.dedupe.ref_data_controller where data_controller like 'Nestl_ Purina Petcare (UK) Ltd')\n    and dbnm.source_brand_id is null;\n\n---------------------\n--fix up for purina master brand - eveyone purina should be now flagged as master brand source \n\nmerge into ${Database}.data_layer.build_rollups_cid_brand_base cbb\nusing (\n          select distinct\n              cid,\n              (select brand_id from ${Database}.dedupe.ref_brand where brand = 'Purina Masterbrand') as brand_id,\n              first_value(first_date_brand) over\n                  (\n                      partition by cid\n                      order by first_date_brand desc nulls last\n                  ) as first_date_brand,\n              first_value(last_date_brand) over\n                  (\n                      partition by cid\n                      order by last_date_brand desc nulls last\n                  ) as last_date_brand\n          from (\n                   select\n                       cbb.cid,\n                       cbb.first_date_brand,\n                       cbb.last_date_brand\n                   from ${Database}.data_layer.build_rollups_cid_brand_base cbb\n                   inner join ${Database}.dedupe.ref_brand rb on rb.brand_id = cbb.brand_id\n                   left join (\n                                 select distinct\n                                     xr.cid,\n                                     'Growing Pup' as brand\n                                 from ${Database}.db.comms_hist ch\n                                 inner join ${Database}.dedupe.xref_name_urn xr on xr.name_urn = ch.name_urn\n                                 where ch.drop_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n                                     and ch.promotion_id = 'NPP07290'\n                                     and ch.cell_id = '1'\n                                 union all\n                                 select distinct\n                                     xr.cid,\n                                     'Growing Pup' as brand\n                                 from ${Database}.db.names nm\n                                 inner join ${Database}.dedupe.xref_name_urn xr on xr.name_urn = nm.name_urn\n                                 left join ${Database}.dedupe.cid_pet pt on pt.name_urn = nm.name_urn\n                                 where nm.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n                                     and nm.source_brand_id = (select brand_id from ${Database}.dedupe.ref_brand where brand = 'Growing Pup')\n                                     and (\n                                             pt.pet_dob < (add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-12)-12)\n                                          or\n                                             (nm.source = 'REG_THG' and pt.pet_dob is null and lower(pt.pet_life_stage) = 'puppy' and pt.pet_data_date < (add_months(((select historic_build_date from ${Database}.data_layer.historic_build_date)+56),-12))-12)\n                                         )\n                             ) gp on gp.cid = cbb.cid\n                                 and gp.brand = rb.brand\n                   left join (\n                                 select distinct\n                                     xr.cid,\n                                     'Breed Selector' as brand\n                                 from ${Database}.db.comms_hist ch\n                                 inner join ${Database}.dedupe.xref_name_urn xr on xr.name_urn = ch.name_urn\n                                 left join (\n                                             select\n                                                 xr.cid,\n                                                 drop_date\n                                             from ${Database}.db.comms_hist ch\n                                             inner join ${Database}.dedupe.xref_name_urn xr on xr.name_urn = ch.name_urn\n                                             where ch.drop_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n                                             and ch.promotion_id = 'NPP04398_C' and ch.cell_id = '1'\n                                             \n                                            ) gp on gp.cid = xr.cid\n                                 where ch.drop_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n                                     and ch.promotion_id = 'NPP06155'\n                                     and (\n                                             (ch.cell_id = '8' and ch.drop_date < dateadd(day,-14,(select historic_build_date from ${Database}.data_layer.historic_build_date)) and gp.drop_date is null)\n                                          or      \n                                             (ch.cell_id = '8' and ch.drop_date < dateadd(day,-14,(select historic_build_date from ${Database}.data_layer.historic_build_date)) and (gp.drop_date < ch.drop_date or gp.drop_date > dateadd(day,14,ch.drop_date))) \n                                          or ch.name_urn in (\n                                                                select\n                                                                    distinct urn as name_urn\n                                                                from ${Database}.db.npp_breed_selector_pdc_responses rs\n                                                                where lower(rs.bs_still_getting_puppy) = 'no'\n                                                            )\n                                         )\n                             ) bs on bs.cid = cbb.cid\n                                 and bs.brand = rb.brand\n                   where (rb.division = 'Petcare' and rb.brand not in  ('Beta Breeder','Pro Plan Breeder','Pro Plan Vet','Kitten Code','Growing Pup', 'Breed Selector'))\n                       or (rb.brand = 'Growing Pup' and gp.cid is not null)\n                       or (rb.brand = 'Breed Selector' and bs.cid is not null)\n                   union all\n                   select\n                       cid,\n                       first_date_brand,\n                       last_date_brand\n                   from ${Database}.data_layer.build_rollups_cid_npp_no_brand_base\n               ) mb\n      ) mb on mb.cid = cbb.cid\n          and mb.brand_id = cbb.brand_id\nwhen not matched then insert\n(\n    cid,\n    brand_id,\n    assigned_master_brand,\n    first_date_brand,\n    last_date_brand,\n    last_login_brand,\n    first_channel_brand,\n    last_channel_brand\n)\nvalues\n(\n    mb.cid,\n    mb.brand_id,\n    1,\n    mb.first_date_brand,\n    mb.last_date_brand,\n    cast(null as date),\n    cast(null as varchar(10)),\n    cast(null as varchar(10))\n);\n\n---------------------\n--set up Kitten Code brand for anyone who has a kitten from other brands\nmerge into ${Database}.data_layer.build_rollups_cid_brand_base cbb\nusing (\n          select distinct\n              cbb.cid,\n              (select brand_id from ${Database}.dedupe.ref_brand where brand = 'Kitten Code') as brand_id,\n              first_value(first_date_brand) over\n                  (\n                      partition by cbb.cid\n                      order by first_date_brand nulls last\n                  ) as first_date_brand,\n              first_value(last_date_brand) over\n                  (\n                      partition by cbb.cid\n                      order by last_date_brand desc nulls last\n                  ) as last_date_brand\n          from (\n                   select\n                       cid,\n                       first_date_brand,\n                       last_date_brand\n                   from ${Database}.data_layer.build_rollups_cid_brand_base cbb\n                   inner join ${Database}.dedupe.ref_brand rb on rb.brand_id = cbb.brand_id\n                   where (rb.division = 'Petcare' and rb.brand not in  ('Beta Breeder','Pro Plan Breeder','Pro Plan Vet'))\n                   union all\n                   select\n                       cid,\n                       first_date_brand,\n                       last_date_brand\n                   from ${Database}.data_layer.build_rollups_cid_npp_no_brand_base\n               ) cbb\n          inner join (\n                         select distinct\n                             cid\n                         from ${Database}.dedupe.cid_pet\n                         where lower(pet_life_stage) = 'kitten'\n                     ) pt on pt.cid = cbb.cid\n      ) kc on kc.cid = cbb.cid\n          and kc.brand_id = cbb.brand_id\nwhen not matched then insert\n(\n    cid,\n    brand_id,\n    assigned_master_brand,\n    first_date_brand,\n    last_date_brand,\n    last_login_brand,\n    first_channel_brand,    \n    last_channel_brand\n)\nvalues \n(\n    kc.cid,\n    kc.brand_id,\n    0,\n    kc.first_date_brand,\n    kc.last_date_brand,\n    cast(null as date),\n    cast(null as varchar(10)),\n    cast(null as varchar(10))\n);\n\n---------------------\n--set up Growing Pup brand for anyone who has a Puppy from other brands\nmerge into ${Database}.data_layer.build_rollups_cid_brand_base cbb\nusing (\n          select distinct\n              cbb.cid,\n              (select brand_id from ${Database}.dedupe.ref_brand where brand = 'Growing Pup') as brand_id,\n              first_value(first_date_brand) over\n                  (\n                      partition by cbb.cid\n                      order by first_date_brand nulls last\n                  ) as first_date_brand,\n              first_value(last_date_brand) over\n                  (\n                      partition by cbb.cid\n                      order by last_date_brand desc nulls last\n                  ) as last_date_brand\n          from (\n                   select\n                       cid,\n                       first_date_brand,\n                       last_date_brand\n                   from ${Database}.data_layer.build_rollups_cid_brand_base cbb\n                   inner join ${Database}.dedupe.ref_brand rb on rb.brand_id = cbb.brand_id\n                   where (rb.division = 'Petcare' and rb.brand not in  ('Beta Breeder','Pro Plan Breeder','Pro Plan Vet'))\n                   union all\n                   select\n                       cid,\n                       first_date_brand,\n                       last_date_brand\n                   from ${Database}.data_layer.build_rollups_cid_npp_no_brand_base\n               ) cbb\n          inner join (\n                         select distinct\n                             cid\n                         from ${Database}.dedupe.cid_pet\n                         where lower(pet_life_stage) = 'puppy'\n                     ) pt on pt.cid = cbb.cid\n      ) gp on gp.cid = cbb.cid\n          and gp.brand_id = cbb.brand_id\nwhen not matched then insert\n(\n    cid,\n    brand_id,\n    assigned_master_brand,\n    first_date_brand,\n    last_date_brand,\n    last_login_brand,\n    first_channel_brand,    \n    last_channel_brand\n)\nvalues \n(\n    gp.cid,\n    gp.brand_id,\n    0,\n    gp.first_date_brand,\n    gp.last_date_brand,\n    cast(null as date),\n    cast(null as varchar(10)),\n    cast(null as varchar(10))\n);\n\nalter warehouse set warehouse_size = 'Medium';\n\n---------------------\n--have no printer\n\ndrop table if exists ${Database}.data_layer.build_rollups_cid_no_printer ;  \n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_cid_no_printer \nas\nselect distinct nm.cid\nfrom ${Database}.dedupe.names nm\ninner join ${Database}.db.names_attributes nat on trim(nat.name_urn) = nm.name_urn\n                                         and nat.no_printer = 1\nwhere nat.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date);\n\n\n---------------------\n--purina engagement scoring\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_samples;\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_npp_engagement_samples\nas \nselect distinct   \n    cid,\n    first_value(activity_date) over (partition by cid, activity_brand_id order by activity_date desc) as activity_date,\n    'Requested free product sample' as activity,\n    activity_brand_id\nfrom (\n        select distinct \n            xr.cid,\n            case\n                when trim(ch.campaign_id) = 'NPP04825_1' then (select brand_id from ${Database}.dedupe.ref_brand where brand = 'Go Cat')\n                when trim(ch.campaign_id) in ('NPP05588_1','NPP02921_3','NPP04571') then (select brand_id from ${Database}.dedupe.ref_brand where brand = 'Dentalife')\n            end as activity_brand_id,\n            drop_date as activity_date\n        from ${Database}.db.comms_hist ch\n        inner join ${Database}.dedupe.xref_name_urn xr on trim(ch.name_urn) = trim(xr.name_urn)\n        where ch.drop_date < (select historic_build_date from ${Database}.data_layer.historic_build_date)\n        and trim(programme_id) = 'M' \n        and \n            (\n            trim(campaign_id) = 'NPP04825_1' --Go Cat\n            or trim(campaign_id) = 'NPP05588_1' -- Dentalife\n            or trim(campaign_id) = 'NPP02921_3' --old dentalife\n            or trim(campaign_id) = 'NPP04571' --old dentalife\n            )\n        union all\n        select distinct\n            xr.cid,\n            sm.source_brand_id as activity_brand_id,\n            coalesce(sm.request_date,sm.processing_date) as activity_date\n        from ${Database}.db.npp_sample_requests sm\n        inner join ${Database}.dedupe.xref_name_urn xr on trim(xr.name_urn) = trim(sm.name_urn)\n        where sm.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    ) a\n;\n\n---------------------\n--all sources by brand\n\nalter warehouse set warehouse_size = 'Large';\n\ndrop table if exists ${Database}.dedupe.cid_brand_source ;  \n\nCREATE OR REPLACE TABLE ${Database}.dedupe.cid_brand_source\nas\nselect distinct\n    nm.cid,\n    dbnm.source_brand_id as brand_id,\n    trim(dbnm.source) as source,\n    trim(dbnm.source_file) as source_file,  \n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id, trim(dbnm.source), trim(dbnm.source_file)\n            order by dbnm.data_date nulls last\n        )                                            as first_date_brand_source,    \n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id, trim(dbnm.source), trim(dbnm.source_file)\n            order by dbnm.data_date desc nulls last\n        )                                            as last_date_brand_source\nfrom ${Database}.dedupe.names nm\ninner join ${Database}.db.names dbnm on trim(dbnm.name_urn) = nm.name_urn\nwhere dbnm.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\nand dbnm.source_brand_id is not null;\n\nalter warehouse set warehouse_size = 'Medium';\n\n\n---------------------\n--preferrences (gigya)\ndrop table if exists ${Database}.data_layer.build_rollups_cid_brand_preference ;  \n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_cid_brand_preference \nas\nselect distinct\n    nm.cid,\n    np.brand_id,\n    first_value(np.pref_emailable) over \n        (\n            partition by nm.cid, np.brand_id\n            order by \n                np.data_date desc nulls last,\n                case when lower(np.source_file) regexp '.*json.*' then 1 else 0 end --migration is json files\n        )  as pref_emailable,\n    first_value(case when lower(np.source_file) regexp '.*json.*' then 1 else 0 end) over \n        (\n            partition by nm.cid, np.brand_id\n            order by \n                np.data_date desc nulls last,\n                case when lower(np.source_file) regexp '.*json.*' then 1 else 0 end --migration is json files\n        )  as pref_mig,\n    first_value(np.data_date) over \n        (\n            partition by nm.cid, np.brand_id\n            order by \n                np.data_date desc nulls last,\n                case when lower(np.source_file) regexp '.*json.*' then 1 else 0 end --migration is json files\n        )  as pref_date,\n    first_value(np.data_date) over \n        (\n            partition by nm.cid, np.brand_id\n            order by \n                np.data_date asc nulls last,\n                case when lower(np.source_file) regexp '.*json.*' then 1 else 0 end --migration is json files\n        )  as first_pref_date\nfrom ${Database}.dedupe.names nm\ninner join ${Database}.db.names_preference np on trim(np.name_urn) = nm.name_urn\nwhere np.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date);\n\n\n---------------------\n--all products (affiliations) by brand\n\n\ndrop table if exists ${Database}.dedupe.cid_brand_product ;  \n\nCREATE OR REPLACE TABLE ${Database}.dedupe.cid_brand_product\nas\nselect distinct\n    nm.cid,\n    rp.brand_id,\n    rp.product_id,\n    first_value(pr.data_date) over \n        (\n            partition by nm.cid, rp.brand_id, rp.product_id\n            order by pr.data_date desc nulls last\n        )  as last_date_brand_product\nfrom ${Database}.dedupe.names nm\ninner join ${Database}.db.product pr on trim(pr.name_urn) = nm.name_urn\ninner join ${Database}.db.ref_product rp on pr.product_id = rp.product_id\nwhere pr.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\nand rp.brand_id is not null;\n\nalter warehouse set warehouse_size = 'Small';\n\n\ndrop table if exists ${Database}.dedupe.ref_product;\n   \nCREATE OR REPLACE TABLE ${Database}.dedupe.ref_product  \nas\nselect \n    product_id,\n    trim(product_name) as product_name\nfrom ${Database}.db.ref_product;\n\n\ndrop table if exists ${Database}.data_layer.build_rollups_cid_brand_product ;  \n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_cid_brand_product\nas\nselect distinct\n    cid,\n    brand_id\nfrom ${Database}.dedupe.cid_brand_product\nwhere last_date_brand_product > add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -60); --now only using data from the last 5 years to determine preference for brand\n\n\n--purina engagement scoring\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_loyalty_scheme;\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_npp_engagement_loyalty_scheme\nas \nselect \n    distinct cid,\n    first_value(activity_date) over (partition by cid, trim(brand) order by activity_date desc) as activity_date,\n    'Joined Loyalty Scheme' as activity,\n    brand_id as activity_brand_id\nfrom (\n        select distinct    \n            xr.cid,\n            first_value(l.source_date) over (partition by xr.cid order by l.source_date desc) as activity_date,\n            'BETA' as brand,\n            (select brand_id from ${Database}.dedupe.ref_brand where brand = 'Beta') as brand_id\n        from     ${Database}.db.npp_beta_pro_plan_loyalty l\n        join         ${Database}.dedupe.xref_name_urn xr on xr.name_urn = 'REG_NPP_LYLTY|'||cast(l.urn as varchar)\n        where     trim(l.source) = 'BETA Loyalty'\n        \n        union all\n        \n        select distinct    \n            xr.cid,\n            first_value(l.source_date) over (partition by xr.cid order by l.source_date desc) as activity_date,\n            'Pro Plan' as brand,\n            (select brand_id from ${Database}.dedupe.ref_brand where brand = 'Pro Plan') as brand_id\n        from     ${Database}.db.npp_beta_pro_plan_loyalty l\n        join         ${Database}.dedupe.xref_name_urn xr on xr.name_urn = 'REG_NPP_LYLTY|'||cast(l.urn as varchar)\n        where     trim(l.source) = 'PRO PLAN Loyalty'\n        \n        union all\n        \n        select    \n            cid,\n            last_date_brand_product as activity_date,\n            case when product_id in (970,1611,1612,1613) then 'Pro Plan'\n                 when product_id = 1631 then 'Felix'\n                 when product_id = 1632 then 'Gourmet'\n                 else 'error' end as brand,\n            case when product_id in (970,1611,1612,1613) then (select brand_id from ${Database}.dedupe.ref_brand where brand = 'Pro Plan')\n                 when product_id = 1631 then (select brand_id from ${Database}.dedupe.ref_brand where brand = 'Felix')\n                 when product_id = 1632 then (select brand_id from ${Database}.dedupe.ref_brand where brand = 'Gourmet')\n                 else cast(null as int) end as brand_id\n        from ${Database}.dedupe.cid_brand_product\n        where product_id in (970,1611,1612,1613,1631,1632)\n        union all\n        select distinct\n            cid,\n            answer_data_date as activity_date,\n            'Your Purina' as brand,\n            (select brand_id from ${Database}.dedupe.ref_brand where brand = 'Your Purina') as brand_id\n        from ${Database}.dedupe.cid_question cq\n        inner join ${Database}.db.ref_question rq on rq.question_id = cq.question_id\n        where rq.question = 'Where do you buy food for your pets?'\n        ) a\n;\n\n\ndrop table if exists ${Database}.data_layer.build_comms_history ;  \n\nalter warehouse set warehouse_size = 'Medium';\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_comms_history\nas \nselect \n    nm.cid,\n    ch.control_cell,\n    trim(ch.name_urn) as name_urn,\n    ch.drop_date,\n    ch.response_date,\n    ch.data_brand_id,\n    lower(trim(ch.email)) as email,\n    ch.brand_preference,\n    ch.brand_engagement,\n    trim(ch.programme_id)||'|'||trim(ch.campaign_id)||'|'||trim(ch.promotion_id)||'|'||trim(ch.cell_id)||'|'||trim(ch.pack_id) as packid\nfrom ${Database}.db.comms_hist ch\ninner join ${Database}.dedupe.names nm on trim(ch.name_urn) = nm.name_urn\nwhere ch.drop_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date);\n\n\ndrop table if exists ${Database}.data_layer.build_comms_history_lookup ;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_comms_history_lookup\nas\nselect *,\n    trim(programme_id)||'|'||trim(campaign_id)||'|'||trim(promotion_id)||'|'||trim(cell_id)||'|'||trim(pack_id) as packid\nfrom ${Database}.db.comms_hist_lookup;\n\n\n---------------------\n--responses\n\n\ndrop table if exists ${Database}.data_layer.adestra_events_in_xref;\n\n--create version of adestra table with all campaigns that are in the xref\nCREATE OR REPLACE TABLE ${Database}.data_layer.adestra_events_in_xref\nas\nselect\n    trim(ae.email) as EMAIL,\n\ttrim(ae.name_urn) as NAME_URN,\n\ttrim(ae.amf_id) as AMF_ID,\n\ttrim(ae.campaign_id) as CAMPAIGN_ID,\n\ttrim(ae.campaign_name) as CAMPAIGN_NAME,\n\ttrim(ae.event_name) as EVENT_NAME,\n\tae.event_timestamp,\n\ttrim(ae.link_label) as LINK_LABEL,\n\ttrim(ae.link_url) as LINK_URL,\n\ttrim(ae.form_builder_id) as FORM_BUILDER_ID,\n    trim(ae.email_client) as email_client,\n    trim(ae.email_client_type) as email_client_type,\n    trim(ae.browser) as browser,\n\ttrim(ae.kog_pack) as KOG_PACK,\n\ttrim(ae.source_file) as SOURCE_FILE,\n\tae.source_date,\n    trim(xr.ch_campaign_id) as ch_campaign_id\nfrom ${Database}.db.adestra_events ae\ninner join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(trim(ae.campaign_name)) = lower(trim(xr.adestra_campaign_name))\n                                                           and trim(xr.adestra_campaign_name) <> ''\nwhere ae.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\nand ae.name_urn <> '999999';\n\ndrop table if exists ${Database}.data_layer.adestra_events_no_xref;\n\n--create version of adestra table with all campaign that are not in the xref\nCREATE OR REPLACE TABLE ${Database}.data_layer.adestra_events_no_xref\nas\nselect\n    trim(ae.email) as EMAIL,\n\ttrim(ae.name_urn) as NAME_URN,\n\ttrim(ae.amf_id) as AMF_ID,\n\ttrim(ae.campaign_id) as CAMPAIGN_ID,\n\ttrim(ae.campaign_name) as CAMPAIGN_NAME,\n\ttrim(ae.event_name) as EVENT_NAME,\n\tae.event_timestamp,\n\ttrim(ae.link_label) as LINK_LABEL,\n\ttrim(ae.link_url) as LINK_URL,\n\ttrim(ae.form_builder_id) as FORM_BUILDER_ID,\n    trim(ae.email_client) as email_client,\n    trim(ae.email_client_type) as email_client_type,\n    trim(ae.browser) as browser,\n\ttrim(ae.kog_pack) as KOG_PACK,\n\ttrim(ae.source_file) as SOURCE_FILE,\n\tae.source_date\nfrom ${Database}.db.adestra_events ae\nleft join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(trim(ae.campaign_name)) = lower(trim(xr.adestra_campaign_name))\n                                                          and trim(xr.adestra_campaign_name) <> ''\nwhere ae.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    and xr.adestra_campaign_name is null\n    and ae.name_urn <> '999999';\n\n\n\ndrop table if exists ${Database}.dedupe.adestra_events ;  \n\nalter warehouse set warehouse_size = 'Xlarge';\n\n--insert the ones that are in the lookup and have a name_urn\ncreate or replace table ${Database}.dedupe.adestra_events \nas \nselect distinct\n    'Adestra' as platform,\n    nm.cid,\n    ch.campaign_id,\n    lower(ae.email) as email,\n    ae.amf_id,\n    ae.campaign_id as adestra_campaign_id,\n    ae.campaign_name as adestra_campaign_name,\n    ae.event_name,\n    ae.event_timestamp,\n    case when ae.event_name ilike '%form_builder_click%' then 'DC | Service | Web Form'\n\t\t\t when ae.event_name ilike '%form_click%' then 'DC | Service | Web Form'\n             when ae.event_name ilike '%webversion_click%' then 'O | Generic | View in Browser'\n             else  coalesce(rll.link_label, ae.link_label)\n    end as link_label,\n    ae.link_url,\n    ae.form_builder_id,\n    ae.email_client,\n    ae.email_client_type,\n    ae.browser,\n\tcoalesce(ae.kog_pack,'') as kog_pack,\n    ae.source_file,\n    ae.source_date\nfrom ${Database}.data_layer.adestra_events_in_xref ae --the name_urn on here is only historic - assume only email now supplied\ninner join ${Database}.dedupe.xref_name_urn nm on ae.name_urn = nm.name_urn --get all the old ones\ninner join ${Database}.data_layer.build_comms_history_lookup ch on lower(ch.campaign_id) = lower(ae.ch_campaign_id)\nleft join ${Database}.db.ref_link_label rll on trim(ae.link_url) = trim(rll.link_url)\n                                      and trim(lower(ae.campaign_name)) = trim(lower(rll.campaign_name)) \nwhere ae.name_urn > '';\n\n\n--insert the ones that are in the lookup with no name_urn\ninsert into ${Database}.dedupe.adestra_events \nselect distinct\n    'Adestra' as platform,\n    nm.cid,\n    ch.campaign_id,\n    lower(ae.email) as email,\n    ae.amf_id,\n    ae.campaign_id as adestra_campaign_id,\n    ae.campaign_name,\n    ae.event_name,\n    ae.event_timestamp,\n    case when ae.event_name ilike '%form_builder_click%' then 'DC | Service | Web Form'\n\t\t\t when ae.event_name ilike '%form_click%' then 'DC | Service | Web Form'\n             when ae.event_name ilike '%webversion_click%' then 'O | Generic | View in Browser'\n             else  coalesce(rll.link_label, ae.link_label)\n    end as link_label,\n    ae.link_url,\n    ae.form_builder_id,\n    ae.email_client,\n    ae.email_client_type,\n    ae.browser,\n\tcoalesce(ae.kog_pack,'') as kog_pack,\n    ae.source_file,\n    ae.source_date\nfrom ${Database}.data_layer.adestra_events_in_xref ae --the name_urn on here is only historic - assume only email now supplied\ninner join ${Database}.dedupe.xref_email nm on lower(ae.email) = nm.email --use this as it is all email addresses on the db\ninner join ${Database}.data_layer.build_comms_history_lookup ch on lower(ch.campaign_id) = lower(ae.ch_campaign_id)\ninner join ${Database}.data_layer.build_comms_history chb on chb.packid = ch.packid \n                                        and chb.cid = nm.cid\nleft join ${Database}.db.ref_link_label rll on trim(ae.link_url) = trim(rll.link_url)\n                                      and trim(lower(ae.campaign_name)) = trim(lower(rll.campaign_name))                                         \n\nwhere ae.name_urn = '';\n\n\ndrop table if exists ${Database}.data_layer.adestra_events_in_xref;\n\n\n--insert the ones that are not in the lookup but with name_urn\ninsert into ${Database}.dedupe.adestra_events \nselect distinct\n    'Adestra' as platform,\n    nm.cid,\n    ch.campaign_id,\n    lower(ae.email) as email,\n    ae.amf_id,\n    ae.campaign_id as adestra_campaign_id,\n    ae.campaign_name,\n    ae.event_name,\n    ae.event_timestamp,\n    case when ae.event_name ilike '%form_builder_click%' then 'DC | Service | Web Form'\n\t\t\t when ae.event_name ilike '%form_click%' then 'DC | Service | Web Form'\n             when ae.event_name ilike '%webversion_click%' then 'O | Generic | View in Browser'\n             else  coalesce(rll.link_label, ae.link_label)\n    end as link_label,\n    ae.link_url,\n    ae.form_builder_id,\n    ae.email_client,\n    ae.email_client_type,\n    ae.browser,\n\tcoalesce(ae.kog_pack,'') as kog_pack,\n    ae.source_file,\n    ae.source_date\nfrom ${Database}.data_layer.adestra_events_no_xref ae --the name_urn on here is only historic - assume only email now supplied\ninner join ${Database}.dedupe.xref_name_urn nm on ae.name_urn = nm.name_urn\ninner join ${Database}.data_layer.build_comms_history_lookup ch on ch.programme_id = 'E' \n                                              and lower(ch.campaign_id) = lower(case when ae.campaign_name ilike '%_MTE_%' then tbw.db.strchop(ae.campaign_name,'_',1,3) else tbw.db.strchop(ae.campaign_name,'_',1,1) end)\nleft join ${Database}.db.ref_link_label rll on trim(ae.link_url) = trim(rll.link_url)\n                                      and trim(lower(ae.campaign_name)) = trim(lower(rll.campaign_name))                                              \nwhere ae.name_urn > '';\n\n\n--insert the ones that are not in the lookup with no name_urn\ninsert into ${Database}.dedupe.adestra_events \nselect distinct\n    'Adestra' as platform, \n    nm.cid,\n    ch.campaign_id,\n    lower(ae.email) as email,\n    ae.amf_id,\n    ae.campaign_id as adestra_campaign_id,\n    ae.campaign_name,\n    ae.event_name,\n    ae.event_timestamp,\n    case when ae.event_name ilike '%form_builder_click%' then 'DC | Service | Web Form'\n\t\t\t when ae.event_name ilike '%form_click%' then 'DC | Service | Web Form'\n             when ae.event_name ilike '%webversion_click%' then 'O | Generic | View in Browser'\n             else  coalesce(rll.link_label, ae.link_label)\n    end as link_label,\n    ae.link_url,\n    ae.form_builder_id,\n    ae.email_client,\n    ae.email_client_type,\n    ae.browser,\n\tcoalesce(ae.kog_pack,'') as kog_pack,\n    ae.source_file,\n    ae.source_date\nfrom ${Database}.data_layer.adestra_events_no_xref ae --the name_urn on here is only historic - assume only email now supplied\ninner join ${Database}.dedupe.xref_email nm on lower(ae.email) = nm.email --use this as it is all email addresses on the db\ninner join ${Database}.data_layer.build_comms_history_lookup ch on ch.programme_id = 'E' \n                                              and lower(ch.campaign_id) = lower(case when ae.campaign_name ilike '%_MTE_%' then tbw.db.strchop(ae.campaign_name,'_',1,3) else tbw.db.strchop(ae.campaign_name,'_',1,1) end)\ninner join ${Database}.data_layer.build_comms_history chb on chb.packid = ch.packid \n\n                                        and chb.cid = nm.cid \n\nleft join ${Database}.db.ref_link_label rll on trim(ae.link_url) = trim(rll.link_url)\n                                      and trim(lower(ae.campaign_name)) = trim(lower(rll.campaign_name))\nwhere ae.name_urn = '';\n\ndrop table ${Database}.data_layer.adestra_events_no_xref;\n\n\nalter warehouse set warehouse_size = 'Medium';\n\ndrop table if exists ${Database}.data_layer.mapp_events_in_xref;\n\n--create version of adestra table with all campaigns that are in the xref\nCREATE OR REPLACE TABLE ${Database}.data_layer.mapp_events_in_xref\nas\nselect\n    mp.senttomta_timestamp,\n\ttrim(mp.senttomta_externaltransactionid) as senttomta_externaltransactionid,\n\ttrim(mp.senttomta_sendoutchannel) as senttomta_sendoutchannel,\n\tmp.skip_timestamp,\n\ttrim(mp.skip_category) as skip_category,\n\ttrim(mp.skip_externaltransactionid) as skip_externaltransactionid,\n\tmp.bounce_timestamp,\n\ttrim(mp.bounce_category) as bounce_category,\n\ttrim(mp.bounce_text) as bounce_text,\n\tmp.feedback_timestamp,\n\ttrim(mp.feedback_category) as feedback_category,\n\tmp.render_timestamp,\n\ttrim(mp.render_geolocation_isocountrycode) as render_geolocation_isocountrycode,\n\ttrim(mp.render_geolocation_regioncode) as render_geolocation_regioncode,\n\ttrim(mp.render_geolocation_city) as render_geolocation_city,\n\ttrim(mp.render_geolocation_latitude) as render_geolocation_latitude,\n\ttrim(mp.render_geolocation_longitude) as render_geolocation_longitude,\n\ttrim(mp.render_useragent_platform) as render_useragent_platform,\n\ttrim(mp.render_useragent_operatingsystemname) as render_useragent_operatingsystemname,\n\ttrim(mp.render_useragent_operatingsystemversion) as render_useragent_operatingsystemversion,\n\ttrim(mp.render_useragent_clientname) as render_useragent_clientname,\n\ttrim(mp.render_useragent_clientversion) as render_useragent_clientversion,\n\ttrim(mp.render_useragent_rawstring) as render_useragent_rawstring,\n\tmp.click_timestamp,\n\ttrim(mp.click_link_id) as click_link_id,\n\ttrim(mp.click_link_category_id) as click_link_category_id,\n\ttrim(mp.click_link_category_name) as click_link_category_name,\n\ttrim(mp.click_link_url) as click_link_url,\n\ttrim(mp.click_link_systemlinktype) as click_link_systemlinktype,\n\ttrim(mp.click_link_type) as click_link_type,\n\ttrim(mp.click_geolocation_isocountrycode) as click_geolocation_isocountrycode,\n\ttrim(mp.click_geolocation_regioncode) as click_geolocation_regioncode,\n\ttrim(mp.click_geolocation_city) as click_geolocation_city,\n\ttrim(mp.click_geolocation_latitude) as click_geolocation_latitude,\n\ttrim(mp.click_geolocation_longitude) as click_geolocation_longitude,\n\ttrim(mp.click_useragent_platform) as click_useragent_platform,\n\ttrim(mp.click_useragent_operatingsystem) as click_useragent_operatingsystem,\n\ttrim(mp.click_useragent_operatingsystemversion) as click_useragent_operatingsystemversion,\n\ttrim(mp.click_useragent_clientname) as click_useragent_clientname,\n\ttrim(mp.click_useragent_clientversion) as click_useragent_clientversion,\n\ttrim(mp.click_useragent_rawstring) as click_useragent_rawstring,\n\tmp.unsubscribe_timestamp,\n\tmp.forward_timestamp,\n\tmp.conversion_cp_timestamp,\n\ttrim(mp.conversion_cp_id) as conversion_cp_id,\n\ttrim(mp.conversion_cp_name) as conversion_cp_name,\n\ttrim(mp.conversion_cp_orderid) as conversion_cp_orderid,\n\ttrim(mp.conversion_cp_itemcount) as conversion_cp_itemcount,\n\ttrim(mp.conversion_cp_amount) as conversion_cp_amount,\n\ttrim(mp.conversion_cp_requestparameters) as conversion_cp_requestparameters,\n\ttrim(mp.group_id) as group_id,\n\ttrim(mp.group_name) as group_name,\n\ttrim(mp.group_email) as group_email,\n\ttrim(mp.group_category_id) as group_category_id,\n\ttrim(mp.group_category_name) as group_category_name,\n\ttrim(mp.message_id) as message_id,\n\ttrim(mp.message_name) as message_name,\n\ttrim(mp.message_category_id) as message_category_id,\n\ttrim(mp.message_category_name) as message_category_name,\n\ttrim(mp.message_subject_unresolved) as message_subject_unresolved,\n\ttrim(mp.message_externalid) as message_externalid,\n\ttrim(mp.message_type) as message_type,\n\ttrim(mp.message_variation_id) as message_variation_id,\n\ttrim(mp.selection_id) as selection_id,\n\ttrim(mp.selection_name) as selection_name,\n\tmp.record_timestamp,\n\ttrim(mp.record_type) as record_type,\n\tmp.record_senttomta_timestamp,\n\ttrim(mp.record_externaltransactionid) as record_externaltransactionid,\n\ttrim(mp.sendout_type) as sendout_type,\n\ttrim(mp.sendout_addresseerole) as sendout_addresseerole,\n\ttrim(mp.sendout_recipienttype) as sendout_recipienttype,\n\ttrim(mp.user_id) as user_id,\n\ttrim(mp.user_email) as user_email,\n\ttrim(mp.user_mobilenumber) as user_mobilenumber,\n\ttrim(mp.user_faxnumber) as user_faxnumber,\n\ttrim(mp.user_identifier) as user_identifier,\n\ttrim(mp.user_custom_attribute_batch) as user_custom_attribute_batch,\n\ttrim(mp.user_custom_attribute_cell) as user_custom_attribute_cell,\n\ttrim(mp.user_custom_attribute_name_urn) as user_custom_attribute_name_urn,\n\ttrim(mp.source_file) as source_file,\n\tmp.source_date,\n    xr.ch_campaign_id\nfrom ${Database}.db.mapp_events mp\ninner join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(trim(mp.message_name)) = lower(trim(xr.mapp_message_name))\n                                                           and trim(xr.mapp_message_name) <> ''\nwhere mp.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date);\n\n\ndrop table if exists ${Database}.data_layer.mapp_events_no_xref;\n\n--create version of adestra table with all campaigns that are in the xref\nCREATE OR REPLACE TABLE ${Database}.data_layer.mapp_events_no_xref\nas\nselect\n    mp.senttomta_timestamp,\n\ttrim(mp.senttomta_externaltransactionid) as senttomta_externaltransactionid,\n\ttrim(mp.senttomta_sendoutchannel) as senttomta_sendoutchannel,\n\tmp.skip_timestamp,\n\ttrim(mp.skip_category) as skip_category,\n\ttrim(mp.skip_externaltransactionid) as skip_externaltransactionid,\n\tmp.bounce_timestamp,\n\ttrim(mp.bounce_category) as bounce_category,\n\ttrim(mp.bounce_text) as bounce_text,\n\tmp.feedback_timestamp,\n\ttrim(mp.feedback_category) as feedback_category,\n\tmp.render_timestamp,\n\ttrim(mp.render_geolocation_isocountrycode) as render_geolocation_isocountrycode,\n\ttrim(mp.render_geolocation_regioncode) as render_geolocation_regioncode,\n\ttrim(mp.render_geolocation_city) as render_geolocation_city,\n\ttrim(mp.render_geolocation_latitude) as render_geolocation_latitude,\n\ttrim(mp.render_geolocation_longitude) as render_geolocation_longitude,\n\ttrim(mp.render_useragent_platform) as render_useragent_platform,\n\ttrim(mp.render_useragent_operatingsystemname) as render_useragent_operatingsystemname,\n\ttrim(mp.render_useragent_operatingsystemversion) as render_useragent_operatingsystemversion,\n\ttrim(mp.render_useragent_clientname) as render_useragent_clientname,\n\ttrim(mp.render_useragent_clientversion) as render_useragent_clientversion,\n\ttrim(mp.render_useragent_rawstring) as render_useragent_rawstring,\n\tmp.click_timestamp,\n\ttrim(mp.click_link_id) as click_link_id,\n\ttrim(mp.click_link_category_id) as click_link_category_id,\n\ttrim(mp.click_link_category_name) as click_link_category_name,\n\ttrim(mp.click_link_url) as click_link_url,\n\ttrim(mp.click_link_systemlinktype) as click_link_systemlinktype,\n\ttrim(mp.click_link_type) as click_link_type,\n\ttrim(mp.click_geolocation_isocountrycode) as click_geolocation_isocountrycode,\n\ttrim(mp.click_geolocation_regioncode) as click_geolocation_regioncode,\n\ttrim(mp.click_geolocation_city) as click_geolocation_city,\n\ttrim(mp.click_geolocation_latitude) as click_geolocation_latitude,\n\ttrim(mp.click_geolocation_longitude) as click_geolocation_longitude,\n\ttrim(mp.click_useragent_platform) as click_useragent_platform,\n\ttrim(mp.click_useragent_operatingsystem) as click_useragent_operatingsystem,\n\ttrim(mp.click_useragent_operatingsystemversion) as click_useragent_operatingsystemversion,\n\ttrim(mp.click_useragent_clientname) as click_useragent_clientname,\n\ttrim(mp.click_useragent_clientversion) as click_useragent_clientversion,\n\ttrim(mp.click_useragent_rawstring) as click_useragent_rawstring,\n\tmp.unsubscribe_timestamp,\n\tmp.forward_timestamp,\n\tmp.conversion_cp_timestamp,\n\ttrim(mp.conversion_cp_id) as conversion_cp_id,\n\ttrim(mp.conversion_cp_name) as conversion_cp_name,\n\ttrim(mp.conversion_cp_orderid) as conversion_cp_orderid,\n\ttrim(mp.conversion_cp_itemcount) as conversion_cp_itemcount,\n\ttrim(mp.conversion_cp_amount) as conversion_cp_amount,\n\ttrim(mp.conversion_cp_requestparameters) as conversion_cp_requestparameters,\n\ttrim(mp.group_id) as group_id,\n\ttrim(mp.group_name) as group_name,\n\ttrim(mp.group_email) as group_email,\n\ttrim(mp.group_category_id) as group_category_id,\n\ttrim(mp.group_category_name) as group_category_name,\n\ttrim(mp.message_id) as message_id,\n\ttrim(mp.message_name) as message_name,\n\ttrim(mp.message_category_id) as message_category_id,\n\ttrim(mp.message_category_name) as message_category_name,\n\ttrim(mp.message_subject_unresolved) as message_subject_unresolved,\n\ttrim(mp.message_externalid) as message_externalid,\n\ttrim(mp.message_type) as message_type,\n\ttrim(mp.message_variation_id) as message_variation_id,\n\ttrim(mp.selection_id) as selection_id,\n\ttrim(mp.selection_name) as selection_name,\n\tmp.record_timestamp,\n\ttrim(mp.record_type) as record_type,\n\tmp.record_senttomta_timestamp,\n\ttrim(mp.record_externaltransactionid) as record_externaltransactionid,\n\ttrim(mp.sendout_type) as sendout_type,\n\ttrim(mp.sendout_addresseerole) as sendout_addresseerole,\n\ttrim(mp.sendout_recipienttype) as sendout_recipienttype,\n\ttrim(mp.user_id) as user_id,\n\ttrim(mp.user_email) as user_email,\n\ttrim(mp.user_mobilenumber) as user_mobilenumber,\n\ttrim(mp.user_faxnumber) as user_faxnumber,\n\ttrim(mp.user_identifier) as user_identifier,\n\ttrim(mp.user_custom_attribute_batch) as user_custom_attribute_batch,\n\ttrim(mp.user_custom_attribute_cell) as user_custom_attribute_cell,\n\ttrim(mp.user_custom_attribute_name_urn) as user_custom_attribute_name_urn,\n\ttrim(mp.source_file) as source_file,\n\tmp.source_date,\n    xr.ch_campaign_id\nfrom ${Database}.db.mapp_events mp\nleft join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(trim(mp.message_name)) = lower(trim(xr.mapp_message_name))\n                                                           and trim(xr.mapp_message_name) <> ''\nwhere mp.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\nand xr.mapp_message_name is null;\n\n\n\n--insert the ones that are in the lookup and have a name_urn\ninsert into ${Database}.dedupe.adestra_events\nselect distinct\n    'Mapp' as platform,\n    xr.cid,\n    chl.campaign_id,\n    lower(mp.user_email) as email,\n    '' as amf_id,\n    mp.message_id as adestra_campaign_id,\n    mp.message_name as adestra_campaign_name,\n    case\n        when mp.record_type = 'SentToMTA' then 'sent_campaign'\n        when mp.record_type = 'Render' then 'read'\n        when mp.record_type = 'Click' then 'click'\n        when mp.record_type = 'Bounce' then 'inbound_bounce'\n        when mp.record_type = 'Feedback' then 'feedback'\n        when mp.record_type = 'Skip' then 'skip'\n        else lower(mp.record_type)\n    end as event_name,\n    mp.record_timestamp as event_timestamp,\n    coalesce(trim(rll.link_label), mp.click_link_category_name) as link_label,\n    mp.click_link_url as link_url,\n    '' as form_builder_id,\n    '' as email_client,\n    '' as email_client_type,\n    '' as browser,\n    '' as kog_pack,\n    mp.source_file,\n    mp.source_date\nfrom ${Database}.data_layer.mapp_events_in_xref mp\ninner join ${Database}.dedupe.xref_name_urn xr on mp.user_custom_attribute_name_urn = xr.name_urn\ninner join ${Database}.data_layer.build_comms_history_lookup chl on lower(chl.campaign_id) = lower(mp.ch_campaign_id)\nleft join ${Database}.db.ref_link_label rll on trim(mp.click_link_url) = trim(rll.link_url)\n                                      and trim(lower(mp.message_name)) = trim(lower(rll.campaign_name))                                        \nwhere mp.user_custom_attribute_name_urn > '';\n    \n\n--insert the ones that are in the lookup with no name_urn\ninsert into ${Database}.dedupe.adestra_events\nselect distinct\n    'Mapp' as platform,\n    xr.cid,\n    chl.campaign_id,\n    lower(mp.user_email) as email,\n    '' as amf_id,\n    mp.message_id as adestra_campaign_id,\n    mp.message_name as adestra_campaign_name,\n    case\n        when mp.record_type = 'SentToMTA' then 'sent_campaign'\n        when mp.record_type = 'Render' then 'read'\n        when mp.record_type = 'Click' then 'click'\n        when mp.record_type = 'Bounce' then 'inbound_bounce'\n        when mp.record_type = 'Feedback' then 'feedback'\n        when mp.record_type = 'Skip' then 'skip'\n        else lower(mp.record_type)\n    end as event_name,\n    mp.record_timestamp as event_timestamp,\n    coalesce(trim(rll.link_label), mp.click_link_category_name) as link_label,\n    mp.click_link_url as link_url,\n    '' as form_builder_id,\n    '' as email_client,\n    '' as email_client_type,\n    '' as browser,\n    '' as kog_pack,\n    mp.source_file,\n    mp.source_date\nfrom ${Database}.data_layer.mapp_events_in_xref mp\ninner join ${Database}.dedupe.xref_email xr on lower(mp.user_email) = lower(xr.email)\ninner join ${Database}.data_layer.build_comms_history_lookup chl on lower(chl.campaign_id) = lower(mp.ch_campaign_id)\ninner join ${Database}.data_layer.build_comms_history ch on ch.packid = chl.packid\n                                             and ch.cid = xr.cid\nleft join ${Database}.db.ref_link_label rll on trim(mp.click_link_url) = trim(rll.link_url)\n                                      and trim(lower(mp.message_name)) = trim(lower(rll.campaign_name))\nwhere mp.user_custom_attribute_name_urn = '';\n\n\ndrop table if exists ${Database}.data_layer.mapp_events_in_xref;\n\n\n--insert the ones that are not in the lookup but with name_urn\ninsert into ${Database}.dedupe.adestra_events\nselect distinct\n    'Mapp' as platform,\n    xr.cid,\n    chl.campaign_id,\n    lower(mp.user_email) as email,\n    '' as amf_id,\n    mp.message_id as adestra_campaign_id,\n    mp.message_name as adestra_campaign_name,\n    case\n        when mp.record_type = 'SentToMTA' then 'sent_campaign'\n        when mp.record_type = 'Render' then 'read'\n        when mp.record_type = 'Click' then 'click'\n        when mp.record_type = 'Bounce' then 'inbound_bounce'\n        when mp.record_type = 'Feedback' then 'feedback'\n        when mp.record_type = 'Skip' then 'skip'\n        else lower(mp.record_type)\n    end as event_name,\n    mp.record_timestamp as event_timestamp,\n    coalesce(trim(rll.link_label), mp.click_link_category_name) as link_label,\n    mp.click_link_url as link_url,\n    '' as form_builder_id,\n    '' as email_client,\n    '' as email_client_type,\n    '' as browser,\n    '' as kog_pack,\n    mp.source_file,\n    mp.source_date\nfrom ${Database}.data_layer.mapp_events_no_xref mp\ninner join ${Database}.dedupe.xref_name_urn xr on mp.user_custom_attribute_name_urn = xr.name_urn\ninner join ${Database}.data_layer.build_comms_history_lookup chl on chl.programme_id = 'E'\n                                                     and lower(chl.campaign_id) = lower(case when collate(mp.message_name,'') ilike '%_MTE_%' then tbw.db.strchop(mp.message_name,'_',1,3) else split_part(mp.message_name,'_',1) end)\nleft join ${Database}.db.ref_link_label rll on trim(mp.click_link_url) = trim(rll.link_url)\n                                      and trim(lower(mp.message_name)) = trim(lower(rll.campaign_name))\nwhere mp.user_custom_attribute_name_urn > '';\n\n\n--insert the ones that are not in the lookup with no name_urn\ninsert into ${Database}.dedupe.adestra_events\nselect distinct\n    'Mapp' as platform,\n    xr.cid,\n    chl.campaign_id,\n    lower(mp.user_email) as email,\n    '' as amf_id,\n    mp.message_id as adestra_campaign_id,\n    mp.message_name as adestra_campaign_name,\n    case\n        when mp.record_type = 'SentToMTA' then 'sent_campaign'\n        when mp.record_type = 'Render' then 'read'\n        when mp.record_type = 'Click' then 'click'\n        when mp.record_type = 'Bounce' then 'inbound_bounce'\n        when mp.record_type = 'Feedback' then 'feedback'\n        when mp.record_type = 'Skip' then 'skip'\n        else lower(mp.record_type)\n    end as event_name,\n    mp.record_timestamp as event_timestamp,\n    coalesce(trim(rll.link_label), mp.click_link_category_name) as link_label,\n    mp.click_link_url as link_url,\n    '' as form_builder_id,\n    '' as email_client,\n    '' as email_client_type,\n    '' as browser,\n    '' as kog_pack,\n    mp.source_file,\n    mp.source_date\nfrom ${Database}.data_layer.mapp_events_no_xref mp\ninner join ${Database}.dedupe.xref_email xr on lower(mp.user_email) = lower(xr.email)\ninner join ${Database}.data_layer.build_comms_history_lookup chl on chl.programme_id = 'E'\n                                                     and lower(chl.campaign_id) = lower(case when collate(mp.message_name,'') ilike '%_MTE_%' then tbw.db.strchop(mp.message_name,'_',1,3) else split_part(mp.message_name,'_',1) end)\ninner join ${Database}.data_layer.build_comms_history ch on ch.packid = chl.packid\n                                             and ch.cid = xr.cid\nleft join ${Database}.db.ref_link_label rll on trim(mp.click_link_url) = trim(rll.link_url)\n                                      and trim(lower(mp.message_name)) = trim(lower(rll.campaign_name))                                              \nwhere mp.user_custom_attribute_name_urn = '';\n\nalter warehouse set warehouse_size = 'Small';\n\ndrop table ${Database}.data_layer.mapp_events_no_xref;\n\n\n--select count(*) from ${Database}.dedupe.adestra_events; --20,747,040\n--select count(*) from ${Database}.db.adestra_events; --63,857,827\n--select * from ${Database}.dedupe.adestra_events;\n\n---------------------\n--all those who have opened an email by brand\n\ndrop table if exists ${Database}.data_layer.build_rollups_cid_brand_emails ;  \n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_cid_brand_emails\nas\nselect \n    ae.email,\n    ch.brand_id,\n    max(cast(ae.event_timestamp as date)) as event_date\nfrom ${Database}.dedupe.adestra_events ae\ninner join ${Database}.data_layer.build_comms_history_lookup ch on ch.campaign_id = ae.campaign_id\nwhere ch.brand_id is not null\n    and lower(collate(ae.event_name,'')) regexp '.*click.*|.*open.*|.*read.*|.*shared.*|.*submit.*'\n    and lower(collate(ae.event_name,'')) not regexp '.*unsubscribe.*'\n    and ae.event_timestamp > add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -60) --now only using data from the last 5 years to determine preference for brand\ngroup by \n    ae.email,\n    ch.brand_id; \n\n--insert SMA emails\ninsert into ${Database}.data_layer.build_rollups_cid_brand_emails\nselect\n    ae.email,\n    rb.brand_id,\n    max(cast(ae.event_timestamp as date)) as event_date\nfrom ${Database}.db.adestra_events_sma ae\ninner join ${Database}.db.ref_brand rb on lower(trim(rb.brand)) = 'sma'\nwhere ae.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    and lower(ae.event_name) regexp '.*click.*|.*open.*|.*read.*|.*shared.*|.*submit.*'\n    and lower(ae.event_name) not regexp '.*unsubscribe.*'\n    and ae.event_timestamp > add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -60) --now only using data from the last 5 years to determine preference for brand\n    and trim(ae.workspace_name) = 'SMA'\ngroup by \n    ae.email,\n    rb.brand_id; \n\n--insert Cerelac emails\ninsert into ${Database}.data_layer.build_rollups_cid_brand_emails\nselect\n    ae.email,\n    rb.brand_id,\n    max(cast(ae.event_timestamp as date)) as event_date\nfrom ${Database}.db.adestra_events_sma ae\ninner join ${Database}.db.ref_brand rb on lower(trim(rb.brand)) = 'cerelac'\nwhere ae.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    and lower(ae.event_name) regexp '.*click.*|.*open.*|.*read.*|.*shared.*|.*submit.*'\n    and lower(ae.event_name) not regexp '.*unsubscribe.*'\n    and ae.event_timestamp > add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -60) --now only using data from the last 5 years to determine preference for brand\n    and lower(ae.workspace_name) regexp '.*cerelac.*'\ngroup by \n    ae.email,\n    rb.brand_id; \n\n--insert HCP emails\ninsert into ${Database}.data_layer.build_rollups_cid_brand_emails\nselect\n    ae.email,\n    rb.brand_id,\n    max(cast(ae.event_timestamp as date)) as event_date\nfrom ${Database}.db.adestra_events_hcp ae\ninner join ${Database}.db.ref_brand rb on lower(trim(rb.brand)) = 'hcp'\nwhere ae.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    and lower(ae.event_name) regexp '.*click.*|.*open.*|.*read.*|.*shared.*|.*submit.*'\n    and lower(ae.event_name) not regexp '.*unsubscribe.*'\n    and ae.event_timestamp > add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -60) --now only using data from the last 5 years to determine preference for brand\ngroup by \n    ae.email,\n    rb.brand_id;\n\n\n---------------------\n--purina engagement scoring\n\n--Contact CES\n\nalter warehouse set warehouse_size = 'Xsmall';\n\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_careline;\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_npp_engagement_careline\nas \nselect    \n    cid, \n    activity_date,\n    min(activity) as activity,\n    cast(null as int) as activity_brand_id\nfrom      \n(\n    select    \n        trim(name_urn) as name_urn,\n        cast(contact_date as date) as activity_date,\n        'Contacted CES (without completing survey)' as activity\n    from ${Database}.db.npp_ces_contacts\n    where source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    union all \n    select    \n        trim(name_urn) as name_urn,\n        cast(contact_date as date) as activity_date,\n        'Completed CES Survey'\n    from ${Database}.db.npp_ces_contacts_and_surveys\n    where source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n) cs\ninner join ${Database}.dedupe.xref_name_urn xr on xr.name_urn = cs.name_urn\ngroup by 1, 2;\n\n\n--Coupons\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_coupons;\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_npp_engagement_coupons\nas \nselect    \n    cid,\n    print_date as activity_date,\n    case \n        when max(trim(redeemed)) = 'Y' then 'Redeemed Coupon'\n        else 'Downloaded Coupon (but did not redeem)'\n    end as activity,\n    qc.brand_id as activity_brand_id\nfrom ${Database}.db.quotient_coupons qc\ninner join ${Database}.dedupe.xref_name_urn xr on trim(qc.name_urn) = xr.name_urn\nwhere qc.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\nand trim(qc.name_urn) > ''\ngroup by 1,2,4\n;\n\n\n--THG Purchases\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_thg_purchases;\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_npp_engagement_thg_purchases\nas\nselect distinct\n    n.cid,\n    order_created as activity_date,\n    'Purchased Product' as activity,\n    n.source_brand_id as activity_brand_id\nfrom (\n        select distinct\n                customer_id,\n                order_created,\n                sum(quantity_ordered * transaction_charge_price_per_unit) as order_total_value\n        from ${Database}.db.npp_thg_trans\n        where source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n        and lower(trim(order_line_status)) = 'despatched'\n        group by customer_id, order_created\n        ) thg\nleft join ${Database}.dedupe.names n on n.name_urn = 'REG_THG|'||cast(thg.customer_id as varchar)\nwhere order_total_value > 0 --1 or more items were not free packs\n;\n\n\n--Competition entry/draw\ndrop table if exists ${Database}.data_layer.build_rollups_npp_competition_entry;\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_npp_competition_entry\nas\nselect    \n    cid,\n    max(drop_date) as activity_date,\n    'Competition entry' activity,\n    (select brand_id from ${Database}.dedupe.ref_brand where brand ilike '%masterbrand%') as activity_brand_id\nfrom ${Database}.db.comms_hist cmp\ninner join ${Database}.dedupe.xref_name_urn xr on trim(cmp.name_urn) = xr.name_urn\nwhere cmp.drop_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\nand trim(cmp.name_urn) > ''\nand cmp.promotion_id = 'NPP07753_2'\ngroup by 1,3,4\nunion all\nselect\n    cid,\n    max(q.data_date) as activity_date,\n    'Competition entry' activity,\n    (select brand_id from ${Database}.dedupe.ref_brand where brand ilike '%masterbrand%') as activity_brand_id\nfrom ${Database}.db.question q\ninner join ${Database}.dedupe.xref_name_urn x on x.name_urn = q.name_urn\nwhere q.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\nand question_id = (select question_id from ${Database}.db.ref_question where question = 'Pet Photo Uploader')\ngroup by 1,3,4\n;\n\n\n--Pet Photo Upload\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_photo_upload;\ncreate or replace table ${Database}.data_layer.build_rollups_npp_engagement_photo_upload\nas\nselect\n    cid,\n    max(q.data_date) as activity_date,\n    'User Generated Content' activity,\n    (select brand_id from ${Database}.dedupe.ref_brand where brand ilike '%masterbrand%') as activity_brand_id\nfrom ${Database}.db.question q\ninner join ${Database}.dedupe.xref_name_urn x on x.name_urn = q.name_urn\nwhere q.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\nand question_id = (select question_id from ${Database}.db.ref_question where question = 'Pet Photo Uploader')\ngroup by 1,3,4\n;\n\n\n--Casting a vote\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_voters;\ncreate or replace table ${Database}.data_layer.build_rollups_npp_engagement_voters\nas\nselect\n    cid,\n    max(q.data_date) as activity_date,\n    'Cast a Vote' activity,\n    (select brand_id from ${Database}.dedupe.ref_brand where brand ilike '%masterbrand%') as activity_brand_id\nfrom ${Database}.db.question q\ninner join ${Database}.dedupe.xref_name_urn x on x.name_urn = q.name_urn\nwhere q.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\nand question_id = (select question_id from ${Database}.db.ref_question where question = 'Pet Photo Voter')\ngroup by 1,3,4\n;\n\n\n--Reconsent\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_reconsent;\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_npp_engagement_reconsent\nas \nselect    \n    xr.cid,\n    dp.data_date as activity_date,\n    'Reconsent' as activity,\n    cast(null as int) as activity_brand_id\nfrom ${Database}.db.names_dp dp\nleft join ${Database}.dedupe.xref_name_urn xr on xr.name_urn = trim(dp.name_urn)\nwhere dp.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\nand trim(dp.source) in ('RESP_ADE_10|232','RESP_ADE_10|234','RESP_ADE_10|253','RESP_ADE_10|259','RESP_ADE_10|274','RESP_ADE_10|275','RESP_ADE_10|317')\nand dp_emailable = 1\n;\n\n\n--registered CIAM account\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_CIAM_accounts;\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_npp_engagement_CIAM_accounts\nas\nselect distinct\ncid\n,data_date as activity_date\n,case when rownum = 1 then 'Registered New CIAM Account' \n         when rownum > 1 then 'Updated CIAM Account'\n         end as activity\n         ,source_brand_id\nfrom\n(\nselect\n    cid\n    ,nm.data_date\n    ,nm.source_brand_id\n    ,row_number() over (partition by cid,nm.data_date order by nm.data_date asc,nm.source_brand_id asc) as rownum\nfrom ${Database}.dedupe.names nm\ninner join ${Database}.db.names_preference np on trim(np.name_urn) = nm.name_urn\nwhere np.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\nand nm.source = 'REG_GIG' --have a gigya account\nand data_controller_id = 5 --gigya account is for a Purina brand\nand lower(nm.source_file) not regexp '.*json.*' --account was not migrated\nand lower(np.source_file) not regexp '.*json.*'\n) t\n;\n\n--Registered to Growing Pup\n--drop table if exists ${Database}.data_layer.build_rollups_npp_engagement_GP_registrants;\n--CREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_npp_engagement_GP_registrants\n--as\n--select distinct\n --   xr.cid,\n--    first_value(p.data_date) over (partition by xr.cid order by p.data_date asc) as activity_date,\n--    'Joined Growing Pup' as activity,\n--    first_value(n.source_brand_id) over (partition by xr.cid order by p.data_date asc) as activity_brand_id\n--from     ${Database}.db.pet p\n--left join ${Database}.dedupe.xref_name_urn xr on xr.name_urn = p.name_urn\n--left join ${Database}.dedupe.names n on n.name_urn = p.name_urn\n--where trim(p.source) in ('REG_KC','REG_THG') or (trim(p.source) = 'REG_GIG' and lower(p.name_urn) regexp '.*growing pup.*')\n--;\n\ncreate or replace table ${Database}.dedupe.cid_brand\nas\nselect * from ${Database}.live.cid_brand;\n\n\n--Registered to Growing Pup\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_GP_registrants;\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_npp_engagement_GP_registrants\nas\n\t\tselect distinct cid, first_date_brand as activity_date,'Joined Growing Pup' as activity,'138' as activity_brand_id  from ${Database}.dedupe.cid_brand \n\t\t\t\t\t  where first_date_brand <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n\t\t\t\t\t  and brand_id = 138 and activity_date is not NULL and brand_preference = 1  \n\t\t\t\t\t  group by 1,2\n;\n\n\n--Registered to Kitten Code\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_KC_registrants;\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_npp_engagement_KC_registrants\nas\n    select distinct cid, first_date_brand as activity_date,'Joined Kitten Code' as activity,'143' as activity_brand_id  from ${Database}.dedupe.cid_brand \n                  where first_date_brand <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n\t\t\t\t  and brand_id = 143 and activity_date is not NULL and brand_preference = 1  \n                  group by 1,2\n\t\t\t\t  ;\n\n\n--Cashback\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_cashback;\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_npp_engagement_cashback\nas\n    select distinct cid, data_date as activity_date,'Cashback' as activity,source_brand_id as activity_brand_id  from ${Database}.dedupe.names \n                   where (NAME_URN ilike '%reg_hashting%' or NAME_URN ilike '%reg_shopm%')  \n                   group by 1,2,3,4\n;\n\n\n--Your Purina\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_your_purina;\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_npp_engagement_your_purina\nas\n  select distinct cid, answer_data_date as ACTIVITY_DATE,'Joined Your Purina' as activity,\n  (select brand_id from ${Database}.dedupe.ref_brand where brand ilike '%masterbrand%') as activity_brand_id\n                        from ${Database}.dedupe.cid_question cq\n                        inner join ${Database}.db.ref_question rq on rq.question_id = cq.question_id\n                        where rq.question = 'Where do you buy food for your pets?' \n;\n\n\n\n--Your Purina Survey clicks\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_your_purina_survey;\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_npp_engagement_your_purina_survey\nas\n  select cid, cast(max(event_timestamp) as date) as ACTIVITY_DATE,'Completed Survey' as activity,\n\t\t(select brand_id from ${Database}.dedupe.ref_brand where brand ilike '%your purina%') as activity_brand_id\n    from ${Database}.dedupe.adestra_events ae\n\tjoin ${Database}.db.ref_your_purina_survey_lookup ref on  ae.adestra_campaign_id = ref.campaign_id and ae.link_url = ref.link_url \n    where  event_name ilike '%click%'\ngroup by 1;\n\n\n--Updated Pet Details\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_updated_pet_details;\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_npp_engagement_updated_pet_details\nas\nselect cid, pet_data_date as ACTIVITY_DATE,'Updated Pet Details' as activity,\n(select brand_id from ${Database}.dedupe.ref_brand where brand ilike '%masterbrand%') as activity_brand_id\nfrom ${Database}.dedupe.cid_pet   group by 1,2\n;\n\n\n--Completed Survey\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_survey;\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_npp_engagement_survey\nas \nselect distinct \n    cid,\n    data_date as activity_date,\n    'Completed Survey' as activity,\n    source_brand_id as activity_brand_id\nfrom ${Database}.dedupe.names\nwhere collate(name_urn,'') ilike 'RESP_GP%'\nunion all\nselect distinct \n    cid,\n    cast(event_timestamp as date) as activity_date,\n    'Completed Survey' as activity,\n    (select brand_id from ${Database}.db.ref_brand where brand ilike '%masterbrand') as activity_brand_id\nfrom ${Database}.dedupe.adestra_events\nwhere event_name = 'GA Survey';\n\n\n-- Registration Opt In\n\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_optin;\ncreate table ${Database}.data_layer.build_rollups_npp_engagement_optin\nas\nselect \ncid,\ndp_date as activity_date,cast(null as int) as activity_brand_id,'Opt In' as activity\nfrom ${Database}.db.names_dp nd\njoin ${Database}.dedupe.names nm\non nd.name_urn = nm.name_urn\nwhere nd.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\nand data_controller_id = 5 and dp_emailable = 1 group by 1,2;\n\n\n--Registration\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_registered_to_purina;\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_npp_engagement_registered_to_purina\nas \nselect distinct\n    cbb.cid,\n    first_value(cbb.first_date_brand) over (partition by cbb.cid order by cbb.first_date_brand asc) as activity_date,\n    'Registration' as activity,\n    first_value(cbb.brand_id) over (partition by cbb.cid order by cbb.first_date_brand asc) as activity_brand_id\nfrom ${Database}.data_layer.build_rollups_cid_brand_base cbb\ninner join ${Database}.dedupe.ref_business_unit_brand rbu on cbb.brand_id = rbu.brand_id\nwhere rbu.business_unit_id in (select business_unit_id from ${Database}.dedupe.ref_business_unit where collate(business_unit,'') ilike 'Nestl_ Purina Petcare (UK) Ltd')\n;\n\n\nalter warehouse set warehouse_size = 'Small';\n\n--Email engagement\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_adestra_prep;\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_npp_engagement_adestra_prep\nas\nselect     cid,\n    adestra_campaign_id,\n    activity_date,\n    event_name,\n    case when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'A' then 'Clicked for Advice'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'Buy_now' then 'Clicked Buy Now'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'C' then 'Clicked Coupon'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'DC' and updated_ciam = 0 then 'Clicked Update Details'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'I' then 'Clicked for Info'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'P' then 'Clicked Product'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'PDC' then 'Clicked PDC'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'R' then 'Clicked Reconsent'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'S' then 'Clicked Social'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'O' then 'Clicked Other'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is not null then link_type\n         when lower(collate(event_name,'')) regexp '.*read.*' then 'Opened email (no click)'\n         else 'Clicked Other' end as link_type ,\n    brand_id\nfrom (\n        select distinct     \n            ae.cid, \n            ae.adestra_campaign_id,\n            cast(ae.event_timestamp as date) as activity_date,\n            ae.event_name,\n            ae.link_label,\n            trim(lt.link_type) as link_type,\n            case when c.cid is not null \n                 and lower(ae.event_name) regexp '.*click.*' \n                 and (trim(lt.link_type) = 'Update Details' or (lt.link_type is null and split_part(ae.link_label, '|', 1) = 'DC'))\n                 then 1 else 0 end as updated_ciam, --only get points for clicking if they didn't register or update CIAM details\n            case when atl.adestra_campaign_id is null then cast(null as int) else rb.brand_id end as brand_id\n        from ${Database}.dedupe.adestra_events ae \n        left join ${Database}.db.ref_link_label_type lt on lower(ae.link_url) = lower(trim(lt.link_url))\n        left join ${Database}.data_layer.build_rollups_npp_engagement_CIAM_accounts c on c.cid = ae.cid \n                                                                                   and c.activity_date = cast(ae.event_timestamp as date)\n        left join ${Database}.db.adestra_tag_lookup atl on trim(atl.adestra_campaign_id) = ae.adestra_campaign_id\n        left join ${Database}.dedupe.ref_brand rb on rb.brand = atl.brand\n        where ae.campaign_id ilike 'npp%'\n            and lower(ae.event_name) regexp '.*click.*|.*open.*|.*read.*|.*shared.*|.*submit.*'\n            and lower(ae.link_url) not regexp '.*unsub.*'\n    ) a\n;\n\n\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_adestra;\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_npp_engagement_adestra\nas\nselect distinct \n    adestra_campaign_id,  \n    cid, \n    activity_date,\n    first_value\n        (\n            case\n                when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Buy Now' then 'Clicked Buy Now'\n                when lower(event_name) regexp '.*click.*' and link_type = 'Clicked PDC' then 'Clicked PDC'\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n                when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Product' then 'Clicked Product'\n                when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Reconsent' then 'Clicked Reconsent'  \n                when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Coupon' then 'Clicked Coupon'  \n\t\t\t\twhen lower(event_name) regexp '.*click.*' and link_type in ('Clicked for Info','Clicked Social','Clicked for Advice','Clicked Update Details','Clicked Other') then 'Clicked Generic'\n                when lower(event_name) regexp '.*click.*|.*submit.*' then 'Clicked Other'\n                when lower(event_name) regexp '.*read.*' then 'Opened email (no click)'\n            end\n        ) over\n        (\n            partition by cid, adestra_campaign_id\n            order by \n                case\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked PDC' then 1\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Buy Now' then 2\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Product' then 3\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Coupon' then 4\n\t\t\t\t\twhen lower(event_name) regexp '.*click.*' and link_type in ('Clicked for Info','Clicked Social','Clicked for Advice','Clicked Update Details','Clicked Other') then 5\n                    when lower(event_name) regexp '.*click.*|.*submit.*' and link_type = 'Clicked Other' then 6\n                    when lower(event_name) regexp '.*read.*' then 7\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Reconsent' then 8\n                end\n        ) as activity,\n    first_value(brand_id)\n          over(\n             partition by cid, adestra_campaign_id\n             order by \n                case\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked PDC' then 1\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Buy Now' then 2\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Product' then 3\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Coupon' then 4\n\t\t\t\t\twhen lower(event_name) regexp '.*click.*' and link_type in ('Clicked for Info','Clicked Social','Clicked for Advice','Clicked Update Details','Clicked Other') then 5\n                    when lower(event_name) regexp '.*click.*|.*submit.*' and link_type = 'Clicked Other' then 6\n                    when lower(event_name) regexp '.*read.*' then 7\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Reconsent' then 8\n                end\n        ) as activity_brand_id  \nfrom ${Database}.data_layer.build_rollups_npp_engagement_adestra_prep\n;\n\n\n-- Create tables for Generic clicks/open, one per month per campaign\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_adestra_generic_clicks;\ncreate or replace table ${Database}.data_layer.build_rollups_npp_engagement_adestra_generic_clicks as\nselect adestra_campaign_id, concat(year(activity_date),month(activity_date)) as year_month,cid,activity,activity_brand_id,max(activity_date) as activity_date\nfrom ${Database}.data_layer.build_rollups_npp_engagement_adestra\nwhere activity in \n('Clicked Generic','Opened email (no click)')\ngroup by 1,2,3,4,5;\n\n\n-- Create table for non generic clicks to allow more points\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_adestra_nongeneric_clicks;\ncreate or replace table ${Database}.data_layer.build_rollups_npp_engagement_adestra_nongeneric_clicks as\nselect adestra_campaign_id, activity,cid,activity_brand_id,activity_date\nfrom ${Database}.data_layer.build_rollups_npp_engagement_adestra\nwhere activity not in \n('Clicked Generic','Opened email (no click)');\n\n\n  --purina qualifio kitten code campaign\n--drop table if exists ${Database}.data_layer.build_rollups_npp_Qualifio_participation;\n--create table ${Database}.data_layer.build_rollups_npp_Qualifio_participation\n--as\n--select distinct   \n--    cid,\n--    first_value(na.data_date) over(partition by cid, REGISTRATION_CAMPAIGN order by na.data_date asc) as activity_date,\n--    'Qualifio participation' as activity,\n--   n.source_brand_id as activity_brand_id\n--from ${Database}.db.names_attributes na\n--inner join ${Database}.db.names n on n.name_urn = na.name_urn and n.data_date = na.data_date\n--inner join ${Database}.dedupe.xref_name_urn xr on trim(n.name_urn) = trim(xr.name_urn)\n--where na.source = 'REG_QUALIFIO'\n--and n.SOURCE_DATA_CONTROLLER_ID = (select data_controller_id from ${Database}.db.ref_data_controller where data_controller like 'Nestl_ Purina Petcare (UK) Ltd')  \n--;\n\n\n--insert into ${Database}.db.build_log \n--select \n--    'nestle_rollups',\n--    '${Database}.data_layer.build_rollups_npp_Qualifio_participation',\n--    'total records',\n--    cast(count(*) as varchar),\n--    CURRENT_TIMESTAMP\n--from ${Database}.data_layer.build_rollups_npp_Qualifio_participation;\n\n\n--purina pet avatar creation\ndrop table if exists ${Database}.data_layer.build_rollups_npp_pet_avatar_creation;\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_npp_pet_avatar_creation\nas\nselect    \n    cid,\n    max(to_date(left(user_date_created,10),'YYYY-MM-DD')) as activity_date,\n    'Pet Avatar Creation' activity,\n    (select brand_id from ${Database}.dedupe.ref_brand where brand ilike '%masterbrand%') as activity_brand_id\nfrom ${Database}.db.npp_pet_avatar_details ppa\ninner join ${Database}.dedupe.xref_name_urn xr on trim(ppa.name_urn) = trim(xr.name_urn)\nwhere ppa.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\nand trim(ppa.name_urn) > ''\ngroup by 1,3,4\n;\n\n\n--score rollup\ndrop table if exists ${Database}.dedupe.npp_engagement_scoring_activities;\n\nCREATE OR REPLACE TABLE ${Database}.dedupe.npp_engagement_scoring_activities\nas\nselect    \n    cid,\n    activity_date,\n    activity,\n    activity_brand_id,\n    (((1 / sqrt((datediff(day,activity_date,(select historic_build_date from ${Database}.data_layer.historic_build_date))/60)+1) * 15 ) + 1)) as   recency_multiplier,\n    case\n        when activity = 'Purchased Product' then 40\n\t\twhen activity = 'Left Positive Rate & Review' then 40\n\t\twhen activity = 'Left Negative Rate & Review' then 40\n\t\twhen activity = 'Joined Your Purina' then 40\n        when activity = 'Pet Avatar Creation' then 40\n        when activity = 'Completed Survey' then 30\n        when activity = 'Clicked PDC' then 30\n\t\twhen activity = 'Clicked Update Details' then 30\n        when activity = 'User Generated Content' then 30\n\t\twhen activity = 'Contacted CES (without completing survey)' then 12\n        when activity = 'Joined Growing Pup' then 12\n\t\twhen activity = 'Joined Kitten Code' then 12\n        when activity = 'Clicked Buy Now' then 12\n\t\twhen activity = 'Updated Pet Details' then 12\n\t\twhen activity = 'Redeemed Coupon' then 12\n\t\twhen activity = 'Cashback' then 12\n\t\twhen activity = 'Requested free product sample' then 12\n\t\twhen activity = 'Joined Loyalty Scheme' then 12\n\t\twhen activity = 'Registered New CIAM Account' then 12\n\t\twhen activity = 'Updated CIAM Account' then 12\n        when activity = 'Completed CES Survey' then 12\n\t\twhen activity = 'Downloaded Coupon (but did not redeem)' then 12\n\t\twhen activity = 'Reconsent' then 12\n\t\twhen activity = 'Clicked Reconsent' then 12\n\t\twhen activity = 'Registration' then 6\n\t\twhen activity = 'Opt In' then 6\n\t\twhen activity = 'Clicked Generic' then 6\n        when activity = 'Cast a Vote' then 6\t\t\t\t\t\t\t\t\t\t\t\n        when activity = 'Competition entry' then 2\n        when activity = 'Opened email (no click)' then 1\n    end as base_score\nfrom      \n(   select cid, activity_date, activity, source_brand_id as activity_brand_id\n    from ${Database}.data_layer.build_rollups_npp_engagement_CIAM_accounts\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.data_layer.build_rollups_npp_engagement_thg_purchases\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.data_layer.build_rollups_npp_engagement_rate_review\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.data_layer.build_rollups_npp_engagement_loyalty_scheme\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.data_layer.build_rollups_npp_engagement_careline\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.data_layer.build_rollups_npp_engagement_samples\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.data_layer.build_rollups_npp_engagement_coupons\n \tunion all\n\tselect cid, activity_date, activity, activity_brand_id\n    from ${Database}.data_layer.build_rollups_npp_competition_entry\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.data_layer.build_rollups_npp_engagement_adestra_nongeneric_clicks\n\tunion all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.data_layer.build_rollups_npp_engagement_adestra_generic_clicks\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.data_layer.build_rollups_npp_engagement_GP_registrants\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.data_layer.build_rollups_npp_engagement_reconsent\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.data_layer.build_rollups_npp_engagement_survey\n\tunion all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.data_layer.build_rollups_npp_pet_avatar_creation\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.data_layer.build_rollups_npp_engagement_photo_upload\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.data_layer.build_rollups_npp_engagement_voters \n\tunion all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.data_layer.build_rollups_npp_engagement_KC_registrants\n\tunion all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.data_layer.build_rollups_npp_engagement_cashback\n\tunion all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.data_layer.build_rollups_npp_engagement_your_purina\n\tunion all\n\tselect cid, activity_date, activity, activity_brand_id\n    from ${Database}.data_layer.build_rollups_npp_engagement_your_purina_survey\n\tunion all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.data_layer.build_rollups_npp_engagement_updated_pet_details\n\tunion all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.data_layer.build_rollups_npp_engagement_optin\n) activities\n;\n\ndrop table if exists ${Database}.data_layer.build_npp_engagement_scoring_occurrence_pre;\ncreate or replace table ${Database}.data_layer.build_npp_engagement_scoring_occurrence_pre as \nselect cid,activity,activity_brand_id,activity_date,recency_multiplier,base_score,\ndatediff(month,diff_date,activity_date) as count_month\nfrom (\nselect cid,activity,activity_brand_id,activity_date,recency_multiplier,base_score,\nlead(activity_date) over (partition by activity   order by cid,activity,activity_date desc) \nas diff_date\nfrom ${Database}.dedupe.npp_engagement_scoring_activities\n) new;\n\n-- Add in occurrence_multiplier\ndrop table if exists ${Database}.data_layer.build_npp_engagement_scoring_occurrence;\n\ncreate or replace table ${Database}.data_layer.build_npp_engagement_scoring_occurrence as\nselect\ncid,\nactivity,\nactivity_brand_id,\nactivity_date,\nrecency_multiplier,\nbase_score,\ncase\nwhen row_number() over(partition by cid, activity, rn order by activity_date) < 4 then 1\nwhen row_number() over(partition by cid, activity, rn order by activity_date) = 4 then 0.8\nwhen row_number() over(partition by cid, activity, rn order by activity_date) = 5 then 0.6\nwhen row_number() over(partition by cid, activity, rn order by activity_date) >= 6 then 0.5\nend as occurrence_multiplier\nfrom (select distinct\na.*,\nfirst_value(coalesce(b.rn,9999)) over(partition by a.cid, a.activity, a.activity_date order by b.rn) as rn\nfrom ${Database}.data_layer.build_npp_engagement_scoring_occurrence_pre a\nleft join (select *, row_number() over(partition by cid, activity order by activity_date) as rn from ${Database}.data_layer.build_npp_engagement_scoring_occurrence_pre where count_month >= 6) b on a.cid = b.cid\nand a.activity = b.activity\nand a.activity_date < b.activity_date) a\norder by activity, activity_date;\n\nalter warehouse set warehouse_size = 'Xsmall';\n\n\n-- New Distinct Activity setup for Engagement Score\ncreate or replace table ${Database}.data_layer.build_rollups_npp_engagement_distinct_activity as\nselect\n cid,activity\nfrom ${Database}.dedupe.npp_engagement_scoring_activities\nwhere activity_date < (select historic_build_date from ${Database}.data_layer.historic_build_date)\ngroup by 1,2;\n\n-- Summarise the above table to CID level\n\ncreate or replace table ${Database}.data_layer.build_rollups_npp_engagement_distinct_activity_cid_level\nas \nselect\ncid,count(*) as distinct_activity\nfrom ${Database}.data_layer.build_rollups_npp_engagement_distinct_activity\ngroup by 1;\n\n\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_CIAM_accounts;\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_thg_purchases;\ndrop table if exists ${Database}.data_layer.build_rollups_npp_competition_entry;\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_rate_review;\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_loyalty_scheme;\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_careline;\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_samples;\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_coupons;\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_adestra;\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_GP_registrants;\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_reconsent;\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_registered_to_purina;\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_survey;\ndrop table if exists ${Database}.data_layer.build_rollups_npp_pet_avatar_creation;\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_adestra_nongeneric_clicks;\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_adestra_generic_clicks;\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_photo_upload;\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_voters;\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_KC_registrants;\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_cashback;\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_your_purina;\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_updated_pet_details;\ndrop table if exists ${Database}.data_layer.build_rollups_npp_test_engagement_optin;\ndrop table if exists ${Database}.data_layer.build_npp_engagement_scoring_occurrence_pre;\n\n--final engagement table\ndrop table if exists ${Database}.data_layer.build_rollups_npp_engagement_score;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_npp_engagement_score \nas\nselect    \n    npsa.cid,\n  sum(coalesce(base_score,0) * coalesce(recency_multiplier,0) * \n  coalesce(occurrence_multiplier,0)\n  * coalesce(case when  npda.distinct_activity <= 3 then 1 when npda.distinct_activity <= 5 then 1.25 else 1.5 end, 0)) as engagement_score\nfrom ${Database}.data_layer.build_npp_engagement_scoring_occurrence npsa\njoin ${Database}.data_layer.build_rollups_npp_engagement_distinct_activity_cid_level npda\non npsa.cid = npda.cid\ngroup by 1;\n\ndrop table if exists ${Database}.data_layer.build_npp_engagement_scoring_occurrence;\n\n\n--lapse risk segment table\ncreate or replace table ${Database}.data_layer.build_rollups_npp_lapse_risk_segment\nas\nselect\n    ev.cid,\n    case\n        when ev.last_open < add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-10)\n            or ((ev.first_date_business_unit < add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-6) or ev.first_date_business_unit is null) and ev.last_open is null) then 'Very High Risk'\n        when (ev.last_open >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-10) and ev.last_open < add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-6))\n            or ((ev.first_date_business_unit < add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-12) or ev.first_date_business_unit is null)\n                and ev.last_click is null\n                and ev.last_open >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -6)\n                and ev.last_open < add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -3))\n            or ((ev.first_date_business_unit >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-6) and ev.first_date_business_unit < add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-3)) and ev.last_open is null) then 'High Risk'\n        when (ev.last_open >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -6) and ev.last_open < add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -3) and (ev.last_click is not null or ev.first_date_business_unit >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-12)))\n              or (ev.last_open is null and ev.first_date_business_unit >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -3)) then 'Medium Risk'\n        when ev.last_open >= add_months ((select historic_build_date from ${Database}.data_layer.historic_build_date), -3) then 'Low Risk'\n    end as purina_lapse_risk_segment\nfrom (\n         select\n             cbb.cid,\n             min(cbb.first_date_business_unit) as first_date_business_unit,\n             max(case when lower(ae.event_name) rlike '.*read.*|.*click.*' then cast(ae.event_timestamp as date) end) as last_open,\n             max(case when lower(ae.event_name) rlike '.*click.*' then cast(ae.event_timestamp as date) end) as last_click\n         from ${Database}.data_layer.build_rollups_cid_bu_base cbb\n         left join ${Database}.dedupe.adestra_events ae on ae.cid = cbb.cid\n                                                     and lower(ae.campaign_id) rlike '^npp.*'\n         where cbb.business_unit_id = 5\n         group by 1\n         union all\n         select\n             ae.cid,\n             cast(null as date) as first_date_business_unit,\n             max(case when lower(ae.event_name) rlike '.*read.*|.*click.*' then cast(ae.event_timestamp as date) end) as last_open,\n             max(case when lower(ae.event_name) rlike '.*click.*' then cast(ae.event_timestamp as date) end) as last_click\n         from ${Database}.dedupe.adestra_events ae\n         left join ${Database}.data_layer.build_rollups_cid_bu_base cbb on cbb.cid = ae.cid\n                                                     and cbb.business_unit_id = 5\n         where lower(ae.campaign_id) rlike '^npp.*'\n             and cbb.cid is null\n         group by 1\n  ) ev;\n\n\n---------------------\n---------------------\n-- cid\n\ndrop table if exists ${Database}.dedupe.cid ;  \n\nalter warehouse set warehouse_size = 'Large';\n\nCREATE OR REPLACE TABLE ${Database}.dedupe.cid \nas \nselect \n    cb.cid,\n    cb.hid,\n    cb.bbw_urn,\n    cb.name_urn,\n    cb.created_date,\n    cb.updated_date,\n    case when gf.cid is null then cb.gender else 'X' end                                        as gender,\n    cast(left(upper(cb.postcode),20) as varchar(20))                                            as postcode,\n    postcode_area_home,\n    postcode_district_home,\n    cast\n    (\n        case \n            when lower(cb.country)='united kingdom' then left(upper(split_part(cb.postcode,' ',1)||' '||left(split_part(cb.postcode,' ',-1),1)),10) \n            else '' \n        end as varchar(10)\n    )                                                                                           as postal_sector,\n    cast\n    (\n        case \n            when lower(cb.country)='united kingdom' then left(upper(split_part(cb.postcode,' ',1)),10) \n            else '' \n        end as varchar(10)\n    )                                                                                           as postal_district,\n    cast\n    (\n        upper\n        (\n            case \n                when lower(cb.country)='united kingdom' then \n                    case\n                        when lower(substring(collate(cb.postcode,''),2,1)) regexp '.*[a-z].*' then left(cb.postcode,2) \n                        else left(cb.postcode,1) \n                    end \n                else '' \n            end\n        ) as char(2)\n    )                                                                                           as postal_area,\n    cb.country,   \n    cb.dob,\n    case when cb.mailable_ignoring_dp          = 1 then cb.name_urn_to_mail_ignoring_dp          else cast(null as varchar) end as name_urn_to_mail_ignoring_dp,\n    case when cb.emailable_ignoring_dp         = 1 then cb.name_urn_to_email_ignoring_dp         else cast(null as varchar) end as name_urn_to_email_ignoring_dp,\n    case when cb.phoneable_ignoring_dp         = 1 then cb.name_urn_to_phone_ignoring_dp         else cast(null as varchar) end as name_urn_to_phone_ignoring_dp,\n    case when cb.smsable_ignoring_dp           = 1 then cb.name_urn_to_sms_ignoring_dp           else cast(null as varchar) end as name_urn_to_sms_ignoring_dp,\n    case when np.cid is not null then 1 else cast(null as tinyint) end                          as no_printer, \n    case \n        when hc.cid is not null then 'Y'\n        when ncat.cid is not null then 'Y'  \n        when pcat.cid is not null then 'Y'\n        when cat.cid is not null and lower(cat.answer) = 'y' then 'Y'\n        when cat.cid is not null and lower(cat.answer) = 'n' then 'N'\n        when ic.data_date >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-60) then 'IN'\n        when ic.data_date < add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-60) then 'IO'\n        else 'N' \n    end as have_cat,\n    case \n        when hd.cid is not null then 'Y'\n        when ndog.cid is not null then 'Y'  \n        when pdog.cid is not null then 'Y'\n        when dog.cid is not null and lower(dog.answer) = 'y' then 'Y'\n        when dog.cid is not null and lower(dog.answer) = 'n' then 'N'\n        when id.data_date >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-60) then 'IN'\n        when id.data_date < add_months((select historic_build_date from ${Database}.data_layer.historic_build_date),-60) then 'IO'\n        else 'N' \n    end as have_dog,\n    case \n        when hc.cid is not null then hc.number_of_cats\n        when ncat.cid is not null then cast(ncat.answer as int)          \n        when cat.cid is not null and lower(cat.answer) = 'y' then 1\n        when pcat.cid is not null then 1\n        else 0\n    end as number_of_cats,\n    case \n        when hd.cid is not null then hd.number_of_dogs\n        when ndog.cid is not null then cast(ndog.answer as int)          \n        when dog.cid is not null and lower(dog.answer) = 'y' then 1\n        when pdog.cid is not null then 1\n        else 0\n    end as number_of_dogs,\n    pdc.pet_segment as pdc_click_pet_seg,\n    pdc.activity_date as pdc_click_pet_seg_updated,\n    case \n        when hc.cid is null \n            and ncat.cid is null \n            and cat.cid is null \n            and uhc.cid is not null then 'Y'\n        else '' \n    end as used_to_have_cat,\n    case \n        when hd.cid is null\n            and ndog.cid is null\n            and dog.cid is null\n            and uhd.cid is not null then 'Y'\n        else '' \n    end as used_to_have_dog,\n\tcase \n        when hc.cid is not null\n             and ncat.cid is not null  \n             and pcat.cid is not null\n\t\t\tand pdc.cid is not null and pdc.pet_segment in ('Both','Cat') then 'Y'\n\t\telse 'N' \n    end as pdc_cat_link_update,\n\tcase \n        when hd.cid is not null\n             and ndog.cid is not null  \n             and pdog.cid is not null\n\t\t\tand pdc.cid is not null and pdc.pet_segment in ('Both','Dog') then 'Y'\n\t\telse 'N' \n    end as pdc_dog_link_update,\t\t\t\t\t\t   \n    dp.num_pets_deceased_this_month,\n    es.engagement_score as purina_engagement_score,\n\tlrs.purina_lapse_risk_segment\nfrom ${Database}.data_layer.build_rollups_cid_base                     cb\nleft join ${Database}.data_layer.build_rollups_cid_gender_fix          gf   on cb.cid = gf.cid\nleft join ${Database}.data_layer.build_rollups_cid_have_cat            hc   on cb.cid = hc.cid\nleft join ${Database}.data_layer.build_rollups_cid_have_dog            hd   on cb.cid = hd.cid\nleft join ${Database}.data_layer.build_rollups_cid_inferred_cat        ic   on cb.cid = ic.cid\nleft join ${Database}.data_layer.build_rollups_cid_inferred_dog        id   on cb.cid = id.cid\nleft join ${Database}.data_layer.build_rollups_cid_used_to_have_cat    uhc  on cb.cid = uhc.cid\nleft join ${Database}.data_layer.build_rollups_cid_used_to_have_dog    uhd  on cb.cid = uhd.cid\nleft join ${Database}.data_layer.build_rollups_cid_deceased_pets       dp   on cb.cid = dp.cid\nleft join ${Database}.data_layer.build_rollups_cid_no_printer          np   on cb.cid = np.cid\nleft join ${Database}.data_layer.build_rollups_npp_engagement_score    es   on cb.cid = es.cid\nleft join ${Database}.data_layer.build_rollups_npp_lapse_risk_segment  lrs  on cb.cid = lrs.cid\nleft join ${Database}.dedupe.cid_question                          cat  on cat.cid = cb.cid \n                                                                     and cat.question = 'Have cat'\nleft join ${Database}.dedupe.cid_question                          dog  on dog.cid = cb.cid \n                                                                     and dog.question = 'Have dog'\nleft join ${Database}.dedupe.cid_question                          ncat on ncat.cid = cb.cid \n                                                                     and ncat.question = 'Number of cats'\nleft join ${Database}.dedupe.cid_question                          ndog on ndog.cid = cb.cid \n                                                                     and ndog.question = 'Number of dogs'\nleft join ${Database}.dedupe.cid_question                          pcat on pcat.cid = cb.cid \n                                                                     and lower(collate(pcat.question,'')) regexp '.*which pets do you have.*'\n                                                                     and lower(collate(pcat.answer,'')) regexp '.*cat.*'\nleft join ${Database}.dedupe.cid_question                          pdog on pdog.cid = cb.cid \n                                                                     and lower(collate(pdog.question,'')) regexp '.*which pets do you have.*'\n                                                                     and lower(collate(pdog.answer,'')) regexp '.*dog.*'\nleft join ${Database}.data_layer.build_rollups_cid_pdc_pet            pdc on pdc.cid = cb.cid \n;\n\n  \ndrop table ${Database}.data_layer.build_rollups_cid_gender_fix;\ndrop table ${Database}.data_layer.build_rollups_cid_have_cat;\ndrop table ${Database}.data_layer.build_rollups_cid_have_dog;\ndrop table ${Database}.data_layer.build_rollups_cid_inferred_cat;\ndrop table ${Database}.data_layer.build_rollups_cid_inferred_dog;\ndrop table ${Database}.data_layer.build_rollups_cid_no_printer;\ndrop table ${Database}.data_layer.build_rollups_cid_used_to_have_cat;\ndrop table ${Database}.data_layer.build_rollups_cid_used_to_have_dog;\ndrop table ${Database}.data_layer.build_rollups_cid_deceased_pets;\ndrop table ${Database}.data_layer.build_rollups_npp_engagement_score;\n\n---------------------\n-- cid details\n\ndrop table if exists ${Database}.dedupe.cid_details ;  \n\nCREATE OR REPLACE TABLE ${Database}.dedupe.cid_details \nas\nselect distinct\n    ci.cid,\n    ci.hid,\n    coalesce(utm.name_urn, ute.name_urn, utp.name_urn, uts.name_urn, ci.name_urn)                                       as name_urn,\n    cast(regexp_replace(coalesce(utm.title, ute.title, ma.title),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))                as title,\n    cast(regexp_replace(coalesce(utm.firstname, ute.firstname, ma.firstname),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))    as firstname, \n    cast(regexp_replace(coalesce(utm.lastname, ute.lastname, ma.lastname),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))       as lastname,\n    --blank address if not mailable\n    cast(regexp_replace(coalesce(utm.add1, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                 as add1,\n    cast(regexp_replace(coalesce(utm.add2, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                 as add2,\n    cast(regexp_replace(coalesce(utm.add3, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                 as add3,\n    cast(regexp_replace(coalesce(utm.add4, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                 as add4,\n    cast(regexp_replace(coalesce(utm.add5, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                 as add5,\n    cast(regexp_replace(coalesce(utm.city, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                 as town,\n    cast(regexp_replace(coalesce(utm.state, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                as county,\n    cast(regexp_replace(coalesce(utm.country_clean, ci.country),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                as country,\n    cast(regexp_replace(upper(coalesce(utm.postcode, ci.postcode)),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))              as postcode,\n    cast(regexp_replace(coalesce(utp.phone_home, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))                            as phone_home,\n    cast(regexp_replace(coalesce(utp.phone_work, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))                            as phone_work,\n    cast(regexp_replace(coalesce(\n        case \n            when uts.phone_mobile like '+44 %' then replace(replace(uts.phone_mobile , '+' , '') , ' ' , '') \n            else uts.phone_mobile\n        end,''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))                                                                 as phone_mobile,\n    cast(regexp_replace(coalesce(utm.formal_salutation, ute.formal_salutation, ma.formal_salutation),'[\\x00-\\x1F|\\x7F]','')as nvarchar(100))       as salutation, \n    cast(regexp_replace(coalesce(utm.informal_salutation, ute.informal_salutation, ma.informal_salutation),'[\\x00-\\x1F|\\x7F]','')as nvarchar(100)) as salutation_informal\nfrom ${Database}.dedupe.cid ci \nleft join ${Database}.dedupe.names utm   on ci.name_urn_to_mail_ignoring_dp  = utm.name_urn\nleft join ${Database}.dedupe.names ute   on ci.name_urn_to_email_ignoring_dp = ute.name_urn\nleft join ${Database}.dedupe.names utp   on ci.name_urn_to_phone_ignoring_dp = utp.name_urn\nleft join ${Database}.dedupe.names uts   on ci.name_urn_to_sms_ignoring_dp   = uts.name_urn\nleft join ${Database}.dedupe.names ma    on ci.name_urn                      = ma.name_urn\n;\n\n\n---------------------\n-- cid brand\n\ndrop table if exists ${Database}.data_layer.names_supps_dp_brand;\n\nalter warehouse set warehouse_size = 'Medium';\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.names_supps_dp_brand\nas\nselect distinct\n    cid,\n    business_unit_id,\n    division_id,\n    brand_id,\n    max(first_email)  as email,\n    max(dp_last_date) as dp_last_date,\n    max(last_open_date)       as last_open_date,\n    max(last_open_date_ios15) as last_open_date_ios15,\n    max(customer_retention_group_date) \t\t\t\t\t\t    as customer_retention_group_date,\n    max(customer_retention_group_date_ios15) \t\t\t\t\tas customer_retention_group_date_ios15,\n    max(customer_retention_group_expiry_date_calculated) \t\tas customer_retention_group_expiry_date,\n    max(customer_retention_group_expiry_date_ios15_calculated) \tas customer_retention_group_expiry_date_ios15,\n    min(customer_retention_group_base)  \t\t\t\t\t\tas customer_retention_group_base,\n    min(customer_retention_group_base_ios15) \t\t\t\t\tas customer_retention_group_base_ios15,\n    min(customer_suppression_group_base) \t\t\t\t\t\tas customer_suppression_group_base,\n    max(mailable)  as mailable,\n    max(emailable) as emailable,\n\tmin(emailable_first_date)   as emailable_first_date,\n\tmax(emailable_first_source) as emailable_first_source,\n\tmax(emailable_last_date)    as emailable_last_date,\n\tmax(emailable_last_source)  as emailable_last_source, \n    max(emailable_newsletter)  as emailable_newsletter,\n    max(mailable_ignoring_dp)  as mailable_ignoring_dp,\n    max(emailable_ignoring_dp) as emailable_ignoring_dp\nfrom (\n\t select\n\t\t *,\n\t\t case\n\t\t\t when brand_id = (select brand_id from ${Database}.db.ref_brand where brand = 'SMA') then add_months(customer_retention_group_date,36)\n\t\t\t else add_months(customer_retention_group_date,24)\n\t\t end as customer_retention_group_expiry_date_calculated,\n\t\t case\n\t\t\t when brand_id = (select brand_id from ${Database}.db.ref_brand where brand = 'SMA') then add_months(customer_retention_group_date_ios15,36)\n\t\t\t else add_months(customer_retention_group_date_ios15,24)\n\t\t end as customer_retention_group_expiry_date_ios15_calculated\n\t\t,first_value(email)                    over (partition by cid, business_unit_id, division_id, brand_id order by emailable desc nulls last, emailable_newsletter desc nulls last, dp_last_date desc nulls last,last_open_date desc nulls last,email asc nulls last) as first_email\n\t\t,first_value(dp_first_date) \t       over (partition by cid, business_unit_id, division_id, brand_id order by emailable desc nulls last, emailable_newsletter desc nulls last, dp_first_date nulls last    ,last_open_date desc nulls last,email asc nulls last) as emailable_first_date\n\t\t,first_value(dp_first_source)          over (partition by cid, business_unit_id, division_id, brand_id order by emailable desc nulls last, emailable_newsletter desc nulls last, dp_first_date nulls last\t ,last_open_date desc nulls last,email asc nulls last) as emailable_first_source\n\t\t,first_value(dp_last_date) \t           over (partition by cid, business_unit_id, division_id, brand_id order by emailable desc nulls last, emailable_newsletter desc nulls last, dp_last_date desc nulls last,last_open_date desc nulls last,email asc nulls last) as emailable_last_date\n\t\t,first_value(dp_last_emailable_source) over (partition by cid, business_unit_id, division_id, brand_id order by emailable desc nulls last, emailable_newsletter desc nulls last, dp_last_date desc nulls last,last_open_date desc nulls last,email asc nulls last) as emailable_last_source \n         from ${Database}.data_layer.build_email_brand_contact_flags\n     ) cf\ngroup by 1,2,3,4\n;\n\n\ndrop table if exists ${Database}.data_layer.xref_cid_email; \n\nCREATE OR REPLACE TABLE ${Database}.data_layer.xref_cid_email as\nselect *\nfrom ${Database}.dedupe.xref_email\n;\n    \ninsert into ${Database}.data_layer.xref_cid_email \nselect \n    cid,\n    '' as email,\n    min(bbw_urn) as bbw_urn\nfrom ${Database}.dedupe.xref_name_urn\ngroup by \n    cid;    \n\n\n--brand preference & base combine\ndrop table if exists ${Database}.data_layer.build_rollups_cid_brand_pref_base; \n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_cid_brand_pref_base as\nselect distinct\n\tcid,\n\tbrand_id,\n\tfirst_value(pref_emailable) over (partition by cid, brand_id order by pref_date desc, pref_source) as pref_emailable\nfrom\n(\t\n\t\tselect cid,\n\t\t\tbrand_id,\n\t\t\tpref_emailable, \t\t--Ticked/unticked a box on Gigya to confirm they want to/don't want to hear from the brand – i.e. done it themselves\n\t\t\tpref_date,\n\t\t\tcast(1 as int) as pref_source\n\t\tfrom ${Database}.data_layer.build_rollups_cid_brand_preference\n\t\twhere pref_mig = 0\t\t\t--don't consider preferences from before migration\n\t\tunion all\n\t\tselect cid,\n\t\t\tbrand_id,\n\t\t\t1 as pref_emailable,\t--any positive brand registration action in the last 5 years\n\t\t\tlast_date_brand as pref_date,\n\t\t\tcast(2 as int) as pref_source \n\t\tfrom ${Database}.data_layer.build_rollups_cid_brand_base\n)\n;\n\n\ndrop table if exists ${Database}.dedupe.cid_brand ;  \n\nCREATE OR REPLACE TABLE ${Database}.dedupe.cid_brand\nas\nselect\n    to_char(xr.bbw_urn)||'-'||to_char(dp.brand_id) as cid_brand_urn,\n    ci.cid,\n    dp.business_unit_id,\n    dp.division_id,\n    dp.brand_id,\n   case\n        when dp.customer_retention_group_base = 1 then 'Safe'\n        when dp.customer_retention_group_base = 2 then 'Re-consent'\n        when dp.customer_retention_group_base = 3 then 'New'\n        when dp.customer_retention_group_base = 4 then 'At Risk'\n        when dp.customer_retention_group_base = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base = 6 then 'Gone this month'\n        when dp.customer_retention_group_base = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_brand,\n   case\n        when dp.customer_retention_group_base_ios15 = 1 then 'Safe'\n        when dp.customer_retention_group_base_ios15 = 2 then 'Re-consent'\n        when dp.customer_retention_group_base_ios15 = 3 then 'New'\n        when dp.customer_retention_group_base_ios15 = 4 then 'At Risk'\n        when dp.customer_retention_group_base_ios15 = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base_ios15 = 6 then 'Gone this month'\n        when dp.customer_retention_group_base_ios15 = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_brand_ios15,\n    dp.customer_retention_group_date as customer_retention_date_brand,\n    dp.customer_retention_group_date_ios15 as customer_retention_date_brand_ios15,\n    dp.customer_retention_group_expiry_date as customer_retention_expiry_date_brand,\n    dp.customer_retention_group_expiry_date_ios15 as customer_retention_expiry_date_brand_ios15,\n    dp.dp_last_date as last_subscription_date_brand,\n    em.event_date as last_email_open_date_brand,\n    case\n        when pgi.first_pref_date is null then cbb.first_date_brand\n        when cbb.first_date_brand is null then pgi.first_pref_date\n        else least(cbb.first_date_brand, pgi.first_pref_date)\n    end as first_date_brand, --least data date from existing pref_date or first_date_brand\n    cbb.last_date_brand,\n    cbb.first_channel_brand,\n    cbb.last_channel_brand,\n\tcase\n        when bpb.pref_emailable is not null then bpb.pref_emailable \n        else -1 end as brand_preference, \n    case\n        when dp.brand_id = (select brand_id from ${Database}.dedupe.ref_brand where contains(lower(brand),'your purina')) then 0\n        when pro.brand_id is not null then 1 --Has had a product from the brand in the L5Y (sample, coupon, loyalty scheme, left an R&R of 3 and above)\n        when cbb.last_login_brand >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -60) then 1 --Has logged into their account on a brand website in last 5 years (Pets Welcome or Gigya)\n        when pref.brand_id is not null then 1 --Has answered a brand question (old golden questions) in the last 5 years\n        when em.brand_id is not null then 1 --Opened or clicked an email from the brand in the last 5 years\n        else 0\n    end as brand_engagement,\n\tcase\n        when bpb.pref_emailable is not null then bpb.pref_emailable \n        when dp.brand_id = (select brand_id from ${Database}.dedupe.ref_brand where contains(lower(brand),'your purina')) then 0\n        when pro.brand_id is not null then 1 --Has had a product from the brand in the L5Y (sample, coupon, loyalty scheme, left an R&R of 3 and above)\n        when cbb.last_login_brand >= add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -60) then 1 --Has logged into their account on a brand website in last 5 years (Pets Welcome or Gigya)\n        when pref.brand_id is not null then 1 --Has answered a brand question (old golden questions) in the last 5 years\n        when em.brand_id is not null then 1 --Opened or clicked an email from the brand in the last 5 years\n        else 0\n    end as brand_campaignable,\n    case\n        when pgi.pref_emailable = 1 and pgi.pref_mig = 0 then 1\n        when pgi.pref_emailable = 1 and pgi.pref_mig = 1 then -1\n        else 0\n    end as preferred_brand_gigya,\n    case\n        when dp.emailable = 1 or dp.emailable_newsletter = 1 then ''\n        when customer_suppression_group_base = 1 then 'Deceased TM'\n        when customer_suppression_group_base = 2 then 'Deceased'\n        when customer_suppression_group_base = 3 then 'Manual TM'\n        when customer_suppression_group_base = 4 then 'Manual'\n        when customer_suppression_group_base = 5 then 'Bounce TM'\n        when customer_suppression_group_base = 6 then 'Bounce'\n        when customer_suppression_group_base = 7 then 'Unsub TM'\n        when customer_suppression_group_base = 8 then 'Unsub'\n        when customer_suppression_group_base = 9 then 'Opt-Out TM'\n        when customer_suppression_group_base = 10 then 'Opt-Out'\n        when customer_suppression_group_base = 11 then 'Engagement'\n        else 'Misc'\n    end as customer_suppression_group_brand,\n    --    contactable status\n    case when dp.mailable = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable,\n    case when dp.emailable = 1 then 1 else 0 end as emailable,\n\tdp.emailable_first_date,\n\tdp.emailable_first_source,\n\tdp.emailable_last_date,\n\tdp.emailable_last_source, \n    case when dp.emailable_newsletter = 1 then 1 else 0 end as emailable_newsletter,\n    case when dp.mailable_ignoring_dp = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable_ignoring_dp,\n    case when dp.emailable_ignoring_dp = 1 then 1 else 0 end as emailable_ignoring_dp,\n    cast(regexp_replace(coalesce(\n        case\n            when dp.emailable = 1\n            or dp.emailable_newsletter = 1 then collate(dp.email,'')\n            else ''\n        end, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100)) as email_brand\nfrom ${Database}.data_layer.build_rollups_cid_base                 ci\ninner join ${Database}.data_layer.names_supps_dp_brand             dp   on ci.cid = dp.cid\ninner join ${Database}.data_layer.xref_cid_email                   xr   on dp.cid = xr.cid\n                                                            and dp.email = xr.email\nleft join ${Database}.data_layer.build_rollups_cid_brand_base      cbb  on dp.cid = cbb.cid\n                                                            and dp.brand_id = cbb.brand_id\nleft join ${Database}.data_layer.build_rollups_cid_brand_preferred pref on dp.cid = pref.cid\n                                                            and dp.brand_id = pref.brand_id\nleft join ${Database}.data_layer.build_rollups_cid_brand_preference pgi on dp.cid = pgi.cid --gigya prefereces\n                                                            and dp.brand_id = pgi.brand_id\nleft join ${Database}.data_layer.build_rollups_cid_brand_emails    em   on dp.email = em.email\n                                                            and dp.brand_id = em.brand_id\nleft join ${Database}.data_layer.build_rollups_cid_brand_product   pro  on dp.cid = pro.cid\n                                                            and dp.brand_id = pro.brand_id\nleft join ${Database}.data_layer.build_rollups_cid_brand_pref_base bpb  on dp.cid = bpb.cid\n                                                            and dp.brand_id = bpb.brand_id;\n \n\n--drop table ${Database}.data_layer.build_rollups_cid_brand_preferred;\n--drop table ${Database}.data_layer.build_rollups_cid_brand_preference;\n--drop table ${Database}.data_layer.build_rollups_cid_brand_emails;\n--drop table ${Database}.data_layer.build_rollups_cid_brand_product;\n--drop table ${Database}.data_layer.build_rollups_cid_brand_pref_base; \n\n---------------------\n-- cid division\n\ndrop table if exists ${Database}.data_layer.names_supps_dp_division;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.names_supps_dp_division\nas\nselect distinct\n    cid,\n    business_unit_id,\n    division_id,\n    max(first_email)  as email,\n    max(dp_last_date) as dp_last_date,\n    max(last_open_date)       as last_open_date,\n    max(last_open_date_ios15) as last_open_date_ios15,\n    max(customer_retention_group_date) \t\t\t\tas customer_retention_group_date,\n    max(customer_retention_group_date_ios15) \t\tas customer_retention_group_date_ios15,\n    max(customer_retention_group_expiry_date) \t\tas customer_retention_group_expiry_date,\n    max(customer_retention_group_expiry_date_ios15) as customer_retention_group_expiry_date_ios15,\n    min(customer_retention_group_base) \t\t\t\tas customer_retention_group_base,\n    min(customer_retention_group_base_ios15) \t\tas customer_retention_group_base_ios15,\n    min(customer_suppression_group_base) \t\t\tas customer_suppression_group_base,\n    max(mailable)  as mailable,\n    max(emailable) as emailable,\n\tmax(div_emailable_first_date)   as emailable_first_date,\n\tmax(div_emailable_first_source) as emailable_first_source,\n\tmax(div_emailable_last_date)    as emailable_last_date,\n\tmax(div_emailable_last_source)  as emailable_last_source, \n    max(emailable_newsletter)  as emailable_newsletter,\n    max(mailable_ignoring_dp)  as mailable_ignoring_dp,\n    max(emailable_ignoring_dp) as emailable_ignoring_dp\nfrom \n\t(\n\tselect \n\t\t*\n\t\t,first_value(email) \t\t\t\t over (partition by cid, business_unit_id, division_id order by emailable desc nulls last, emailable_newsletter desc nulls last, dp_last_date desc nulls last       ,last_open_date desc nulls last,email asc nulls last) as first_email\n\t\t,first_value(emailable_first_date) \t over (partition by cid, business_unit_id, division_id order by emailable desc nulls last, emailable_newsletter desc nulls last, emailable_first_date nulls last    ,last_open_date desc nulls last,email asc nulls last) as div_emailable_first_date\n\t\t,first_value(emailable_first_source) over (partition by cid, business_unit_id, division_id order by emailable desc nulls last, emailable_newsletter desc nulls last, emailable_first_date nulls last    ,last_open_date desc nulls last,email asc nulls last) as div_emailable_first_source\n\t\t,first_value(emailable_last_date) \t over (partition by cid, business_unit_id, division_id order by emailable desc nulls last, emailable_newsletter desc nulls last, emailable_last_date desc nulls last,last_open_date desc nulls last,email asc nulls last) as div_emailable_last_date\n\t\t,first_value(emailable_last_source)  over (partition by cid, business_unit_id, division_id order by emailable desc nulls last, emailable_newsletter desc nulls last, emailable_last_date desc nulls last,last_open_date desc nulls last,email asc nulls last) as div_emailable_last_source \n\tfrom ${Database}.data_layer.names_supps_dp_brand\n\t) t\ngroup by 1,2,3\n;\n\nalter warehouse set warehouse_size = 'Small';\n\n\ndrop table if exists ${Database}.data_layer.build_rollups_cid_division_base ;  \n\nCREATE OR REPLACE TABLE ${Database}.data_layer.build_rollups_cid_division_base \nas\nselect \n    cbb.cid,\n    rb.division_id,\n    min(cbb.first_date_brand) as first_date_division,\n    max(cbb.last_date_brand) as last_date_division\nfrom ${Database}.data_layer.build_rollups_cid_brand_base cbb\ninner join ${Database}.dedupe.ref_brand rb on cbb.brand_id = rb.brand_id\ngroup by \n    cbb.cid,\n    rb.division_id;\n\n\ndrop table if exists ${Database}.data_layer.group_division_new_check;\n\n--If grouping New then check if other brands exist with New/At Risk as these will be classed as safe\nCREATE OR REPLACE TABLE ${Database}.data_layer.group_division_new_check\nas\nselect distinct \n    cbbo.cid,\n    cbbo.division_id\nfrom ${Database}.data_layer.names_supps_dp_brand cbbo\ninner join ${Database}.data_layer.names_supps_dp_brand cbbt on cbbo.cid = cbbt.cid\n                                                and cbbo.division_id = cbbt.division_id\nwhere cbbo.customer_retention_group_base = 3 --New\n    and cbbt.customer_retention_group_base in (4,5);  --At Risk/Data Orphan\n\n\ncreate or replace table ${Database}.data_layer.group_division_new_check_ios15\nas\nselect distinct\n    cbbo.cid,\n    cbbo.division_id\nfrom ${Database}.data_layer.names_supps_dp_brand cbbo\ninner join ${Database}.data_layer.names_supps_dp_brand cbbt on cbbo.cid = cbbt.cid\n                                                     and cbbo.division_id = cbbt.division_id\nwhere cbbo.customer_retention_group_base_ios15 = 3 --New\n    and cbbt.customer_retention_group_base_ios15 in (4,5); --At Risk/Data Orphan\n\n\n--drop table ${Database}.data_layer.names_supps_dp_brand;\n--drop table ${Database}.data_layer.build_rollups_cid_brand_base;\n\ndrop table if exists ${Database}.dedupe.cid_division ;  \n\nCREATE OR REPLACE TABLE ${Database}.dedupe.cid_division \nas\nselect \n    to_char(xr.bbw_urn)||'-'||to_char(dp.division_id) as cid_division_urn,\n    ci.cid,\n    dp.business_unit_id,\n    dp.division_id,\n   case \n        when dp.customer_retention_group_base = 1 then 'Safe'\n        when dp.customer_retention_group_base = 2 then 'Re-consent'\n        when gnd.cid is not null then 'Safe'\n        when dp.customer_retention_group_base = 3 then 'New'\n        when dp.customer_retention_group_base = 4 then 'At Risk'\n        when dp.customer_retention_group_base = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base = 6 then 'Gone this month'\n        when dp.customer_retention_group_base = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_division,\n   case \n        when dp.customer_retention_group_base_ios15 = 1 then 'Safe'\n        when dp.customer_retention_group_base_ios15 = 2 then 'Re-consent'\n        when gnd15.cid is not null then 'Safe'\n        when dp.customer_retention_group_base_ios15 = 3 then 'New'\n        when dp.customer_retention_group_base_ios15 = 4 then 'At Risk'\n        when dp.customer_retention_group_base_ios15 = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base_ios15 = 6 then 'Gone this month'\n        when dp.customer_retention_group_base_ios15 = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_division_ios15,\n    dp.customer_retention_group_date as customer_retention_date_division,\n    dp.customer_retention_group_date_ios15 as customer_retention_date_division_ios15,\n    dp.customer_retention_group_expiry_date as customer_retention_expiry_date_division,\n    dp.customer_retention_group_expiry_date_ios15 as customer_retention_expiry_date_division_ios15,\n    dp.dp_last_date as last_subscription_date_division,\n    dp.last_open_date as last_email_open_date_division, \n    dp.last_open_date_ios15 as last_email_open_date_division_ios15, \n    cdb.first_date_division,\n    cdb.last_date_division,\n    case \n        when dp.emailable = 1 or dp.emailable_newsletter = 1 then ''\n        when customer_suppression_group_base = 1 then 'Deceased TM'\n        when customer_suppression_group_base = 2 then 'Deceased'\n        when customer_suppression_group_base = 3 then 'Manual TM'\n        when customer_suppression_group_base = 4 then 'Manual'\n        when customer_suppression_group_base = 5 then 'Bounce TM'\n        when customer_suppression_group_base = 6 then 'Bounce'\n        when customer_suppression_group_base = 7 then 'Unsub TM'\n        when customer_suppression_group_base = 8 then 'Unsub'\n        when customer_suppression_group_base = 9 then 'Opt-Out TM'\n        when customer_suppression_group_base = 10 then 'Opt-Out'\n        when customer_suppression_group_base = 11 then 'Engagement'\n        else 'Misc'\n    end as customer_suppression_group_division,    \n    --    contactable status \n    case when dp.mailable = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable,\n    case when dp.emailable = 1 then 1 else 0 end as emailable,\n\tdp.emailable_first_date,\n\tdp.emailable_first_source,\n\tdp.emailable_last_date,\n\tdp.emailable_last_source, \n    case when dp.emailable_newsletter = 1 then 1 else 0 end as emailable_newsletter,\n    case when dp.mailable_ignoring_dp = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable_ignoring_dp,\n    case when dp.emailable_ignoring_dp = 1 then 1 else 0 end as emailable_ignoring_dp,\n    cast(regexp_replace(coalesce(\n        case \n            when dp.emailable = 1 or dp.emailable_newsletter = 1 then collate(dp.email,'')\n            else '' \n        end, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100)) as email_division\nfrom ${Database}.data_layer.build_rollups_cid_base ci\ninner join ${Database}.data_layer.names_supps_dp_division dp on ci.cid = dp.cid\ninner join ${Database}.data_layer.xref_cid_email                   xr   on dp.cid = xr.cid\n                                                            and dp.email = xr.email\nleft join ${Database}.data_layer.build_rollups_cid_division_base cdb on dp.cid = cdb.cid \n                                                         and dp.division_id = cdb.division_id\nleft join ${Database}.data_layer.group_division_new_check gnd on dp.cid = gnd.cid\n                                                  and dp.division_id = gnd.division_id\nleft join ${Database}.data_layer.group_division_new_check_ios15 gnd15 on dp.cid = gnd15.cid\n                                                             and dp.division_id = gnd15.division_id;\n\n\n--drop table ${Database}.data_layer.build_rollups_cid_division_base;\n-----------------\n-- cid business unit \n\ndrop table if exists ${Database}.data_layer.names_supps_dp_business_unit;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.names_supps_dp_business_unit\nas\nselect distinct\n    cid,\n    business_unit_id,\n    max(first_email)  as email,\n    max(dp_last_date) as dp_last_date,\n    max(last_open_date)       as last_open_date,\n    max(last_open_date_ios15) as last_open_date_ios15,\n    max(customer_retention_group_date)       \t\tas customer_retention_group_date,\n    max(customer_retention_group_date_ios15) \t\tas customer_retention_group_date_ios15,\n    max(customer_retention_group_expiry_date) \t\tas customer_retention_group_expiry_date,\n    max(customer_retention_group_expiry_date_ios15) as customer_retention_group_expiry_date_ios15,\n    max(customer_retention_group_expiry_date) \t\tas dp_processing_expiry_date,\n    max(customer_retention_group_expiry_date_ios15) as dp_processing_expiry_date_ios15,\n    min(customer_retention_group_base) \t\t\t\tas customer_retention_group_base,\n    min(customer_retention_group_base_ios15) \t\tas customer_retention_group_base_ios15,\n    min(customer_suppression_group_base) \t\t\tas customer_suppression_group_base,\n    max(mailable)  as mailable,\n    max(emailable) as emailable,\n\tmax(bu_emailable_first_date)   as emailable_first_date,\n\tmax(bu_emailable_first_source) as emailable_first_source,\n\tmax(bu_emailable_last_date)    as emailable_last_date,\n\tmax(bu_emailable_last_source)  as emailable_last_source, \n    max(emailable_newsletter)   as emailable_newsletter,\n    max(mailable_ignoring_dp)   as mailable_ignoring_dp,\n    max(emailable_ignoring_dp)  as emailable_ignoring_dp\nfrom \n\t(\n\tselect\n\t\t*\n\t\t,first_value(email) \t\t\t\t over (partition by cid, business_unit_id order by emailable desc nulls last, emailable_newsletter desc nulls last, dp_last_date desc nulls last,last_open_date desc nulls last,email asc nulls last) as first_email\n\t\t,first_value(emailable_first_date) \t over (partition by cid, business_unit_id order by emailable desc nulls last, emailable_newsletter desc nulls last, emailable_first_date nulls last    ,last_open_date desc nulls last,email asc nulls last) as bu_emailable_first_date\n\t\t,first_value(emailable_first_source) over (partition by cid, business_unit_id order by emailable desc nulls last, emailable_newsletter desc nulls last, emailable_first_date nulls last\t   ,last_open_date desc nulls last,email asc nulls last) as bu_emailable_first_source\n\t\t,first_value(emailable_last_date) \t over (partition by cid, business_unit_id order by emailable desc nulls last, emailable_newsletter desc nulls last, emailable_last_date desc nulls last,last_open_date desc nulls last,email asc nulls last) as bu_emailable_last_date\n\t\t,first_value(emailable_last_source)  over (partition by cid, business_unit_id order by emailable desc nulls last, emailable_newsletter desc nulls last, emailable_last_date desc nulls last,last_open_date desc nulls last,email asc nulls last) as bu_emailable_last_source \n\tfrom ${Database}.data_layer.names_supps_dp_division\n\t) t\ngroup by 1,2\n;\n\ndrop table if exists ${Database}.data_layer.group_business_new_check;\n\n--If grouping New then check if other divisions exist with New/At Risk as these will be classed as safe - also check if check was needed before\nCREATE OR REPLACE TABLE ${Database}.data_layer.group_business_new_check\nas\nselect distinct \n    cbbo.cid,\n    cbbo.business_unit_id\nfrom ${Database}.data_layer.names_supps_dp_division cbbo\nleft join ${Database}.data_layer.names_supps_dp_division cbbt on cbbo.cid = cbbt.cid\n                                                  and cbbo.business_unit_id = cbbt.business_unit_id\n                                                  and cbbt.customer_retention_group_base in (4,5)  --At Risk/Data Orphan\nleft join ${Database}.data_layer.group_division_new_check gdc on cbbo.cid = gdc.cid\n                                                  and cbbo.division_id = gdc.division_id\nwhere cbbo.customer_retention_group_base = 3 --New\n    and (gdc.cid is not null or cbbt.cid is not null); --Either already Safe due to previous checking or new grouping filter needed\n\n\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.group_business_new_check_ios15\nas\nselect distinct\n    cbbo.cid,\n    cbbo.business_unit_id\nfrom ${Database}.data_layer.names_supps_dp_division cbbo\nleft join ${Database}.data_layer.names_supps_dp_division cbbt on cbbo.cid = cbbt.cid\n                                                  and cbbo.business_unit_id = cbbt.business_unit_id\n                                                  and cbbt.customer_retention_group_base_ios15 in (4,5)  --At Risk/Data Orphan\nleft join ${Database}.data_layer.group_division_new_check_ios15 gdc on cbbo.cid = gdc.cid\n                                                             and cbbo.division_id = gdc.division_id\nwhere cbbo.customer_retention_group_base_ios15 = 3 --New\n    and (gdc.cid is not null or cbbt.cid is not null); --Either already Safe due to previous checking or new grouping filter needed\n\n\n--drop table ${Database}.data_layer.group_division_new_check;\n--drop table ${Database}.data_layer.group_division_new_check_ios15;\n--drop table ${Database}.data_layer.names_supps_dp_division;\n\n\nalter warehouse set warehouse_size = 'Medium';\n\n--acquisition types\nCREATE OR REPLACE TABLE ${Database}.data_layer.npp_acquisition_type_base\nas\nselect distinct\n    acq.cid,\n    acq.acquisition_name_urn,\n    trim(acq.acquisition_source) as acquisition_source,\n    acq.acquisition_source_brand_id,\n    acq.acquisition_source_file,\n    first_value(trim(na.registration_campaign)) over\n        (\n            partition by cid \n            order by \n                na.data_date nulls last,\n                na.source_date nulls last\n        ) as acquisition_registration_campaign\nfrom (\n         select distinct\n             xr.cid,\n             first_value(n.name_urn) over\n                 (\n                     partition by xr.cid\n                     order by\n                         n.data_date nulls last,\n                         n.reg_date nulls last,\n                         n.source_date nulls last\n                 ) as acquisition_name_urn,\n             first_value(n.source) over\n                 (\n                     partition by xr.cid\n                     order by\n                         n.data_date nulls last,\n                         n.reg_date nulls last,\n                         n.source_date nulls last\n                 ) as acquisition_source,\n             first_value(n.source_brand_id) over\n                 (\n                     partition by xr.cid\n                     order by\n                         n.data_date nulls last,\n                         n.reg_date nulls last,\n                         n.source_date nulls last\n                 ) as acquisition_source_brand_id,\n             first_value(n.source_file) over\n                 (\n                     partition by xr.cid\n                     order by\n                         n.data_date nulls last,\n                         n.reg_date nulls last,\n                         n.source_date nulls last\n                 ) as acquisition_source_file\n         from ${Database}.db.names n\n         left join ${Database}.dedupe.xref_name_urn xr on xr.name_urn = n.name_urn\n         where n.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n\t\t and source_data_controller_id = (select data_controller_id from ${Database}.dedupe.ref_data_controller where data_controller like 'Nestl_ Purina Petcare (UK) Ltd')\n\t\t and n.source <> 'RESP_ADE_RMI'\n     ) acq\nleft join ${Database}.db.names_attributes na on na.name_urn = acq.acquisition_name_urn \n                                       and (source <> 'REG_GIG' or (na.source = 'REG_GIG' and na.registration_campaign not in  (\n\n                                                                                                                                'GBCERELACWEB_MIG',\n                                                                                                                                'UKAEROCHOCOLATEWEB',\n                                                                                                                                'UKBUXTONWATERWEB',\n                                                                                                                                'UKCARNATIONWEB',\n                                                                                                                                'UKCERELACWEB',\n                                                                                                                                'UKCERELACWEB_MIG',\n                                                                                                                                'UKKITKATWEB',\n                                                                                                                                'UKMAGGIWEB',\n                                                                                                                                'UKMERITENEWEB',\n                                                                                                                                'UKMERITENEWEB_MIG',\n                                                                                                                                'UKMILKYBARWEB',\n                                                                                                                                'UKNESCAFEWEB',\n                                                                                                                                'UKROWNTREESWEB',\n                                                                                                                                'UKYESSNACKSWEB',\n                                                                                                                                'UKNESTLEPURELIFEWEB'))) and na.source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date); --CIAM name_urns can join to ${Database} reg_campaigns from names_attibutes\n\nalter warehouse set warehouse_size = 'Small';\n\n\n--cid level table with acquisition types attributed\ndrop table if exists ${Database}.data_layer.ref_acquisition_type_joined;\n\nCREATE OR REPLACE TABLE ${Database}.data_layer.ref_acquisition_type_joined\nas\n--new source - has populated registration_campaign and brand_id\n--join on source, reg_campaign and brand\nselect     distinct \n    b.cid,\n    b.acquisition_source,\n    '' as acquisition_source_file,\n    b.acquisition_source_brand_id,\n    b.acquisition_registration_campaign,\n    case when b.acquisition_source = 'REG_GIG' then 'Website Registrations' else tc.acquisition_type end as acquisition_type, --Issue with reg_campaign when joining CIAM records to names_attributes, but they're all website reg\n    tc.acquisition_channel,\n    '1 - source, reg_campaign and brand' as join_type\nfrom ${Database}.data_layer.npp_acquisition_type_base b\nleft join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                           and b.acquisition_registration_campaign = tc.registration_campaign\n                                           and b.acquisition_source_brand_id = tc.acquisition_source_brand_id\nwhere (b.acquisition_registration_campaign > '')\n    and b.acquisition_source_brand_id is not null\n    and contains(lower(tc.source_old_new),'new')\nunion all\n--new source - has null or blank registration_campaign and populated brand_id\n--join on source and brand_id\nselect     distinct\n    b.cid,\n    b.acquisition_source,\n    '' as acquisition_source_file,\n    b.acquisition_source_brand_id,\n    b.acquisition_registration_campaign,\n    case when b.acquisition_source = 'REG_GIG' then 'Website Registrations' else tc.acquisition_type end as acquisition_type, --Issue with reg_campaign when joining CIAM records to names_attributes, but they're all website reg\n    tc.acquisition_channel,\n    '2 - source and brand' as join_type\nfrom ${Database}.data_layer.npp_acquisition_type_base b\nleft join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                           and b.acquisition_source_brand_id = tc.acquisition_source_brand_id\nwhere (b.acquisition_registration_campaign is null or b.acquisition_registration_campaign = '')\n    and tc.registration_campaign is null\n    and b.acquisition_source_brand_id is not null\n    and contains(lower(tc.source_old_new),'new')\nunion all\n--new source - has populated registration_campaign and null brand_id\n--join on source and reg_campaign\nselect     distinct\n    b.cid,\n    b.acquisition_source,\n    '' as acquisition_source_file,\n    b.acquisition_source_brand_id,\n    b.acquisition_registration_campaign,\n    case when b.acquisition_source = 'REG_GIG' then 'Website Registrations' else tc.acquisition_type end as acquisition_type, --Issue with reg_campaign when joining CIAM records to names_attributes, but they're all website reg\n    tc.acquisition_channel,\n    '3 - source and reg_campaign' as join_type\nfrom ${Database}.data_layer.npp_acquisition_type_base b\nleft join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                           and b.acquisition_registration_campaign = tc.registration_campaign\nwhere (b.acquisition_registration_campaign > '')\n    and b.acquisition_source_brand_id is null\n    and tc.acquisition_source_brand_id is null\n    and contains(lower(tc.source_old_new),'new')\nunion all\n--new source - has null registration_campaign and null brand_id\n--hard coding as Website Registrations\nselect     distinct\n    b.cid,\n    b.acquisition_source,\n    '' as acquisition_source_file,\n    b.acquisition_source_brand_id,\n    b.acquisition_registration_campaign,\n    'Website Registrations' as acquisition_type,\n    tc.acquisition_channel,\n    '4 - all null' as join_type\nfrom ${Database}.data_layer.npp_acquisition_type_base b\ninner join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                            and tc.acquisition_source_brand_id is null\n                                            and (tc.registration_campaign = '' or tc.registration_campaign is null)\nwhere (b.acquisition_registration_campaign is null or b.acquisition_registration_campaign = '')\n    and b.acquisition_source_brand_id is null\n    and not contains(upper(b.acquisition_source),'NPP')\nunion all\n--old source - non-null acquisition_source_brand_id\nselect     distinct \n    b.cid,\n    b.acquisition_source,\n    b.acquisition_source_file,\n    b.acquisition_source_brand_id,\n    '' as acquisition_registration_campaign,\n    tc.acquisition_type,\n    tc.acquisition_channel,\n    '5 - populated acquisition_source_brand_id ' as join_type\nfrom ${Database}.data_layer.npp_acquisition_type_base b\nleft join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                           and b.acquisition_source_file = tc.acquisition_source_file\n                                           and b.acquisition_source_brand_id = tc.acquisition_source_brand_id\nwhere contains(lower(tc.source_old_new),'old')\n    and b.acquisition_source_brand_id is not null\nunion all\n--old source - has null acquisition_source_brand_id\nselect     distinct \n    b.cid,\n    b.acquisition_source,\n    b.acquisition_source_file,\n    b.acquisition_source_brand_id,\n    '' as acquisition_registration_campaign,\n    tc.acquisition_type,\n    tc.acquisition_channel,\n    '6 - null acquisition_source_brand_id ' as join_type\nfrom ${Database}.data_layer.npp_acquisition_type_base b\nleft join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                           and b.acquisition_source_file = tc.acquisition_source_file\nwhere contains(lower(tc.source_old_new),'old')\n    and b.acquisition_source_brand_id is null;\n\n\n--to output email with any missing ones that need actioning\ndrop table if exists ${Database}.jobs.npp_acquisition_types_missing;\ncreate table ${Database}.jobs.npp_acquisition_types_missing\nas\nselect\n    b.acquisition_source, \n    rb.brand,\n    b.acquisition_registration_campaign,\n    count(b.cid) as volume\nfrom ${Database}.data_layer.npp_acquisition_type_base b\nleft join ${Database}.dedupe.ref_brand rb on b.acquisition_source_brand_id = rb.brand_id\nwhere cid not in (select cid from ${Database}.data_layer.ref_acquisition_type_joined)\ngroup by 1,2,3\n;\n\ndrop table if exists ${Database}.dedupe.cid_business_unit ;  \n\nCREATE OR REPLACE TABLE ${Database}.dedupe.cid_business_unit \nas\nselect \n    to_char(xr.bbw_urn)||'-'||to_char(dp.business_unit_id) as cid_business_unit_urn,\n    ci.cid,\n    dp.business_unit_id,\n   case \n        when dp.customer_retention_group_base = 1 then 'Safe'\n        when dp.customer_retention_group_base = 2 then 'Re-consent'\n        when gnc.cid is not null then 'Safe'\n        when dp.customer_retention_group_base = 3 then 'New'\n        when dp.customer_retention_group_base = 4 then 'At Risk'\n        when dp.customer_retention_group_base = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base = 6 then 'Gone this month'\n        when dp.customer_retention_group_base = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_business_unit,\n   case \n        when dp.customer_retention_group_base_ios15 = 1 then 'Safe'\n        when dp.customer_retention_group_base_ios15 = 2 then 'Re-consent'\n        when gnc15.cid is not null then 'Safe'\n        when dp.customer_retention_group_base_ios15 = 3 then 'New'\n        when dp.customer_retention_group_base_ios15 = 4 then 'At Risk'\n        when dp.customer_retention_group_base_ios15 = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base_ios15 = 6 then 'Gone this month'\n        when dp.customer_retention_group_base_ios15 = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_business_unit_ios15,\n    dp.customer_retention_group_date as customer_retention_date_business_unit,\n    dp.customer_retention_group_date_ios15 as customer_retention_date_business_unit_ios15,\n    dp.customer_retention_group_expiry_date as customer_retention_expiry_date_business_unit,\n    dp.customer_retention_group_expiry_date_ios15 as customer_retention_expiry_date_business_unit_ios15,\n    dp.dp_processing_expiry_date,\n    dp.dp_processing_expiry_date_ios15,\n    dp.dp_last_date as last_subscription_date_business_unit,\n    dp.last_open_date as last_email_open_date_business_unit,\n    dp.last_open_date_ios15 as last_email_open_date_business_unit_ios15,\n    cdb.first_date_business_unit,\n    cdb.last_date_business_unit,  \n    case \n        when dp.emailable = 1 or dp.emailable_newsletter = 1 then ''\n        when customer_suppression_group_base = 1 then 'Deceased TM'\n        when customer_suppression_group_base = 2 then 'Deceased'\n        when customer_suppression_group_base = 3 then 'Manual TM'\n        when customer_suppression_group_base = 4 then 'Manual'\n        when customer_suppression_group_base = 5 then 'Bounce TM'\n        when customer_suppression_group_base = 6 then 'Bounce'\n        when customer_suppression_group_base = 7 then 'Unsub TM'\n        when customer_suppression_group_base = 8 then 'Unsub'\n        when customer_suppression_group_base = 9 then 'Opt-Out TM'\n        when customer_suppression_group_base = 10 then 'Opt-Out'\n        when customer_suppression_group_base = 11 then 'Engagement'\n        else 'Misc'\n    end as customer_suppression_group_business_unit,     \n    --    contactable status  \n    case when dp.mailable = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable,\n    case when dp.emailable = 1 then 1 else 0 end as emailable,\n    dp.emailable_first_date,\n    dp.emailable_first_source,\n    dp.emailable_last_date,\n    dp.emailable_last_source,\n    case when dp.emailable_newsletter = 1 then 1 else 0 end as emailable_newsletter,\n    case when dp.mailable_ignoring_dp = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable_ignoring_dp,\n    case when dp.emailable_ignoring_dp = 1 then 1 else 0 end as emailable_ignoring_dp,\n    cast(regexp_replace(coalesce(\n        case \n            when dp.emailable = 1 or dp.emailable_newsletter = 1 then collate(dp.email,'')\n            else '' \n        end, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100)) as email_business_unit,\n        coalesce(acq.acquisition_type, '') as acquisition_type,\n    coalesce(acq.acquisition_channel,'') as acquisition_channel\nfrom ${Database}.data_layer.build_rollups_cid_base ci\ninner join ${Database}.data_layer.names_supps_dp_business_unit dp on ci.cid = dp.cid\ninner join ${Database}.data_layer.xref_cid_email                   xr   on dp.cid = xr.cid\n                                                            and dp.email = xr.email\nleft join ${Database}.data_layer.build_rollups_cid_bu_base cdb on dp.cid = cdb.cid \n                                                   and dp.business_unit_id = cdb.business_unit_id\nleft join ${Database}.data_layer.group_business_new_check gnc on dp.cid = gnc.cid\n                                                  and dp.business_unit_id = gnc.business_unit_id\nleft join ${Database}.data_layer.group_business_new_check_ios15 gnc15 on dp.cid = gnc15.cid\n                                                  and dp.business_unit_id = gnc15.business_unit_id\nleft join ${Database}.data_layer.ref_acquisition_type_joined acq on acq.cid = ci.cid\n                                                     and dp.business_unit_id = 5\n                                                     and cdb.first_date_business_unit is not null;\n\n\n--drop table ${Database}.data_layer.names_supps_dp_business_unit;\n--drop table ${Database}.data_layer.build_rollups_cid_bu_base;\n--drop table ${Database}.data_layer.group_business_new_check;\n--drop table ${Database}.data_layer.xref_cid_email;\n\n\n--update risk segment of non-anonymised lapsed customer when customer_retention_group_business_unit='new'\nmerge into ${Database}.dedupe.cid c\nusing (\n          select distinct\n              cid\n          from ${Database}.dedupe.cid_business_unit\n          where business_unit_id = 5\n              and customer_retention_group_business_unit='New'\n      ) cbu on c.cid = cbu.cid\nwhen matched and c.purina_lapse_risk_segment in ('Very High Risk','High Risk') then update\nset c.purina_lapse_risk_segment = 'Medium Risk';\n\n\n---------------------  \n---------------------\n-- hid\n\ndrop table if exists ${Database}.dedupe.hid ;  \n\nCREATE OR REPLACE TABLE ${Database}.dedupe.hid \nas \nselect \n    hid\nfrom ${Database}.data_layer.build_rollups_cid_base\ngroup by hid;\n\n  \n--drop table ${Database}.data_layer.build_rollups_cid_base;\n\n--Create ${Database}.dedupe.npp_thg_trans table\n\n\ndrop table if exists ${Database}.dedupe.npp_thg_trans;\n\ncreate table ${Database}.dedupe.npp_thg_trans \nas\nselect nt.*\nfrom ${Database}.db.npp_thg_trans nt\ninner join  --this will give me the set of order detail lines for just the latest dated file for the order\n    (\n        select distinct\n            trim(order_number) as order_number,\n            --just incase 2 files are loaded in the same day and so have the same source date (tried to use datadate but it's a time stamp so different for each detail line...)\n            first_value(trim(source_file)) \n            over\n            (\n                partition by trim(order_number)\n                order by \n                    source_date desc nulls last,  \n                    trim(source_file) desc\n            ) as source_file \n        from ${Database}.db.npp_thg_trans\n        where source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date)\n    ) sq on trim(nt.order_number) = sq.order_number\n        and trim(nt.source_file) = sq.source_file\nwhere source_date <= (select historic_build_date from ${Database}.data_layer.historic_build_date); --this will give me the 1 latest dated file for the order\n\n\n---------------------\n--coid - not required\n\n---------------------\n--insert seeds for faststats\n\n---------------------\n--fs views\n\n\n---------------------\n--sars views\n\n\n\n\n/******************************************************************************************\n                                       FINISH PROC\n******************************************************************************************/\n\nalter warehouse set warehouse_size = 'Xsmall';\n\n\n/**************************************************\n   RUN THE REPORTS PROC AS OF HISTORIC DATE\n   USING UNUSED SCHEMA\n***************************************************/\n\n/******************************************************************************************\nProgram           : Nestle daily NPP qlik reports outputs\nAuthor            : Lindsay Timms\nClient Name       : Nestle\nJob Number        :\nStandard Machine  : Snowflake\nAmendment History : v01 - LT 20181220 - Created\n\t\t\t\t\t... - various changes undocumented \n\t\t\t\t\tv02 - LW 20210628 - Purina Lapse Risk Segment added\n                    v03 - LG 20220215 - Added brand not in clause to jobs.npp_qlik_reports_data_Pet_Unrolled table\n\t\t\t\t\tv04 - Shira Middleton NPP09202 20220428 - Added source renaming for REG_YOUR_PURINA and RESP_YOUR_PURINA in table creation 'new_to_scv'\t\n******************************************************************************************/\n\n----------------------------\n--total base\n\ndrop table if exists ${Database}.data_layer.npp_qlik_reports_data_base;\nCREATE OR REPLACE TABLE ${Database}.data_layer.npp_qlik_reports_data_base\nas\nselect\n    cb.cid,\n    case when rb.brand in ('Pro Plan','Club Pro Plan') and ci.have_dog = 'N' and ci.have_cat <> 'N'  then 'Pro Plan Cat'\n            when rb.brand in ('Pro Plan','Club Pro Plan') and ci.have_dog <> 'N' and ci.have_cat = 'N' then 'Pro Plan Dog'\n            else rb.brand end as brand,\n\tcbu.acquisition_type,\n    upper(to_char(((select historic_build_date from ${Database}.data_layer.historic_build_date)-1),'MON-YYYY')) as month_,\n    cb.emailable,\n    cb.preferred_brand_gigya,\n    cb.first_date_brand as brand_create_date,\n    cb.customer_retention_date_brand,\n    case\n        when cb.customer_suppression_group_brand = 'Engagement' then 6\n        when cb.customer_suppression_group_brand = 'Opt-Out TM' then 1\n        when cb.first_date_brand >= to_date(to_char(((select historic_build_date from ${Database}.data_layer.historic_build_date)-1),'YYYYMM01'), 'YYYYMMDD') then 5 --New for dashboard = from 1st of the month onwards\n        when cb.customer_retention_group_brand = 'Re-consent' and cb.customer_retention_date_brand >= to_date(to_char(((select historic_build_date from ${Database}.data_layer.historic_build_date)-1),'YYYYMM01'), 'YYYYMMDD') then 1 --Re-consent for dashboard = from 1st of the month onwards\n        when cb.customer_retention_group_brand = 'New' then 2\n        when cb.customer_retention_group_brand = 'Re-consent' then 2\n        when cb.customer_retention_group_brand = 'Safe' then 2\n        when cb.customer_retention_group_brand = 'At Risk' then 3\n        when cb.customer_retention_group_brand = 'Data Orphan' then 4\n        when lower(cb.customer_retention_group_brand) regexp '.*gone this month.*' then 6\n        else 7\n    end as customer_retention_group_brand,\n    case\n        when cb.customer_suppression_group_brand = '' then 0\n        when cb.customer_suppression_group_brand = 'Deceased TM' then 1\n        when cb.customer_suppression_group_brand = 'Deceased' then 2\n        when cb.customer_suppression_group_brand = 'Manual TM' then 3\n        when cb.customer_suppression_group_brand = 'Manual' then 4\n        when cb.customer_suppression_group_brand = 'Bounce TM' then 5\n        when cb.customer_suppression_group_brand = 'Bounce' then 6\n        when cb.customer_suppression_group_brand = 'Unsub TM' then 7\n        when cb.customer_suppression_group_brand = 'Unsub' then 8\n        when cb.customer_suppression_group_brand = 'Opt-Out TM' then 9\n        when cb.customer_suppression_group_brand = 'Opt-Out' then 10\n        when cb.customer_suppression_group_brand = 'Engagement' then 11\n        else 12\n    end as customer_suppression_group_brand,\n    case\n        when cbu.customer_retention_group_business_unit = '' then 0\n        when cbu.customer_retention_group_business_unit in ('New','Re-consent','Safe') then 2\n        when cbu.customer_retention_group_business_unit = 'At Risk' then 3\n        when cbu.customer_retention_group_business_unit = 'Data Orphan' then 4\n        when cbu.customer_retention_group_business_unit = 'Gone this month' then 5\n    end as customer_retention_group_business_unit,\n    case\n        when cbu.customer_suppression_group_business_unit = '' then 0\n        when cbu.customer_suppression_group_business_unit = 'Deceased TM' then 1\n        when cbu.customer_suppression_group_business_unit = 'Manual TM' then 2\n        when cbu.customer_suppression_group_business_unit = 'Bounce TM' then 3\n        when cbu.customer_suppression_group_business_unit = 'Unsub TM' then 4\n        when cbu.customer_suppression_group_business_unit = 'Opt-Out TM' then 5\n        when cbu.customer_suppression_group_business_unit = 'Engagement' then 6\n        else 7\n    end as customer_suppression_group_business_unit,\n    case\n        when ci.have_dog <> 'N' and ci.have_cat <> 'N' then 3\n        when ci.have_dog <> 'N' then 2\n        when ci.have_cat <> 'N' then 1\n        else 0\n    end as pet_ownership,\n    ci.number_of_dogs,\n    ci.number_of_cats,\n    ci.purina_engagement_score,\n    case ci.purina_lapse_risk_segment\n\t\twhen 'Low Risk' then '5_'||ci.purina_lapse_risk_segment\n\t\twhen 'Medium Risk' then '4_'||ci.purina_lapse_risk_segment\n\t\twhen 'High Risk' then '3_'||ci.purina_lapse_risk_segment\n\t\twhen 'Very High Risk' then '2_'||ci.purina_lapse_risk_segment\n\t\telse '1_Very High Risk'\n    end as purina_lapse_risk_segment,\n    case\n            when ci.have_cat = 'Y'\n            then 1 \n            else 0\n     end  as known_cat,\n         case\n            when ci.have_dog = 'Y'\n            then 1 \n            else 0\n     end  as known_dog\nfrom ${Database}.dedupe.cid_brand cb\ninner join ${Database}.dedupe.ref_brand rb on rb.brand_id = cb.brand_id\ninner join ${Database}.dedupe.ref_business_unit rbu on rbu.business_unit_id = cb.business_unit_id\ninner join ${Database}.dedupe.cid ci on ci.cid = cb.cid\ninner join ${Database}.dedupe.cid_business_unit cbu on ci.cid = cbu.cid and cbu.business_unit_id = rbu.business_unit_id\nwhere lower(rbu.business_unit) regexp '.*purina.*'\n    and (cb.brand_preference = 1 or (cb.brand_engagement = 1 and cb.brand_preference <> 0))\n    and\n    (\n        cb.customer_retention_group_brand in ( 'At Risk','Data Orphan','New','Re-consent','Safe')\n        or lower(cb.customer_retention_group_brand)  regexp '.*gone this month.*'\n    );\n\nalter warehouse set warehouse_size = 'Medium';\n\n----------------------------\n--roll up to cid/brand to take into account brands like pro plan cat/dog etc 7 the second masterbrand insert\ndrop table if exists ${Database}.data_layer.npp_qlik_reports_data_cid;\nCREATE OR REPLACE TABLE ${Database}.data_layer.npp_qlik_reports_data_cid\nas\nselect\n    cid,\n    brand,\n\tacquisition_type,\n    month_,\n    max(emailable) as emailable,\n    max(preferred_brand_gigya) as gigya_brand_pref,\n    min(brand_create_date) as brand_create_date,\n    max(customer_retention_date_brand) as customer_retention_date_brand,\n    min(customer_retention_group_brand) as customer_retention_group_brand,\n    min(customer_suppression_group_brand) as customer_suppression_group_brand,\n\tmax(customer_retention_group_business_unit) as customer_retention_group_business_unit,\n    max(customer_suppression_group_business_unit) as customer_suppression_group_business_unit,\n    max(pet_ownership) as pet_ownership,\n    max(purina_engagement_score) as purina_engagement_score,\n\tmax(purina_lapse_risk_segment) as purina_lapse_risk_segment,\n    max(number_of_dogs) as number_of_dogs,\n    max(number_of_cats) as number_of_cats,\n    max(known_cat) as known_cat,\n    max(known_dog) as known_dog\nfrom ${Database}.data_layer.npp_qlik_reports_data_base\ngroup by\n    cid,\n    brand,\n\tacquisition_type,\n    month_;\n\ndrop table ${Database}.data_layer.npp_qlik_reports_data_base;\n\n----------------------------\n--format and sort out data for reporting\n\ndrop table if exists ${Database}.data_layer.npp_qlik_reports_data;\nCREATE OR REPLACE TABLE ${Database}.data_layer.npp_qlik_reports_data\nas\nselect\n    cid,\n    brand,\n\tacquisition_type,\n    month_,\n    first_value(brand) over\n    (\n        partition by cid, month_\n        order by\n            brand_create_date nulls last,\n            case brand\n                when 'Purina Masterbrand' then 1\n                else 0 end,\n            brand\n    ) as source_brand,\n    first_value(customer_retention_group_brand) over\n    (\n        partition by cid, month_\n        order by customer_retention_group_brand\n    ) as customer_retention_group_purina,\n    case\n        when emailable = 1 then 'Emailable'\n        else 'Not Emailable'\n    end as emailable,\n    case\n        when emailable = 1 then ''\n        when customer_suppression_group_brand = 1 then 'Deceased TM'\n        when customer_suppression_group_brand = 2 then 'Deceased'\n        when customer_suppression_group_brand = 3 then 'Manual TM'\n        when customer_suppression_group_brand = 4 then 'Manual'\n        when customer_suppression_group_brand = 5 then 'Bounce TM'\n        when customer_suppression_group_brand = 6 then 'Bounce'\n        when customer_suppression_group_brand = 7 then 'Unsub TM'\n        when customer_suppression_group_brand = 8 then 'Unsub'\n        when customer_suppression_group_brand = 9 then 'Opt-Out TM'\n        when customer_suppression_group_brand = 10 then 'Opt-Out'\n        when customer_suppression_group_brand = 11 then 'Retention'\n        else 'Misc'\n    end as suppression_reason,\n    customer_suppression_group_brand,\n    case when gigya_brand_pref = 1 then brand else '' end as gigya_brand_pref,\n    case\n        when customer_retention_group_brand = 1 then 'Re-consent'\n        when customer_retention_group_brand = 2 then 'Safe'\n        when customer_retention_group_brand = 3 then 'At Risk'\n        when customer_retention_group_brand = 4 then 'Orphan'\n        when customer_retention_group_brand = 5 then 'New'\n        when customer_retention_group_brand = 6 then 'Inactive'\n        when customer_retention_group_brand = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_brand,\n    customer_retention_date_brand,\n\tcase \n        when customer_retention_group_business_unit = 2 then 'Safe'\n        when customer_retention_group_business_unit = 3 then 'At Risk'\n        when customer_retention_group_business_unit = 4 then 'Orphan'\n        when customer_retention_group_business_unit = 5 then 'Inactive'\n    end as customer_retention_group_business_unit,\n    case\n        when customer_suppression_group_business_unit = 1 then 'Deceased TM'\n        when customer_suppression_group_business_unit = 2 then 'Manual TM'\n        when customer_suppression_group_business_unit = 3 then 'Bounce TM'\n        when customer_suppression_group_business_unit = 4 then 'Unsub TM'\n        when customer_suppression_group_business_unit = 5 then 'Opt-Out TM'\n        when customer_suppression_group_business_unit = 6 then 'Retention'\n    end as customer_suppression_group_business_unit,\n    case when pet_ownership > 0 then 1 else 0 end as pet,\n    case pet_ownership\n        when 1 then 'Cat Only'\n        when 2 then 'Dog Only'\n        when 3 then 'Both'\n        else 'Unknown'\n    end as pet_ownership,\n    purina_engagement_score,\n\tsubstring(purina_lapse_risk_segment,3,20) as purina_lapse_risk_segment,\n    number_of_dogs,\n    number_of_cats,\n    case\n        when purina_engagement_score < 130 then 'Low'\n        when purina_engagement_score <= 310 then 'Medium'\n        when purina_engagement_score > 310 then 'High'\n        else 'Low'\n    end as purina_engagement_score_group,\n    known_cat,\n    known_dog \nfrom ${Database}.data_layer.npp_qlik_reports_data_cid;\n\ndrop table ${Database}.data_layer.npp_qlik_reports_data_cid;\n\n----------------------------\n--output\n\nalter warehouse set warehouse_size = 'Large';\n\ndrop table if exists ${Database}.reporting_layer.npp_qlik_reports_data_pet_unrolled;\nCREATE OR REPLACE TABLE ${Database}.reporting_layer.npp_qlik_reports_data_pet_unrolled\nas\nselect\n    *,\n    case\n        when email_count = 1\n            and firstname_count = 1\n            and (dog_count = 1 or cat_count = 1)\n            and pet_name_count = 1\n            and pet_age <> 'Unknown Age'\n            and (\n                     (\n                           dog_count = 1\n                       and dog_breed_count = 1\n                       and dog_gender = 1\n                     )\n                  or\n                     (\n                           cat_count = 1\n                       and cat_colour = 1\n                       and cat_indoor_outdoor_count = 1\n                       and cat_gender = 1\n                     )\n                ) then 'Core PLUS'\n        when email_count = 1\n            and firstname_count = 1\n            and (dog_count = 1 or cat_count = 1)\n            and pet_name_count = 1\n            and pet_age <> 'Unknown Age'\n            and case when dog_count = 1 then dog_breed_count else 1 end = 1 then 'Core'\n        when known_cat_count = 1 or known_dog_count = 1 then 'Known'\n        else 'Unknown'\n    end as profile_level,\n    case\n        when pet_ownership = 'Both' and known_cat_count = 1 and known_dog_count = 1 then 'Known Both'\n        when pet_ownership = 'Both' and known_cat_count = 0 and known_dog_count = 0 then 'Inferred Both'\n        when pet_ownership = 'Both' and known_cat_count = 1 and known_dog_count = 0 then 'Known Cat + Inferred Dog'\n        when pet_ownership = 'Both' and known_cat_count = 0 and known_dog_count = 1 then 'Known Dog + Inferred Cat'\n        when pet_ownership = 'Dog Only' and known_dog_count = 1 then 'Known Dog'\n        when pet_ownership = 'Dog Only' and known_dog_count = 0 then 'Inferred Dog'\n        when pet_ownership = 'Cat Only' and known_cat_count = 1 then 'Known Cat'\n        when pet_ownership = 'Cat Only' and known_cat_count = 0 then 'Inferred Cat'\n        else 'Unknown'\n    end as pet_segment\nfrom (\n         select\n             d.cid,\n             to_char(d.cid)||'-'||to_char(pet_number) as pid,\n             d.month_,\n             d.brand,\n\t\t\t d.acquisition_type,\n             d.source_brand,\n             d.gigya_brand_pref,\n             d.emailable,\n             d.suppression_reason,\n             d.customer_suppression_group_brand,\n             d.customer_retention_group_brand,\n\t\t\t d.customer_suppression_group_business_unit,\n             d.customer_retention_group_business_unit,\n             d.pet,\n             d.pet_ownership,\n             d.purina_engagement_score_group,\n             d.purina_engagement_score,\n\t\t\t d.purina_lapse_risk_segment,\n             case when d.brand = d.source_brand and d.customer_retention_group_purina = 5 then 1 else 0 end as new_cids_purina,\n             case when pt.pet_name > '' then 1 else 0 end as pet_name_count,\n             case when pt.pet_dob is not null then 1 else 0 end as pet_dob_count,\n             case when pt.pet_life_stage > '' then 1 else 0 end as pet_stage_count,\n             case when pt.pet_type = 'Dog' and pt.pet_size > '' then 1 else 0 end as dog_size_count,\n             case when pt.pet_type = 'Dog' and pt.pet_breed > '' then 1 else 0 end as dog_breed_count,\n             case\n                 when pt.pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -6) then '0-6 Months'\n                 when pt.pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -12) then '7-12 Months'\n                 when pt.pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -24) then '1-2 Years'\n                 when pt.pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -36) then '2-3 Years'\n                 when pt.pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -48) then '3-4 Years'\n                 when pt.pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -60) then '4-5 Years'\n                 when pt.pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -72) then '5-6 Years'\n                 when pt.pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -84) then '6-7 Years'\n                 when pt.pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -120) then '7-10 Years'\n                 when pt.pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -180) then '10-15 Years'\n                 when pt.pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -240) then '15-20 Years'\n                 when pt.pet_dob <=  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -240) then '20+ Years'\n                 else 'Unknown Age'\n             end as pet_age,\n             case when pt.pet_type = 'Dog' and pt.pet_gender > '' then 1 else 0 end as dog_gender,\n             case when pt.pet_type = 'Cat' and pt.pet_gender > '' then 1 else 0 end as cat_gender,\n             case when pt.pet_type = 'Cat' and pt.pet_indoor_outdoor > '' then 1 else 0 end as cat_indoor_outdoor_count,\n             case when pt.pet_type = 'Cat' and pt.pet_colour > '' then 1 else 0 end as cat_colour,\n             case when pt.pet_type = 'Dog' then 1 else 0 end as dog_count,\n             case when pt.pet_type = 'Cat' then 1 else 0 end as cat_count,\n             d.known_cat as known_cat_count,\n             d.known_dog as known_dog_count,\n             d.number_of_dogs,\n             d.number_of_cats,\n             max(case when n.firstname <> '' then 1 else 0 end) as firstname_count,\n             max(case when n.email <> '' then 1 else 0 end) as email_count\n         from ${Database}.data_layer.npp_qlik_reports_data d\n         left join ${Database}.dedupe.cid_pet pt on pt.cid = d.cid\n         left join ${Database}.dedupe.names n on n.cid = d.cid\n         group by\n             d.cid,\n             to_char(d.cid)||'-'||to_char(pet_number),\n             d.month_,\n             d.brand,\n\t\t\t d.acquisition_type,\n             d.source_brand,\n             d.gigya_brand_pref,\n             d.emailable,\n             d.suppression_reason,\n             d.customer_suppression_group_brand,\n             d.customer_retention_group_brand,\n\t\t\t d.customer_suppression_group_business_unit,\n             d.customer_retention_group_business_unit,\n             d.pet,\n             d.pet_ownership,\n             d.purina_engagement_score_group,\n             d.purina_engagement_score,\n\t\t\t d.purina_lapse_risk_segment,\n             case when d.brand = d.source_brand and d.customer_retention_group_purina = 5 then 1 else 0 end,\n             case when pt.pet_name > '' then 1 else 0 end,\n             case when pt.pet_dob is not null then 1 else 0 end,\n             case when pt.pet_life_stage > '' then 1 else 0 end,\n             case when pt.pet_type = 'Dog' and pt.pet_size > '' then 1 else 0 end,\n             case when pt.pet_type = 'Dog' and pt.pet_breed > '' then 1 else 0 end,\n             case\n                 when pt.pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -6) then '0-6 Months'\n                 when pt.pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -12) then '7-12 Months'\n                 when pt.pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -24) then '1-2 Years'\n                 when pt.pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -36) then '2-3 Years'\n                 when pt.pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -48) then '3-4 Years'\n                 when pt.pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -60) then '4-5 Years'\n                 when pt.pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -72) then '5-6 Years'\n                 when pt.pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -84) then '6-7 Years'\n                 when pt.pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -120) then '7-10 Years'\n                 when pt.pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -180) then '10-15 Years'\n                 when pt.pet_dob >  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -240) then '15-20 Years'\n                 when pt.pet_dob <=  add_months((select historic_build_date from ${Database}.data_layer.historic_build_date), -240) then '20+ Years'\n                 else 'Unknown Age'\n             end,\n             case when pt.pet_type = 'Dog' and pt.pet_gender > '' then 1 else 0 end,\n             case when pt.pet_type = 'Cat' and pt.pet_gender > '' then 1 else 0 end,\n             case when pt.pet_type = 'Cat' and pt.pet_indoor_outdoor > '' then 1 else 0 end,\n             case when pt.pet_type = 'Cat' and pt.pet_colour > '' then 1 else 0 end,\n             case when pt.pet_type = 'Dog' then 1 else 0 end,\n             case when pt.pet_type = 'Cat' then 1 else 0 end,\n                d.known_cat,\n                d.known_dog,\n             d.number_of_dogs,\n             d.number_of_cats\n     ) x;\n\ndrop table ${Database}.data_layer.npp_qlik_reports_data;\n\n\n----------------------------\n----Historic Pet Data \n----------------------------\n\nalter warehouse set warehouse_size = 'Small';\n\ndelete from ${Database}.db.npp_qlik_reports_historic_total_rerun where month_ = (select distinct month_ from ${Database}.reporting_layer.npp_qlik_reports_data_Pet_Unrolled);\n\ninsert into ${Database}.db.npp_qlik_reports_historic_total_rerun\n(\n                       select\n                                month_,\n                                count(distinct case when emailable = 'Emailable' then cid end) as total_emailable_base,\n                                sum(case when emailable = 'Emailable' then new_cids_purina end) as total_new_to_purina,\n                                count(distinct case when emailable = 'Was Emailable Last Month' then cid end) as total_churn,\n                                count(distinct case when emailable = 'Emailable' and pet_ownership = 'Cat Only' then cid end) as total_cat_only_owners,\n                                count(distinct case when emailable = 'Emailable' and pet_ownership = 'Dog Only' then cid end) as total_dog_only_owners,\n                                count(distinct case when emailable = 'Emailable' and pet_ownership = 'Both' then cid end) as total_dog_and_cat_owners\n                                \n                        from (\n                                select distinct \n                                                    month_,\n                                                    cid,\n                                                    pet_ownership,\n                                                    case\n                                                            when emailable = 'Emailable' then 'Emailable'\n                                                            when customer_retention_group_brand <> 'New' and customer_suppression_group_brand in (1,3,5,7,9,11) then 'Was Emailable Last Month'\n                                                            else 'Not Emailable'\n                                                    end as emailable,\n                                                    customer_retention_group_brand,\n                                                    new_cids_purina\n                                 from  ${Database}.reporting_layer.npp_qlik_reports_data_Pet_Unrolled\n                                 where brand not in ('Pro Plan Breeder','Beta Breeder')\n                                 ) a\n                         group by month_\n);\n\ndelete from ${Database}.db.npp_qlik_reports_historic_brand_acquisition_rerun where month_ = (select distinct month_ from ${Database}.reporting_layer.npp_qlik_reports_data_Pet_Unrolled);\n\ninsert into ${Database}.db.npp_qlik_reports_historic_brand_acquisition_rerun\n(\n                        select\n                                x.month_,\n                                x.brand,\n                                x.acquisition_type,\n                                sum(case when customer_retention_group_brand = 'New' then 1 else 0 end) as new_to_brand,\n                                sum(new_cids_purina) as new_to_purina,\n                                x.purina_engagement_score_group,\n                                sum(case when customer_retention_group_brand = 'Safe' then 1 else 0 end) as safe_to_brand,\n                                sum(case when customer_retention_group_brand = 'At Risk' then 1 else 0 end) as At_Risk_to_brand,\n                                sum(case when customer_retention_group_brand = 'Orphan' then 1 else 0 end) as Orphan_to_brand,\n                                sum(case when customer_retention_group_brand = 'Re-consent' then 1 else 0 end) as Reconsent_to_brand,\n\t\t\t\t\t\t\t\tcoalesce(gone_from_brand, 0) as gone_from_brand,\n\t\t\t\t\t\t\t\tcount(distinct cid) as brand_emailable_base,\n                                count(distinct case when pet_ownership = 'Cat Only' then cid end) as brand_cat_only_owners,\n                                count(distinct case when pet_ownership = 'Dog Only' then cid end) as band_dog_only_owners,\n                                count(distinct case when pet_ownership = 'Both' then cid end) as brand_dog_and_cat_owners,\n\t\t\t\t\t\t\t\ttar.monthly_target,\n\t\t\t\t\t\t\t\tp.safe_to_purina,\n\t\t\t\t\t\t\t\tp.at_risk_expiring_to_purina,\n\t\t\t\t\t\t\t\tpg.gone_from_purina,\n\t\t\t\t\t\t\t\tpg.consent_expired_this_month,\n\t\t\t\t\t\t\t\tpg.unsubscribed_this_month,\n\t\t\t\t\t\t\t\tpg.deletion_request_this_month,\n\t\t\t\t\t\t\t\tpg.other_suppression_this_month\n                        from (\n                                    select distinct \n                                                        month_,\n                                                        cid,\n                                                        brand,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tacquisition_type,\n                                                        purina_engagement_score_group,\n                                                        customer_retention_group_brand,\n                                                        new_cids_purina,\n                                                        pet_ownership\n                                     from  ${Database}.reporting_layer.npp_qlik_reports_data_Pet_Unrolled\n                                     where emailable = 'Emailable'\n                                    ) x\n\t\t\t\t\t\tleft join (\n\t\t\t\t\t\t\t\t\tselect distinct\n\t\t\t\t\t\t\t\t\t\tmonth_,\n\t\t\t\t\t\t\t\t\t\tbrand,\n\t\t\t\t\t\t\t\t\t\tacquisition_type,\n\t\t\t\t\t\t\t\t\t\tpurina_engagement_score_group,\n\t\t\t\t\t\t\t\t\t\tcount(distinct cid) as gone_from_brand\n\t\t\t\t\t\t\t\t\tfrom  ${Database}.reporting_layer.npp_qlik_reports_data_pet_unrolled\n\t\t\t\t\t\t\t\t\twhere (customer_retention_group_brand = 'Inactive' and suppression_reason = 'Retention')\n\t\t\t\t\t\t\t\t\t\tor suppression_reason in ('Unsub TM','Manual TM','Deceased TM','Opt-Out TM','Bounce TM')\n\t\t\t\t\t\t\t\t\tgroup by 1,2,3,4\n\t\t\t\t\t\t\t\t) g on x.month_ = g.month_\n\t\t\t\t\t\t\t\t\tand x.brand = g.brand\n\t\t\t\t\t\t\t\t\tand x.acquisition_type = g.acquisition_type\n\t\t\t\t\t\t\t\t\tand x.purina_engagement_score_group = g.purina_engagement_score_group\n\t\t\t\t\t\tleft join (\n\t\t\t\t\t\t\t\t\tselect distinct\n\t\t\t\t\t\t\t\t\t\tmonth_,\n\t\t\t\t\t\t\t\t\t\tcount(distinct case when customer_retention_group_business_unit = 'Safe' then cid end) as safe_to_purina,\n\t\t\t\t\t\t\t\t\t\tcount(distinct case when customer_retention_group_business_unit in ('At Risk','Orphan') then cid end) as at_risk_expiring_to_purina\n\t\t\t\t\t\t\t\t\tfrom  ${Database}.reporting_layer.npp_qlik_reports_data_pet_unrolled\n\t\t\t\t\t\t\t\t\twhere emailable = 'Emailable' and brand not in ('Pro Plan Breeder','Beta Breeder' , 'Purina Vet')\n\t\t\t\t\t\t\t\t\tgroup by month_\n\t\t\t\t\t\t\t\t) p on x.month_ = p.month_\n\t\t\t\t\t\tleft join (\n\t\t\t\t\t\t\t\t\tselect distinct\n\t\t\t\t\t\t\t\t\t\tmonth_,\n\t\t\t\t\t\t\t\t\t\tcount(distinct case\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhen customer_retention_group_business_unit = 'Inactive' \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tand customer_suppression_group_business_unit = 'Retention' then cid\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhen customer_suppression_group_business_unit in ('Unsub TM','Manual TM','Deceased TM','Opt-Out TM','Bounce TM') then cid\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tend) as gone_from_purina,\n\t\t\t\t\t\t\t\t\t\tcount(distinct case when customer_retention_group_business_unit = 'Inactive'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tand customer_suppression_group_business_unit = 'Retention' then cid end) as consent_expired_this_month,\n\t\t\t\t\t\t\t\t\t\tcount(distinct case when customer_suppression_group_business_unit = 'Unsub TM' then cid end) as unsubscribed_this_month,\n\t\t\t\t\t\t\t\t\t\tcount(distinct case when customer_suppression_group_business_unit = 'Manual TM' then cid end) as deletion_request_this_month,\n\t\t\t\t\t\t\t\t\t\tcount(distinct case when customer_suppression_group_business_unit in ('Deceased TM','Opt-Out TM','Bounce TM') then cid end) as other_suppression_this_month\n\t\t\t\t\t\t\t\t\tfrom  ${Database}.reporting_layer.npp_qlik_reports_data_pet_unrolled\n\t\t\t\t\t\t\t\t\tgroup by month_\n\t\t\t\t\t\t\t\t) pg on x.month_ = pg.month_\n                        left join ${Database}.db.npp_qlik_reports_brand_targets tar on x.brand = tar.brand\n                                                                                   and trim(x.month_) = trim(tar.month_)\n                                                                                   and trim(x.purina_engagement_score_group) = 'Low'\n                                                                                   and trim(x.acquisition_type) = 'Legacy'\n\t\t\t\t\t\tgroup by\n\t\t\t\t\t\t\tx.month_,\n\t\t\t\t\t\t\tx.brand,\n\t\t\t\t\t\t\tx.acquisition_type,\n\t\t\t\t\t\t\tx.purina_engagement_score_group,\n\t\t\t\t\t\t\tgone_from_brand,\n\t\t\t\t\t\t\ttar.monthly_target,\n\t\t\t\t\t\t\tp.safe_to_purina,\n\t\t\t\t\t\t\tp.at_risk_expiring_to_purina,\n\t\t\t\t\t\t\tpg.gone_from_purina,\n\t\t\t\t\t\t\tpg.consent_expired_this_month,\n\t\t\t\t\t\t\tpg.unsubscribed_this_month,\n\t\t\t\t\t\t\tpg.deletion_request_this_month,\n\t\t\t\t\t\t\tpg.other_suppression_this_month\n);\n\ndelete from ${Database}.db.npp_qlik_reports_historic_engagement_rerun where month_ = (select distinct month_ from ${Database}.reporting_layer.npp_qlik_reports_data_Pet_Unrolled);\n\ninsert into ${Database}.db.npp_qlik_reports_historic_engagement_rerun\n(\n                        select\n                                month_,\n                                purina_engagement_score_group,\n                                count(distinct cid) as engagement_emailable_cids\n                        from ${Database}.reporting_layer.npp_qlik_reports_data_Pet_Unrolled\n                        where  emailable = 'Emailable'\n                        group by month_, purina_engagement_score_group\n);\n\ndelete from ${Database}.db.npp_qlik_reports_historic_profile_rerun where month_ = (select distinct month_ from ${Database}.reporting_layer.npp_qlik_reports_data_Pet_Unrolled);\n\ninsert into ${Database}.db.npp_qlik_reports_historic_profile_rerun\n\n(\n                        select \n                                month_,        \n                                count (distinct cid),\n                                profile_level\n                        from ${Database}.reporting_layer.npp_qlik_reports_data_Pet_Unrolled\n                        where emailable = 'Emailable'\n                        and brand not in ('Pro Plan Breeder','Beta Breeder')\n                        and customer_retention_group_brand <> 'Inactive'\n                        group by month_, profile_level\n); \n\n\n/******************************************************************************************\n                                       FINISH PROC\n******************************************************************************************/"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[195987]},"195983":{"id":195983,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-1104,"y":-192,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[195986],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"195981":{"id":195981,"sourceID":195977,"targetID":195980}},"failureConnectors":{},"unconditionalConnectors":{"195986":{"id":195986,"sourceID":195983,"targetID":195977}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{"195987":{"id":195987,"sourceID":195980,"targetID":195982}},"noteConnectors":{},"notes":{"195976":{"id":195976,"x":-1181,"y":-254,"width":365,"height":170,"text":"**Only run on DEV!**","colour":"e6e63c"}},"variables":{"DateForQueue":{"definition":{"name":"DateForQueue","type":"DATETIME","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"2020-01-01"},"GA_Unique":{"definition":{"name":"GA_Unique","type":"DECIMAL","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"HistoricMonths":{"definition":{"name":"HistoricMonths","type":"DECIMAL","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"SkipCode":{"definition":{"name":"SkipCode","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"0"}},"grids":{}},"info":{"name":"Nestle Historic Build","description":"","type":"ORCHESTRATION","tag":"71222c1d-c616-4447-aa04-3eadcde71baf"}}