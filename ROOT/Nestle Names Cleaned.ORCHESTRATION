{"job":{"components":{"196004":{"id":196004,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-592,"y":-80,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[196013],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196005":{"id":196005,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-416,"y":-80,"width":32,"height":32,"inputConnectorIDs":[196014],"outputSuccessConnectorIDs":[196012],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc 2 Pre Clean"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nKognitio Program  : Nestle Names PreClean\nAuthor            : Lindsay Timms\nClient Name       : Nestle\nJob Number        :\nStandard Machine  : Kognitio\nAmendment History : v01 - LT 20161216 - Created\n******************************************************************************************/\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 2 Pre Clean'\n, \t\t'SCRIPT'\n, \t\t'STARTED'\n;\n\n\n /******************************************************************************************\n                                       NAMES PRE CLEAN\n ******************************************************************************************/\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_names_pre_clean',\n    '*************************',\n    '*************************',\n    'start of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n/******************************************************************************************\n                          email response suppressions\n ******************************************************************************************/\n /*\n--suppressions\ninsert into ${Database}.db.supps_bounce\n(\n    supp_urn,\n    data_date,\n    email,\n    bounce_type,\n    source,\n    source_file,\n    source_urn,\n    source_date\n)\nselect\n    cast(row_number() over() as int)+(select coalesce(max(supp_urn),0) from ${Database}.db.supps_bounce),\n    cast(max(eventtriggereddate) as date),\n    lower(re.email),\n    'hard',\n    'COMMUNICATOR_FS_AUTO',\n    '0991',\n    cast(max(id) as varchar(20)),\n    current_date\nfrom ${Database}.db.response re\nleft join (select distinct lower(email) as email from ${Database}.db.supps_bounce where source_file = '0991') sb on lower(re.email) = lower(sb.email)\nwhere lower(messagetype) = 'bounce'\n    and re.email > ''\n    and sb.email is null\ngroup by lower(re.email);\n\ninsert into ${Database}.db.supps_unsubscribe\n(\n    supp_urn,\n    data_date,\n    email,\n    unsubscribe_channel_email,\n    unsubscribe_channel_mail,\n    unsubscribe_channel_phone,\n    source,\n    source_file,\n    source_urn,\n    source_date,\n    phone_home,\n    phone_mobile\n)\nselect\n    cast(row_number() over() as int)+(select coalesce(max(supp_urn),0) from ${Database}.db.supps_unsubscribe),\n    cast(max(eventtriggereddate) as date),\n    lower(re.email),\n    1 as unsubscribe_channel_email,\n    0 as unsubscribe_channel_mail,\n    0 as unsubscribe_channel_phone,\n    'COMMUNICATOR_FS_AUTO',\n    '0992',\n    cast(max(id) as varchar(20)),\n    current_date,\n    '',\n    ''\nfrom ${Database}.db.response re\nleft join (select lower(email) as email, max(data_date) as data_date from ${Database}.db.supps_unsubscribe where source_file = '0992' group by lower(email)) su on lower(re.email) = lower(su.email)\n                                                                                                                       and cast(re.eventtriggereddate as date) = su.data_date\nwhere lower(messagetype) = 'optout'\n    and re.email > ''\n    and su.email is null\ngroup by lower(re.email);\n*/\n\n /******************************************************************************************\n                          CREATE TABLE FOR DEDUPE WITH ALL DATABASE NAMES\n ******************************************************************************************/\n\n\nCREATE OR REPLACE TABLE ${Database}.temp.names_lookup as\nselect \n    name_urn\n    ,min(bbw_urn) as bbw_urn\n    ,min(reg_date) as reg_date\nfrom ${Database}.db.names\ngroup by 1\n;\n\nalter warehouse set warehouse_size = 'Medium';\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_names_to_key_phase1 as\nselect * \nfrom \n    (\n        select \n        *\n        ,row_number() over\n            (\n                partition by name_urn\n                order by\n                    data_date desc nulls last,\n                    source_date desc nulls last,\n                    source_file desc nulls last,\n                    source_urn desc nulls last,\n                    bbw_urn desc\n            ) as rownum\n        from ${Database}.db.names\n    ) t \nwhere rownum = 1\n;\n\nalter warehouse set warehouse_size = 'Small';\n\n-- create deduped version of warehouse based on best record identified above\nCREATE OR REPLACE TABLE ${Database}.temp.build_names_to_key\nas\nselect\n    bnk.name_urn,\n    data_date,\n    nl.reg_date,\n    title,\n    firstname,\n    lastname,\n    add1,\n    add2,\n    add3,\n    add4,\n    add5,\n    add6,\n    add7,\n    city,\n    state,\n    company,\n    postcode,\n    country,\n    region,\n    dob,\n    gender,\n    phone_home,\n    phone_work,\n    phone_mobile,\n    phone_fax,\n    email,\n    www,\n    job_title,\n    source,\n    source_file,\n    source_urn,\n    source_date,\n    source_data_controller_id,\n    source_brand_id,\n    nl.bbw_urn as db_bbw_urn\nfrom ${Database}.temp.build_names_to_key_phase1 bnk\ninner join ${Database}.temp.names_lookup nl on trim(bnk.name_urn) = trim(nl.name_urn)\n;\n\ndrop table if exists ${Database}.temp.names_lookup;\ndrop table if exists ${Database}.temp.build_names_to_key_phase1;\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_names_pre_clean',\n    '${Database}.temp.build_names_to_key',\n    'total name urns',\n    cast(count(*) as varchar(10)),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_names_to_key;\n\n/******************************************************************************************\n              CREATE TABLES READY FOR KEYING WITH ALL THE SUPP NAMES\n******************************************************************************************/\n\n\n--  insert deads\ninsert into ${Database}.temp.build_names_to_key\n(\n    name_urn,\n    data_date,\n    reg_date,\n    title,\n    firstname,\n    lastname,\n    add1,\n    add2,\n    add3,\n    add4,\n    add5,\n    add6,\n    add7,\n    city,\n    state,\n    company,\n    postcode,\n    country,\n    region,\n    dob,\n    gender,\n    email,\n    phone_home,\n    phone_work,\n    phone_mobile,\n    phone_fax,\n    job_title,\n    www,\n    source,\n    source_date,\n    source_file,\n    source_urn,\n    source_data_controller_id,\n    source_brand_id,\n    db_bbw_urn\n)\nselect\n    'dead-'||cast(supp_urn as varchar(20))  as name_urn\n    ,data_date\n    ,data_date\n    ,title\n    ,firstname\n    ,lastname\n    ,add1\n    ,add2\n    ,add3\n    ,add4\n    ,add5\n    ,cast('' as varchar(50))                as add6\n    ,cast('' as varchar(50))                as add7\n    ,cast('' as varchar(100))               as city\n    ,cast('' as varchar(100))               as state\n    ,company\n    ,postcode\n    ,coalesce(country,'UK')\n    ,cast('' as varchar(20))                as region\n    ,cast(null as varchar(20))              as dob\n    ,'X'                                    as gender\n    ,email\n    ,cast('' as varchar(50))                as phone_home\n    ,cast('' as varchar(50))                as phone_work\n    ,cast('' as varchar(50))                as phone_mobile\n    ,cast('' as varchar(50))                as phone_fax\n    ,cast('' as varchar(20))                as job_title\n    ,cast('' as varchar(20))                as www\n    ,'dead'                                 as source\n    ,source_date\n    ,source_file\n    ,source_urn\n    ,cast(1 as int)                         --assume nestle for now...\n    ,cast(null as int)\n    ,supp_urn + 1000000000                         as db_bbw_urn\nfrom ${Database}.db.supps_dead;\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_names_pre_clean',\n    '${Database}.temp.build_names_to_key',\n    'dead records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_names_to_key\nwhere trim(source) = 'dead';\n\n\n-- insert goneaways\n\ninsert into ${Database}.temp.build_names_to_key\n(\n    name_urn,\n    data_date,\n    reg_date,\n    title,\n    firstname,\n    lastname,\n    add1,\n    add2,\n    add3,\n    add4,\n    add5,\n    add6,\n    add7,\n    city,\n    state,\n    company,\n    postcode,\n    country,\n    region,\n    dob,\n    gender,\n    email,\n    phone_home,\n    phone_work,\n    phone_mobile,\n    phone_fax,\n    job_title,\n    www,\n    source,\n    source_date,\n    source_file,\n    source_urn,\n    source_data_controller_id,\n    source_brand_id,\n    db_bbw_urn\n)\nselect\n    'gone-'||cast(supp_urn as varchar(20))  as name_urn\n    ,data_date\n    ,data_date\n    ,title\n    ,firstname\n    ,lastname\n    ,add1\n    ,add2\n    ,add3\n    ,add4\n    ,add5\n    ,cast('' as varchar(20))                as add6\n    ,cast('' as varchar(20))                as add7\n    ,cast('' as varchar(20))                as city\n    ,cast('' as varchar(20))                as state\n    ,company\n    ,postcode\n    ,coalesce(country,'UK')\n    ,cast('' as varchar(20))                as region\n    ,cast(null as varchar(20))              as dob\n    ,'X'                                    as gender\n    ,email\n    ,cast('' as varchar(20))                as phone_home\n    ,cast('' as varchar(20))                as phone_work\n    ,cast('' as varchar(20))                as phone_mobile\n    ,cast('' as varchar(20))                as phone_fax\n    ,cast('' as varchar(20))                as job_title\n    ,cast('' as varchar(20))                as www\n    ,'gone'                                 as source\n    ,source_date\n    ,source_file\n    ,source_urn\n    ,cast(1 as int)                         --assume nestle for now...\n    ,cast(null as int)\n    ,supp_urn + 1200000000                         as db_bbw_urn\nfrom ${Database}.db.supps_goneaway;\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_names_pre_clean',\n    '${Database}.temp.build_names_to_key',\n    'gone records',\n    cast(count(*) as varchar(10)),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_names_to_key\nwhere trim(source) = 'gone';\n\n\n--  insert manual supps\n\ninsert into ${Database}.temp.build_names_to_key\n(\n    name_urn,\n    data_date,\n    reg_date,\n    title,\n    firstname,\n    lastname,\n    add1,\n    add2,\n    add3,\n    add4,\n    add5,\n    add6,\n    add7,\n    city,\n    state,\n    company,\n    postcode,\n    country,\n    region,\n    dob,\n    gender,\n    email,\n    phone_home,\n    phone_work,\n    phone_mobile,\n    phone_fax,\n    job_title,\n    www,\n    source,\n    source_date,\n    source_file,\n    source_urn,\n    source_data_controller_id,\n    source_brand_id,\n    db_bbw_urn\n)\nselect\n    'manual-'||cast(supp_urn as varchar(20)) as name_urn\n    ,data_date\n    ,data_date\n    ,title\n    ,firstname\n    ,lastname\n    ,add1\n    ,add2\n    ,add3\n    ,add4\n    ,add5\n    ,cast('' as varchar(100))               as add6\n    ,cast('' as varchar(100))               as add7\n    ,cast('' as varchar(100))               as city\n    ,cast('' as varchar(100))               as state\n    ,company\n    ,postcode\n    ,coalesce(country,'UK')\n    ,cast('' as varchar(20))                as region\n    ,cast(null as varchar(20))              as dob\n    ,'X'                                    as gender\n    ,email\n    ,coalesce(phone_home,'')\n    ,cast('' as varchar(20))                as phone_work\n    ,coalesce(phone_mobile,'')\n    ,cast('' as varchar(20))                as phone_fax\n    ,cast('' as varchar(20))                as job_title\n    ,cast('' as varchar(20))                as www\n    ,'manual'                               as source\n    ,source_date\n    ,source_file\n    ,source_urn\n    ,cast(1 as int)                         --assume nestle for now...\n    ,cast(null as int)\n    ,supp_urn + 1400000000                         as db_bbw_urn\nfrom ${Database}.db.supps_manual;\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_names_pre_clean',\n    '${Database}.temp.build_names_to_key',\n    'manual records',\n    cast(count(*) as varchar(10)),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_names_to_key\nwhere trim(source) = 'manual';\n\n\n--  insert unsubscribes\n\ninsert into ${Database}.temp.build_names_to_key\n(\n    name_urn,\n    data_date,\n    reg_date,\n    title,\n    firstname,\n    lastname,\n    add1,\n    add2,\n    add3,\n    add4,\n    add5,\n    add6,\n    add7,\n    city,\n    state,\n    company,\n    postcode,\n    country,\n    region,\n    dob,\n    gender,\n    email,\n    phone_home,\n    phone_work,\n    phone_mobile,\n    phone_fax,\n    job_title,\n    www,\n    source,\n    source_date,\n    source_file,\n    source_urn,\n    source_data_controller_id,\n    source_brand_id,\n    db_bbw_urn\n)\nselect\n    'unsub-'||cast(su.supp_urn as varchar(20)) as name_urn\n    ,su.data_date\n    ,su.data_date\n    ,coalesce(su.title,'')\n    ,coalesce(su.firstname,'')\n    ,coalesce(su.lastname,'')\n    ,coalesce(su.add1,'')\n    ,coalesce(su.add2,'')\n    ,coalesce(su.add3,'')\n    ,coalesce(su.add4,'')\n    ,coalesce(su.add5,'')\n    ,cast('' as varchar(20))                as add6\n    ,cast('' as varchar(20))                as add7\n    ,cast('' as varchar(20))                as city\n    ,cast('' as varchar(20))                as state\n    ,su.company\n    ,coalesce(su.postcode,'')\n    ,coalesce(su.country,'UK')\n    ,cast('' as varchar(20))                as region\n    ,cast(null as varchar(20))              as dob\n    ,'X'                                    as gender\n    ,coalesce(su.email,'')\n    ,coalesce(su.phone_home,'')\n    ,cast('' as varchar(20))                as phone_work\n    ,coalesce(su.phone_mobile,'')\n    ,cast('' as varchar(20))                as phone_fax\n    ,cast('' as varchar(20))                as job_title\n    ,cast('' as varchar(20))                as www\n    ,'unsub'                                as source\n    ,su.source_date\n    ,su.source_file\n    ,su.source_urn\n    ,cast(1 as int)                         --assume nestle for now...\n    ,cast(null as int)\n    ,su.supp_urn + 1600000000 as db_bbw_urn\nfrom ${Database}.db.supps_unsubscribe su\ninner join\n    (\n        select distinct\n            source,\n            source_urn,\n            first_value(supp_urn) over\n            (\n                partition by source, source_urn\n                order by\n                    data_date desc nulls last,\n                    source_date desc nulls last,\n                    source_file desc nulls last,\n                    supp_urn desc\n            ) as supp_urn\n        from ${Database}.db.supps_unsubscribe\n    ) roll on su.supp_urn = roll.supp_urn;\n\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_names_pre_clean',\n    '${Database}.temp.build_names_to_key',\n    'unsub records',\n    cast(count(*) as varchar(10)),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_names_to_key\nwhere trim(source) = 'unsub';\n\n\n\n-- tenement fix for paf\nupdate ${Database}.temp.build_names_to_key\nset\n    add7 = '',\n    add6 = add5,\n    add5 = add4,\n    add4 = add3,\n    add3 = add2,\n    add2 = trim(substring(add1, position(' ' in add1))),\n    add1 = trim(split_part(add1, ' ', 1))\nwhere split_part(add1, ' ', 1) like '%/%'\n    and add1 like '% %';\n\nupdate ${Database}.temp.build_names_to_key\nset\n    add7 = '',\n    add6 = add5,\n    add5 = add4,\n    add4 = add3,\n    add3 = add2,\n    add2 = trim(substring(add1,position(' ' in add1))),\n    add1 = trim(split_part(add1, ' ', 1))\nwhere lower(split_part(add1, ' ', 1)) regexp '.*[0-9]f[0-9].*'\n    and add1 like '% %';\n\ncreate or replace table ${Database}.temp.names_cleaned_name_urn as\nselect      \n\ttrim(name_urn) as name_urn\nfrom        ${Database}.db.names_cleaned\n;\n\n-- create names to clean view\nCREATE OR REPLACE TABLE ${Database}.temp.build_names_to_clean_temp as\nselect \n    db_bbw_urn\n    ,db_bbw_urn as bbw_urn\n    ,name_urn\n    ,title\n    ,firstname\n    ,lastname\n    ,company\n    ,add1\n    ,add2\n    ,add3\n    ,add4\n    ,add5\n    ,add6\n    ,add7\n    ,city\n    ,state\n    ,postcode\n    ,country\n    ,email\n    ,phone_home\n    ,phone_work\n    ,phone_mobile\n    ,www\n    ,job_title\n    ,region\n    ,gender\n    ,dob\n    ,source\n    ,source_date\n    ,data_date\n    ,reg_date\n    ,source_file\n    ,source_urn\n    ,source_data_controller_id\n    ,source_brand_id\nfrom ${Database}.temp.build_names_to_key\nwhere trim(name_urn) not in\n    (\n        select      name_urn\n        from        ${Database}.temp.names_cleaned_name_urn\n    )\n    or source_date >= current_date-5;\n\ndrop table ${Database}.temp.names_cleaned_name_urn;\n\ncreate or replace table  ${Database}.temp.build_names_to_clean\nas\nselect\n    db_bbw_urn as clean_urn,\n    db_bbw_urn as bbw_urn,\n    name_urn,\n    replace(replace(replace(title,          chr(9),' '), chr(10),' '), chr(13),' ')     as title,\n    replace(replace(replace(firstname,      chr(9),' '), chr(10),' '), chr(13),' ')     as firstname,\n    replace(replace(replace(lastname,       chr(9),' '), chr(10),' '), chr(13),' ')     as lastname,\n    replace(replace(replace(company,        chr(9),' '), chr(10),' '), chr(13),' ')     as company,\n    replace(replace(replace(add1,           chr(9),' '), chr(10),' '), chr(13),' ')     as add1,\n    replace(replace(replace(add2,           chr(9),' '), chr(10),' '), chr(13),' ')     as add2,\n    replace(replace(replace(add3,           chr(9),' '), chr(10),' '), chr(13),' ')     as add3,\n    replace(replace(replace(add4,           chr(9),' '), chr(10),' '), chr(13),' ')     as add4,\n    replace(replace(replace(add5,           chr(9),' '), chr(10),' '), chr(13),' ')     as add5,\n    replace(replace(replace(add6,           chr(9),' '), chr(10),' '), chr(13),' ')     as add6,\n    replace(replace(replace(add7,           chr(9),' '), chr(10),' '), chr(13),' ')     as add7,\n    replace(replace(replace(city,           chr(9),' '), chr(10),' '), chr(13),' ')     as city,\n    replace(replace(replace(state,          chr(9),' '), chr(10),' '), chr(13),' ')     as state,\n    replace(replace(replace(postcode,       chr(9),' '), chr(10),' '), chr(13),' ')     as postcode,\n    replace(replace(replace(country,        chr(9),' '), chr(10),' '), chr(13),' ')     as country,\n    replace(replace(replace(email,          chr(9),' '), chr(10),' '), chr(13),' ')     as email,\n    replace(replace(replace(phone_home,     chr(9),' '), chr(10),' '), chr(13),' ')     as phone_home,\n    replace(replace(replace(phone_work,     chr(9),' '), chr(10),' '), chr(13),' ')     as phone_work,\n    replace(replace(replace(phone_mobile,   chr(9),' '), chr(10),' '), chr(13),' ')     as phone_mobile,\n    --dont want to output gender anymore as it's pants - want to derive for all then update after cleaning\n    'X'                                                                                 as gender,\n    replace(replace(replace(www,            chr(9),' '), chr(10),' '), chr(13),' ')     as www,\n    replace(replace(replace(job_title,      chr(9),' '), chr(10),' '), chr(13),' ')     as job_title,\n    ''                                                                                  as company_group_ref\nfrom ${Database}.temp.build_names_to_clean_temp;\n--where source_date >= current_date-2;\n\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_names_pre_clean',\n    '${Database}.temp.build_names_to_clean',\n    'total name urns',\n    cast(count(*) as varchar(10)),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_names_to_clean;\n\ndelete\nfrom ${Database}.db.names_cleaned\nwhere trim(name_urn) in\n    (\n        select trim(name_urn)\n        from ${Database}.temp.build_names_to_clean\n    );\n\nalter warehouse set warehouse_size = 'Xsmall';\n\nupdate ${Database}.db.build_dates\nset nestle_names_pre_clean = CURRENT_TIMESTAMP::timestamp_ntz\nwhere trim(build_flag) = 'C';\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_names_pre_clean',\n    '*************************',\n    '*************************',\n    'end of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 2 Pre Clean'\n, \t\t'SCRIPT'\n, \t\t'FINISHED'\n;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196007":{"id":196007,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":242307435,"x":-304,"y":-80,"width":32,"height":32,"inputConnectorIDs":[196012],"outputSuccessConnectorIDs":[196009],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"5":{"slot":5,"fromId":null,"fromName":"Status","mapTo":"Error_Status"},"6":{"slot":6,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"7":{"slot":7,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Snowflake Galvani 0"}}}},"visible":true},"2":{"slot":2,"name":"dt","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"DATETIME","value":"2020-02-26"}}}},"visible":true},"3":{"slot":3,"name":"Client","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${Database}"}}}},"visible":true},"4":{"slot":4,"name":"Schema","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"TEMP"}}}},"visible":true},"5":{"slot":5,"name":"Database","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${Database}"}}}},"visible":true},"6":{"slot":6,"name":"SQSQueue","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${SQSClient}_capscan.fifo"}}}},"visible":true},"7":{"slot":7,"name":"Diacritic","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"DECIMAL","value":"0"}}}},"visible":true},"8":{"slot":8,"name":"TableName","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"BUILD_NAMES_TO_CLEAN"}}}},"visible":true},"9":{"slot":9,"name":"CheckVolume","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"DECIMAL","value":"1"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196008":{"id":196008,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-208,"y":-80,"width":32,"height":32,"inputConnectorIDs":[196009],"outputSuccessConnectorIDs":[196015],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Log Galvani"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"insert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect\nCURRENT_TIMESTAMP::timestamp_ntz\n,'${Database}'\n,'BUILD'\n,'Galvani'\n,'SCRIPT'\n,'FINISHED'\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196010":{"id":196010,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-512,"y":-80,"width":32,"height":32,"inputConnectorIDs":[196013],"outputSuccessConnectorIDs":[196014],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc 1 Start Build"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nKognitio Program  : Nestle Start New Build\nAuthor            : Lindsay Timms\nClient Name       : Nestle\nJob Number        : \nStandard Machine  : Kognitio\nAmendment History : v01 - LT 20161216 - Created\n******************************************************************************************/\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 1 Start Build'\n, \t\t'SCRIPT'\n, \t\t'STARTED'\n;\n\n/******************************************************************************************\n                                UPDATE BUILD DATES TABLE\n******************************************************************************************/\n\n-- CHECK GONEAWAY UNIQUENESS - IF THERE IS A PROBLEM THEN NEED TO FIX BEFORE BUILD RUNS\ninsert into ${Database}.db.build_log \nselect \n    'nestle_start_new_build',\n    '*************************',\n    '*************************',\n    'start of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;  \n\nupdate   ${Database}.db.build_dates\nset      build_flag = case when build_flag = 'C' then 'P' else '' end;\n\ninsert into ${Database}.db.build_dates \n(\n    build_date,\n    build_yyyymmdd,\n    build_flag,\n    build_version,\n    notes\n)\nselect  \n    current_date,\n    to_char(current_date,'yyyymmdd'),\n    'C',\n    '0.1',\n    '';   \n\ninsert into ${Database}.db.build_log \nselect  \n    'nestle_start_new_build',\n    '${Database}.db.build_dates',\n    'current build' ,\n    build_yyyymmdd,\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.db.build_dates \nwhere build_flag = 'C';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_start_new_build',\n    '${Database}.db.build_dates',\n    'previous build',\n    build_yyyymmdd,\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.db.build_dates \nwhere build_flag = 'P';\n\nupdate ${Database}.db.build_dates\nset nestle_start_new_build = CURRENT_TIMESTAMP::timestamp_ntz\nwhere build_flag = 'C';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_start_new_build',\n    '*************************',\n    '*************************',\n    'end of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 1 Start Build'\n, \t\t'SCRIPT'\n, \t\t'FINISHED'\n;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196011":{"id":196011,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-80,"y":-80,"width":32,"height":32,"inputConnectorIDs":[196015],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc 3 Post Clean"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nKognitio Program  : Nestle Names Post clean\nAuthor            : Lindsay Timms\nClient Name       : Nestle\nJob Number        : \nStandard Machine  : Kognitio\nAmendment History : v01 - LT 20161216 - created\n******************************************************************************************/\n\n\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 3 Post Clean'\n, \t\t'SCRIPT'\n, \t\t'STARTED'\n;\n\n\n/******************************************************************************************\n                                        NAMES POST CLEAN\n******************************************************************************************/\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_names_post_clean',\n    '*************************',\n    '*************************',\n    'start of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;  \n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_names_post_clean',\n    '${Database}.temp.build_names_to_clean_clean',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_names_to_clean_clean; \n\n/******************************************************************************************\n                                   CLEAN and VALIDATE\n******************************************************************************************/\n\nupdate ${Database}.temp.build_names_to_clean_clean\nset\n    phone_home          = phone_mobile, -- set home number to be the same as the mobile number\n    phone_home_score    = 1             -- and set the phone_home_score to good\nwhere\n    (\n        trim(phone_home) = ''                 -- where there is no home number\n        or phone_home_score = -1        -- or the home number was bad\n    ) \n    and trim(phone_mobile) > ''               -- but only if the mobile number is populated\n    and phone_mobile_score  = 1         -- and is valid\n    and phone_mobile not like '+44 7%'  -- and its not a mobile - dont want to move mobiles into home number\n    and trim(cc_iso) = 'GB';                  -- and is valid\n\nupdate ${Database}.temp.build_names_to_clean_clean\nset phone_mobile_score = -1             -- set mobile number to bad\nwhere trim(phone_mobile) > ''                 -- if the number if populated\n    and phone_mobile not like '+44 7%'  -- and it does not start with 07\n    and phone_mobile_score = 1          -- and is not allready bad  \n    and trim(cc_iso) = 'GB';\n \nupdate ${Database}.temp.build_names_to_clean_clean\nset phone_mobile        = phone_home,   --  set mobile number to be the same as the home number\n    phone_mobile_score  = 1,            --  and set the mobile score to good\n    phone_home          = '',\n    phone_home_score    = 0 \nwhere\n    (\n        trim(phone_mobile) = ''               --  where there is no mobile number\n        or phone_mobile_score = -1      -- or the mobile number was bad\n    )\n    and left(phone_home, 5) = '+44 7'   --  but only if the home number which starts with 07\n    and phone_home_score = 1            -- and is valid   \n    and trim(cc_iso) = 'GB';\n\n-- some getting flagged as good even though not?? need to look into cleaning routines but flag them for now\nupdate ${Database}.temp.build_names_to_clean_clean\nset phone_home_score = -1            \nwhere trim(cc_iso) = 'GB' \n    and left(trim(phone_home), 4) <> '+44 ' \n    and phone_home_score = 1;\n       \nupdate ${Database}.temp.build_names_to_clean_clean\nset phone_mobile        = phone_work,   --  set mobile number to be the same as the work number\n    phone_mobile_score  = 1,            --  and set the mobile score to good\n    phone_work          = '',\n    phone_work_score    = 0 \nwhere    \n    (\n        trim(phone_mobile) = ''               --  where there is no mobile number\n        or phone_mobile_score = -1      -- or the mobile number was bad\n    )\n    and left(phone_work ,5) = '+44 7'   --  but only if the home number which starts with 07\n    and phone_work_score = 1            -- and is valid   \n    and trim(cc_iso) = 'GB';\n\n--some getting flaggeed as good even though not?? need to look into cleaning routines but flag them for now\nupdate ${Database}.temp.build_names_to_clean_clean\nset phone_work_score = -1            \nwhere trim(cc_iso) = 'GB' \n    and left(phone_work, 4) <>'+44 ' \n    and phone_work_score = 1;\n\nupdate ${Database}.temp.build_names_to_clean_clean\nset add2         = paf_add1,\n    add3         = paf_add2,\n    add4         = paf_add3,\n    add5         = paf_add4,\n    add6         = paf_add5,\n    add7         = paf_add6,\n    postcode     = paf_postcode,\n    city         = paf_city,\n    state        = paf_state\nwhere lower(trim(address_quality)) in ('paf standard (v)', 'paf standard (c)') \n    and trim(paf_organisation) = ''\n    and lower(add1) regexp '(.*)(flat|room|apt|apartment)(.*)'\n    and lower(paf_add1) not regexp '(.*)(flat|room|apt|apartment)(.*)'\n    and replace(replace(replace(trim(add2), ' ', ''), '.', ''), chr(39),'') = replace(replace(replace(trim(paf_add1), ' ', ''), '.', ''), chr(39), '')\n    and not\n        (\n            lower(add2) regexp '(.*)(^flat | flat|^room | room|^apt | apt|apartment)(.*)' \n            and lower(paf_add1) not regexp '(.*)(^flat | flat|^room | room|^apt | apt|apartment)(.*)' \n            and lower(paf_add2) not regexp '(.*)(^flat | flat|^room | room|^apt | apt|apartment)(.*)' \n        );\n\nupdate ${Database}.temp.build_names_to_clean_clean\nset add1         = paf_add1,\n    add2         = paf_add2,\n    add3         = paf_add3,\n    add4         = paf_add4,\n    add5         = paf_add5,\n    add6         = paf_add6,\n    add7         = '',\n    postcode     = paf_postcode,\n    city         = paf_city,\n    state        = paf_state\nwhere lower(trim(address_quality)) in ('paf standard (v)', 'paf standard (c)')  \n    and trim(paf_organisation) = ''\n    and not(lower(add1) regexp '(.*)(flat|room|apt|apartment)(.*)'\n    and lower(paf_add1) not regexp '(.*)(flat|room|apt|apartment)(.*)'\n    and replace(replace(replace(trim(add2),' ',''),'.',''),chr(39),'') = replace(replace(replace(trim(paf_add1),' ',''),'.',''),chr(39),''))\n    and not\n        (\n            lower(add2) regexp '(.*)(^flat | flat|^room | room|^apt | apt|apartment)(.*)' \n            and lower(paf_add1) not regexp '(.*)(^flat | flat|^room | room|^apt | apt|apartment)(.*)' \n            and lower(paf_add2) not regexp '(.*)(^flat | flat|^room | room|^apt | apt|apartment)(.*)' \n        );\n\n-- where org match only use paf org where cap_org_match = y else leave the data as it is\nupdate ${Database}.temp.build_names_to_clean_clean\nset add1         = paf_organisation,\n    add2         = paf_add1,\n    add3         = paf_add2,\n    add4         = paf_add3,\n    add5         = paf_add4,\n    add6         = paf_add5,\n    add7         = paf_add6,\n    postcode     = paf_postcode,\n    city         = paf_city,\n    state        = paf_state\nwhere lower(trim(address_quality)) in ('paf standard (v)', 'paf standard (c)') \n    and trim(paf_organisation) > '' \n    and trim(cap_org_match) = 'Y';\n\nupdate ${Database}.temp.build_names_to_clean_clean\nset postcode = paf_postcode\nwhere lower(trim(address_quality)) in ('paf standard (v)','paf standard (c)','paf premise','paf street');\n\n--  need to preserve a clean table\n-- insert the cleaned records back in to the clean table \ninsert into ${Database}.db.names_cleaned    \nselect  ntkc.CLEAN_URN\n    ,trim(ntkc.TITLE) as     TITLE\n    ,trim(ntkc.FIRSTNAME) as     FIRSTNAME\n    ,trim(ntkc.LASTNAME) as     LASTNAME\n    ,trim(ntkc.COMPANY) as     COMPANY\n    ,trim(ntkc.ADD1) as     ADD1\n    ,trim(ntkc.ADD2) as     ADD2\n    ,trim(ntkc.ADD3) as     ADD3\n    ,trim(ntkc.ADD4) as     ADD4\n    ,trim(ntkc.ADD5) as     ADD5\n    ,trim(ntkc.ADD6) as     ADD6\n    ,trim(ntkc.ADD7) as     ADD7\n    ,trim(ntkc.POSTCODE) as     POSTCODE\n    ,trim(ntkc.CITY) as     CITY\n    ,trim(ntkc.STATE) as     STATE\n    ,trim(ntkc.COUNTRY) as     COUNTRY\n    ,trim(ntkc.COUNTRY_CLEAN) as    COUNTRY_CLEAN\n    ,trim(ntkc.CC_ISO) as     CC_ISO\n    ,trim(ntkc.PHONE_HOME) as     PHONE_HOME\n    ,trim(ntkc.PHONE_HOME_DUPE) as    PHONE_HOME_DUPE\n    ,trim(ntkc.PHONE_WORK) as    PHONE_WORK\n    ,trim(ntkc.PHONE_WORK_DUPE) as     PHONE_WORK_DUPE\n    ,trim(ntkc.PHONE_MOBILE) as     PHONE_MOBILE\n    ,trim(ntkc.JOB_TITLE) as     JOB_TITLE\n    ,trim(ntkc.EMAIL) as     EMAIL\n    ,trim(ntkc.EMAIL_DOMAIN) as     EMAIL_DOMAIN\n    ,trim(ntkc.WWW) as     WWW\n    ,trim(ntkc.GENDER) as     GENDER\n    ,trim(ntkc.COMPANY_DUPE) as     COMPANY_DUPE\n    ,trim(ntkc.COMPANY_TYPE) as     COMPANY_TYPE\n    ,trim(ntkc.COMPANY_GEO) as     COMPANY_GEO\n    ,trim(ntkc.COMPANY_GROUP_REF) as     COMPANY_GROUP_REF\n    ,ntkc.DERIVED_COMPANY\n    ,ntkc.DERIVED_COUNTRY\n    ,ntkc.FIRSTNAMECHECK\n    ,ntkc.TITLECHECK\n    ,trim(ntkc.CITY_STATUS) as     CITY_STATUS\n    ,trim(ntkc.STATE_STATUS) as     STATE_STATUS\n    ,ntkc.NAME_SCORE\n    ,ntkc.COMPANY_SCORE\n    ,ntkc.ADDRESS_SCORE\n    ,ntkc.EMAIL_SCORE\n    ,ntkc.PHONE_HOME_SCORE\n    ,ntkc.PHONE_WORK_SCORE\n    ,ntkc.PHONE_MOBILE_SCORE\n    ,ntkc.JOB_TITLE_SCORE\n    ,trim(ntkc.NAME_VALIDATION) as     NAME_VALIDATION\n    ,trim(ntkc.NAME_CLEANING) as     NAME_CLEANING\n    ,trim(ntkc.COMPANY_VALIDATION) as     COMPANY_VALIDATION\n    ,trim(ntkc.COMPANY_CLEANING) as     COMPANY_CLEANING\n    ,trim(ntkc.ADDRESS_VALIDATION) as     ADDRESS_VALIDATION\n    ,trim(ntkc.ADDRESS_CLEANING) as     ADDRESS_CLEANING\n    ,trim(ntkc.ADDRESS_QUALITY) as     ADDRESS_QUALITY\n    ,trim(ntkc.ADDRESS_TYPE) as     ADDRESS_TYPE\n    ,trim(ntkc.COUNTRY_VALIDATION) as     COUNTRY_VALIDATION\n    ,trim(ntkc.COUNTRY_CLEANING) as     COUNTRY_CLEANING\n    ,trim(ntkc.EMAIL_VALIDATION) as     EMAIL_VALIDATION\n    ,trim(ntkc.EMAIL_CLEANING) as     EMAIL_CLEANING\n    ,trim(ntkc.PHONE_HOME_VALIDATION) as     PHONE_HOME_VALIDATION\n    ,trim(ntkc.PHONE_HOME_CLEANING) as     PHONE_HOME_CLEANING\n    ,trim(ntkc.PHONE_WORK_VALIDATION) as     PHONE_WORK_VALIDATION\n    ,trim(ntkc.PHONE_WORK_CLEANING) as     PHONE_WORK_CLEANING\n    ,trim(ntkc.PHONE_MOBILE_VALIDATION) as     PHONE_MOBILE_VALIDATION\n    ,trim(ntkc.PHONE_MOBILE_CLEANING) as     PHONE_MOBILE_CLEANING\n    ,trim(ntkc.JOB_TITLE_VALIDATION) as     JOB_TITLE_VALIDATION\n    ,trim(ntkc.JOB_TITLE_CLEANING) as     JOB_TITLE_CLEANING\n    ,trim(ntkc.PAF_ADD1) as     PAF_ADD1\n    ,trim(ntkc.PAF_ADD2) as     PAF_ADD2\n    ,trim(ntkc.PAF_ADD3) as     PAF_ADD3\n    ,trim(ntkc.PAF_ADD4) as     PAF_ADD4\n    ,trim(ntkc.PAF_ADD5) as     PAF_ADD5\n    ,trim(ntkc.PAF_ADD6) as     PAF_ADD6\n    ,trim(ntkc.PAF_CITY) as     PAF_CITY\n    ,trim(ntkc.PAF_STATE) as     PAF_STATE\n    ,trim(ntkc.PAF_POSTCODE) as     PAF_POSTCODE\n    ,trim(ntkc.PAF_ORGANISATION) as     PAF_ORGANISATION\n    ,trim(ntkc.CAP_MATCH_LEVEL) as     CAP_MATCH_LEVEL\n    ,trim(ntkc.CAP_POSTCODE_CHANGE_LEVEL) as     CAP_POSTCODE_CHANGE_LEVEL\n    ,ntkc.CAP_ADDRESS_MATCHING_SCORE\n    ,trim(ntkc.CAP_OUTPUT_STATUS) as     CAP_OUTPUT_STATUS\n    ,trim(ntkc.CAP_MATCH_STATUS) as     CAP_MATCH_STATUS\n    ,trim(ntkc.CAP_PREMISE_MATCH) as     CAP_PREMISE_MATCH\n    ,trim(ntkc.CAP_ORG_MATCH) as     CAP_ORG_MATCH\n    ,trim(ntkc.CAP_PROCESS) as     CAP_PROCESS\n    ,trim(ntkc.CAP_BATCH) as     CAP_BATCH\n    ,trim(ntkc.CAP_ADDRESS_KEY) as     CAP_ADDRESS_KEY\n    ,trim(ntkc.CAP_ORGANISATION_KEY) as     CAP_ORGANISATION_KEY\n    ,trim(ntkc.CKEY_SLIM) as     CKEY_SLIM\n    ,trim(ntkc.FKEY_SLIM) as     FKEY_SLIM\n    ,trim(ntkc.CKEY) as     CKEY\n    ,trim(ntkc.FKEY) as     FKEY\n    ,trim(ntkc.HKEY) as     HKEY\n    ,ntc.bbw_urn as db_bbw_urn\n    ,trim(ntc.name_urn) as     name_urn\n    ,trim(ntc.region) as     region\n    ,trim(ntc.gender) as  original_gender\n    ,cast(ntc.dob as date) as dob\n    ,trim(ntc.source) as     source\n    ,ntc.source_date\n    ,ntc.data_date\n    ,ntc.reg_date\n    ,trim(ntc.source_file) as     source_file\n    ,trim(ntc.source_urn) as     source_urn\n    ,ntc.source_data_controller_id\n    ,ntc.source_brand_id\nfrom ${Database}.temp.build_names_to_clean_clean ntkc \ninner join ${Database}.temp.build_names_to_clean_temp ntc on ntkc.clean_urn = ntc.bbw_urn\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_names_post_clean',\n    '${Database}.db.names_cleaned',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.db.names_cleaned; \n\ndrop table ${Database}.temp.build_names_to_clean_clean;\n\n\n/******************************************************************************************\n                                      Finish proc\n******************************************************************************************/\n\nupdate   ${Database}.db.build_dates\nset      nestle_names_post_clean = CURRENT_TIMESTAMP::timestamp_ntz\nwhere    build_flag = 'C';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_names_post_clean',\n    '*************************',\n    '*************************',\n    'end of script',\n    CURRENT_TIMESTAMP::timestamp_ntz ;  \n\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 3 Post Clean'\n, \t\t'SCRIPT'\n, \t\t'FINISHED'\n;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"196009":{"id":196009,"sourceID":196007,"targetID":196008},"196012":{"id":196012,"sourceID":196005,"targetID":196007},"196014":{"id":196014,"sourceID":196010,"targetID":196005},"196015":{"id":196015,"sourceID":196008,"targetID":196011}},"failureConnectors":{},"unconditionalConnectors":{"196013":{"id":196013,"sourceID":196004,"targetID":196010}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{},"variables":{},"grids":{}},"info":{"name":"Nestle Names Cleaned","description":"","type":"ORCHESTRATION","tag":"a9d3afe9-1e6c-4abf-9a8e-2bf5501cb0d4"}}