{"job":{"components":{"195689":{"id":195689,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-864,"y":176,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[195710],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"195692":{"id":195692,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-736,"y":80,"width":32,"height":32,"inputConnectorIDs":[195703],"outputSuccessConnectorIDs":[195733],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc 14 Data Outputs"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\n   MySQL Program     : nestle_data_outputs\n   Author            : Suze Berry\n   Client Name       : Nestle\n   Job Number        : \n   Standard Machine  : SQL4\n   Amendment History : v01 - KD 20081218 - First version\n                       v02 - MM 20090608 - Changed file path and added date\n                                         - Added transactional output\n                       v03 - KD 20090916 - New dedupe and build schema\n                       v04 - SM 20091102 - New suppression files for mail and email \n                       v05 - SB 20170309 - KOG conversion\n                       v06 - SB 20170331 - amend to only output Business Unit of Nestle Ltd\n                       v07 - SB 20170418 - new exclusion for all emailable / mailable\n******************************************************************************************/\n\n/*\nWeekly outputs!\n\nAmendments agreed with LB for new AiO suppression extract files.\n\nFULL NESTLE DB ( to include HCP, SMA, NPP )\n\nFile extract level unique per person per business unit\n\n*/\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 14 Nestle Data Outputs'\n, \t\t'SCRIPT'\n, \t\t'STARTED'\n;\n\n\nalter warehouse set warehouse_size = 'Small';\n\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_data_outputs',\n    '*************************',\n    '*************************',\n    'start of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;  \n\n\n/******************************************************************************************\n   MAIL\n******************************************************************************************/\n\n--nestle build has been split so assume all tables are on disk now;\n\ndrop table if exists ${Database}.temp.nestle_suppression_extract_mail_prep;\n\nCREATE OR REPLACE TABLE ${Database}.temp.nestle_suppression_extract_mail_prep\nas\nselect distinct\n    nm.cid,\n    nm.source_data_controller_id,\n    first_value(nm.name_urn) over\n        (\n            partition by nm.cid\n            order by \n                case when nm.add1 > '' and nm.postcode > '' then 1 else 0 end desc,\n                nm.data_date desc nulls last, \n                nm.reg_date desc nulls last,\n                nm.source_date desc nulls last   \n        ) as name_urn\nfrom ${Database}.live.names nm\ninner join ${Database}.live.names_supps ns on nm.name_urn = ns.name_urn\n                                     and\n                                        (\n                                            supp_manual_channel_mail     = 1\n                                            or supp_dead         = 1\n                                            or supp_goneaway    = 1\n                                            or supp_child         = 1\n                                        )\nwhere nm.add1 > ''     \n    and nm.postcode > ''         -- populated address!\n    and nm.cid not in (select cid from ${Database}.live.cid_business_unit where business_unit_id = 1 and mailable = 1); -- exclude all mailable people\n\ninsert into ${Database}.temp.nestle_suppression_extract_mail_prep\nselect distinct\n    nm.cid,\n    1 as source_data_controller_id,\n    first_value(nm.name_urn) over\n        (\n            partition by nm.cid\n            order by \n                case when nm.add1 > '' and nm.postcode > '' then 1 else 0 end desc,\n                nm.data_date desc nulls last, \n                nm.reg_date desc nulls last,\n                nm.source_date desc nulls last   \n        ) as name_urn\nfrom ${Database}.live.names nm\ninner join ${Database}.live.names_supps_dp_brand_email ns on nm.cid = ns.cid\n                                                    and ns.business_unit_id = 1 --nestle uk\n                                                    and    \n                                                    (\n                                                        ns.supp_unsubscribe_channel_mail = 1\n                                                        or ns.dp_mailable = 0\n                                                    )\nwhere nm.add1 > ''     \n    and nm.postcode > ''         -- populated address!\n    and nm.cid not in (select cid from ${Database}.live.cid_business_unit where business_unit_id = 1 and mailable = 1)\n    and nm.cid not in (select cid from ${Database}.temp.nestle_suppression_extract_mail_prep); -- exclude all mailable people\n                        \n\n\ndrop table if exists ${Database}.jobs.nestle_suppression_extract_mail;\n\nCREATE OR REPLACE TABLE ${Database}.jobs.nestle_suppression_extract_mail\nas\nselect \n      nm.title\n,     nm.firstname\n,     nm.lastname\n,     nm.add1\n,     nm.add2\n,     nm.add3\n,     nm.city as add4\n,     nm.state as add5\n,     nm.postcode\n,     bu.business_unit\nfrom ${Database}.temp.nestle_suppression_extract_mail_prep pr\ninner join ${Database}.live.names nm on pr.name_urn = nm.name_urn\ninner join ${Database}.live.ref_business_unit bu on pr.source_data_controller_id = bu.business_unit_id;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_data_outputs',\n    '${Database}.jobs.nestle_suppression_extract_mail',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.jobs.nestle_suppression_extract_mail;  \n\n\n/******************************************************************************************\n   EMAIL\n******************************************************************************************/\n\n\ndrop table if exists ${Database}.jobs.nestle_suppression_extract_email;\n\nCREATE OR REPLACE TABLE ${Database}.jobs.nestle_suppression_extract_email\nas\nselect distinct\n    nm.email,\n    first_value(rf.data_controller) over\n        (\n            partition by nm.email\n            order by \n                case when nm.email > '' then 1 else 0 end desc,\n                nm.data_date desc nulls last, \n                nm.reg_date desc nulls last,\n                nm.source_date desc nulls last   \n        ) as business_unit\nfrom ${Database}.live.names nm\ninner join ${Database}.live.names_supps ns on nm.name_urn = ns.name_urn\n                                     and\n                                        (\n                                            supp_manual_channel_email     = 1\n                                            or supp_dead         = 1\n                                            or supp_goneaway    = 1\n                                            or supp_child         = 1\n                                        )\ninner join ${Database}.live.ref_data_controller rf on nm.source_data_controller_id = rf.data_controller_id                                        \nwhere nm.email > ''     \n    and nm.cid not in (select cid from ${Database}.live.cid_business_unit where business_unit_id = 1 and emailable = 1); -- exclude all emailable people\n\n\ninsert into ${Database}.jobs.nestle_suppression_extract_email\nselect distinct\n    nm.email,\n    rf.business_unit\nfrom ${Database}.live.names nm\ninner join ${Database}.live.names_supps_dp_brand_email ns on nm.cid = ns.cid\n                                                    and ns.business_unit_id = 1 --nestle uk\n                                                    and    \n                                                    (\n                                                        ns.supp_unsubscribe_channel_email = 1\n                                                        or ns.dp_emailable = 0\n                                                    )\ninner join ${Database}.live.ref_business_unit rf on ns.business_unit_id = rf.business_unit_id\nwhere nm.email > ''     \n    and nm.cid not in (select cid from ${Database}.live.cid_business_unit where business_unit_id = 1 and mailable = 1)\n    and nm.email not in (select email from ${Database}.jobs.nestle_suppression_extract_email); -- exclude all mailable people\n\nalter warehouse set warehouse_size = 'Xsmall';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_data_outputs',\n    '${Database}.jobs.nestle_suppression_extract_email',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.jobs.nestle_suppression_extract_email;\n\n\n/******************************************************************************************\n   NESTLE DULCE GUSTO\n******************************************************************************************/\n\ndrop table if exists ${Database}.temp.supps_for_ndg;\n\nCREATE OR REPLACE TABLE ${Database}.temp.supps_for_ndg as\nselect     \n    distinct xref.cid,\n     n.name_urn,\n     n.firstname,\n     n.lastname,\n     n.add1,\n     n.add2,\n     n.add3,\n     n.add4,\n     n.add5,\n     n.city,\n     n.state,\n     n.postcode,\n     n.country,\n     n.email,\n     sm.supp_urn\nfrom ${Database}.db.supps_manual sm\ninner join ${Database}.live.xref_name_urn xref on xref.email = trim(sm.email)\ninner join ${Database}.live.xref_name_urn xref2 on xref2.cid = xref.cid\ninner join ${Database}.live.names n on xref2.name_urn = n.name_urn\nwhere lower(sm.source) regexp '.*ir web form rtbf.*'\nand trim(sm.email) > ''\nand sm.source_date >= dateadd(day,-6,current_date())\n;\n\n--add what we have in supps table for people not picked up \n\ndrop table if exists ${Database}.jobs.supps_for_ndg_final;\n\nCREATE OR REPLACE TABLE ${Database}.jobs.supps_for_ndg_final as \nselect      \n    distinct firstname,\n     lastname,\n     email,\n     add1,\n     add2,\n     add3,\n     add4,\n     add5,\n     city,\n     state,\n     postcode,\n     country\nfrom ${Database}.temp.supps_for_ndg\n\nunion all\n\nselect     \n    distinct \n    trim(firstname) as firstname,\n     trim(lastname) as lastname,\n     trim(email) as email,\n     trim(add1) as add1,\n     trim(add2) as add2,\n     trim(add3) as add3,\n     trim(add4) as add4,\n     trim(add5) as add5,\n     '' as city,\n     '' as state,\n     trim(postcode) as postcode,\n     trim(country) as country\nfrom ${Database}.db.supps_manual\nwhere lower(source) regexp '.*ir web form rtbf.*'\nand source_date >= dateadd(day,-6,current_date())\n;  \n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_data_outputs',\n    '${Database}.jobs.supps_for_ndg_final',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.jobs.supps_for_ndg_final;\n\n/******************************************************************************************\n   NESTLE DULCE GUSTO for ec4u\n******************************************************************************************/\n\ndrop table if exists ${Database}.temp.ndg_supps_for_ec4u_lookup;\n\nCREATE OR REPLACE TABLE ${Database}.temp.ndg_supps_for_ec4u_lookup as\nselect     distinct xref.cid\n,     trim(dp.name_urn) as name_urn\n,     dp.dp_date \n,     dp.dp_emailable\n,     n.email\n,     n.firstname\n,     n.lastname\n,     n.add1\n,     n.add2    \n,     n.add3\n,     n.add4\n,     n.add5\n,     n.city\n,     n.state\n,     n.postcode\n,     n.country\nfrom         ${Database}.db.names_dp dp\ninner join     ${Database}.live.names n on n.name_urn = trim(dp.name_urn)\ninner join     ${Database}.live.xref_name_urn xref on trim(dp.name_urn) = xref.name_urn\nwhere     dp_date >= dateadd(day,-6,current_date())\n;\n\ndrop table if exists ${Database}.temp.ndg_supps_for_ec4u_supps_manual;\nCREATE OR REPLACE TABLE ${Database}.temp.ndg_supps_for_ec4u_supps_manual as\n    select distinct trim(sm.email) as email,\n       first_value(sm.data_date) over (partition by trim(sm.email) order by sm.data_date desc) as manual_unsub_date --doesn't matter which date we choose but this will reduce duplicate records \n    from ${Database}.db.supps_manual sm;\n\n\ndrop table if exists ${Database}.temp.ndg_supps_for_ec4u_supps_unsubscribe;\nCREATE OR REPLACE TABLE ${Database}.temp.ndg_supps_for_ec4u_supps_unsubscribe as\n    select distinct trim(email) as email,\n        first_value(data_date) over (partition by email order by data_date desc) as data_date \n    from ${Database}.db.supps_unsubscribe \n    where data_date >= dateadd(day,-6,current_date()) --unsub in the last week\n    and trim(email) <> '';\n\n\ndrop table if exists ${Database}.temp.ndg_supps_for_ec4u_lookup_supps;\nCREATE OR REPLACE TABLE ${Database}.temp.ndg_supps_for_ec4u_lookup_supps as\nselect     distinct el.cid\n,     first_value(el.dp_date) over (partition by el.cid, el.email order by el.dp_date desc) as most_recent_dp_date \n,     first_value(el.dp_emailable) over (partition by el.cid, el.email order by el.dp_date desc) as most_recent_dp_emailable\n,     el.email\n,     el.firstname\n,     el.lastname\n,     el.add1\n,     el.add2    \n,     el.add3\n,     el.add4\n,     el.add5\n,     el.city\n,     el.state\n,     el.postcode\n,     el.country\n,     case when sm.email is null then 0 else 1 end as manual_unsub\n,     sm.manual_unsub_date\n,     case when su.email is null then 0 else 1 end as unsubbed_this_week\n,     su.data_date unsub_date\nfrom         ${Database}.temp.ndg_supps_for_ec4u_lookup el\nleft join     ${Database}.temp.ndg_supps_for_ec4u_supps_manual sm on sm.email = el.email --ever had a manual supp\nleft join         ${Database}.temp.ndg_supps_for_ec4u_supps_unsubscribe su on su.email = el.email  \n;\n\ndrop table if exists ${Database}.temp.ndg_supps_for_ec4u_supps_manual;\ndrop table if exists ${Database}.temp.ndg_supps_for_ec4u_supps_unsubscribe;\n\ndrop table if exists ${Database}.temp.ndg_supps_for_ec4u_pre_dedupe;\n\nCREATE OR REPLACE TABLE ${Database}.temp.ndg_supps_for_ec4u_pre_dedupe as\nselect     distinct  cid\n,     case when manual_unsub = 1 then manual_unsub_date\n               when unsub_date > most_recent_dp_date then unsub_date\n               else most_recent_dp_date end as time_stamp\n,     firstname\n,     lastname\n,     email\n,     add1\n,     add2    \n,     add3\n,     add4\n,     add5\n,     city\n,     state\n,     postcode\n,     country \nfrom   (\n        select *\n        ,     first_value(case when manual_unsub = 1 then 0 --manual unsub supercedes positive dp\n                               when unsub_date > most_recent_dp_date then 0\n                               when most_recent_dp_emailable = 1 then 1 else 0 end) \n                    over (partition by cid, email order by cid) as opt_in_status\n        from ${Database}.temp.ndg_supps_for_ec4u_lookup_supps \n        ) a\nwhere opt_in_status = 0\n;\n\ndrop table if exists ${Database}.temp.ndg_supps_for_ec4u_dedupe;\n\nCREATE OR REPLACE TABLE ${Database}.temp.ndg_supps_for_ec4u_dedupe as\nselect     distinct  cid\n,     time_stamp\n,     firstname\n,     lastname\n,     email\n,     add1\n,     add2    \n,     add3\n,     add4\n,     add5\n,     city\n,     state\n,     postcode\n,     country\n,     row_number() over (partition by cid, email order by 1) as run\nfrom   ${Database}.temp.ndg_supps_for_ec4u_pre_dedupe\n;\n\ndrop table if exists ${Database}.jobs.ndg_supps_for_ec4u_final;\n\nCREATE OR REPLACE TABLE ${Database}.jobs.ndg_supps_for_ec4u_final as\nselect time_stamp\n,     firstname\n,     lastname\n,     email\n,     add1\n,     add2    \n,     add3\n,     add4\n,     add5\n,     city\n,     state\n,     postcode\n,     country\nfrom ${Database}.temp.ndg_supps_for_ec4u_dedupe\nwhere run = 1\n\nunion all\n\nselect time_stamp\n,     firstname\n,     lastname\n,     email\n,     add1\n,     add2\n,     add3\n,     add4\n,     add5\n,     city\n,     state\n,     postcode\n,     country\nfrom ${Database}.temp.ndg_supps_for_ec4u_dedupe\nwhere run > 1\nand (firstname <> '' or lastname <> '')\nand (add1 <> '' and postcode <> '')\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_data_outputs',\n    '${Database}.jobs.ndg_supps_for_ec4u_final',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.jobs.ndg_supps_for_ec4u_final;\n\n/******************************************************************************************\n        NESTLE STOP FILES\n******************************************************************************************/\n\n--Unsubscribes\n\n--in case of build failures/reruns\ndelete \nfrom ${Database}.db.NUK_stop_file_history\nwhere date_of_send = current_date()\nand lower(file_type) regexp '.*unsubs.*'\n;\n\ndrop table if exists ${Database}.temp.NUK_stop_file_unsubs_prep;\nCREATE OR REPLACE TABLE ${Database}.temp.NUK_stop_file_unsubs_prep\nas\nselect \n    xr.cid,\n    initcap(un.firstname) as first_name,\n    initcap(un.lastname) as last_name,\n    lower(un.email) as email,\n    un.data_controller_id,\n    un.brand_id,\n    max(data_date) as data_date\nfrom ${Database}.db.supps_unsubscribe un\nleft join ${Database}.live.xref_email xr on lower(un.email) = lower(xr.email)\nleft join ${Database}.db.ref_data_controller rdc on un.data_controller_id = rdc.data_controller_id\nwhere un.source_date > (select max(date_of_send) from ${Database}.db.NUK_stop_file_history where lower(file_type) regexp '.*unsubs.*')\nand un.source_date <= current_date\ngroup by 1,2,3,4,5,6\n;\n\n--exclude records at various levels where they have opted back in since the unsub\ndrop table if exists ${Database}.jobs.NUK_stop_file_unsubs;\nCREATE OR REPLACE TABLE ${Database}.jobs.NUK_stop_file_unsubs\nas\n--brand level\nselect distinct    \n    un.first_name,\n    un.last_name,\n    un.email,\n    rdc.data_controller,\n    rb.brand,\n    un.data_date as time_stamp\nfrom ${Database}.temp.NUK_stop_file_unsubs_prep un\nleft join ${Database}.live.ref_brand rb on rb.brand_id = un.brand_id\nleft join ${Database}.live.ref_data_controller rdc on rdc.data_controller_id = un.data_controller_id\nleft join ${Database}.live.names_supps_dp_brand_email dp on dp.cid = un.cid \n                                                   and dp.brand_id = un.brand_id\n                                                   and dp.dp_last_positive_date > un.data_date\nwhere un.brand_id is not null\nand dp.cid is null --they haven't re-opted into that brand or any higher level since\nunion all\n--Nestle market level\nselect distinct\n    un.first_name,\n    un.last_name,\n    un.email,\n    'Nestle Market - all data controllers' as data_controller,\n    rb.brand,\n    un.data_date  as time_stamp\nfrom ${Database}.temp.NUK_stop_file_unsubs_prep un\nleft join ${Database}.live.ref_brand rb on rb.brand_id > 0 --pull through every brand to cross ref dp\nleft join ${Database}.live.names_supps_dp_brand_email dp on dp.cid = un.cid \n                                                   and dp.brand_id = rb.brand_id\n                                                   and dp.dp_last_positive_date > un.data_date\nwhere (un.data_controller_id = (select data_controller_id from ${Database}.live.ref_data_controller where data_controller like 'Nestl_ UK Ltd') and un.brand_id is null)\nand dp.cid is null \nunion all\n--Purina data controller level\nselect distinct \n    un.first_name,\n    un.last_name,\n    un.email,\n    'Purina' as data_controller,\n    rb.brand,\n    un.data_date as time_stamp\nfrom ${Database}.temp.NUK_stop_file_unsubs_prep un\nleft join ${Database}.live.ref_brand rb on rb.division ilike 'petcare'\nleft join ${Database}.live.names_supps_dp_brand_email dp on dp.cid = un.cid \n                                                   and dp.brand_id = rb.brand_id\n                                                   and dp.dp_last_positive_date > un.data_date\nwhere (un.data_controller_id in (select data_controller_id \n                                 from ${Database}.live.ref_data_controller \n                                 where lower(data_controller) like 'nestl_ purina petcare (uk) ltd')\n       and un.brand_id is null)\nand dp.cid is null \nunion all\n--SMA data controller level\nselect distinct    \n    un.first_name,\n    un.last_name,\n    un.email,\n    'SMA' as data_controller,\n    '' as brand,\n    un.data_date as time_stamp\nfrom ${Database}.temp.NUK_stop_file_unsubs_prep un\nleft join ${Database}.live.names_supps_dp_brand_email dp on dp.cid = un.cid \n                                                   and dp.brand_id = un.brand_id\n                                                   and dp.dp_last_positive_date > un.data_date\nwhere (un.brand_id = (select brand_id from ${Database}.live.ref_brand where upper(brand) like 'SMA')) \nand dp.cid is null \n--manual supps are a type of unsubscribe - they're permanent so don't need to account for opting back in\nunion all\nselect distinct\n    initcap(sm.firstname) as first_name,\n    initcap(sm.lastname) as last_name,\n    sm.email,\n    rb.brand,\n    'Nestle Market - all data controllers' as data_controller,\n    sm.data_date as time_stamp\nfrom ${Database}.db.supps_manual sm\nleft join ${Database}.live.ref_brand rb on rb.brand_id > 0 --create a record for every brand since it's unsubbing at Nestle market level ***for when change to this table has been set live***\nwhere sm.source <> 'IR Web Form RTBF' --everything other than RTBF in this table is a manual supp\nand sm.source_date > (select max(date_of_send) from ${Database}.db.NUK_stop_file_history where lower(file_type) regexp '.*unsubs.*')\n;\n\ninsert into ${Database}.db.NUK_stop_file_history\n(\nfile_type,\ndate_of_send,\nnumber_of_records\n)\nselect \n    'Unsubs',\n    current_date(),\n    count(*)\nfrom ${Database}.jobs.NUK_stop_file_unsubs\n;\n\n--in case of build failures/reruns\ndelete \nfrom ${Database}.db.NUK_stop_file_history\nwhere date_of_send = current_date()\nand lower(file_type) regexp '.*rtbf.*'\n;\n\n--RTBF and Data Retention\n\ndrop table if exists ${Database}.jobs.NUK_stop_file_RTBF;\nCREATE OR REPLACE TABLE ${Database}.jobs.NUK_stop_file_RTBF\nas\nselect distinct\n    cd.firstname as first_name,\n    cd.lastname as last_name,\n    xr.email,\n    'Data Retention' as suppression_type,\n    first_value(nm.source_urn) over (partition by nm.email order by nm.data_date desc nulls last) as shopmium_reference_id\nfrom ${Database}.live.cid_brand cb\nleft join ${Database}.live.cid_details cd on cb.cid = cd.cid\nleft join ${Database}.live.ref_business_unit_brand rb on rb.brand_id = cb.brand_id\nleft join ${Database}.live.xref_email xr on xr.bbw_urn = cast(tbw.db.strchop(cb.cid_brand_urn, '-', 1,1) as int)\nleft join ${Database}.live.names nm on lower(xr.email) = lower(nm.email) and nm.source = 'REG_SHOPM'\nwhere lower(cb.customer_retention_group_brand) regexp '.*gone.*'\nand lower(cb.customer_suppression_group_brand) regexp '.*engagement.*'\nand cb.cid not in (select cid\n                   from ${Database}.live.cid_brand\n                   where customer_retention_group_brand in ('At Risk',\n                                                            'Data Orphan',\n                                                            'New',\n                                                            'Re-consent',\n                                                            'Safe')\n                  )\nand cb.customer_retention_expiry_date_brand > (select max(date_of_send) from ${Database}.db.NUK_stop_file_history where lower(file_type) regexp '.*rtbf.*')\nunion all\nselect \n    initcap(sm.firstname) as first_name,\n    initcap(sm.lastname) as last_name,\n    sm.email,\n    'RTBF' as suppression_type,\n    first_value(nm.source_urn) over (partition by nm.email order by nm.data_date desc nulls last) as shopmium_reference_id\nfrom ${Database}.db.supps_manual sm\nleft join ${Database}.live.names nm on lower(sm.email) = lower(nm.email) and nm.source = 'REG_SHOPM'\nwhere sm.source = 'IR Web Form RTBF'\nand sm.source_date > (select max(date_of_send) from ${Database}.db.NUK_stop_file_history where lower(file_type) regexp '.*rtbf.*')\n; \n\ninsert into ${Database}.db.NUK_stop_file_history\n(\nfile_type,\ndate_of_send,\nnumber_of_records\n)\nselect \n    'RTBF',\n    current_date(),\n    count(*)\nfrom ${Database}.jobs.NUK_stop_file_RTBF\n;\n\n/******************************************************************************************\n   OUTPUT\n******************************************************************************************/\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_data_outputs',\n    '*************************',\n    '*************************',\n    'end of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;  \n\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 14 Nestle Data Outputs'\n, \t\t'SCRIPT'\n, \t\t'FINISHED'\n;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"195693":{"id":195693,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-208,"y":176,"width":32,"height":32,"inputConnectorIDs":[195729],"outputSuccessConnectorIDs":[195728,195742],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc 22 NPP Qlik Output"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nProgram           : Nestle daily NPP qlik reports outputs\nAuthor            : Lindsay Timms\nClient Name       : Nestle\nJob Number        :\nStandard Machine  : Snowflake\nAmendment History : v01 - LT 20181220 - Created\n\t\t\t\t\t... - various changes undocumented \n\t\t\t\t\tv02 - LW 20210628 - Purina Lapse Risk Segment added\n                    v03 - LG 20220215 - Added brand not in clause to jobs.npp_qlik_reports_data_Pet_Unrolled table\n\t\t\t\t\tv04 - Shira Middleton NPP09202 20220428 - Added source renaming for REG_YOUR_PURINA and RESP_YOUR_PURINA in table creation 'new_to_scv'\t\n******************************************************************************************/\n\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 22 NPP Qlik'\n, \t\t'SCRIPT'\n, \t\t'STARTED'\n;\n\n\nalter warehouse set warehouse_size = 'Large';\n\ninsert into ${Database}.db.build_log\nselect    'nestle_qlik_outputs'\n,         '*************************'\n,         '*************************'\n,         'start of script'\n,         CURRENT_TIMESTAMP::timestamp_ntz\n;\n\n\n----------------------------\n--total base\n\ndrop table if exists ${Database}.temp.npp_qlik_reports_data_base;\nCREATE OR REPLACE TABLE ${Database}.temp.npp_qlik_reports_data_base\nas\nselect\n    cb.cid,\n    case when rb.brand in ('Pro Plan','Club Pro Plan') and ci.have_dog = 'N' and ci.have_cat <> 'N'  then 'Pro Plan Cat'\n            when rb.brand in ('Pro Plan','Club Pro Plan') and ci.have_dog <> 'N' and ci.have_cat = 'N' then 'Pro Plan Dog'\n            else rb.brand end as brand,\n\tcbu.acquisition_type,\n      TRIM(replace(replace(replace(replace(initcap(\n                                               case\n                                                   when cbu.acquisition_channel ilike 'historic%' then 'Historic'\n                                                   when coalesce(cbu.acquisition_channel,'') in ('','Manual') then 'Historic'\n                                                   when trim(cbu.acquisition_channel) in ('Revolution','RESP_ADVENT') then 'CIAM'\n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Social' and atj.acquisition_registration_campaign = 'Kitten Code Social' then 'Wunderman - Kitten Code Social'\n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Social' and atj.acquisition_registration_campaign = 'Better Together Social' then 'Wunderman - Better Together Social'\n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Social' and atj.acquisition_registration_campaign = 'Growing Pup Social' then 'Wunderman - Growing Pup Social'                 \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Website Registrations' and atj.acquisition_registration_campaign = 'Kitten Code' then 'Wunderman - Kitten Code Website Registration'                   \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Website Registrations' and atj.acquisition_registration_campaign = 'Better Together' then 'Wunderman - Better Together Website Registration'                  \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Website Registrations' and atj.acquisition_registration_campaign = 'Growing Pup' then 'Wunderman - Growing Pup Website Registration'                   \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Website Registrations' then 'Wunderman - Other Website Registration'                   \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Sampling' and atj.acquisition_registration_campaign in ('Go-Cat Free Sample','Go-CAT Free Sample') then 'Wunderman - Go Cat Free Sample'                  \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Sampling' and atj.acquisition_registration_campaign = 'Dentalife Dog Free Sample' then 'Wunderman - Dentalife Dog Free Sample'\n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Sampling' then 'Wunderman - Other Sample'                                                    \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) in  ('COUPON/CASHBACK','Coupon/Cashback') then 'Wunderman - Coupon/Cashback'\n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Sampling' then 'Wunderman - Other Sample'    \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Loyalty' and atj.acquisition_registration_campaign = 'Club PRO PLAN' then 'Wunderman - Club Pro Plan'  \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Event' then 'Wunderman - Event'     \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Connected Packaging' then 'Connected Packaging'  \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Trial' then 'Wunderman - Trial'  \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Competition' and atj.acquisition_registration_campaign = 'BETA Instant Win' then 'Wunderman - BETA Instant Win Competition'  \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Competition' and atj.acquisition_registration_campaign = 'Bakers Competition' then 'Wunderman - Bakers Competition'  \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Puppy pre-acquisition' and atj.acquisition_registration_campaign = 'Puppy pre-acquisition' then 'Wunderman - Puppy Pre Acquisition' \n                                                   when trim(cbu.acquisition_channel) =  'Felix SoPost (Incorrect Opt-in)' then 'SoPost'  \n                                                   when trim(cbu.acquisition_channel) = 'Better Together Christmas' then 'Better Together Christmas 2021'  \n                                                   when trim(cbu.acquisition_channel) = 'Revolution' then 'Historic'  \n                                                   when trim(cbu.acquisition_channel) in ('Qualifio Kitten Code Social Ads','Growing Pup Survey') then 'Historic'                                                  \n                                                   else replace(replace(cbu.acquisition_channel,'RESP_',''),'_',' ')\n                                               end\n                                           ),'Ciam','CIAM'),'Ces','CES'),'Sopost','SoPost'),'Gbd','GBD')) as acquisition_source,\n    upper(to_char((current_date-1),'MON-YYYY')) as month_,\n    cb.emailable,\n    cb.preferred_brand_gigya,\n    cb.first_date_brand as brand_create_date,\n    cb.customer_retention_date_brand,\n    case\n        when cb.customer_suppression_group_brand = 'Engagement' then 6\n        when cb.customer_suppression_group_brand = 'Opt-Out TM' then 1\n        when cb.first_date_brand >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') then 5 --New for dashboard = from 1st of the month onwards\n        when cb.customer_retention_group_brand = 'Re-consent' and cb.customer_retention_date_brand >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') then 1 --Re-consent for dashboard = from 1st of the month onwards\n        when cb.customer_retention_group_brand = 'New' then 2\n        when cb.customer_retention_group_brand = 'Re-consent' then 2\n        when cb.customer_retention_group_brand = 'Safe' then 2\n        when cb.customer_retention_group_brand = 'At Risk' then 3\n        when cb.customer_retention_group_brand = 'Data Orphan' then 4\n        when lower(cb.customer_retention_group_brand) regexp '.*gone this month.*' then 6\n        else 7\n    end as customer_retention_group_brand,\n    case\n        when cb.customer_suppression_group_brand = '' then 0\n        when cb.customer_suppression_group_brand = 'Deceased TM' then 1\n        when cb.customer_suppression_group_brand = 'Deceased' then 2\n        when cb.customer_suppression_group_brand = 'Manual TM' then 3\n        when cb.customer_suppression_group_brand = 'Manual' then 4\n        when cb.customer_suppression_group_brand = 'Bounce TM' then 5\n        when cb.customer_suppression_group_brand = 'Bounce' then 6\n        when cb.customer_suppression_group_brand = 'Unsub TM' then 7\n        when cb.customer_suppression_group_brand = 'Unsub' then 8\n        when cb.customer_suppression_group_brand = 'Opt-Out TM' then 9\n        when cb.customer_suppression_group_brand = 'Opt-Out' then 10\n        when cb.customer_suppression_group_brand = 'Engagement' then 11\n        else 12\n    end as customer_suppression_group_brand,\n    case\n        when cbu.customer_retention_group_business_unit = '' then 0\n        when cbu.customer_retention_group_business_unit in ('New','Re-consent','Safe') then 2\n        when cbu.customer_retention_group_business_unit = 'At Risk' then 3\n        when cbu.customer_retention_group_business_unit = 'Data Orphan' then 4\n        when cbu.customer_retention_group_business_unit = 'Gone this month' then 5\n    end as customer_retention_group_business_unit,\n    case\n        when cbu.customer_suppression_group_business_unit = '' then 0\n        when cbu.customer_suppression_group_business_unit = 'Deceased TM' then 1\n        when cbu.customer_suppression_group_business_unit = 'Manual TM' then 2\n        when cbu.customer_suppression_group_business_unit = 'Bounce TM' then 3\n        when cbu.customer_suppression_group_business_unit = 'Unsub TM' then 4\n        when cbu.customer_suppression_group_business_unit = 'Opt-Out TM' then 5\n        when cbu.customer_suppression_group_business_unit = 'Engagement' then 6\n        else 7\n    end as customer_suppression_group_business_unit,\n    case\n        when ci.have_dog <> 'N' and ci.have_cat <> 'N' then 3\n        when ci.have_dog <> 'N' then 2\n        when ci.have_cat <> 'N' then 1\n        else 0\n    end as pet_ownership,\n    ci.number_of_dogs,\n    ci.number_of_cats,\n    ci.purina_engagement_score,\n    case ci.purina_lapse_risk_segment\n\t\twhen 'Low Risk' then '5_'||ci.purina_lapse_risk_segment\n\t\twhen 'Medium Risk' then '4_'||ci.purina_lapse_risk_segment\n\t\twhen 'High Risk' then '3_'||ci.purina_lapse_risk_segment\n\t\twhen 'Very High Risk' then '2_'||ci.purina_lapse_risk_segment\n\t\telse '1_Very High Risk'\n    end as purina_lapse_risk_segment,\n    case\n            when ci.have_cat = 'Y'\n            then 1 \n            else 0\n     end  as known_cat,\n         case\n            when ci.have_dog = 'Y'\n            then 1 \n            else 0\n     end  as known_dog\nfrom ${Database}.live.cid_brand cb\ninner join ${Database}.live.ref_brand rb on rb.brand_id = cb.brand_id\ninner join ${Database}.live.ref_business_unit rbu on rbu.business_unit_id = cb.business_unit_id\ninner join ${Database}.live.cid ci on ci.cid = cb.cid\ninner join ${Database}.live.cid_business_unit cbu on ci.cid = cbu.cid and cbu.business_unit_id = rbu.business_unit_id\nleft join  ${Database}.temp.ref_acquisition_type_joined atj on cbu.cid = atj.cid and cbu.acquisition_channel = atj.acquisition_channel and cbu.acquisition_type = atj.acquisition_type\nwhere lower(rbu.business_unit) regexp '.*purina.*'\n    and (cb.brand_preference = 1 or (cb.brand_engagement = 1 and cb.brand_preference <> 0))\n    and\n    (\n        cb.customer_retention_group_brand in ( 'At Risk','Data Orphan','New','Re-consent','Safe')\n        or lower(cb.customer_retention_group_brand)  regexp '.*gone this month.*'\n    );\n\nalter warehouse set warehouse_size = 'Medium';\n\n----------------------------\n--roll up to cid/brand to take into account brands like pro plan cat/dog etc 7 the second masterbrand insert\ndrop table if exists ${Database}.temp.npp_qlik_reports_data_cid;\nCREATE OR REPLACE TABLE ${Database}.temp.npp_qlik_reports_data_cid\nas\nselect\n    cid,\n    brand,\n\tacquisition_type,\n    acquisition_source,\n    month_,\n    max(emailable) as emailable,\n    max(preferred_brand_gigya) as gigya_brand_pref,\n    min(brand_create_date) as brand_create_date,\n    max(customer_retention_date_brand) as customer_retention_date_brand,\n    min(customer_retention_group_brand) as customer_retention_group_brand,\n    min(customer_suppression_group_brand) as customer_suppression_group_brand,\n\tmax(customer_retention_group_business_unit) as customer_retention_group_business_unit,\n    max(customer_suppression_group_business_unit) as customer_suppression_group_business_unit,\n    max(pet_ownership) as pet_ownership,\n    max(purina_engagement_score) as purina_engagement_score,\n\tmax(purina_lapse_risk_segment) as purina_lapse_risk_segment,\n    max(number_of_dogs) as number_of_dogs,\n    max(number_of_cats) as number_of_cats,\n    max(known_cat) as known_cat,\n    max(known_dog) as known_dog\nfrom ${Database}.temp.npp_qlik_reports_data_base\ngroup by\n    cid,\n    brand,\n\tacquisition_type,\n    acquisition_source,\n    month_;\n\ndrop table ${Database}.temp.npp_qlik_reports_data_base;\n\n----------------------------\n--format and sort out data for reporting\n\ndrop table if exists ${Database}.temp.npp_qlik_reports_data;\nCREATE OR REPLACE TABLE ${Database}.temp.npp_qlik_reports_data\nas\nselect\n    cid,\n    brand,\n\tacquisition_type,\n    acquisition_source,\n    month_,\n    first_value(brand) over\n    (\n        partition by cid, month_\n        order by\n            brand_create_date nulls last,\n            case brand\n                when 'Purina Masterbrand' then 1\n                else 0 end,\n            brand\n    ) as source_brand,\n    first_value(customer_retention_group_brand) over\n    (\n        partition by cid, month_\n        order by customer_retention_group_brand\n    ) as customer_retention_group_purina,\n    case\n        when emailable = 1 then 'Emailable'\n        else 'Not Emailable'\n    end as emailable,\n    case\n        when emailable = 1 then ''\n        when customer_suppression_group_brand = 1 then 'Deceased TM'\n        when customer_suppression_group_brand = 2 then 'Deceased'\n        when customer_suppression_group_brand = 3 then 'Manual TM'\n        when customer_suppression_group_brand = 4 then 'Manual'\n        when customer_suppression_group_brand = 5 then 'Bounce TM'\n        when customer_suppression_group_brand = 6 then 'Bounce'\n        when customer_suppression_group_brand = 7 then 'Unsub TM'\n        when customer_suppression_group_brand = 8 then 'Unsub'\n        when customer_suppression_group_brand = 9 then 'Opt-Out TM'\n        when customer_suppression_group_brand = 10 then 'Opt-Out'\n        when customer_suppression_group_brand = 11 then 'Retention'\n        else 'Misc'\n    end as suppression_reason,\n    customer_suppression_group_brand,\n    case when gigya_brand_pref = 1 then brand else '' end as gigya_brand_pref,\n    case\n        when customer_retention_group_brand = 1 then 'Re-consent'\n        when customer_retention_group_brand = 2 then 'Safe'\n        when customer_retention_group_brand = 3 then 'At Risk'\n        when customer_retention_group_brand = 4 then 'Orphan'\n        when customer_retention_group_brand = 5 then 'New'\n        when customer_retention_group_brand = 6 then 'Inactive'\n        when customer_retention_group_brand = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_brand,\n    customer_retention_date_brand,\n\tcase \n        when customer_retention_group_business_unit = 2 then 'Safe'\n        when customer_retention_group_business_unit = 3 then 'At Risk'\n        when customer_retention_group_business_unit = 4 then 'Orphan'\n        when customer_retention_group_business_unit = 5 then 'Inactive'\n    end as customer_retention_group_business_unit,\n    case\n        when customer_suppression_group_business_unit = 1 then 'Deceased TM'\n        when customer_suppression_group_business_unit = 2 then 'Manual TM'\n        when customer_suppression_group_business_unit = 3 then 'Bounce TM'\n        when customer_suppression_group_business_unit = 4 then 'Unsub TM'\n        when customer_suppression_group_business_unit = 5 then 'Opt-Out TM'\n        when customer_suppression_group_business_unit = 6 then 'Retention'\n    end as customer_suppression_group_business_unit,\n    case when pet_ownership > 0 then 1 else 0 end as pet,\n    case pet_ownership\n        when 1 then 'Cat Only'\n        when 2 then 'Dog Only'\n        when 3 then 'Both'\n        else 'Unknown'\n    end as pet_ownership,\n    purina_engagement_score,\n\tsubstring(purina_lapse_risk_segment,3,20) as purina_lapse_risk_segment,\n    number_of_dogs,\n    number_of_cats,\n    case\n        when purina_engagement_score < 130 then 'Low'\n        when purina_engagement_score <= 310 then 'Medium'\n        when purina_engagement_score > 310 then 'High'\n        else 'Low'\n    end as purina_engagement_score_group,\n    known_cat,\n    known_dog \nfrom ${Database}.temp.npp_qlik_reports_data_cid;\n\ndrop table ${Database}.temp.npp_qlik_reports_data_cid;\n\n----------------------------\n--output\n\nalter warehouse set warehouse_size = 'Large';\n\ndrop table if exists ${Database}.jobs.npp_qlik_reports_data_pet_unrolled;\nCREATE OR REPLACE TABLE ${Database}.jobs.npp_qlik_reports_data_pet_unrolled\nas\nselect\n    *,\n    case\n        when email_count = 1\n            and firstname_count = 1\n            and (dog_count = 1 or cat_count = 1)\n            and pet_name_count = 1\n            and pet_age <> 'Unknown Age'\n            and (\n                     (\n                           dog_count = 1\n                       and dog_breed_count = 1\n                       and dog_gender = 1\n                     )\n                  or\n                     (\n                           cat_count = 1\n                       and cat_colour = 1\n                       and cat_indoor_outdoor_count = 1\n                       and cat_gender = 1\n                     )\n                ) then 'Core PLUS'\n        when email_count = 1\n            and firstname_count = 1\n            and (dog_count = 1 or cat_count = 1)\n            and pet_name_count = 1\n            and pet_age <> 'Unknown Age'\n            and case when dog_count = 1 then dog_breed_count else 1 end = 1 then 'Core'\n        when known_cat_count = 1 or known_dog_count = 1 then 'Known'\n        else 'Unknown'\n    end as profile_level,\n    case\n        when pet_ownership = 'Both' and known_cat_count = 1 and known_dog_count = 1 then 'Known Both'\n        when pet_ownership = 'Both' and known_cat_count = 0 and known_dog_count = 0 then 'Inferred Both'\n        when pet_ownership = 'Both' and known_cat_count = 1 and known_dog_count = 0 then 'Known Cat + Inferred Dog'\n        when pet_ownership = 'Both' and known_cat_count = 0 and known_dog_count = 1 then 'Known Dog + Inferred Cat'\n        when pet_ownership = 'Dog Only' and known_dog_count = 1 then 'Known Dog'\n        when pet_ownership = 'Dog Only' and known_dog_count = 0 then 'Inferred Dog'\n        when pet_ownership = 'Cat Only' and known_cat_count = 1 then 'Known Cat'\n        when pet_ownership = 'Cat Only' and known_cat_count = 0 then 'Inferred Cat'\n        else 'Unknown'\n    end as pet_segment\nfrom (\n         select\n             d.cid,\n             to_char(d.cid)||'-'||to_char(pet_number) as pid,\n             d.month_,\n             d.brand,\n\t\t\t d.acquisition_type,\n             d.acquisition_source,\n             d.source_brand,\n             d.gigya_brand_pref,\n             d.emailable,\n             d.suppression_reason,\n             d.customer_suppression_group_brand,\n             d.customer_retention_group_brand,\n\t\t\t d.customer_suppression_group_business_unit,\n             d.customer_retention_group_business_unit,\n             d.pet,\n             d.pet_ownership,\n             d.purina_engagement_score_group,\n             d.purina_engagement_score,\n\t\t\t d.purina_lapse_risk_segment,\n             case when d.brand = d.source_brand and d.customer_retention_group_purina = 5 then 1 else 0 end as new_cids_purina,\n             case when pt.pet_name > '' then 1 else 0 end as pet_name_count,\n             case when pt.pet_dob is not null then 1 else 0 end as pet_dob_count,\n             case when pt.pet_life_stage > '' then 1 else 0 end as pet_stage_count,\n             case when pt.pet_type = 'Dog' and pt.pet_size > '' then 1 else 0 end as dog_size_count,\n             case when pt.pet_type = 'Dog' and pt.pet_breed > '' then 1 else 0 end as dog_breed_count,\n             case\n                 when pt.pet_dob >  add_months(current_date, -6) then '0-6 Months'\n                 when pt.pet_dob >  add_months(current_date, -12) then '7-12 Months'\n                 when pt.pet_dob >  add_months(current_date, -24) then '1-2 Years'\n                 when pt.pet_dob >  add_months(current_date, -36) then '2-3 Years'\n                 when pt.pet_dob >  add_months(current_date, -48) then '3-4 Years'\n                 when pt.pet_dob >  add_months(current_date, -60) then '4-5 Years'\n                 when pt.pet_dob >  add_months(current_date, -72) then '5-6 Years'\n                 when pt.pet_dob >  add_months(current_date, -84) then '6-7 Years'\n                 when pt.pet_dob >  add_months(current_date, -120) then '7-10 Years'\n                 when pt.pet_dob >  add_months(current_date, -180) then '10-15 Years'\n                 when pt.pet_dob >  add_months(current_date, -240) then '15-20 Years'\n                 when pt.pet_dob <=  add_months(current_date, -240) then '20+ Years'\n                 else 'Unknown Age'\n             end as pet_age,\n             case when pt.pet_type = 'Dog' and pt.pet_gender > '' then 1 else 0 end as dog_gender,\n             case when pt.pet_type = 'Cat' and pt.pet_gender > '' then 1 else 0 end as cat_gender,\n             case when pt.pet_type = 'Cat' and pt.pet_indoor_outdoor > '' then 1 else 0 end as cat_indoor_outdoor_count,\n             case when pt.pet_type = 'Cat' and pt.pet_colour > '' then 1 else 0 end as cat_colour,\n             case when pt.pet_type = 'Dog' then 1 else 0 end as dog_count,\n             case when pt.pet_type = 'Cat' then 1 else 0 end as cat_count,\n             d.known_cat as known_cat_count,\n             d.known_dog as known_dog_count,\n             d.number_of_dogs,\n             d.number_of_cats,\n             max(case when n.firstname <> '' then 1 else 0 end) as firstname_count,\n             max(case when n.email <> '' then 1 else 0 end) as email_count\n         from ${Database}.temp.npp_qlik_reports_data d\n         left join ${Database}.live.cid_pet pt on pt.cid = d.cid\n         left join ${Database}.live.names n on n.cid = d.cid\n         group by\n             d.cid,\n             to_char(d.cid)||'-'||to_char(pet_number),\n             d.month_,\n             d.brand,\n\t\t\t d.acquisition_type,\n             d.acquisition_source,\n             d.source_brand,\n             d.gigya_brand_pref,\n             d.emailable,\n             d.suppression_reason,\n             d.customer_suppression_group_brand,\n             d.customer_retention_group_brand,\n\t\t\t d.customer_suppression_group_business_unit,\n             d.customer_retention_group_business_unit,\n             d.pet,\n             d.pet_ownership,\n             d.purina_engagement_score_group,\n             d.purina_engagement_score,\n\t\t\t d.purina_lapse_risk_segment,\n             case when d.brand = d.source_brand and d.customer_retention_group_purina = 5 then 1 else 0 end,\n             case when pt.pet_name > '' then 1 else 0 end,\n             case when pt.pet_dob is not null then 1 else 0 end,\n             case when pt.pet_life_stage > '' then 1 else 0 end,\n             case when pt.pet_type = 'Dog' and pt.pet_size > '' then 1 else 0 end,\n             case when pt.pet_type = 'Dog' and pt.pet_breed > '' then 1 else 0 end,\n             case\n                 when pt.pet_dob >  add_months(current_date, -6) then '0-6 Months'\n                 when pt.pet_dob >  add_months(current_date, -12) then '7-12 Months'\n                 when pt.pet_dob >  add_months(current_date, -24) then '1-2 Years'\n                 when pt.pet_dob >  add_months(current_date, -36) then '2-3 Years'\n                 when pt.pet_dob >  add_months(current_date, -48) then '3-4 Years'\n                 when pt.pet_dob >  add_months(current_date, -60) then '4-5 Years'\n                 when pt.pet_dob >  add_months(current_date, -72) then '5-6 Years'\n                 when pt.pet_dob >  add_months(current_date, -84) then '6-7 Years'\n                 when pt.pet_dob >  add_months(current_date, -120) then '7-10 Years'\n                 when pt.pet_dob >  add_months(current_date, -180) then '10-15 Years'\n                 when pt.pet_dob >  add_months(current_date, -240) then '15-20 Years'\n                 when pt.pet_dob <=  add_months(current_date, -240) then '20+ Years'\n                 else 'Unknown Age'\n             end,\n             case when pt.pet_type = 'Dog' and pt.pet_gender > '' then 1 else 0 end,\n             case when pt.pet_type = 'Cat' and pt.pet_gender > '' then 1 else 0 end,\n             case when pt.pet_type = 'Cat' and pt.pet_indoor_outdoor > '' then 1 else 0 end,\n             case when pt.pet_type = 'Cat' and pt.pet_colour > '' then 1 else 0 end,\n             case when pt.pet_type = 'Dog' then 1 else 0 end,\n             case when pt.pet_type = 'Cat' then 1 else 0 end,\n                d.known_cat,\n                d.known_dog,\n             d.number_of_dogs,\n             d.number_of_cats\n     ) x;\n\ndrop table ${Database}.temp.npp_qlik_reports_data;\n\n\n----------------------------\n--PET DETAILS\n----------------------------\n\ndrop table if exists ${Database}.jobs.npp07910_consumer_pet_details;\ncreate or replace table ${Database}.jobs.npp07910_consumer_pet_details\nas\nselect\n    cid.cid,\n    cid.emailable,\n    trim(to_char(cid.cid))||'-'||trim(to_char(pet.pet_number)) as pid,\n    pet.pet_type,\n    pet.pet_life_stage,\n    decode(pet.pet_breed,'','Unknown',pet.pet_breed) as pet_breed,\n    initcap(decode(lower(nvl(pet.pet_colour,'')),'blackwhite','black and white','brownwhite','brown and white','','Unknown',pet.pet_colour)) as pet_colour,\n    pet.pet_indoor_outdoor,\n    decode(pet.pet_size,'T','Toy','S','Small','M','Medium','L','Large','XL','Extra Large','EL','Extra Large','Unknown') pet_size,\n    nvl(upper(left(decode(pet.pet_gender,'','Unknown',pet.pet_gender),1)),'Unknown') as pet_gender,\n    decode(pet.pet_name,'','Unknown',pet.pet_name) as pet_name,\n    cast(null as int) as breed_rank,\n    cast(null as int) as name_rank,\n    cid.brand,\n    cid.acquisition_type,\n    cid.acquisition_source,\n    cid.pet_segment,\n    cid.purina_engagement_score_group\nfrom (\n         select distinct\n\t\t     cid,\n\t\t\t brand,\n\t\t\t decode(emailable,'Emailable',1,0) as emailable,\n\t\t\t acquisition_type,\n             acquisition_source,\n\t\t\t pet_segment,\n\t\t\t purina_engagement_score_group\n\t\t from ${Database}.jobs.npp_qlik_reports_data_pet_unrolled\n\t\t where brand not in ('Beta Breeder','Pro Plan Breeder','Purina Vet')\n\t ) cid\njoin ${Database}.live.cid_pet pet on cid.cid = pet.cid;\n\n\ndrop table if exists ${Database}.jobs.npp07910_unknown_pets;\ncreate or replace table ${Database}.jobs.npp07910_unknown_pets as\nselect\n    cid,\n    'UnknownDog' pet_type,\n    cast(answer as int) count_\nfrom ${Database}.live.cid_question\nwhere question = 'Number of dogs'\n    and cid not in (select cid from ${Database}.jobs.npp07910_consumer_pet_details where pet_type = 'Dog');\n\n\ninsert into ${Database}.jobs.npp07910_unknown_pets\nselect\n    cid,\n    'UnknownCat' pet_type,\n    cast(answer as int) count_\nfrom ${Database}.live.cid_question\nwhere question = 'Number of cats'\n    and cid not in (select cid from ${Database}.jobs.npp07910_consumer_pet_details where pet_type = 'Cat');\n\n\ninsert into ${Database}.jobs.npp07910_unknown_pets\nselect\n    cid,\n    'UnknownDog',\n    1\nfrom ${Database}.live.cid_question\nwhere question = 'Have dog'\n    and answer = 'y'\n    and cid not in (select cid from ${Database}.jobs.npp07910_consumer_pet_details where pet_type = 'Dog')\n    and cid not in (select cid from ${Database}.jobs.npp07910_unknown_pets where pet_type = 'UnknownDog');\n\n\ninsert into ${Database}.jobs.npp07910_unknown_pets\nselect\n    cid,\n    'UnknownCat',\n    1\nfrom ${Database}.live.cid_question\nwhere question = 'Have cat'\n    and answer = 'y'\n    and cid not in (select cid from ${Database}.jobs.npp07910_consumer_pet_details where pet_type = 'Cat')\n    and cid not in (select cid from ${Database}.jobs.npp07910_unknown_pets where pet_type = 'UnknownCat');\n\n\ninsert into ${Database}.jobs.npp07910_unknown_pets\nselect\n    cid,\n    'UnknownDog',\n    1\nfrom ${Database}.live.cid_question\nwhere lower(question) regexp '.*which pets do you have.*'\n    and lower(answer) regexp '.*dog.*'\n    and cid not in (select cid from ${Database}.jobs.npp07910_consumer_pet_details where pet_type = 'Dog')\n    and cid not in (select cid from ${Database}.jobs.npp07910_unknown_pets where pet_type = 'UnknownDog');\n\n\ninsert into ${Database}.jobs.npp07910_unknown_pets\nselect\n    cid,\n    'UnknownCat',\n    1\nfrom ${Database}.live.cid_question\nwhere lower(question) regexp '.*which pets do you have.*'\n    and lower(answer) regexp '.*cat.*'\n    and cid not in (select cid from ${Database}.jobs.npp07910_consumer_pet_details where pet_type = 'Cat')\n    and cid not in (select cid from ${Database}.jobs.npp07910_unknown_pets where pet_type = 'UnknownCat');\n\n\ninsert into ${Database}.jobs.npp07910_consumer_pet_details\nselect\n    cid.cid,\n    cid.emailable,\n    trim(to_char(cid.cid))||'-'||trim(to_char(pet.pid_num))||trim(replace(pet.pet_type,'Unknown','')) as pid,\n    pet.pet_type,\n    'Unknown',\n    'Unknown',\n    'Unknown',\n    '',\n    'Unknown',\n    'U',\n    'Unknown',\n    cast(null as int) as breed_rank,\n    cast(null as int) as name_rank,\n    cid.brand,\n    cid.acquisition_type,\n    cid.acquisition_source,\n    cid.pet_segment,\n    cid.purina_engagement_score_group\nfrom (\n         select distinct\n\t\t     cid,\n\t\t\t brand,\n\t\t\t decode(emailable,'Emailable',1,0) as emailable,\n\t\t\t acquisition_type,\n             acquisition_source,\n\t\t\t pet_segment,\n\t\t\t purina_engagement_score_group\n\t\t from ${Database}.jobs.npp_qlik_reports_data_pet_unrolled\n\t     where brand not in ('Beta Breeder','Pro Plan Breeder','Purina Vet')\n\t ) cid\njoin (\n         select *, cast(1 as int) as pid_num from ${Database}.jobs.npp07910_unknown_pets where count_ >= 1\n         union all\n         select *, cast(2 as int) as pid_num from ${Database}.jobs.npp07910_unknown_pets where count_ >= 2\n         union all\n         select *, cast(3 as int) as pid_num from ${Database}.jobs.npp07910_unknown_pets where count_ >= 3\n         union all\n         select *, cast(4 as int) as pid_num from ${Database}.jobs.npp07910_unknown_pets where count_ >= 4\n         union all\n         select *, cast(5 as int) as pid_num from ${Database}.jobs.npp07910_unknown_pets where count_ >= 5\n         union all\n         select *, cast(6 as int) as pid_num from ${Database}.jobs.npp07910_unknown_pets where count_ >= 6\n         union all\n         select *, cast(7 as int) as pid_num from ${Database}.jobs.npp07910_unknown_pets where count_ >= 7\n         union all\n         select *, cast(8 as int) as pid_num from ${Database}.jobs.npp07910_unknown_pets where count_ >= 8\n         union all\n         select *, cast(9 as int) as pid_num from ${Database}.jobs.npp07910_unknown_pets where count_ >= 9\n         union all\n         select *, cast(10 as int) as pid_num from ${Database}.jobs.npp07910_unknown_pets where count_ >= 10\n     ) pet on cid.cid = pet.cid;\n\n\nupdate ${Database}.jobs.npp07910_consumer_pet_details\nset pet_type = replace(pet_type,'Unknown','');\n\n\nmerge into ${Database}.jobs.npp07910_consumer_pet_details pd\nusing (\n          select\n              pet_type,\n              pet_breed,\n              rank() over(partition by pet_type order by pets desc) as breed_rank\n          from (\n                   select\n                       pet_type,\n                       pet_breed,\n                       count(distinct pid) as pets\n                   from ${Database}.jobs.npp07910_consumer_pet_details\n                   group by 1,2\n               ) pet_count\n      ) pet_rank on pd.pet_type = pet_rank.pet_type\n\t            and pd.pet_breed = pet_rank.pet_breed\nwhen matched then update\nset breed_rank = pet_rank.breed_rank;\n\n\nmerge into ${Database}.jobs.npp07910_consumer_pet_details pd\nusing (\n          select\n              pet_type,\n              pet_name,\n              rank() over(partition by pet_type order by pets desc) as name_rank\n          from (\n                   select\n                       pet_type,\n                       pet_name,\n                       count(distinct pid) as pets\n                   from ${Database}.jobs.npp07910_consumer_pet_details\n                   group by 1,2\n               ) pet_count\n      ) pet_rank on pd.pet_type = pet_rank.pet_type\n\t            and pd.pet_name = pet_rank.pet_name\nwhen matched then update\nset name_rank = pet_rank.name_rank;\n\n\n----------------------------\n----Historic Pet Data \n----------------------------\n\nalter warehouse set warehouse_size = 'Small';\n\ndelete from ${Database}.db.npp_qlik_reports_historic_total where month_ = (select distinct month_ from ${Database}.jobs.npp_qlik_reports_data_Pet_Unrolled);\n\ninsert into ${Database}.db.npp_qlik_reports_historic_total\n(\n                       select\n                                month_,\n                                count(distinct case when emailable = 'Emailable' then cid end) as total_emailable_base,\n                                sum(case when emailable = 'Emailable' then new_cids_purina end) as total_new_to_purina,\n                                count(distinct case when emailable = 'Was Emailable Last Month' then cid end) as total_churn,\n                                count(distinct case when emailable = 'Emailable' and pet_ownership = 'Cat Only' then cid end) as total_cat_only_owners,\n                                count(distinct case when emailable = 'Emailable' and pet_ownership = 'Dog Only' then cid end) as total_dog_only_owners,\n                                count(distinct case when emailable = 'Emailable' and pet_ownership = 'Both' then cid end) as total_dog_and_cat_owners\n                                \n                        from (\n                                select distinct \n                                                    month_,\n                                                    cid,\n                                                    pet_ownership,\n                                                    case\n                                                            when emailable = 'Emailable' then 'Emailable'\n                                                            when customer_retention_group_brand <> 'New' and customer_suppression_group_brand in (1,3,5,7,9,11) then 'Was Emailable Last Month'\n                                                            else 'Not Emailable'\n                                                    end as emailable,\n                                                    customer_retention_group_brand,\n                                                    new_cids_purina\n                                 from  ${Database}.jobs.npp_qlik_reports_data_Pet_Unrolled\n                                 where brand not in ('Pro Plan Breeder','Beta Breeder')\n                                 ) a\n                         group by month_\n);\n\ndelete from ${Database}.db.npp_qlik_reports_historic_brand_acquisition where month_ = (select distinct month_ from ${Database}.jobs.npp_qlik_reports_data_Pet_Unrolled);\n\ninsert into ${Database}.db.npp_qlik_reports_historic_brand_acquisition\n(\n                        select\n                                x.month_,\n                                x.brand,\n                                x.acquisition_type,\n                                sum(case when customer_retention_group_brand = 'New' then 1 else 0 end) as new_to_brand,\n                                sum(new_cids_purina) as new_to_purina,\n                                x.purina_engagement_score_group,\n                                sum(case when customer_retention_group_brand = 'Safe' then 1 else 0 end) as safe_to_brand,\n                                sum(case when customer_retention_group_brand = 'At Risk' then 1 else 0 end) as At_Risk_to_brand,\n                                sum(case when customer_retention_group_brand = 'Orphan' then 1 else 0 end) as Orphan_to_brand,\n                                sum(case when customer_retention_group_brand = 'Re-consent' then 1 else 0 end) as Reconsent_to_brand,\n\t\t\t\t\t\t\t\tcoalesce(gone_from_brand, 0) as gone_from_brand,\n\t\t\t\t\t\t\t\tcount(distinct cid) as brand_emailable_base,\n                                count(distinct case when pet_ownership = 'Cat Only' then cid end) as brand_cat_only_owners,\n                                count(distinct case when pet_ownership = 'Dog Only' then cid end) as band_dog_only_owners,\n                                count(distinct case when pet_ownership = 'Both' then cid end) as brand_dog_and_cat_owners,\n\t\t\t\t\t\t\t\ttar.monthly_target,\n\t\t\t\t\t\t\t\tp.safe_to_purina,\n\t\t\t\t\t\t\t\tp.at_risk_expiring_to_purina,\n\t\t\t\t\t\t\t\tpg.gone_from_purina,\n\t\t\t\t\t\t\t\tpg.consent_expired_this_month,\n\t\t\t\t\t\t\t\tpg.unsubscribed_this_month,\n\t\t\t\t\t\t\t\tpg.deletion_request_this_month,\n\t\t\t\t\t\t\t\tpg.other_suppression_this_month,\n                                x.acquisition_source\n                        from (\n                                    select distinct \n                                                        month_,\n                                                        cid,\n                                                        brand,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tacquisition_type,\n                                                        acquisition_source,\n                                                        purina_engagement_score_group,\n                                                        customer_retention_group_brand,\n                                                        new_cids_purina,\n                                                        pet_ownership\n                                     from  ${Database}.jobs.npp_qlik_reports_data_Pet_Unrolled\n                                     where emailable = 'Emailable'\n                                    ) x\n\t\t\t\t\t\tleft join (\n\t\t\t\t\t\t\t\t\tselect distinct\n\t\t\t\t\t\t\t\t\t\tmonth_,\n\t\t\t\t\t\t\t\t\t\tbrand,\n\t\t\t\t\t\t\t\t\t\tacquisition_type,\n\t\t\t\t\t\t\t\t\t\tpurina_engagement_score_group,\n\t\t\t\t\t\t\t\t\t\tcount(distinct cid) as gone_from_brand\n\t\t\t\t\t\t\t\t\tfrom  ${Database}.jobs.npp_qlik_reports_data_pet_unrolled\n\t\t\t\t\t\t\t\t\twhere (customer_retention_group_brand = 'Inactive' and suppression_reason = 'Retention')\n\t\t\t\t\t\t\t\t\t\tor suppression_reason in ('Unsub TM','Manual TM','Deceased TM','Opt-Out TM','Bounce TM')\n\t\t\t\t\t\t\t\t\tgroup by 1,2,3,4\n\t\t\t\t\t\t\t\t) g on x.month_ = g.month_\n\t\t\t\t\t\t\t\t\tand x.brand = g.brand\n\t\t\t\t\t\t\t\t\tand x.acquisition_type = g.acquisition_type\n\t\t\t\t\t\t\t\t\tand x.purina_engagement_score_group = g.purina_engagement_score_group\n\t\t\t\t\t\tleft join (\n\t\t\t\t\t\t\t\t\tselect distinct\n\t\t\t\t\t\t\t\t\t\tmonth_,\n\t\t\t\t\t\t\t\t\t\tcount(distinct case when customer_retention_group_business_unit = 'Safe' then cid end) as safe_to_purina,\n\t\t\t\t\t\t\t\t\t\tcount(distinct case when customer_retention_group_business_unit in ('At Risk','Orphan') then cid end) as at_risk_expiring_to_purina\n\t\t\t\t\t\t\t\t\tfrom  ${Database}.jobs.npp_qlik_reports_data_pet_unrolled\n\t\t\t\t\t\t\t\t\twhere emailable = 'Emailable' and brand not in ('Pro Plan Breeder','Beta Breeder' , 'Purina Vet')\n\t\t\t\t\t\t\t\t\tgroup by month_\n\t\t\t\t\t\t\t\t) p on x.month_ = p.month_\n\t\t\t\t\t\tleft join (\n\t\t\t\t\t\t\t\t\tselect distinct\n\t\t\t\t\t\t\t\t\t\tmonth_,\n\t\t\t\t\t\t\t\t\t\tcount(distinct case\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhen customer_retention_group_business_unit = 'Inactive' \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tand customer_suppression_group_business_unit = 'Retention' then cid\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhen customer_suppression_group_business_unit in ('Unsub TM','Manual TM','Deceased TM','Opt-Out TM','Bounce TM') then cid\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tend) as gone_from_purina,\n\t\t\t\t\t\t\t\t\t\tcount(distinct case when customer_retention_group_business_unit = 'Inactive'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tand customer_suppression_group_business_unit = 'Retention' then cid end) as consent_expired_this_month,\n\t\t\t\t\t\t\t\t\t\tcount(distinct case when customer_suppression_group_business_unit = 'Unsub TM' then cid end) as unsubscribed_this_month,\n\t\t\t\t\t\t\t\t\t\tcount(distinct case when customer_suppression_group_business_unit = 'Manual TM' then cid end) as deletion_request_this_month,\n\t\t\t\t\t\t\t\t\t\tcount(distinct case when customer_suppression_group_business_unit in ('Deceased TM','Opt-Out TM','Bounce TM') then cid end) as other_suppression_this_month\n\t\t\t\t\t\t\t\t\tfrom  ${Database}.jobs.npp_qlik_reports_data_pet_unrolled\n\t\t\t\t\t\t\t\t\tgroup by month_\n\t\t\t\t\t\t\t\t) pg on x.month_ = pg.month_\n                        left join ${Database}.db.npp_qlik_reports_brand_targets tar on x.brand = tar.brand\n                                                                                   and trim(x.month_) = trim(tar.month_)\n                                                                                   and trim(x.purina_engagement_score_group) = 'Low'\n                                                                                   and trim(x.acquisition_type) = 'Legacy'\n\t\t\t\t\t\tgroup by\n\t\t\t\t\t\t\tx.month_,\n\t\t\t\t\t\t\tx.brand,\n\t\t\t\t\t\t\tx.acquisition_type,\n\t\t\t\t\t\t\tx.purina_engagement_score_group,\n\t\t\t\t\t\t\tgone_from_brand,\n\t\t\t\t\t\t\ttar.monthly_target,\n\t\t\t\t\t\t\tp.safe_to_purina,\n\t\t\t\t\t\t\tp.at_risk_expiring_to_purina,\n\t\t\t\t\t\t\tpg.gone_from_purina,\n\t\t\t\t\t\t\tpg.consent_expired_this_month,\n\t\t\t\t\t\t\tpg.unsubscribed_this_month,\n\t\t\t\t\t\t\tpg.deletion_request_this_month,\n\t\t\t\t\t\t\tpg.other_suppression_this_month,\n                            x.acquisition_source\n  \n);\n\ndelete from ${Database}.db.npp_qlik_reports_historic_engagement where month_ = (select distinct month_ from ${Database}.jobs.npp_qlik_reports_data_Pet_Unrolled);\n\ninsert into ${Database}.db.npp_qlik_reports_historic_engagement\n(\n                        select\n                                month_,\n                                purina_engagement_score_group,\n                                count(distinct cid) as engagement_emailable_cids\n                        from ${Database}.jobs.npp_qlik_reports_data_Pet_Unrolled\n                        where  emailable = 'Emailable'\n                        group by month_, purina_engagement_score_group\n);\n\ndelete from ${Database}.db.npp_qlik_reports_historic_profile where month_ = (select distinct month_ from ${Database}.jobs.npp_qlik_reports_data_Pet_Unrolled);\n\ninsert into ${Database}.db.npp_qlik_reports_historic_profile\n\n(\n                        select \n                                month_,        \n                                count (distinct cid),\n                                profile_level\n                        from ${Database}.jobs.npp_qlik_reports_data_Pet_Unrolled\n                        where emailable = 'Emailable'\n                        and brand not in ('Pro Plan Breeder','Beta Breeder')\n                        and customer_retention_group_brand <> 'Inactive'\n                        group by month_, profile_level\n); \n\n------------------------------------------------------------------------\n\n\ndrop table if exists ${Database}.jobs.npp_qlik_reports_data_activities;\nCREATE OR REPLACE TABLE ${Database}.jobs.npp_qlik_reports_data_activities\nas\nselect distinct\n    upper(to_char(case when activity_date < add_months(current_date,-24) then add_months(current_date,-24) else activity_date end,'MON-YYYY')) as month_,\n    activity,\n    count(*) over\n    (\n        partition by\n            activity\n        order by\n            year(case when activity_date < add_months(current_date,-24) then add_months(current_date,-24) else activity_date end),\n            month(case when activity_date < add_months(current_date,-24) then add_months(current_date,-24) else activity_date end)\n    ) as activities\nfrom ${Database}.live.npp_engagement_scoring_activities;\n\n----------------------------\n\n--this is a temporary static lookup until we have a better way to join to comms hist lookup from adestra:\n\ndrop table if exists ${Database}.temp.temp_emails;\nCREATE OR REPLACE TABLE ${Database}.temp.temp_emails\nas\nselect distinct                                                                                                                        --CHANGED TO ALLOW FOR MULTIPLE SENDS UNDER THE SAME CAMPAIGN 25/03/2019\n    ae.campaign_id,\n    case when lk.campaign_name is null then replace(ae.adestra_campaign_name, '_', ' ') else trim(lk.campaign_name) end as campaign_name,\n    trim(lk.email_tag) as email_tag,\n    trim(lk.message) as message,\n    trim(lk.brand) as brand,\n    ae.cid,\n    ae.email,\n    ae.link_label,\n    ae.adestra_campaign_id,\n    ae.event_name,\n    MAX(sd.drop_date) AS drop_date\nfrom ${Database}.live.adestra_events ae\nleft join ${Database}.db.adestra_tag_lookup lk on ae.adestra_campaign_id = trim(lk.adestra_campaign_id) \n                                          and case when ae.campaign_id <> 'NPP04398_C' then 1                                                                                      \n                                                   when (case when ae.campaign_id = 'NPP04398_C' then\n                                                             (case when ae.kog_pack = '' then 'Pro ' \n                                                                   when left(tbw.db.strchop(trim(kog_pack),'|',-1,-1),1) = '1' then 'Pro '\n                                                                   when left(tbw.db.strchop(trim(kog_pack),'|',-1,-1),1) = '2' then 'BETA'\n                                                              end)\n                                                        end) = left( trim(lk.message),4)  then 1\n                                                   else 0\n                                              end = 1                                                                                                                                                       \nLEFT OUTER JOIN (SELECT adestra_campaign_id,\n                        cid,\n                        CAST(event_timestamp AS date ) AS drop_date\n                 FROM  ${Database}.live.adestra_events               \n                 WHERE  lower(event_name) regexp '.*sent.*'\n                 AND lower(campaign_id) regexp '^npp.*') sd\n        ON ae.adestra_campaign_id = sd.adestra_campaign_id\n        AND ae.cid = sd.cid\n        AND cast(ae.event_timestamp as date ) >= sd.drop_date\nWHERE ae.event_timestamp >= add_months(current_date,-24)\nAND lower(ae.campaign_id) regexp '^npp.*'\nGROUP BY ae.campaign_id,  case when lk.campaign_name is null then replace(ae.adestra_campaign_name, '_', ' ') else trim(lk.campaign_name) end, trim(lk.email_tag),  trim(lk.message), trim(lk.brand),  ae.cid,\n    ae.email, ae.link_label,  ae.adestra_campaign_id,  ae.event_name, cast(ae.event_timestamp as date )  ;\n\n-- ensure campaigns were also sent in last 24 months\ndrop table if exists ${Database}.temp.temp_emails_sent_campaigns;\nCREATE OR REPLACE TABLE ${Database}.temp.temp_emails_sent_campaigns\nas\nselect adestra_campaign_id\nfrom ${Database}.live.adestra_events\nwhere lower(event_name) regexp '.*sent.*'\ngroup by 1\nhaving max(cast(event_timestamp as date)) >= add_months(current_date,-24);\n\n-- remove at a cid campaign level where there is no sent event\ndelete from ${Database}.temp.temp_emails e\nwhere adestra_campaign_id || to_char(cid)\nin (\nselect adestra_campaign_id || to_char(cid)\nfrom ${Database}.temp.temp_emails\ngroup by 1\nhaving sum(case when lower(event_name) regexp '.*sent.*' then 1 else 0 end) = 0\n);\n\ndrop table if exists ${Database}.temp.temp_emails_rollup;\n\nalter warehouse set warehouse_size = 'Medium';\n\nCREATE OR REPLACE TABLE ${Database}.temp.temp_emails_rollup\nas\nselect\n    cid,\n    upper(to_char(drop_date,'MON-YYYY')) as campaign_month,\n    brand as campaign_brand,\n    campaign_id,\n    te.Adestra_campaign_id,\n    campaign_name,\n    email_tag,\n    message,\n    count(distinct cid) as send_count,\n    count(distinct case when lower(event_name) regexp '.*inbound_bounce.*|.*inbound_domain.*|.*inbound_quota.*|.*inbound_user.*' then cid else null end) as bounced_count,\n    count(distinct case when lower(event_name) regexp '.*click.*|.*open.*|.*read.*|.*shared.*|.*submit.*' then cid else null end) as open_count,\n    count(distinct case when lower(event_name) regexp '.*click.*|.*shared.*|.*submit.*' and lower(event_name) not regexp '.*unsubscribe.*' and lower(link_label) not regexp '.*unsubscribe.*' then cid else null end) as click_count,\n    count(distinct case when lower(event_name) regexp '.*unsubscribe.*' or lower(link_label) regexp '.*unsubscribe.*' then cid else null end) as unsub_count\nfrom ${Database}.temp.temp_emails te\ninner join ${Database}.temp.temp_emails_sent_campaigns sent on te.adestra_campaign_id = sent.adestra_campaign_id\ngroup by\n    cid,\n    upper(to_char(drop_date,'MON-YYYY')),\n    brand,\n    campaign_id,\n    te.Adestra_campaign_id,\n    campaign_name,\n    email_tag,\n    message;\n    \nalter warehouse set warehouse_size = 'Xsmall';\n\ndrop table ${Database}.temp.temp_emails;\ndrop table ${Database}.temp.temp_emails_sent_campaigns;\n\ndrop table if exists ${Database}.jobs.npp_qlik_reports_data_email_engagement;\nCREATE OR REPLACE TABLE ${Database}.jobs.npp_qlik_reports_data_email_engagement\nas\nselect\n    campaign_month,\n    campaign_brand,\n    campaign_id,\n    campaign_name,\n    email_tag,\n    message,\n    sum(send_count) as send_count,\n    sum(send_count-bounced_count) as delivered_count,\n    sum(open_count) as open_count,\n    sum(click_count) as click_count,\n    sum(unsub_count) as unsub_count\nfrom ${Database}.temp.temp_emails_rollup\ngroup by\n    campaign_month,\n    campaign_brand,\n    campaign_id,\n    campaign_name,\n    email_tag,\n    message;\n\n\n---------------------------------------------------------------------------\n--KC dashboards\n---------------------------------------------------------------------------\n\n--breeders/growing pup\n\ndrop table if exists ${Database}.temp.kc_qlik_reports_data_base;\nCREATE OR REPLACE TABLE ${Database}.temp.kc_qlik_reports_data_base\nas\nselect distinct\n    cb.cid,\n    cb.brand_id,\n    first_value(case when lower(nm.name_urn) regexp '.*growing pup social.*' then 'GP_SOCIAL' else nm.source end) over\n    (\n       partition by cb.cid, cb.brand_id\n       order by nm.reg_date nulls last\n    ) as source,\n    first_value(CASE WHEN (lower(nm.source) regexp '.*thg.*' AND cb.Brand_id in (136,137)) THEN 'Has THG Account' ELSE 'No THG Account' END) OVER\n    (\n       PARTITION BY  cb.cid, cb.brand_id\n       ORDER BY CASE WHEN (lower(nm.source) regexp '.*thg.*' AND cb.Brand_id in (136,137)) THEN 1 ELSE 0 END DESC\n     )AS THG_Breeder_Registered,                                               ------ -ADDED TO DETERMIN IF A CLIENT HAS A REGISTERED THG BREEDER ACCOUNT 18/03/2019\n     first_value(CASE WHEN (lower(nm.source) regexp '.*thg.*' AND cb.Brand_id = 138) THEN 'Has THG Account' ELSE 'No THG Account' END) OVER\n    (\n       PARTITION BY  cb.cid, cb.brand_id\n       ORDER BY CASE WHEN (lower(nm.source) regexp '.*thg.*' AND cb.Brand_id = 138) THEN 1 ELSE 0 END DESC\n     )AS THG_Growing_Pup_Registered,                                               ------ -ADDED TO DETERMIN IF A CLIENT HAS A REGISTERED THG GROWING PUP ACCOUNT 18/03/2019\n    first_value(case when lower(nm.source) regexp '.*kc.*|.*thg.*|.*wun.*|.*fanfinder.*' then nm.reg_date else cast(null as date) end) over\n    (\n       partition by cb.cid, cb.brand_id\n       order by\n           case when lower(nm.source) regexp '.*kc.*|.*thg.*|.*wun.*|.*fanfinder.*' then 1 else 0 end desc,\n           nm.reg_date nulls last\n    ) as scheme_reg_date, --scheme reg is via wunderman/thg/kc - old ark data is PROPLAN_BREEDER, so we want them - but not the original reg date to that scheme\n    first_value(dp.dp_emailable) over\n    (\n       partition by cb.cid, cb.brand_id\n       order by\n            dp.dp_date nulls last,\n            dp.data_date nulls last,\n            dp.source_date nulls last,\n            dp.dp_emailable nulls last\n    ) as dp_emailable,\n    cb.emailable,\n    cbu.first_date_business_unit,\n     TRIM(replace(replace(replace(replace(initcap(\n                                               case\n                                                   when cbu.acquisition_channel ilike 'historic%' then 'Historic'\n                                                   when coalesce(cbu.acquisition_channel,'') in ('','Manual') then 'Historic'\n                                                   when trim(cbu.acquisition_channel) in ('Revolution','RESP_ADVENT') then 'CIAM'\n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Social' and atj.acquisition_registration_campaign = 'Kitten Code Social' then 'Wunderman - Kitten Code Social'\n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Social' and atj.acquisition_registration_campaign = 'Better Together Social' then 'Wunderman - Better Together Social'\n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Social' and atj.acquisition_registration_campaign = 'Growing Pup Social' then 'Wunderman - Growing Pup Social'                 \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Website Registrations' and atj.acquisition_registration_campaign = 'Kitten Code' then 'Wunderman - Kitten Code Website Registration'                   \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Website Registrations' and atj.acquisition_registration_campaign = 'Better Together' then 'Wunderman - Better Together Website Registration'                  \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Website Registrations' and atj.acquisition_registration_campaign = 'Growing Pup' then 'Wunderman - Growing Pup Website Registration'                   \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Website Registrations' then 'Wunderman - Other Website Registration'                   \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Sampling' and atj.acquisition_registration_campaign in ('Go-Cat Free Sample','Go-CAT Free Sample') then 'Wunderman - Go Cat Free Sample'                  \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Sampling' and atj.acquisition_registration_campaign = 'Dentalife Dog Free Sample' then 'Wunderman - Dentalife Dog Free Sample'\n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Sampling' then 'Wunderman - Other Sample'                                                    \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) in  ('COUPON/CASHBACK','Coupon/Cashback') then 'Wunderman - Coupon/Cashback'\n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Sampling' then 'Wunderman - Other Sample'    \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Loyalty' and atj.acquisition_registration_campaign = 'Club PRO PLAN' then 'Wunderman - Club Pro Plan'  \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Event' then 'Wunderman - Event'     \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Connected Packaging Website' then 'Connected Packaging Website'  \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Trial' then 'Wunderman - Trial'  \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Competition' and atj.acquisition_registration_campaign = 'BETA Instant Win' then 'Wunderman - BETA Instant Win Competition'  \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Competition' and atj.acquisition_registration_campaign = 'Bakers Competition' then 'Wunderman - Bakers Competition'  \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Puppy pre-acquisition' and atj.acquisition_registration_campaign = 'Puppy pre-acquisition' then 'Wunderman - Puppy Pre Acquisition' \n                                                   when trim(cbu.acquisition_channel) =  'Felix SoPost (Incorrect Opt-in)' then 'SoPost'  \n                                                   when trim(cbu.acquisition_channel) = 'Better Together Christmas' then 'Better Together Christmas 2021'  \n                                                   when trim(cbu.acquisition_channel) = 'Revolution' then 'Historic'  \n                                                   when trim(cbu.acquisition_channel) in ('Qualifio Kitten Code Social Ads','Growing Pup Survey') then 'Historic'                                                  \n                                                   else replace(replace(cbu.acquisition_channel,'RESP_',''),'_',' ')\n                                               end\n                                           ),'Ciam','CIAM'),'Ces','CES'),'Sopost','SoPost'),'Gbd','GBD')) as acquisition_source\n                                                                                                  \nfrom ${Database}.live.cid_brand cb\ninner join ${Database}.live.cid_business_unit cbu on cb.cid = cbu.cid and cbu.business_unit_id = 5\ninner join ${Database}.live.names nm on nm.cid = cb.cid\n                               and\n                               (\n                                   nm.source_brand_id = cb.brand_id\n                                   or (cb.brand_id = 138 and lower(nm.source) regexp '.*kc.*|.*thg.*|.*wun.*|.*fanfinder.*') --limit gp to breeder/kc/thg\n                               )\nleft join ${Database}.db.names_dp dp on nm.name_urn = trim(dp.name_urn) and dp.data_controller_id = 5 and lower(dp.source) regexp '.*kc.*|.*thg.*|.*wun.*|.*fanfinder.*' --purina only, and for the kc/thg files (ie did they opt in at the time of registering)\nleft join ${Database}.temp.ref_acquisition_type_joined atj on cbu.cid = atj.cid and cbu.acquisition_channel = atj.acquisition_channel and cbu.acquisition_type = atj.acquisition_type\nwhere cb.brand_id in (136, 137, 138) --Pro Plan Breeder/Beta Breeder/Growing Pup\n    and (cb.brand_preference = 1 or (cb.brand_engagement = 1 and cb.brand_preference <> 0));\n--15136\n\n\ndelete from ${Database}.temp.kc_qlik_reports_data_base where scheme_reg_date is null;\n\n\n---------------------------------------------------------------------------\n--products/purchases/sales\n\ndrop table if exists ${Database}.temp.kc_qlik_reports_thg_sales;\nCREATE OR REPLACE TABLE ${Database}.temp.kc_qlik_reports_thg_sales\nas\nselect distinct\n    ba.cid,\n    nm.source_brand_id,\n    ba.scheme_reg_date,\n    trim(thg.order_number) as order_number,\n    thg.ordered_product_id,\n    first_value(thg.order_created) over\n    (\n       partition by nm.cid, nm.source_brand_id, trim(thg.order_number)\n       order by thg.order_created nulls last\n    ) as order_date,\n    first_value(upper(to_char(thg.despatched_date,'MON-YYYY'))) over\n    (\n       partition by nm.cid, nm.source_brand_id, trim(thg.order_number)\n       order by thg.despatched_date nulls last\n    ) as despatched_month,\n    first_value(upper(to_char(thg.despatched_date,'MON-YYYY'))) over\n    (\n       partition by nm.cid, nm.source_brand_id\n       order by thg.despatched_date nulls last\n    ) as first_despatched_month,\n    first_value(trim(pr.reporting_product_name)) over                                                                        -- POINTED TO NEW reporting_product_name COLUMN 29/03/2019\n    (\n       partition by nm.cid, nm.source_brand_id, thg.ordered_product_id\n       order by case when lower(pr.product_name) regexp '.*weaning.*|.*pome.*|.*sandra one.*' then 1 else 0 end\n    ) as product_name,\n    first_value(case when lower(pr.product_name) regexp '.*weaning.*|.*pome.*|.*sandra one.*' then 1 else 0 end) over\n    (\n       partition by nm.cid, nm.source_brand_id, thg.ordered_product_id\n       order by case when lower(pr.product_name) regexp '.*weaning.*|.*pome.*|.*sandra one.*' then 1 else 0 end desc\n    ) as puppy_pack,\n    thg.transaction_charge_price_per_unit as price,\n    thg.despatched_qty as quantity\nfrom ${Database}.temp.kc_qlik_reports_data_base ba\ninner join ${Database}.live.names nm on ba.cid = nm.cid\ninner join ${Database}.db.npp_thg_trans thg on 'REG_THG|'||cast(customer_id as varchar) = name_urn and trim(thg.order_status) = 'Despatched'\ninner join ${Database}.db.ref_product pr on cast(thg.ordered_product_id as varchar) = split_part(trim(pr.product_name), '|', 1)\n                                        and trim(pr.create_user) = 'REG_THG'\nwhere nm.source_brand_id in (136,137,138); --Pro Plan Breeder/Beta Breeder/Growing Pup trans only\n--7270\n\n\n---------------------------------------------------------------------------\n--total sales\ndrop table if exists ${Database}.temp.kc_qlik_reports_thg_sales_roll;\nCREATE OR REPLACE TABLE ${Database}.temp.kc_qlik_reports_thg_sales_roll\nas\nselect\n    cid,\n    source_brand_id,\n    count(distinct order_number) as total_orders,\n    sum(price*quantity) as total_price,\n    count(distinct case when order_date <= add_months(scheme_reg_date,3) then order_number else null end) as orders_3_months,\n    count(distinct case when order_date <= add_months(scheme_reg_date,6) then order_number else null end) as orders_6_months,\n    count(distinct case when order_date <= add_months(scheme_reg_date,9) then order_number else null end) as orders_9_months\nfrom ${Database}.temp.kc_qlik_reports_thg_sales\ngroup by\n    cid,\n    source_brand_id;\n\n---------------------------------------------------------------------------\n--puppies\n\ndrop table if exists ${Database}.temp.kc_qlik_reports_puppies;\nCREATE OR REPLACE TABLE ${Database}.temp.kc_qlik_reports_puppies\nas\nselect\n    ba.cid,\n    ba.scheme_reg_date,\n    pt.pet_dob,\n    case \n              when pt.pet_dob is null and cb.first_date_brand >= current_date-1                  then '8 weeks'\n              when pt.pet_dob is not null and pt.pet_dob >= current_date-57                       then '8 weeks'\n              when pt.pet_dob is null and cb.first_date_brand >= current_date-5                  then '9 weeks'\n              when pt.pet_dob is not null and pt.pet_dob >= current_date-61                       then '9 weeks'\n              when pt.pet_dob is null and cb.first_date_brand >= current_date-12                 then '10 weeks'\n              when pt.pet_dob is not null and pt.pet_dob >= current_date-68                       then '10 weeks'\n              when pt.pet_dob is null and cb.first_date_brand >= current_date-19                 then '11 weeks'\n              when pt.pet_dob is not null and pt.pet_dob >= current_date-75                       then '11 weeks'\n              when pt.pet_dob is null and cb.first_date_brand >= current_date-26                 then '12 weeks'\n              when pt.pet_dob is not null and pt.pet_dob >= current_date-82                       then '12 weeks'\n              when pt.pet_dob is null and cb.first_date_brand >= current_date-33                 then '13 weeks'\n              when pt.pet_dob is not null and pt.pet_dob >= current_date-91                       then '13 weeks'\n              when pt.pet_dob is null and cb.first_date_brand >= current_date-40                 then '14 weeks'\n              when pt.pet_dob is not null and pt.pet_dob >= current_date-98                       then '14 weeks'\n              when pt.pet_dob is null and cb.first_date_brand >= current_date-47                 then '15 weeks'\n              when pt.pet_dob is not null and pt.pet_dob >= current_date-105                      then '15 weeks'\n              when pt.pet_dob is null and cb.first_date_brand >= add_months(current_date,-5)+54  then '5 months'\n              when pt.pet_dob is not null and pt.pet_dob >= add_months(current_date,-5)-2         then '5 months'\n              when pt.pet_dob is null and cb.first_date_brand >= add_months(current_date,-6)+54  then '6 months'\n              when pt.pet_dob is not null and pt.pet_dob >= add_months(current_date,-6)-2         then '6 months'\n              when pt.pet_dob is null and cb.first_date_brand >= add_months(current_date,-7)+54  then '7 months'\n              when pt.pet_dob is not null and pt.pet_dob >= add_months(current_date,-7)-2         then '7 months'\n              when pt.pet_dob is null and cb.first_date_brand >= add_months(current_date,-8)+54  then '8 months'\n              when pt.pet_dob is not null and pt.pet_dob >= add_months(current_date,-8)-2         then '8 months'\n              when pt.pet_dob is null and cb.first_date_brand >= add_months(current_date,-9)+54  then '9 months'\n              when pt.pet_dob is not null and pt.pet_dob >= add_months(current_date,-9)-2         then '9 months'\n              when pt.pet_dob is null and cb.first_date_brand >= add_months(current_date,-10)+54 then '10 months'\n              when pt.pet_dob is not null and pt.pet_dob >= add_months(current_date,-10)-2        then '10 months'\n              when pt.pet_dob is null and cb.first_date_brand >= add_months(current_date,-11)+54 then '11 months'\n              when pt.pet_dob is not null and pt.pet_dob >= add_months(current_date,-11)-2        then '11 months'\n              when pt.pet_dob is null and cb.first_date_brand >= add_months(current_date,-12)+54 then '12 months'\n              when pt.pet_dob is not null and pt.pet_dob >= add_months(current_date,-12)-2        then '12 months'\n              else ''\n    end as pet_age,\n    case \n              when pt.pet_dob is not null then 'Confirmed DoB'\n              else 'Assumed DoB'\n    end as Assumed_Confirmed\nfrom ${Database}.temp.kc_qlik_reports_data_base ba\ninner join ${Database}.live.names nm on ba.cid = nm.cid\ninner join ${Database}.live.cid_brand cb on ba.cid = cb.cid\n                                   and ba.brand_id = cb.brand_id\ninner join (\n            select\n                   name_urn,\n                   case\n                       when pet_dob is not null then pet_dob --CIAM actual DOB\n                       when pet_age_years is not null and pet_age_months is not null then add_months(data_date, -((pet_age_years*12)+pet_age_months)) --CIAM pet age years or months\n                       when pet_birth_month is not null and pet_birth_year is not null\n                           then nvl(try_to_date(cast(pet_birth_year as varchar)||'-'||lpad(to_char(pet_birth_month),2,'0')||'-'||right(to_char(data_date),2)),last_day(to_date(cast(pet_birth_year as varchar)||'-'||lpad(to_char(pet_birth_month),2,'0')||'-01'))) --Birthday email \n                       when pet_age_years is not null and pet_birth_month is not null\n                           then nvl(try_to_date(to_char(cast(left(cast(data_date as varchar),4) as int) - cast(pet_age_years as int))||'-'||lpad(to_char(pet_birth_month),2,'0')||'-'||right(to_char(data_date),2)),last_day(to_date(to_char(cast(left(cast(data_date as varchar),4) as int) - cast(pet_age_years as int))||'-'||lpad(to_char(pet_birth_month),2,'0')||'-01'))) --Winalot campaign and eCRM 'sorry' email\n                       when pet_age_weeks is not null then (data_date - (pet_age_weeks*7)) --Purina GP signup (age given in weeks)\n                       when pet_age_months is not null then add_months(data_date, -pet_age_months) --Purina GP signup (age given in months)\n                   end as pet_dob\n               from ${Database}.db.pet\n               where lower(source) regexp '(.*)(reg_kc|reg_thg|reg_fanfinders)(.*)'\n                   or (lower(source) regexp '.*reg_wun.*' and lower(name_urn) regexp '.*growing pup.*')\n           ) pt on nm.name_urn = pt.name_urn \nwhere ba.brand_id = 138; -- GP only\n\n\n\n---------------------------------------------------------------------------\n--litters\n\ndrop table if exists ${Database}.temp.kc_qlik_reports_litters;\nCREATE OR REPLACE TABLE ${Database}.temp.kc_qlik_reports_litters\nas\nselect\n    ba.cid,\n    ba.brand_id,\n    lt.litter_size as litter_dog_size,\n    lt.litter_puppies_kittens as litter_size,\n    count(*) as num_litters\nfrom ${Database}.temp.kc_qlik_reports_data_base ba                                \ninner join ${Database}.live.cid_litter lt on ba.cid = lt.cid                                        --CHANGED TO USE NEW DEDUPED LIVE TABLE INSTEAD OF DB 21/03/2019\nwhere ba.brand_id in (136,137) -- Breeder only\ngroup by 1,2,3,4;\n\n---------------------------------------------------------------------------\n--avg litters\ndrop table if exists ${Database}.temp.kc_qlik_reports_litters_roll;\nCREATE OR REPLACE TABLE ${Database}.temp.kc_qlik_reports_litters_roll\nas\nselect\n    cid,\n    avg(litter_size) as avg_litter_size\nfrom ${Database}.temp.kc_qlik_reports_litters\ngroup by cid;\n\n---------------------------------------------------------------------------\n--emails\n--this is a temporary static lookup until we have a better way to join to comms hist lookup from adestra:\n\ndrop table if exists ${Database}.temp.temp_emails;\nCREATE OR REPLACE TABLE ${Database}.temp.temp_emails\nas\nselect distinct\n    ae.campaign_id,\n    trim(lk.campaign_name) as cammpaign_name,\n    trim(lk.email_tag) as email_tag,\n    trim(lk.message) as message,\n    trim(lk.brand) as brand,\n    ae.cid,\n    ae.email,\n    ae.link_label,\n    ae.adestra_campaign_id,\n    ae.event_name,\n    first_value(cast(ae.event_timestamp as date)) over\n    (\n        partition by\n            ae.adestra_campaign_id,\n            ae.email\n        order by\n            case when lower(event_name) regexp '.*sent.*' then 1 else 0 end desc,\n            event_timestamp\n    ) as drop_date\nfrom ${Database}.live.adestra_events ae\nleft join ${Database}.db.adestra_tag_lookup lk on ae.adestra_campaign_id = trim(lk.adestra_campaign_id)\n                                          and case when ae.campaign_id <> 'NPP04398_C' then 1                                                                                      \n                                                   when (case when ae.campaign_id = 'NPP04398_C' then\n                                                             (case when ae.kog_pack = '' then 'Pro ' \n                                                                   when right(trim(kog_pack),1) = '1' then 'Pro '\n                                                                   when right(trim(kog_pack),1) = '2' then 'BETA'\n                                                              end)\n                                                        end) = left(trim(lk.message),4)  then 1\n                                                   else 0\n                                              end = 1           \nwhere trim(lk.brand) = 'Growing Pup'\n    or trim(lk.brand) = 'Pro Plan Breeder'\n    or trim(lk.brand) = 'Beta Breeder';\n\n\n--drop table if exists ${Database}.temp.kc_qlik_reports_emails_roll;\n--CREATE OR REPLACE TABLE ${Database}.temp.kc_qlik_reports_emails_roll\n--as\n--select\n--    cid,\n--    upper(to_char(drop_date,'MON-YYYY')) as campaign_month,\n--    brand,\n--    campaign_id,\n--    campaign_name,\n--    email_tag,\n--    message,\n--    count(distinct cid) as send_count,\n--    count(distinct case when lower(collate(event_name,'')) regexp 'inbound_bounce|inbound_domain|inbound_quota|inbound_user' then cid else null end) as bounced_count,\n--    count(distinct case when lower(collate(event_name,'')) regexp 'click|open|read|shared|submit' then cid else null end) as open_count,\n--    count(distinct case when lower(collate(event_name,'')) regexp 'click|shared|submit' and lower(collate(event_name,'')) not regexp 'unsubscribe' and lower(collate(link_label,'')) not regexp 'unsubscribe' then cid else null end) as click_count,\n--    count(distinct case when lower(collate(event_name,'')) regexp 'unsubscribe' or lower(collate(link_label,'')) regexp 'unsubscribe' then cid else null end) as unsub_count\n--from ${Database}.temp.temp_emails te\n--group by\n--    cid,\n--    upper(to_char(drop_date,'MON-YYYY')),\n--    brand,\n--    campaign_id,\n--    campaign_name,\n--    email_tag,\n--    message;\n\n\ndrop table if exists ${Database}.temp.kc_qlik_reports_emails_total_roll;\nCREATE OR REPLACE TABLE ${Database}.temp.kc_qlik_reports_emails_total_roll\nas\nselect\n    cid,\n    case\n        when campaign_brand = 'Pro Plan Breeder' then 136\n        when campaign_brand = 'Beta Breeder' then 137\n        else 138\n    end as brand_id,\n    sum(send_count-bounced_count) as total_delivered_count,\n    sum(open_count) as total_open_count\nfrom ${Database}.temp.temp_emails_rollup\nwhere campaign_brand in ('Growing Pup','Pro Plan Breeder','Beta Breeder')\ngroup by\n    cid,\n    campaign_brand;\n\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\n--format for qlik\ndrop table if exists ${Database}.jobs.kc_qlik_reports_data_cids;\nCREATE OR REPLACE TABLE ${Database}.jobs.kc_qlik_reports_data_cids\nas\nselect\n    ba.cid,\n    case\n        when ba.brand_id = 136 then 'Pro Plan Breeder'\n        when ba.brand_id = 137 then 'Beta Breeder'\n        else 'GP'\n    end as scheme,\n    upper(to_char(ba.scheme_reg_date,'MON-YYYY')) as scheme_reg_month,\n    case\n        when lower(ba.source) regexp '.*kc.*' then 'Kennel Club'\n        when lower(ba.source) regexp '.*thg.*' then 'The Hut Group'\n        when lower(ba.source) regexp '.*wun.*' then 'Purina Website'\n        when lower(ba.source) regexp '.*gp_social.*' then 'Social'\n\t\twhen ba.source = 'REG_FANFINDERS' then 'Your Baby Club'\n        when ba.source = 'REG_WAMIZ' then 'WAMIZ'\n        else 'Ark'\n    end as source,\n    acquisition_source,\n    case\n        when ba.emailable = 1 then 'Emailable'\n        else 'Not Emailable'\n    end as emailable,\n    1 as joined_scheme,\n    ba.dp_emailable as opted_in,\n    case\n        when sa.total_orders > 0 then 1\n        when em.total_open_count > 0 then 1\n        else 0\n    end as engaged,\n    case\n        when ba.first_date_business_unit < ba.scheme_reg_date then 1\n        else 0\n    end as known_to_purina,\n    case\n        when sa.total_orders >= 9 then '9+'\n        else cast(coalesce(floor(sa.total_orders),0) as char(1))\n    end as total_orders,\n    sa.total_orders as orders,\n    total_price,\n    case\n        when sa.orders_3_months >= 9 then '9+'\n        else cast(coalesce(floor(sa.orders_3_months),0) as char(1))\n    end as orders_3_months,\n    case\n        when sa.orders_6_months >= 9 then '9+'\n        else cast(coalesce(floor(sa.orders_6_months),0) as char(1))\n    end as orders_6_months,\n    case\n        when sa.orders_9_months >= 9 then '9+'\n        else cast(coalesce(floor(sa.orders_9_months),0) as char(1))\n    end as orders_9_months,\n    case\n        when li.avg_litter_size <= 3 then '3'\n        when li.avg_litter_size >= 9 then '9+'\n        else cast(coalesce(floor(li.avg_litter_size),0) as char(1))\n    end as avg_litter_size,\n    coalesce(em.total_delivered_count,0) as total_delivered_count,\n    coalesce(em.total_open_count,0) as total_open_count,\n    case\n        when em.total_delivered_count > 0 and em.total_open_count > 0 and (cast(em.total_open_count as decimal(16,2))/cast(em.total_delivered_count as decimal(16,2)))*100 < 25 then '<25%'\n        when em.total_delivered_count > 0 and em.total_open_count > 0 and (cast(em.total_open_count as decimal(16,2))/cast(em.total_delivered_count as decimal(16,2)))*100 < 50 then '25-50%'\n        when em.total_delivered_count > 0 and em.total_open_count > 0 and (cast(em.total_open_count as decimal(16,2))/cast(em.total_delivered_count as decimal(16,2)))*100 < 75 then '50-75%'\n        when em.total_delivered_count > 0 and em.total_open_count > 0 and (cast(em.total_open_count as decimal(16,2))/cast(em.total_delivered_count as decimal(16,2)))*100 <= 100 then '75-100%'\n        else '0%'\n    end as total_open_percent,\n    THG_Breeder_Registered,                                                        ----------ADDED IN 18/03/2019\n    THG_Growing_Pup_Registered,                                                    ----------ADDED IN 18/03/2019\n    coalesce(br.brand,'Unknown') as brand\nfrom ${Database}.temp.kc_qlik_reports_data_base ba\nleft join ${Database}.temp.kc_qlik_reports_thg_sales_roll sa on ba.cid = sa.cid and ba.brand_id = sa.source_brand_id\nleft join ${Database}.temp.kc_qlik_reports_litters_roll li on ba.cid = li.cid and ba.brand_id in (136,137)\nleft join ${Database}.temp.kc_qlik_reports_emails_total_roll em on ba.cid = em.cid and ba.brand_id = em.brand_id\nleft join (\n              select distinct\n                  cid,\n                  first_value(initcap(answer)) over(partition by cid order by answer_data_date nulls last) as brand\n              from ${Database}.live.cid_brand_question\n              where question = 'Brand of Breeder Referral'\n          ) br on br.cid = ba.cid;\n--11131\n\ndrop table ${Database}.temp.kc_qlik_reports_data_base;\ndrop table ${Database}.temp.kc_qlik_reports_litters_roll;\ndrop table ${Database}.temp.kc_qlik_reports_thg_sales_roll;\ndrop table ${Database}.temp.kc_qlik_reports_emails_total_roll;\n\n---------------------------------------------------------------------------\ndrop table if exists ${Database}.jobs.kc_qlik_reports_data_litters;\nCREATE OR REPLACE TABLE ${Database}.jobs.kc_qlik_reports_data_litters\nas\nselect\n    cid,\n    case when brand_id = 136 then 'Pro Plan Breeder'\n        when brand_id = 137 then 'Beta Breeder' end as scheme,\n    litter_dog_size,\n    case\n        when num_litters >= 5 then '5+'\n        else cast(num_litters as char(1))\n    end as num_litters\nfrom ${Database}.temp.kc_qlik_reports_litters;\n--6756\n\ndrop table ${Database}.temp.kc_qlik_reports_litters;\n\n---------------------------------------------------------------------------\n\ndrop table if exists ${Database}.jobs.kc_qlik_reports_data_puppies;\nCREATE OR REPLACE TABLE ${Database}.jobs.kc_qlik_reports_data_puppies\nas\nselect\n    cid,\n    'GP' as scheme,\n    pet_age,\n    Assumed_Confirmed,\n    case\n                                                                            -- REMOVED TO ALLOW NEGATIVE WEEKS --when (scheme_reg_date-pet_dob)/7 < 1 then '1' -- 18/03/2019\n        when (scheme_reg_date-pet_dob)/7 < -19 then '<-19'                    -- ADDED TO HANDLE VERY LOW NUMBERS -- 19/03/2019\n        when (scheme_reg_date-pet_dob)/7 > 19 then '>19'\n        else cast(floor((scheme_reg_date-pet_dob)/7) as char(4))                    -- Changed to 3 to account for the '-'char        --18/03/2019\n    end as puppy_weeks\nfrom ${Database}.temp.kc_qlik_reports_puppies;\n--6954\n\ndrop table ${Database}.temp.kc_qlik_reports_puppies;\n\n---------------------------------------------------------------------------\ndrop table if exists ${Database}.jobs.kc_qlik_reports_data_thg_sales;\nCREATE OR REPLACE TABLE ${Database}.jobs.kc_qlik_reports_data_thg_sales\nas\nselect\n    cid,\n    case\n        when source_brand_id = 136 then 'Pro Plan Breeder'\n        when source_brand_id = 137 then 'Beta Breeder'\n        else 'GP'\n    end as scheme,\n    despatched_month,\n    order_number,\n    ordered_product_id,\n    tbw.db.strchop(product_name, '|', -1, -1) as product_name,        \n    puppy_pack,\n    price,\n    case\n        when product_name regexp '.*££.*' then 'Chargable'\n        else 'Free'\n    end as Pricing,\n    quantity,\n    case\n        when first_despatched_month = despatched_month then 1\n        else 0\n    end as first_purchase\nfrom ${Database}.temp.kc_qlik_reports_thg_sales;\n--7270\n\ndrop table ${Database}.temp.kc_qlik_reports_thg_sales;\n\n---------------------------------------------------------------------------\ndrop table if exists ${Database}.jobs.kc_qlik_reports_data_email;\nCREATE OR REPLACE TABLE ${Database}.jobs.kc_qlik_reports_data_email\nas\nselect\n    cid,\n    case\n        when campaign_brand = 'Pro Plan Breeder' then 'Pro Plan Breeder'\n        when campaign_brand = 'Beta Breeder' then 'Beta Breeder'\n        else 'GP'\n    end as scheme,\n\tcount(distinct case when to_date(concat('01-',campaign_month),'DD-MON-YYYY') >= '2018-04-01' \n                         and send_count > 0 \n                         and campaign_brand not in ('Pro Plan Breeder','Beta Breeder') \n                        then campaign_month end) over() as month_count,\n    campaign_month,\n    campaign_brand as brand,\n    campaign_id,\n    campaign_name,\n    email_tag,\n    message,\n    send_count,\n    send_count-bounced_count as delivered_count,\n    open_count,\n    click_count,\n    unsub_count\nfrom ${Database}.temp.temp_emails_rollup\nwhere campaign_brand in ('Pro Plan Breeder','Beta Breeder','Growing Pup');\n\n---------------------------------------------------------------------------\ndrop table if exists ${Database}.jobs.kc_qlik_reports_data_email_clicks;\nCREATE OR REPLACE TABLE ${Database}.jobs.kc_qlik_reports_data_email_clicks\nas\nselect\n    cid,\n    case\n        when brand = 'Pro Plan Breeder' then 'Pro Plan Breeder'\n        when brand = 'Beta Breeder' then 'Beta Breeder'\n        else 'GP'\n    end as scheme,\n    upper(to_char(drop_date,'MON-YYYY')) as campaign_month,\n    link_label,\n    1 as click\nfrom ${Database}.temp.temp_emails\nwhere lower(event_name) regexp '.*click.*|.*shared.*|.*submit.*'\n    and lower(event_name) not regexp '.*unsubscribe.*'\n    and lower(link_label) not regexp '.*unsubscribe.*'\n    and link_label > '';\n\n---------------------------------------------------------------------------\n--Kitten Code dashboard\n---------------------------------------------------------------------------\n\ndrop table if exists ${Database}.temp.kitten_code_qlik_reports_data_base cascade;\nCREATE OR REPLACE TABLE ${Database}.temp.kitten_code_qlik_reports_data_base\nas\nselect distinct\n    cb.cid,\n    cb.brand_id,\n    first_value(p.source) over\n    (\n       partition by p.cid, p.pet_name\n       order by p.data_date nulls last\n    ) as source,\n    first_value(case when (lower(nm.source) regexp '.*thg.*' and cb.brand_id = 143) then 'Has THG Account' else 'No THG Account' end) over\n    (\n       partition by cb.cid, cb.brand_id\n       order by case when (lower(nm.source) regexp '.*thg.*' and cb.brand_id = 143) then 1 else 0 end desc\n     )as thg_kitten_code_registered,\n    first_value(p.data_date) over\n    (\n       partition by p.cid, p.pet_name\n       order by p.data_date nulls last\n    ) as scheme_reg_date,\n    TRIM(replace(replace(replace(replace(initcap(\n                                               case\n                                                   when cbu.acquisition_channel ilike 'historic%' then 'Historic'\n                                                   when coalesce(cbu.acquisition_channel,'') in ('','Manual') then 'Historic'\n                                                   when trim(cbu.acquisition_channel) in ('Revolution','RESP_ADVENT') then 'CIAM'\n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Social' and atj.acquisition_registration_campaign = 'Kitten Code Social' then 'Wunderman - Kitten Code Social'\n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Social' and atj.acquisition_registration_campaign = 'Better Together Social' then 'Wunderman - Better Together Social'\n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Social' and atj.acquisition_registration_campaign = 'Growing Pup Social' then 'Wunderman - Growing Pup Social'                 \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Website Registrations' and atj.acquisition_registration_campaign = 'Kitten Code' then 'Wunderman - Kitten Code Website Registration'                   \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Website Registrations' and atj.acquisition_registration_campaign = 'Better Together' then 'Wunderman - Better Together Website Registration'                  \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Website Registrations' and atj.acquisition_registration_campaign = 'Growing Pup' then 'Wunderman - Growing Pup Website Registration'                   \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Website Registrations' then 'Wunderman - Other Website Registration'                   \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Sampling' and atj.acquisition_registration_campaign in ('Go-Cat Free Sample','Go-CAT Free Sample') then 'Wunderman - Go Cat Free Sample'                  \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Sampling' and atj.acquisition_registration_campaign = 'Dentalife Dog Free Sample' then 'Wunderman - Dentalife Dog Free Sample'\n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Sampling' then 'Wunderman - Other Sample'                                                    \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) in  ('COUPON/CASHBACK','Coupon/Cashback') then 'Wunderman - Coupon/Cashback'\n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Sampling' then 'Wunderman - Other Sample'    \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Loyalty' and atj.acquisition_registration_campaign = 'Club PRO PLAN' then 'Wunderman - Club Pro Plan'  \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Event' then 'Wunderman - Event'     \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Connected Packaging Website' then 'Connected Packaging Website'  \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Trial' then 'Wunderman - Trial'  \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Competition' and atj.acquisition_registration_campaign = 'BETA Instant Win' then 'Wunderman - BETA Instant Win Competition'  \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Competition' and atj.acquisition_registration_campaign = 'Bakers Competition' then 'Wunderman - Bakers Competition'  \n                                                   when trim(cbu.acquisition_channel) = 'Wunderman' and trim(cbu.acquisition_type) = 'Puppy pre-acquisition' and atj.acquisition_registration_campaign = 'Puppy pre-acquisition' then 'Wunderman - Puppy Pre Acquisition' \n                                                   when trim(cbu.acquisition_channel) =  'Felix SoPost (Incorrect Opt-in)' then 'SoPost'  \n                                                   when trim(cbu.acquisition_channel) = 'Better Together Christmas' then 'Better Together Christmas 2021'  \n                                                   when trim(cbu.acquisition_channel) = 'Revolution' then 'Historic'  \n                                                   when trim(cbu.acquisition_channel) in ('Qualifio Kitten Code Social Ads','Growing Pup Survey') then 'Historic'                                                  \n                                                   else replace(replace(cbu.acquisition_channel,'RESP_',''),'_',' ')\n                                               end\n                                           ),'Ciam','CIAM'),'Ces','CES'),'Sopost','SoPost'),'Gbd','GBD')) as acquisition_source,\n    cb.emailable,\n    cbu.first_date_business_unit\nfrom ${Database}.live.cid_brand cb\ninner join ${Database}.live.names nm on nm.cid = cb.cid\nleft join   (\n            select \n                xr.cid,\n                p.name_urn, \n                p.pet_name,\n                case when p.source = 'REG_WUN' and lower(p.name_urn) regexp '.*kitten code.*' and lower(p.name_urn) regexp '.*social.*' then 'SOCIAL' \n                     when p.source = 'REG_WUN' and lower(p.name_urn) regexp '.*kitten code.*' then 'KC Sign Up' \n                     when p.source = 'REG_WUN' then 'Range Brand Sign Up'\n                     else p.source end as source,\n                p.data_date\n            from ${Database}.db.pet p\n            left join ${Database}.live.xref_name_urn xr on p.name_urn = xr.name_urn\n            where lower(p.pet_type) = 'cat'\n            ) p on p.cid = cb.cid\ninner join ${Database}.live.pet_name_lookup pnl on upper(p.pet_name) = upper(pnl.pet_name)\ninner join ${Database}.live.cid_pet cp on cp.cid = p.cid\n                                 and ((cp.pet_name > '' and cp.pet_name = pnl.pet_name_cleaned) or cp.pet_name = '')\n                                 and lower(cp.pet_life_stage) = 'kitten'\n                                 and cp.pet_dob is not null\ninner join ${Database}.live.cid_business_unit cbu on cb.cid = cbu.cid and cbu.business_unit_id = 5\nleft join ${Database}.temp.ref_acquisition_type_joined atj on cbu.cid = atj.cid and cbu.acquisition_channel = atj.acquisition_channel and cbu.acquisition_type = atj.acquisition_type\nwhere cb.brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'kitten code') --all eligible, non-organic kitten owners get assigned a kitten code record in cid_brand\nand (cb.brand_preference = 1 or (cb.brand_engagement = 1 and cb.brand_preference <> 0))\n;\n\ndelete from ${Database}.temp.kitten_code_qlik_reports_data_base where scheme_reg_date is null;\n\n---------------------------------------------------------------------------\n--kittens\n\ndrop table if exists ${Database}.temp.kitten_code_qlik_reports_kittens cascade;\nCREATE OR REPLACE TABLE ${Database}.temp.kitten_code_qlik_reports_kittens\nas\nselect\n    ba.cid,\n    ba.scheme_reg_date,\n    p.pet_dob,\n    case \n        when p.pet_dob >= current_date-56                   then '8 weeks'\n        when p.pet_dob >= current_date-63                   then '9 weeks'\n        when p.pet_dob >= current_date-70                   then '10 weeks'\n        when p.pet_dob >= current_date-77                   then '11 weeks'\n        when p.pet_dob >= current_date-84                   then '12 weeks'\n        when p.pet_dob >= current_date-91                   then '13 weeks'\n        when p.pet_dob >= current_date-98                   then '14 weeks'\n        when p.pet_dob >= current_date-105                  then '15 weeks'\n        when p.pet_dob >= add_months(current_date,-4)       then '4 months'\n        when p.pet_dob >= add_months(current_date,-5)       then '5 months'\n        when p.pet_dob >= add_months(current_date,-6)       then '6 months'\n        when p.pet_dob >= add_months(current_date,-7)       then '7 months'\n        when p.pet_dob >= add_months(current_date,-8)       then '8 months'\n        when p.pet_dob >= add_months(current_date,-9)       then '9 months'\n        when p.pet_dob >= add_months(current_date,-10)      then '10 months'\n        when p.pet_dob >= add_months(current_date,-11)      then '11 months'\n        when p.pet_dob >= add_months(current_date,-12)      then '12 months'\n        else '' end as pet_age\nfrom ${Database}.temp.kitten_code_qlik_reports_data_base ba\ninner join ${Database}.live.names nm on ba.cid = nm.cid\ninner join ${Database}.live.cid_brand cb on ba.cid = cb.cid\n                                   and ba.brand_id = cb.brand_id\ninner join ${Database}.live.cid_pet p on nm.cid = p.cid \nwhere ((lower(p.source) regexp '.*reg_wun.*' and lower(p.name_urn) regexp '.*kitten code.*') or (p.pet_dob >= add_months(current_date,-12) and p.pet_data_date > '2020-06-08'))\n;\n\n---------------------------------------------------------------------------\n--emails\n--this is a temporary static lookup until we have a better way to join to comms hist lookup from adestra:\n\ndrop table if exists ${Database}.temp.kitten_code_temp_emails;\nCREATE OR REPLACE TABLE ${Database}.temp.kitten_code_temp_emails\nas\nselect distinct\n    ae.campaign_id,\n    lk.campaign_name,\n    lk.email_tag,\n    lk.message,\n    lk.brand,\n    ae.cid,\n    ae.email,\n    ae.link_label,\n    ae.adestra_campaign_id,\n    ae.event_name,\n    first_value(cast(ae.event_timestamp as date)) over\n    (\n        partition by\n            ae.adestra_campaign_id,\n            ae.email\n        order by\n            case when lower(event_name) regexp '.*sent.*' then 1 else 0 end desc,\n            event_timestamp\n    ) as drop_date\nfrom ${Database}.live.adestra_events ae\nleft join ${Database}.db.adestra_tag_lookup lk on ae.adestra_campaign_id = lk.adestra_campaign_id \nwhere lk.brand = 'Kitten Code'\n;\n\ndrop table if exists ${Database}.temp.kitten_code_qlik_reports_emails_total_roll cascade;\nCREATE OR REPLACE TABLE ${Database}.temp.kitten_code_qlik_reports_emails_total_roll\nas\nselect\n    cid,\n    (select brand_id from ${Database}.live.ref_brand where lower(brand) regexp '.*kitten code.*') as brand_id,\n    sum(send_count-bounced_count) as total_delivered_count,\n    sum(open_count) as total_open_count\nfrom ${Database}.temp.temp_emails_rollup\nwhere campaign_brand = 'Kitten Code'\ngroup by\n    cid,\n    campaign_brand\n;\n\n--format for qlik\ndrop table if exists ${Database}.jobs.kitten_code_qlik_reports_data_cids cascade;\nCREATE OR REPLACE TABLE ${Database}.jobs.kitten_code_qlik_reports_data_cids\nas\nselect\n    ba.cid,\n    upper(to_char(ba.scheme_reg_date,'MON-YYYY')) as scheme_reg_month,\n    case\n        when lower(ba.source) regexp '.*thg.*' then 'The Hut Group'\n        when lower(ba.source) regexp '.*social.*' then 'Social'\n        when ba.source in ('KC Sign Up','Range Brand Sign Up') then source \n        else 'Other'\n    end as source,\n    ba.acquisition_source,\n    case\n        when ba.emailable = 1 then 'Emailable'\n        else 'Not Emailable'\n    end as emailable,\n    ba.emailable as opted_in,\n    1 as joined_scheme,\n    case when em.total_open_count > 0 then 1 else 0 end as engaged,\n    case\n        when ba.first_date_business_unit < ba.scheme_reg_date then 1\n        else 0\n    end as known_to_purina,\n    coalesce(em.total_delivered_count,0) as total_delivered_count,\n    coalesce(em.total_open_count,0) as total_open_count,\n    case\n        when em.total_delivered_count > 0 and em.total_open_count > 0 and (cast(em.total_open_count as decimal(16,2))/cast(em.total_delivered_count as decimal(16,2)))*100 < 25 then '<25%'\n        when em.total_delivered_count > 0 and em.total_open_count > 0 and (cast(em.total_open_count as decimal(16,2))/cast(em.total_delivered_count as decimal(16,2)))*100 < 50 then '25-50%'\n        when em.total_delivered_count > 0 and em.total_open_count > 0 and (cast(em.total_open_count as decimal(16,2))/cast(em.total_delivered_count as decimal(16,2)))*100 < 75 then '50-75%'\n        when em.total_delivered_count > 0 and em.total_open_count > 0 and (cast(em.total_open_count as decimal(16,2))/cast(em.total_delivered_count as decimal(16,2)))*100 <= 100 then '75-100%'\n        else '0%'\n    end as total_open_percent,\n    0 as thg_breeder_registered,\n    thg_kitten_code_registered\nfrom ${Database}.temp.kitten_code_qlik_reports_data_base ba\nleft join ${Database}.temp.kitten_code_qlik_reports_emails_total_roll em on ba.cid = em.cid and ba.brand_id = em.brand_id\n;\n\ndrop table if exists ${Database}.jobs.kitten_code_qlik_reports_data_kittens cascade;\nCREATE OR REPLACE TABLE ${Database}.jobs.kitten_code_qlik_reports_data_kittens\nas\nselect\n    cid,\n    pet_age,\n    case when (scheme_reg_date-pet_dob)/7 < -19 then '<-19'\n         when (scheme_reg_date-pet_dob)/7 > 19 then '>19'\n         else cast(floor((scheme_reg_date-pet_dob)/7) as char(4))\n         end as kitten_weeks\nfrom ${Database}.temp.kitten_code_qlik_reports_kittens\n;\n\ndrop table ${Database}.temp.kitten_code_qlik_reports_kittens;\n\ndrop table if exists ${Database}.jobs.kitten_code_qlik_reports_data_email;\nCREATE OR REPLACE TABLE ${Database}.jobs.kitten_code_qlik_reports_data_email\nas\nselect\n    r.cid,\n    r.campaign_month,\n    c.month_count,\n    r.campaign_brand as brand,\n    r.campaign_id,\n    r.campaign_name,\n    r.email_tag,\n    r.message,\n    r.send_count,\n    r.send_count-bounced_count as delivered_count,\n    r.open_count,\n    r.click_count,\n    r.unsub_count\nfrom ${Database}.temp.temp_emails_rollup r\nleft join (\n            select count(distinct campaign_month) as month_count\n            from ${Database}.temp.temp_emails_rollup\n            where campaign_brand = 'Kitten Code'\n            and to_date(concat('01-',campaign_month),'DD-MON-YYYY') >= '2020-06-01' --the earliest date we should be looking at KC campaign activity from - this is in line with the restriction on the Qlik load code\n           ) c on 1=1\nwhere r.campaign_brand = 'Kitten Code'\n;\n\ndrop table ${Database}.temp.temp_emails_rollup;\n\n---------------------------------------------------------------------------\ndrop table if exists ${Database}.jobs.kitten_code_qlik_reports_data_email_clicks;\nCREATE OR REPLACE TABLE ${Database}.jobs.kitten_code_qlik_reports_data_email_clicks\nas\nselect\n    cid,\n    upper(to_char(drop_date,'MON-YYYY')) as campaign_month,\n    link_label,\n    1 as click\nfrom ${Database}.temp.kitten_code_temp_emails\nwhere lower(event_name) regexp '(.*)(click|shared|submit)(.*)'\nand lower(event_name) not regexp '.*unsubscribe.*'\nand lower(link_label) not regexp '.*unsubscribe.*'\nand link_label > ''\n;\n\ndrop table ${Database}.temp.kitten_code_temp_emails;\n\n\n---------------------------------------------------------------------------\nalter warehouse set warehouse_size = 'Small';\ndrop table if exists ${Database}.temp.new_to_scv;\nCREATE OR REPLACE TABLE ${Database}.temp.new_to_scv\nas\nselect distinct\n    nm.cid,\n    trim(dbn.name_urn) as name_urn,\n    rb.division,\n    rb.brand,    \n    dbn.source_brand_id,\n        case when lower(dbn.source_file) regexp '.*paw-daily-uk.txt.*' then 'Pets at Work'\n         when rb.brand is null then 'Unknown'\n          else     rb.brand\n    end as source_brand_filter,\n    case --when dbn.source = 'ENQU_CES'\n         --when dbn.source = 'MANUAL' \n        when trim(dbn.source) = 'REG_ARK'     then 'Ark'\n        when trim(dbn.source) = 'BETA_BREEDER'    then 'Ark'\n        when trim(dbn.source) = 'PROPLAN_BREEDER' then 'Ark'\n\t\twhen trim(dbn.source) = 'REG_GIG'     then 'CIAM'\n        when trim(dbn.source) = 'REG_KC'     then 'Kennel Club'\n        when trim(dbn.source) = 'REG_KE'     then 'Knowledge Experts'\n        when trim(dbn.source) = 'REG_QU_1'     then 'Quotient'\n        when trim(dbn.source) = 'REG_THG'     then 'The Hut Group'\n        when trim(dbn.source) = 'REG_FELIX'     then 'Felix SoPost'\n        when trim(dbn.source) = 'REG_DENTALIFE'    then 'SoPost'\n        when trim(dbn.source) = 'REG_FELIX_BAD_DP'     then 'Felix SoPost (Incorrect Opt-in)'\n        when trim(dbn.source) = 'REG_WUN'     then 'Wunderman'\n        when trim(dbn.source) = 'REG_WIN'     then 'Winalot GBD'\n        when trim(dbn.source) = 'ENQU_CES'    then 'CES'\n        when trim(dbn.source) = 'RESP_GP'     then 'Growing Pup Survey'\n        when trim(dbn.source) = 'REG_NPP_LYLTY'     then 'Retailer Loyalty Card'\n        when trim(dbn.source) = 'REG_SHOPM'     then 'Shopmium'\n        when trim(dbn.source) = 'RI_AO_2'     then 'Animal Oracle'     --not present\n        when trim(dbn.source) = 'SAMP_GOU_1'     then 'Wunderman'     --not present\n        when lower(dbn.source) regexp 'resp_bv_.*'     then 'Bazaar Voice'\n\t\twhen trim(dbn.source) = 'REG_FANFINDERS' then 'Your Baby Club'\n\t\twhen trim(dbn.source) = 'REG_WAMIZ' then 'Wamiz'\n\t\twhen trim(dbn.source) = 'REG_EMMAS_DIARY'     then 'Emmas Diary'\n        when trim(dbn.source) = 'REG_YOUR_PURINA'     then 'Your Purina Acquisition'\n        when trim(dbn.source) = 'RESP_YOUR_PURINA'    then 'Your Purina Existing Consumers'\n        else trim(dbn.source) end             as source_channel,\n    case \n         when trim(dbn.source) = 'REG_KE'     and lower(dbn.source_file) regexp '.*uk-dentalife-.*'then 'KE Dentalife Sample'\n         when trim(dbn.source) = 'REG_WIN'     and lower(dbn.source_urn) regexp '.*reg_win_1.*'then 'Winalot GBD - Immediate'\n         when trim(dbn.source) = 'REG_WIN'     and lower(dbn.source_urn) regexp '.*reg_win_2.*'then 'Winalot GBD - Katalyst'\n         when trim(dbn.source) = 'REG_QU_1'         then 'QU '||rb.brand\n         when trim(dbn.source) = 'RESP_GP'     then 'Growing Pup Survey'\n         when trim(dbn.source) = 'REG_FELIX'     then 'Felix SoPost'\n\t\t when trim(dbn.source) = 'REG_DENTALIFE'     then 'SoPost Dentalife'\n         when trim(dbn.source) = 'REG_FELIX_BAD_DP'     then 'Felix SoPost (Incorrect Opt-in)'\n         when trim(dbn.source) = 'ENQU_CES'     then 'CES'\n         when trim(dbn.source) = 'REG_WUN'     and lower(dbn.name_urn) regexp '.*try for free.*' then 'WU '||rb.brand||' Try For Free'\n         when trim(dbn.source) = 'REG_NPP_LYLTY' and rb.brand = 'Beta' then 'Retailer Loyalty Card Beta'\n         when trim(dbn.source) = 'REG_NPP_LYLTY' and rb.brand = 'Pro Plan' then 'Retailer Loyalty Card Pro Plan'\n         when trim(dbn.source) = 'RI_AO_2'         then 'AO Advocate Feeding' --not present\n         when trim(dbn.source) = 'SAMP_GOU_1'     then 'WU Gourmet Samples' --not present\n         when trim(dbn.source) = 'REG_WUN'         then 'WU '||replace(replace(replace(translate(trim(dbn.name_urn),'1234567890','##########'),'REG_WUN|',''),'-#',''),'#','')\n         when trim(dbn.source) = 'BETA_BREEDER'     then 'AR '||rb.brand\n         when trim(dbn.source) = 'PROPLAN_BREEDER'     then 'AR '||rb.brand\n         when lower(dbn.source) regexp 'resp_bv_.*'     then 'BV '||rb.brand\n         when trim(dbn.source) = 'REG_FANFINDERS' then 'Your Baby Club - '||rb.brand\n         when trim(dbn.source) = 'REG_WAMIZ' then 'WAMIZ - '||rb.brand\n\t\t when trim(dbn.source) = 'REG_EMMAS_DIARY'     then 'Emmas Diary'\n\t\t when trim(dbn.source) = 'REG_YOUR_PURINA'     then 'Your Purina Acquisition - '||rb.brand\n         when trim(dbn.source) = 'RESP_YOUR_PURINA'    then 'Your Purina Existing Consumers - '||rb.brand\n          else replace(trim(dbn.source), 'REG_','')||' '||rb.brand\n     end as reg_campaign,\n    trim(dbn.source) as source,    \n    trim(dbn.source_file) as source_file,\n    dbn.source_date,\n    case when (\n                first_value(dbn.source_date) over \n                    (\n                        partition by nm.cid, dbn.source_brand_id \n                        order by dbn.source_date nulls last\n                    )                         --as first_date_brand,\n               ) =   dbn.source_date then 1 else 0 end as new_to_brand,   \n    case when (\n                first_value(dbn.source_date) over \n                    (\n                        partition by nm.cid, dbn.source_data_controller_id \n                        order by dbn.source_date nulls last\n                    )                                            --as first_date_data_controller,\n              ) =   dbn.source_date then 1 else 0 end as new_to_purina\nfrom ${Database}.live.names nm\ninner join ${Database}.db.names dbn on trim(dbn.name_urn) = nm.name_urn\njoin ${Database}.live.ref_brand     rb on rb.brand_id = dbn.source_brand_id\nwhere dbn.source_data_controller_id = 5\n  and trim(dbn.source_file) <> '9999'\n  and trim(dbn.source_file) <> 'proplan_user_profile_2018-02-08'\n  and lower(dbn.name_urn) not regexp '.*reg_wun\\\\|toy.*'\n  and lower(dbn.name_urn) not regexp '.*rtbf.*'\n;\n\nalter warehouse set warehouse_size = 'Xsmall';\n\ndrop table if exists ${Database}.jobs.npp_data_feeds_qlik_report;\nCREATE OR REPLACE TABLE ${Database}.jobs.npp_data_feeds_qlik_report\nas\nselect\n    ne.cid,\n    ne.division,\n    ne.brand,\n    ne.source_brand_id,\n    ne.source_brand_filter,\n    ne.source_channel,\n    ne.reg_campaign,\n    ne.source_file,\n    ne.source_date,\n    ne.new_to_brand,\n    ne.new_to_purina,\n    dp.emailable\nfrom ${Database}.temp.new_to_scv ne\nleft join (\n              select distinct\n                  name_urn,\n                  source,\n                  source_date,\n                  first_value(dp_emailable) over\n                      (\n                          partition by\n                              name_urn,\n                              source,\n                              source_date\n                          order by\n                              case when dp_emailable is null then 0 else 1 end desc,\n                              dp_date desc nulls last,\n                              data_date desc nulls last,\n                              source_date desc nulls last,\n                              dp_emailable nulls last\n                      ) as emailable\n              from ${Database}.db.names_dp\n          ) dp on trim(dp.name_urn) = trim(ne.name_urn)\n              and trim(dp.source) = trim(ne.source)\n              and dp.source_date = ne.source_date\nwhere ne.source_date > add_months(current_date,-12);\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------ECRM DASHBOARD----------------------------------------------------------------\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\nalter warehouse set warehouse_size = 'Large';\n\ndrop table if exists ${Database}.temp.sent_campaigns;\nCREATE OR REPLACE TABLE ${Database}.temp.sent_campaigns\nas\nselect distinct \n                 Campaign_id,\n                 max(drop_date) as drop_date\nfrom ${Database}.db.COMMS_HIST\nwhere drop_date >= add_months(current_date,-24)\nand drop_date >= '2018-01-01'\ngroup by campaign_id;\n\n\ndrop table if exists ${Database}.temp.adestra_events;\nCREATE OR REPLACE TABLE ${Database}.temp.adestra_events\nas\nselect\n    ae.cid,\n    ae.campaign_id,\n    ae.adestra_campaign_id,\n    ae.kog_pack,\n    ae.adestra_campaign_name,\n    ae.link_label,\n    ae.link_url,\n    ae.email,\n    ae.event_name,\n    ae.event_timestamp,\n\tae.form_builder_id\nfrom ${Database}.live.adestra_events ae\ninner join ${Database}.temp.sent_campaigns sc on ae.campaign_id = sc.campaign_id\nwhere cast(event_timestamp as date) >= add_months(current_date,-24);\n\ndrop table if exists ${Database}.temp.sent_campaigns;\n\n\ndrop table if exists ${Database}.temp.campaign_information;\nCREATE OR REPLACE TABLE ${Database}.temp.campaign_information\nas\nselect\n    x.cid,\n    x.campaign_id,\n    x.adestra_campaign_id,\n    case when lk.campaign_name is null then replace(x.adestra_campaign_name, '_', ' ') else trim(lk.campaign_name) end as campaign_name,\n    x.link_label,\n    x.Engagement_Prefix,\n    x.Content_Pillar,\n    x.Sub_Categories,\n    trim(lk.email_tag) as email_tag,\n    trim(lk.message) as message,\n    decode(trim(lk.brand),'Master Brand','Purina Masterbrand',trim(lk.brand)) as brand,\n    case when x.sent_date is not null then 1 else 0 end as sent,\n    x.sent_date,\n    case when (x.bounce_date is null and x.sent_date is not null) then 1 else 0 end as delivered,\n    case when (x.bounce_date is null and x.sent_date is not null) then x.sent_date end as delivered_date,\n    case when x.open_date is not null then 1 else 0 end as opened,\n    x.open_date,\n    case when x.clicked_date is not null then 1 else 0 end as clicked,\n    x.clicked_date,\n    case when x.unsubscribed_date is not null then 1 else 0 end as unsubscribed,\n    x.unsubscribed_date\nfrom (\n         select\n             ae1.cid,\n             ae1.campaign_id,\n             ae1.adestra_campaign_id,\n             ae1.adestra_campaign_name,\n             ae1.kog_pack,\n             ae2.link_label,\n             ae2.Engagement_Prefix,\n             ae2.Content_Pillar,\n             ae2.Sub_Categories,\n             max(case when ae1.event_name = 'sent_campaign' then cast(ae1.event_timestamp as date) end) as sent_date,\n             max(case when lower(ae1.event_name) in ('inbound_bounce','inbound_domain','inbound_quota','inbound_user') then cast(ae1.event_timestamp as date) end) as bounce_date,\n             max(case when lower(ae1.event_name) regexp '.*read.*|.*click.*' then cast(ae1.event_timestamp as date) end) as open_date,\n\t\t\tmax(\n                    case\n                        when lower(ae1.event_name) regexp '.*click.*'\n                            and lower(ae1.link_url) not regexp '.*unsub.*'\n                            and lower(ae1.event_name) not regexp '.*unsub.*'\n                            and ae1.form_builder_id not in ('365','380','381','201','278','364','370','371','372','373','374','375','376','377','378','379','408')\n                        then cast(ae1.event_timestamp as date)\n                    end\n                ) as clicked_date,\n             max(coalesce(u2.data_date,u1.data_date)) as unsubscribed_date\n         from ${Database}.temp.adestra_events ae1\n         left join (\n                       select distinct\n                           ae.cid,\n                           un.data_date,\n                           ae.campaign_id,\n                           ae.adestra_campaign_id,\n                           ae.adestra_campaign_name,\n                           row_number() over(partition by ae.cid, un.data_date order by case when lower(link_url) regexp '.*unsub.*' then 1 else 0 end desc, event_timestamp desc) as rn\n                       from ${Database}.db.supps_unsubscribe un\n                       inner join ${Database}.temp.adestra_events ae on lower(ae.email) = lower(trim(un.email))\n                                                               and un.data_date >= cast(ae.event_timestamp as date)\n                                                               and un.data_date <= (cast(ae.event_timestamp as date) + 7)\n                       where lower(ae.event_name) regexp '.*click.*|.*read.*'\n                           and lower(un.source_file) regexp '.*export.csv.*'\n                           and un.brand_id is null\n                   ) u1 on ae1.cid = u1.cid\n                      and ae1.campaign_id = u1.campaign_id\n                      and ae1.adestra_campaign_id = u1.adestra_campaign_id\n                      and ae1.adestra_campaign_name = u1.adestra_campaign_name\n                      and u1.rn = 1\n         left join (\n                       select distinct\n                           ae.cid,\n                           un.data_date,\n                           ae.campaign_id,\n                           ae.adestra_campaign_id,\n                           ae.adestra_campaign_name\n                       from ${Database}.db.supps_unsubscribe un\n                       inner join ${Database}.temp.adestra_events ae on lower(ae.email) = lower(un.email)\n                                                               and ae.adestra_campaign_name = un.unsub_campaign\n                       where un.unsub_campaign > ''\n                   ) u2 on ae1.cid = u2.cid\n                       and ae1.campaign_id = u2.campaign_id\n                       and ae1.adestra_campaign_id = u2.adestra_campaign_id\n                       and ae1.adestra_campaign_name = u2.adestra_campaign_name\n                       and cast(ae1.event_timestamp as date) = u2.data_date\n         left join (\n                       select\n                           cid,\n                           campaign_id,\n                           adestra_campaign_id,\n                           adestra_campaign_name,\n                           link_label,\n                           case\n                               when lower(link_label) regexp '.*\\\\|.*' then trim(split_part(link_label,'|',1))\n                               else trim(split_part(link_label,'-',1))\n                           end as engagement_prefix,\n                           case\n                               when lower(link_label) regexp '.*\\\\|.*' then trim(split_part(link_label,'|',2))\n                               else trim(split_part(link_label,'-',2))\n                           end as content_pillar,\n                           case\n                               when lower(link_label) regexp '.*\\\\|.*' then trim(split_part(link_label,'|',3))\n                               else trim(split_part(link_label,'-',3))\n                           end as sub_categories\n                       from ${Database}.temp.adestra_events\n                       where link_label > ''\n                   ) ae2 on ae1.cid = ae2.cid\n                        and ae1.campaign_id = ae2.campaign_id\n                        and ae1.adestra_campaign_id = ae2.adestra_campaign_id\n                        and ae1.adestra_campaign_name = ae2.adestra_campaign_name\n         where lower(ae1.campaign_id) regexp '^npp.*'\n         group by 1,2,3,4,5,6,7,8,9\n     ) x\nleft join ${Database}.db.adestra_tag_lookup lk on x.adestra_campaign_id = trim(lk.adestra_campaign_id)\n                                          and case when x.campaign_id <> 'NPP04398_C' then 1                                                                                      \n                                                   when (case when x.campaign_id = 'NPP04398_C' then\n                                                             (case when x.kog_pack = '' then 'Pro ' \n                                                                   when left(tbw.db.strchop(trim(kog_pack),'|',-1,-1),1) = '1' then 'Pro '\n                                                                   when left(tbw.db.strchop(trim(kog_pack),'|',-1,-1),1) = '2' then 'BETA'\n                                                                   when left(tbw.db.strchop(trim(kog_pack),'|',-1,-1),1) = '3' then 'Bake'\n                                                                   when left(tbw.db.strchop(trim(kog_pack),'|',-1,-1),1) = '0' then 'Gene'\n                                                              end)\n                                                        end) = left(trim(lk.message),4)  then 1\n                                                   else 0\n                                              end = 1           \nwhere sent_date>= add_months(current_date,-24)\n;\n\n\ndrop table if exists ${Database}.jobs.ecrm_dashboard_campaign_information;\ncreate table ${Database}.jobs.ecrm_dashboard_campaign_information\nas\n\nselect\n    c.cid,\n    ci.campaign_id,\n    ci.adestra_campaign_id,\n    ci.campaign_name,\n    ci.link_label,\n    ci.engagement_prefix,\n    ci.content_pillar,\n    ci.sub_categories,\n    ci.email_tag,\n    ci.message,\n    case\n        when c.purina_engagement_score < 130  then 'Low'\n        when c.purina_engagement_score <= 310 then 'Medium'\n        when c.purina_engagement_score > 310  then 'High'\n        else 'Low'\n    end as engagement_cluster,\n    upper(to_char(sent_date, 'MON-YYYY'))as campaign_month,\n    ci.sent,\n    ci.sent_date,\n    ci.delivered,\n    ci.delivered_date,\n    ci.opened,\n    ci.open_date,\n    ci.clicked,\n    ci.clicked_date,\n    ci.unsubscribed,\n    ci.unsubscribed_date,\n    case\n        when have_dog in ('IN','IO') and have_cat = 'N'          then 'Inferred Dog'\n        when have_dog = 'Y'          and have_cat = 'N'          then 'Known Dog'\n        when have_dog = 'N'          and have_cat in ('IN','IO') then 'Inferred Cat'\n        when have_dog = 'N'          and have_cat = 'Y'          then 'Known Cat'\n        when have_dog in ('IN','IO') and have_cat in ('IN','IO') then 'Inferred Dog & Cat'\n        when have_dog in ('IN','IO') and have_cat = 'Y'          then 'Inferred Dog & Known Cat'\n        when have_dog = 'Y'          and have_cat in ('IN','IO') then 'Known Dog & Inferred Cat'\n        when have_dog = 'Y'          and have_cat = 'Y'          then 'Known Dog & Cat'\n        when have_dog = 'N'          and have_cat = 'N'          then 'Unknown'\n        else 'Error'\n    end as pet_ownership_l2,\n    case\n        when have_dog in ('IN','IO') and have_cat = 'N'          then 'Dog'\n        when have_dog = 'Y'          and have_cat = 'N'          then 'Dog'\n        when have_dog = 'N'          and have_cat in ('IN','IO') then 'Cat'\n        when have_dog = 'N'          and have_cat = 'Y'          then 'Cat'\n        when have_dog in ('IN','IO') and have_cat in ('IN','IO') then 'Both'\n        when have_dog in ('IN','IO') and have_cat = 'Y'          then 'Both'\n        when have_dog = 'Y'          and have_cat in ('IN','IO') then 'Both'\n        when have_dog = 'Y'          and have_cat = 'Y'          then 'Both'\n        when have_dog = 'N'          and have_cat = 'N'          then 'Unknown'\n        else 'Error'\n    end as pet_ownership_l1,\n    case\n        when cbu.customer_retention_group_business_unit = 'Data Orphan' then 'Expiring'\n        when cbu.customer_retention_group_business_unit = 'Safe' then 'Safe Other'\n        when cbu.customer_retention_group_business_unit = 'Gone this month' then 'Gone'\n        when cbu.customer_retention_group_business_unit = 'Anonymise' then 'Gone'\n        when cbu.customer_retention_group_business_unit is null then 'Gone'\n        else cbu.customer_retention_group_business_unit\n    end as data_retention,\n    decode(trim(ci.brand),'Master Brand','Purina Masterbrand',trim(ci.brand)) as brand\nfrom ${Database}.live.cid c\ninner join ${Database}.temp.campaign_information ci on c.cid = ci.cid\nleft outer join ${Database}.live.cid_business_unit cbu on c.cid = cbu.cid \n                                                    and cbu.business_unit_id = 5\n;\n\ndrop table if exists ${Database}.temp.campaign_information;\n\n\ndrop table if exists ${Database}.jobs.ecrm_dashboard_campaign_information_rollup;\ncreate table ${Database}.jobs.ecrm_dashboard_campaign_information_rollup\nas\nselect\n    cid,\n    campaign_id,\n    adestra_campaign_id,\n    campaign_name,\n    email_tag,\n    message,\n    engagement_cluster,\n    campaign_month,\n    max(sent) as sent,\n    sent_date, \n    max(delivered) as delivered,\n    max(opened) as opened,\n    max(clicked) as clicked,\n    max(unsubscribed) as unsubscribed,\n    pet_ownership_l2,\n    pet_ownership_l1,\n    data_retention,\n    brand\nfrom ${Database}.jobs.ecrm_dashboard_campaign_information\ngroup by\n    cid,\n    campaign_id,\n    adestra_campaign_id,\n    campaign_name,\n    email_tag,\n    message,\n    engagement_cluster,\n    campaign_month,\n    sent_date,\n    pet_ownership_l2,\n    pet_ownership_l1,\n    data_retention,\n    brand;\n\n\nalter warehouse set warehouse_size = 'Xsmall';\n\n\n---------------------------------------------------------------------------\n--Your Purina Dashboard\n---------------------------------------------------------------------------\n\ndrop table if exists ${Database}.temp.npp_qlik_reports_your_purina_samples;\n\ncreate or replace table ${Database}.temp.npp_qlik_reports_your_purina_samples\nas\nselect distinct\n    xr.cid,\n    sm.promotion as campaign,\n    sm.bazaarvoice,\n    lower(trim(sm.product)) as product,\n    sm.source_brand_id as brand_id,\n    coalesce(sm.processing_date,sm.request_date) as processed_date,\n    coalesce(pr.prompt_date,add_months(coalesce(sm.processing_date,sm.request_date),1)) as prompt_date\nfrom ${Database}.db.npp_sample_requests sm\ninner join ${Database}.live.xref_name_urn xr on xr.name_urn = sm.name_urn\ninner join (\n               select\n                   ae.cid,\n                   al.campaign_name as campaign_name,\n                   min(case when ae.event_name = 'sent_campaign' and lower(al.message) regexp '.*prompt.*' then cast(event_timestamp as date) end) as prompt_date\n               from ${Database}.temp.adestra_events ae\n               inner join ${Database}.db.adestra_tag_lookup al on al.adestra_campaign_id = ae.adestra_campaign_id\n               where al.brand = 'Your Purina'\n               group by 1,2\n           ) pr on pr.cid = xr.cid\n               and pr.campaign_name = sm.promotion;\n\n\ndrop table if exists ${Database}.temp.npp_qlik_reports_your_purina_reviews;\n\ncreate or replace table ${Database}.temp.npp_qlik_reports_your_purina_reviews\nas\nselect distinct\n    sm.cid,\n    sm.campaign,\n    first_value(cast(bv.answer as int)) over(partition by sm.cid, sm.campaign order by bv.data_date) as rating\nfrom ${Database}.temp.npp_qlik_reports_your_purina_samples sm\ninner join (\n               select distinct\n                   xr.cid,\n                   lower(trim(tbw.db.strchop(rqu.question,'-',2,-1))) as product,\n                   case when lower(rb.brand) regexp '.*pro plan.*' and lower(rb.brand) not regexp '.*breeder.*|.*vet.*' then 92 else qu.brand_id end as brand_id,\n                   qu.data_date,\n                   qu.answer\n               from ${Database}.db.question qu\n               inner join ${Database}.db.ref_question rqu on rqu.question_id = qu.question_id\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = qu.brand_id\n               inner join ${Database}.live.xref_name_urn xr on xr.name_urn = qu.name_urn\n               where lower(rqu.question) regexp '.*overall rating of product.*'\n                   and qu.data_controller_id = (select data_controller_id from ${Database}.live.ref_data_controller where data_controller like 'Nestl_ Purina Petcare (UK) Ltd')\n           ) bv on bv.cid = sm.cid\n               and bv.data_date > sm.processed_date\n               and (\n                       (bv.product = sm.product and bv.data_date < add_months(sm.prompt_date,2))\n                    or\n                       (bv.brand_id = sm.brand_id and bv.data_date < add_months(sm.prompt_date,1))\n                   )\nwhere sm.bazaarvoice = 1;\n\n\n\ndrop table if exists ${Database}.temp.npp_qlik_reports_your_purina_survey;\n\ncreate or replace table ${Database}.temp.npp_qlik_reports_your_purina_survey as -- Clicked on a survey link\n\nSelect distinct cid,lk.campaign_name as campaign from  nestle.live.adestra_events ae\njoin nestle.db.ref_your_purina_survey_lookup ref on  ae.adestra_campaign_id = ref.campaign_id and ae.link_url = ref.link_url \njoin nestle.db.adestra_tag_lookup lk on lk.adestra_campaign_id = ae.adestra_campaign_id\nwhere lower(event_name) regexp '.*click.*' and form_builder_id <> '408'\n;\n\ndrop table if exists ${Database}.temp.npp_qlik_reports_your_purina_campaign;\n\ncreate or replace table ${Database}.temp.npp_qlik_reports_your_purina_campaign\nas\nselect\n    *\nfrom (\n         select distinct\n             ae.cid,\n             ae.campaign,\n             ae.campaign_type,\n             first_value(replace(ae.message,' - BV','')) over(partition by ae.campaign order by ae.send_date asc nulls last) as initial_message,\n             first_value(replace(ae.message,' - BV','')) over(partition by ae.cid, ae.campaign order by ae.send_date asc nulls last) as initial_message_consumer,\n             max(ae.bazaarvoice) over(partition by ae.cid, ae.campaign) as bazaarvoice,\n             max(ae.survey_campaign) over(partition by ae.cid, ae.campaign) as survey_campaign,\n             min(ae.send_date) over(partition by ae.cid, ae.campaign) as invite_date,\n             upper(to_char(min(ae.send_date) over(partition by ae.cid, ae.campaign),'MON-YYYY')) as invite_month,\n             min(ae.send_date) over(partition by ae.campaign) as send_date,\n             upper(to_char(min(ae.send_date) over(partition by ae.campaign),'MON-YYYY')) as send_month,\n             max(case when ae.send_date is not null and ae.bounced = 0 then 1 else 0 end) over(partition by ae.cid, ae.campaign) as delivered,\n             max(ae.opened) over(partition by ae.cid, ae.campaign) as opened,\n             max(ae.clicked) over(partition by ae.cid, ae.campaign) as clicked,\n             max(case when sm.cid is not null then 1 else 0 end) over(partition by ae.cid, ae.campaign) as trialed_product,\n             max(case when sv.cid is not null then 1 else 0 end) over(partition by ae.cid,ae.campaign) as survey_campaign_clicked,\n             max(case when rr.cid is not null then 1 else 0 end) over(partition by ae.cid, ae.campaign) as reviewed,\n             coalesce(rating,0) as review_rating\n         from (\n                  select\n                      ae.cid,\n                      lk.campaign_name as campaign,\n                      lk.message,\n                      lk.email_tag as campaign_type,\n                      ae.adestra_campaign_name,\n                      case when right(lk.message,4) = '- BV' then 1 else 0 end as bazaarvoice,\n                      case when lk.adestra_campaign_id in (Select distinct campaign_id from ${Database}.db.ref_your_purina_survey_lookup ) then 1 else 0 end as survey_campaign,\n                      min(case when event_name = 'sent_campaign' then cast(event_timestamp as date) end) as send_date,\n                      max(case when event_name in ('inbound_bounce','inbound_domain','inbound_quota','inbound_user') then 1 else 0 end) as bounced,\n                      max(case when lower(event_name) regexp '.*click.*|.*read.*' then 1 else 0 end) as opened,\n                      max(case when lower(event_name) regexp '.*click.*' and form_builder_id <> '408' then 1 else 0 end) as clicked\n                  from ${Database}.temp.adestra_events ae\n                  inner join ${Database}.db.adestra_tag_lookup lk on lk.adestra_campaign_id = ae.adestra_campaign_id\n                  where lk.brand = 'Your Purina'\n                  group by 1,2,3,4,5,6,7\n              ) ae\n         left join ${Database}.temp.npp_qlik_reports_your_purina_samples sm on sm.cid = ae.cid\n                                                                      and sm.campaign = ae.campaign\n         left join ${Database}.temp.npp_qlik_reports_your_purina_reviews rr on rr.cid = ae.cid\n                                                                      and rr.campaign = ae.campaign\n         left join ${Database}.temp.npp_qlik_reports_your_purina_survey sv  on sv.cid = ae.cid\n                                                                      and sv.campaign = ae.campaign\n  \n         where ae.send_date is not null\n     ) c\nwhere initial_message = initial_message_consumer\n    or lower(campaign) regexp '.*panel invite.*';\n\ndrop table if exists ${Database}.temp.npp_qlik_reports_your_purina_samples;\ndrop table if exists ${Database}.temp.npp_qlik_reports_your_purina_reviews;\ndrop table if exists ${Database}.temp.npp_qlik_reports_your_purina_survey;\ndrop table if exists ${Database}.temp.adestra_events;\n\n\nmerge into ${Database}.live.cid_brand a\nusing (\n          select\n              b.cid,\n              min(a.data_date) as first_date_brand\n          from ${Database}.db.question a\n          inner join ${Database}.live.xref_name_urn b on a.name_urn = b.name_urn\n          where question_id = 6213\n          group by 1\n      ) b on a.cid = b.cid\n         and a.brand_id = 153\nwhen matched and brand_preference <> 1 then update\nset a.brand_preference = 1,\n    a.first_date_brand = b.first_date_brand,\n    a.customer_retention_group_brand = 'Safe';\n\n\nmerge into ${Database}.live.cid_brand a\nusing (\n          select\n              cid,\n              min(send_date) as first_date_brand\n          from ${Database}.temp.npp_qlik_reports_your_purina_campaign\n          where lower(campaign) not regexp '.*panel invite.*'\n              and delivered = 1\n          group by 1\n      ) b on a.cid = b.cid\n         and a.brand_id = 153\nwhen matched and brand_preference <> 1 then update\nset a.brand_preference = 1,\n    a.first_date_brand = b.first_date_brand,\n    a.customer_retention_group_brand = 'Safe';\n\n\nmerge into ${Database}.live.cid_brand a\nusing (\n          select\n              *\n          from ${Database}.live.cid_brand\n          where brand_id = 153\n              and brand_preference = 1\n      ) b on a.cid = b.cid\n         and a.brand_id = 121\nwhen not matched then insert\n(\n    cid_brand_urn,\n    cid,\n    business_unit_id,\n    division_id,\n    brand_id,\n    customer_retention_group_brand,\n    customer_retention_date_brand,\n    customer_retention_expiry_date_brand,\n    last_subscription_date_brand,\n    last_email_open_date_brand,\n    first_date_brand,\n    last_date_brand,\n    first_channel_brand,\n    last_channel_brand,\n    brand_preference,\n    brand_engagement,\n    preferred_brand_gigya,\n    customer_suppression_group_brand,\n    mailable,\n    emailable,\n    emailable_newsletter,\n    mailable_ignoring_dp,\n    emailable_ignoring_dp,\n    email_brand\n)\nvalues\n(\n    replace(b.cid_brand_urn,'-153','-121'),\n    b.cid,\n    b.business_unit_id,\n    b.division_id,\n    121,\n    b.customer_retention_group_brand,\n    b.customer_retention_date_brand,\n    b.customer_retention_expiry_date_brand,\n    b.last_subscription_date_brand,\n    b.last_email_open_date_brand,\n    b.first_date_brand,\n    b.last_date_brand,\n    b.first_channel_brand,\n    b.last_channel_brand,\n    b.brand_preference,\n    b.brand_engagement,\n    b.preferred_brand_gigya,\n    b.customer_suppression_group_brand,\n    b.mailable,\n    b.emailable,\n    b.emailable_newsletter,\n    b.mailable_ignoring_dp,\n    b.emailable_ignoring_dp,\n    b.email_brand\n);\n\n\ndrop table if exists ${Database}.jobs.npp_qlik_reports_your_purina_cid;\n\ncreate or replace table ${Database}.jobs.npp_qlik_reports_your_purina_cid\nas\nselect distinct\n    c.cid,\n    case\n        when cb.emailable = 1 then 'Emailable'\n        else 'Not Emailable'\n    end as contact_status,\n    rb.brand,\n    case\n        when c.have_cat <> 'N' and c.have_dog <> 'N' then 'Both'\n        when c.have_cat <> 'N' then 'Cat'\n        when c.have_dog <> 'N' then 'Dog'\n        else 'Unknown'\n    end as pet_segment,\n    cp.delivered as invited,\n    cp.first_send_date as invite_date,\n    upper(to_char(cp.first_send_date,'MON-YYYY')) as invite_month,\n    cp.opened,\n    cp.clicked,\n    case when yp.cid is not null then 1 else 0 end as completed_signup,\n    yp.panel_reg_date,\n    yp.panel_reg_month,\n    cp.bazaarvoice,\n    cp.survey_campaign,\n    cp.num_survey_campaign_clicked,\n    cp.trialed_product,\n    cp.num_products_trialed,\n    cp.num_products_trialed_bv,\n    cp.num_products_trialed_sv,\n    cp.reviewed,\n    cp.num_reviews,\n    cp.num_reviews_bv,\n    cp.num_reviews_sv,\n    cp.num_campaigns,\n    cp.num_campaigns_bv,\n    cp.num_campaigns_sv,\n    case when nm.cid is not null then 1 else 0 end as Your_Purina_Acquisition\nfrom ${Database}.live.cid c\ninner join ${Database}.live.cid_brand cb on cb.cid = c.cid\ninner join ${Database}.live.ref_brand rb on rb.brand_id = cb.brand_id\ninner join (\n               select\n                   cid,\n                   min(case when lower(campaign) regexp '.*panel invite.*' then invite_date end) as first_send_date,\n                   max(delivered) as delivered,\n                   max(opened) as opened,\n                   max(clicked) as clicked,\n                   max(bazaarvoice) as bazaarvoice,\n                   max(survey_campaign) as survey_campaign,\n                   sum(case when lower(campaign) not regexp '.*panel invite.*' then survey_campaign_clicked else 0 end) as num_survey_campaign_clicked,\n                   max(case when lower(campaign) not regexp '.*panel invite.*' then trialed_product else 0 end) as trialed_product,\n                   sum(case when lower(campaign) not regexp '.*panel invite.*' then trialed_product else 0 end) as num_products_trialed,\n                   sum(case when lower(campaign) not regexp '.*panel invite.*' and bazaarvoice = 1 then trialed_product else 0 end) as num_products_trialed_bv,\n                   sum(case when lower(campaign) not regexp '.*panel invite.*' and survey_campaign = 1 then trialed_product else 0 end) as num_products_trialed_sv,\n                   max(case when lower(campaign) not regexp '.*panel invite.*' then reviewed else 0 end) as reviewed,\n                   sum(case when lower(campaign) not regexp '.*panel invite.*' then reviewed else 0 end) as num_reviews,\n                   sum(case when lower(campaign) not regexp '.*panel invite.*' and bazaarvoice = 1 then reviewed else 0 end) as num_reviews_bv,\n                   sum(case when lower(campaign) not regexp '.*panel invite.*' and survey_campaign = 1 then reviewed else 0 end) as num_reviews_sv,\n                   count(distinct case when lower(campaign) not regexp '.*panel invite.*' then campaign end) as num_campaigns,\n                   count(distinct case when lower(campaign) not regexp '.*panel invite.*' and bazaarvoice = 1 then campaign end) as num_campaigns_bv,\n                   count(distinct case when lower(campaign) not regexp '.*panel invite.*' and survey_campaign = 1 then campaign end) as num_campaigns_sv\n               from ${Database}.temp.npp_qlik_reports_your_purina_campaign\n               group by 1\n           ) cp on cp.cid = c.cid\n               and cp.delivered = 1\nleft join (\n              select\n                  cb.cid,\n                  min(cb.first_date_brand) as panel_reg_date,\n                  upper(to_char(min(cb.first_date_brand),'MON-YYYY')) as panel_reg_month\n              from ${Database}.live.cid_brand cb\n              inner join ${Database}.live.ref_brand rb on rb.brand_id = cb.brand_id\n              where rb.brand = 'Your Purina'\n                  and cb.brand_preference = 1\n              group by 1\n          ) yp on yp.cid = c.cid\nleft join (\n           Select distinct cid from \n${Database}.live.names \nwhere source = 'REG_YOUR_PURINA' and cid not in (\n\n  Select distinct cid from (\n\nSelect distinct cid,source,source_date, first_value (source) over (partition by cid order by source_date,source asc) as first_purina_source\nFrom \n${Database}.live.names\nwhere\ncid in (Select distinct cid\nFrom \n${Database}.live.names\nwhere source = 'REG_YOUR_PURINA')\nand \ncid in (Select distinct cid\nFrom \n${Database}.live.names\nwhere source = 'RESP_YOUR_PURINA')\nand source in ('RESP_YOUR_PURINA','REG_YOUR_PURINA') \n)g \n  where first_purina_source = 'RESP_YOUR_PURINA'\n)\n\t\t\t  )  nm on nm.cid = c.cid\n          \nwhere cb.business_unit_id = (select business_unit_id from ${Database}.live.ref_business_unit where business_unit like 'Nestl_ Purina Petcare (UK) Ltd')\n    and rb.brand not in ('Beta Breeder','Pro Plan Breeder','Purina Vet','Your Purina')\n    and (cb.brand_preference = 1 or (cb.brand_engagement = 1 and cb.brand_preference <> 0))\n    and cb.customer_retention_group_brand not in ('Gone this month','Anonymise');\n\n\nupdate ${Database}.jobs.npp_qlik_reports_your_purina_cid\nset invite_date = case\n                      when invite_date is null then cast('2020-10-26' as date)\n                      when invite_date = '2020-11-05' then cast('2020-10-26' as date)\n                      when invite_date = '2020-12-03' then cast('2020-11-25' as date)\n                      else invite_date\n                  end,\n    invite_month = case\n                       when invite_date is null then 'Oct-2020'\n                       when invite_date = '2020-11-05' then 'Oct-2020'\n                       when invite_date = '2020-12-03' then 'Nov-2020'\n                       else invite_month\n                   end;\n\nupdate ${Database}.jobs.npp_qlik_reports_your_purina_cid\nset opened = 1,\n    clicked = 1\nwhere completed_signup = 1\n    and (opened = 0 or clicked = 0);\n\nupdate ${Database}.jobs.npp_qlik_reports_your_purina_cid\nset pet_segment = 'Both'\nwhere completed_signup = 1\n    and pet_segment = 'Unknown';\n\nupdate ${Database}.jobs.npp_qlik_reports_your_purina_cid\nset panel_reg_date = '2020-10-26',\n    panel_reg_month = 'Oct-2020'\nwhere panel_reg_month = 'Aug-2017';\n\n\ndrop table if exists ${Database}.jobs.npp_qlik_reports_your_purina_pet;\n\ncreate or replace table ${Database}.jobs.npp_qlik_reports_your_purina_pet\nas\nselect distinct\n    c.cid,\n    p.pet_id,\n    p.pet_type,\n    coalesce(p.pet_life_stage,'Unknown') as pet_lifestage,\n    case when coalesce(p.pet_breed,'') = '' then 'Unknown' else p.pet_breed end as pet_breed,\n    case p.pet_size\n        when 'T' then 'Toy'\n        when 'S' then 'Small'\n        when 'M' then 'Medium'\n        when 'L' then 'Large'\n        when 'XL' then 'X-Large'\n        else 'Unknown'\n    end as pet_size,\n    case p.pet_indoor_outdoor\n        when 'I' then 'Indoor'\n        when 'O' then 'Outdoor'\n        else 'Unknown'\n    end as pet_indoor_outdoor\nfrom ${Database}.jobs.npp_qlik_reports_your_purina_cid c\nleft join ${Database}.live.cid_pet p on p.cid = c.cid;\n\n\ndrop table if exists ${Database}.jobs.npp_qlik_reports_your_purina_campaign;\n\ncreate or replace table ${Database}.jobs.npp_qlik_reports_your_purina_campaign\nas\nselect\n    cid,\n    campaign,\n    campaign_type,\n    initial_message,\n    initial_message_consumer,\n    bazaarvoice,\n    survey_campaign,\n    send_date,\n    send_month,\n    delivered,\n    opened,\n    clicked,\n    trialed_product,\n    survey_campaign_clicked,\n    reviewed,\n    review_rating\nfrom ${Database}.temp.npp_qlik_reports_your_purina_campaign\nwhere lower(campaign) not regexp '.*panel invite.*';\n\ndrop table if exists ${Database}.temp.npp_qlik_reports_your_purina_campaign;\n\n\n---------------------------------------------------------------------------\n--KC dashboards emails\n---------------------------------------------------------------------------\n\ndrop table if exists ${Database}.jobs.kc_qlik_reports_data_email;\ncreate or replace table ${Database}.jobs.kc_qlik_reports_data_email\nas\nselect\n    cid,\n    case\n        when trim(brand) = 'Pro Plan Breeder' then 'Pro Plan Breeder'\n        when trim(brand) = 'Beta Breeder' then 'Beta Breeder'\n        when trim(brand) = 'Pro Plan Breeder & BETA Breeder' then 'Pro Plan & BETA Breeder'\n        else 'GP'\n    end as scheme,\n    count(distinct case when to_date(concat('01-',campaign_month),'DD-MON-YYYY') >= '2018-04-01'\n                         and sent > 0\n                        then campaign_month end) over(partition by case\n                                                                       when trim(brand) = 'Pro Plan Breeder' then 'Pro Plan Breeder'\n                                                                       when trim(brand) = 'Beta Breeder' then 'Beta Breeder'\n                                                                       when trim(brand) = 'Pro Plan Breeder & BETA Breeder' then 'Pro Plan & BETA Breeder'\n                                                                       else 'GP'\n                                                                   end) as month_count,\n    campaign_month,\n    brand,\n    campaign_id,\n    campaign_name,\n    email_tag,\n    message,\n    sent as send_count,\n    delivered as delivered_count,\n    opened as open_count,\n    clicked as click_count,\n    unsubscribed as unsub_count\nfrom ${Database}.jobs.ecrm_dashboard_campaign_information_rollup\nwhere trim(brand) in ('Pro Plan Breeder & BETA Breeder','Pro Plan Breeder','Beta Breeder','Growing Pup');\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------DATABASE UNIVERSE DASHBOARD-------------------------------------------------------------\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\ndrop table if exists ${Database}.temp.npp07910_purina_universe_qlik_prep;\n\ncreate or replace table ${Database}.temp.npp07910_purina_universe_qlik_prep\nas\nselect\n    cb.cid\n    ,case when lower(rb.brand) regexp '.*breeder.*' then 'breeder'\n        when lower(rb.brand) regexp '.*vet.*' and lower(rb.brand) not regexp '.*diets.*' then 'vet'\n        else 'consumer' end as type\n    ,min(cb.first_date_brand) as created_date\n    ,max(cb.emailable) as emailable\nfrom ${Database}.live.cid_brand cb\ninner join ${Database}.live.ref_brand rb on rb.brand_id = cb.brand_id\ninner join ${Database}.live.ref_business_unit rbu on rbu.business_unit_id = cb.business_unit_id\ninner join ${Database}.live.cid ci on ci.cid = cb.cid\ninner join ${Database}.live.cid_business_unit cbu on ci.cid = cbu.cid and cbu.business_unit_id = rbu.business_unit_id\nwhere lower(rbu.business_unit) regexp '.*purina.*'\n    and (cb.brand_preference = 1 or (cb.brand_engagement = 1 and cb.brand_preference <> 0))\ngroup by 1,2\n;\n\n-- get vets who don't go through build\ninsert into ${Database}.temp.npp07910_purina_universe_qlik_prep\nselect\n    row_number() over(order by 1) + (select max(cid) from ${Database}.temp.npp07910_purina_universe_qlik_prep)\n    ,'vet'\n    ,created_date\n    ,emailable\nfrom\n(\n    select distinct\n        lower(trim(email)) as email\n        ,first_value(data_date) over(partition by lower(trim(email)) order by data_date asc)  as created_date\n        ,first_value(opt_in) over(partition by lower(trim(email)) order by data_date desc, opt_in asc) as emailable\n    from ${Database}.db.vet\n) vet\n;\n\ndrop table if exists ${Database}.temp.npp07910_dates;\ncreate or replace table ${Database}.temp.npp07910_dates\nas\nselect\n    date_trunc('month',current_date) as month_\nunion\nselect\n    date_trunc('month',add_months(current_date,-1)) as month_\nunion\nselect\n    date_trunc('month',add_months(current_date,-2)) as month_\nunion\nselect\n    date_trunc('month',add_months(current_date,-3)) as month_\nunion\nselect\n    date_trunc('month',add_months(current_date,-4)) as month_\nunion\nselect\n    date_trunc('month',add_months(current_date,-5)) as month_\nunion\nselect\n    date_trunc('month',add_months(current_date,-6)) as month_\nunion\nselect\n    date_trunc('month',add_months(current_date,-7)) as month_\nunion\nselect\n    date_trunc('month',add_months(current_date,-8)) as month_\nunion\nselect\n    date_trunc('month',add_months(current_date,-9)) as month_\nunion\nselect\n    date_trunc('month',add_months(current_date,-10)) as month_\nunion\nselect\n    date_trunc('month',add_months(current_date,-11)) as month_\n;\n\ndrop table if exists ${Database}.jobs.npp07910_purina_universe_qlik;\ncreate or replace table ${Database}.jobs.npp07910_purina_universe_qlik\nas\nselect\n    dates.month_\n    ,pu.cid\n    ,pu.type\n    ,pu.emailable\n    ,case when date_trunc('month',created_date) = dates.month_ then 'New' else 'Existing' end new_existing\nfrom ${Database}.temp.npp07910_purina_universe_qlik_prep pu\njoin ${Database}.temp.npp07910_dates dates on date_trunc('month',coalesce(pu.created_date,current_date)) <= dates.month_\n;\n\n\n\n---------------------------------------------------------------------------\n\ninsert into ${Database}.db.build_log\nselect    'nestle_qlik_outputs'\n,         '*************************'\n,         '*************************'\n,         'end of script'\n,         CURRENT_TIMESTAMP::timestamp_ntz\n;\n\n\n--alter warehouse set warehouse_size = 'Xsmall';\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 22 NPP Qlik'\n, \t\t'SCRIPT'\n, \t\t'FINISHED'\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"195694":{"id":195694,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-576,"y":80,"width":32,"height":32,"inputConnectorIDs":[195702],"outputSuccessConnectorIDs":[195732,195738,195740,195750],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc 18 Nestle Monthly Reports"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nProgram           : Nestle Monthly reports\nAuthor            : Lindsay Timms\nClient Name       : Nestle\nJob Number        : \nStandard Machine  : Kognitio\nAmendment History : v01 - LT 20180315 - Created\n                    v02 - Shira Middleton 20220513 - Added in Purina Acquisition Report Code\n                    v03 - Chris 20221005 - Added in changes to the Purina Acquisition Report to have \n                           Your Purina reported seperately \n                    v04 - TGS bug fix for KC sources 'Wamiz Dog Personality Test','Wamiz Cat Personality Test','Your Purina' \n                    \t  getting counted as Other\n******************************************************************************************/\n\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 18 Monthly Reports'\n, \t\t'SCRIPT'\n, \t\t'STARTED'\n;\n\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_monthly_reports',\n    '*************************',\n    '*************************',\n    'start of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;  \n\n\n/******************************************************************************************\n                     E-BUSINESS AND DATA RETENTION MONTHLY REPORT PREP\n******************************************************************************************/\n\n\n-- Create table of sends\ndrop table if exists ${Database}.temp.nuk_data_retention_report_sent;\n\ncreate or replace table ${Database}.temp.nuk_data_retention_report_sent\nas\nselect distinct\n    ae.cid,\n    case\n        when brand_id = 20 then 32 -- Carnation\n        when data_controller_id in (3,5,7) then data_controller_id\n        else cast(null as int)\n    end as business_unit_id,\n    case\n        when brand_id = 2 then 1\n        when data_controller_id = 8 then 15\n        else cast(null as int)\n    end as division_id\nfrom ${Database}.live.adestra_events ae\njoin ${Database}.db.comms_hist_lookup chl on trim(ae.campaign_id) = trim(chl.campaign_id)\nleft join (\n              select distinct\n                  cid,\n                  campaign_id,\n                  adestra_campaign_name,\n                  event_timestamp\n              from ${Database}.live.adestra_events\n              where event_name in ('inbound_bounce','inbound_domain','inbound_quota','inbound_user')\n          ) bo on ae.cid = bo.cid\n              and trim(ae.campaign_id) = trim(bo.campaign_id)\n              and trim(ae.adestra_campaign_name) = trim(bo.adestra_campaign_name)\n              and cast(ae.event_timestamp as date) = cast(bo.event_timestamp as date)\nwhere trim(ae.event_name) = 'sent_campaign'\n    and ae.event_timestamp >= add_months(current_date,-6)\n    and bo.cid is null\nunion all\nselect distinct\n    xr.cid,\n    case when lower(ae.workspace_name) regexp '.*cerelac.*' then 43 else 44 end as business_unit_id,\n    cast(null as int) as division_id\nfrom (\n         select\n             coalesce(xr1.name_urn,xr2.name_urn) as name_urn,\n             ae.*\n         from ${Database}.db.adestra_events_sma ae\n         left join ${Database}.db.xref_bbw_urn_sma xr1 on xr1.old_bbw_urn = cast(ae.urn as int)\n         left join ${Database}.db.names xr2 on xr2.bbw_urn = cast(ae.urn as int)\n         where trim(ae.urn) <> ''\n     ) ae\ninner join ${Database}.live.xref_name_urn xr on trim(xr.name_urn) = trim(ae.name_urn)\nleft join (\n              select distinct\n                  trim(email) as email,\n                  trim(campaign_name) as campaign_name,\n                  event_timestamp\n              from ${Database}.db.adestra_events_sma\n              where trim(event_name) in ('inbound_bounce','inbound_domain','inbound_quota','inbound_user')\n          ) bo on lower(trim(ae.email)) = lower(bo.email)\n              and trim(ae.campaign_name) = bo.campaign_name\n              and cast(ae.event_timestamp as date) = cast(bo.event_timestamp as date)\nwhere trim(ae.event_name) = 'sent_campaign'\n    and ae.event_timestamp >= add_months(current_date,-6)\n    and bo.email is null;\n\n\n-- HCP sends and opens\ndrop table if exists ${Database}.temp.nuk_monthly_reports_hcp_engagement;\n\ncreate or replace table ${Database}.temp.nuk_monthly_reports_hcp_engagement\nas\nselect\n    cid,\n    max(case when sent_date >= add_months(current_date,-6) and bounce_flag = 0 then 1 else 0 end) as sent_l6m,\n    max(case when open_lastdate >= add_months(current_date,-24) then 1 else 0 end) as opened_l2y\nfrom ${DatabaseHCP}.live.engagement_levels_messages\ngroup by 1;\n\n\n-- Create a base table for the e-Business and Data Retention Reports\ndrop table if exists ${Database}.temp.nuk_monthly_reports_base;\n\ncreate or replace table ${Database}.temp.nuk_monthly_reports_base\nas\nselect\n    base.*\nfrom (\n         select\n             cbu.cid,\n             rbu.business_unit as division,\n             cbu.customer_retention_date_business_unit as customer_retention_date,\n             cbu.customer_retention_date_business_unit_ios15 as customer_retention_date_ios15,\n             case\n                 when sma.member = 1 and cbu.customer_retention_group_business_unit = 'Gone this month' then 'Safe'\n                 when lower(cbu.customer_retention_group_business_unit) regexp '.*data orphan.*' then 'Expiring'\n                 else cbu.customer_retention_group_business_unit \n             end as customer_retention_group,\n             cbu.customer_suppression_group_business_unit as customer_suppression_group,\n             case when rbu.business_unit = 'SMA' then sma.emailable else greatest(cbu.emailable,cbu.emailable_newsletter) end as emailable,\n             case when sent.cid is not null then 1 else 0 end as sent_l6m,\n             case when greatest(\n                                   coalesce(cast(cbu.last_email_open_date_business_unit as date),cast('1900-01-01' as date)),\n                                   coalesce(cb.last_email_open_date,cast('1900-01-01' as date))\n                               ) > add_months(current_date,-24) then 1 else 0 end as opened_l2y\n         from ${Database}.live.cid_business_unit cbu\n         inner join ${Database}.live.ref_business_unit rbu on rbu.business_unit_id = cbu.business_unit_id\n         left join ${Database}.temp.nuk_data_retention_report_sent sent on sent.cid = cbu.cid\n                                                                       and sent.business_unit_id = cbu.business_unit_id\n         left join (\n                       select\n                           cid,\n                           business_unit_id,\n                           max(last_email_open_date_brand) as last_email_open_date\n                       from ${Database}.live.cid_brand \n                       where brand_preference = 1\n                           or (brand_engagement = 1 and brand_preference <> 0)\n                       group by cid, business_unit_id\n                   ) cb on cb.cid = cbu.cid\n                       and cb.business_unit_id = cbu.business_unit_id\n         left join ${Database}.live.cid_sma sma on sma.cid = cbu.cid\n                                                and (sma.member = 1 or cbu.customer_retention_group_business_unit = 'Gone this month')\n                                                and rbu.business_unit = 'SMA'\n         where (cbu.last_date_business_unit is not null or cb.cid is not null)\n             and rbu.business_unit <> 'HCP'\n         union all\n         select\n             cd.cid,\n             'Nestlé '||replace(rd.division,'Nestle ','') as division,\n             cd.customer_retention_date_division as customer_retention_date,\n             cd.customer_retention_date_division_ios15 as customer_retention_date_ios15,\n             case\n                 when lower(cd.customer_retention_group_division) regexp '.*data orphan.*' then 'Expiring'\n                 else cd.customer_retention_group_division\n             end as customer_retention_group,\n             cd.customer_suppression_group_division as customer_suppression_group,\n             greatest(cd.emailable,cd.emailable_newsletter) as emailable,\n             case when sent.cid is not null then 1 else 0 end as sent_l6m,\n             case when greatest(\n                                   coalesce(cast(cd.last_email_open_date_division as date),cast('1900-01-01' as date)),\n                                   coalesce(cb.last_email_open_date,cast('1900-01-01' as date))\n                               ) > add_months(current_date,-24) then 1 else 0 end as opened_l2y\n         from ${Database}.live.cid_division cd\n         inner join ${Database}.live.ref_division rd on rd.division_id = cd.division_id\n         left join ${Database}.temp.nuk_data_retention_report_sent sent on sent.cid = cd.cid\n                                                                       and sent.division_id = cd.division_id\n         left join (\n                       select\n                           cid,\n                           division_id,\n                           max(last_email_open_date_brand) as last_email_open_date\n                       from ${Database}.live.cid_brand\n                       where brand_preference = 1\n                           or (brand_engagement = 1 and brand_preference <> 0)\n                       group by cid, division_id\n                   ) cb on cb.cid = cd.cid\n                       and cb.division_id = cd.division_id\n         where (cd.last_date_division is not null or cb.cid is not null)\n             and rd.division in ('Beverage','Confectionery','Food','Nestle Professional','Nestle Health Science')\n         union all\n         select\n             c.cid + 100000000000 as cid,\n             'HCP' as division,\n             last_active_date as customer_retention_date,\n             last_active_date_ios15 as customer_retention_date_ios15,\n             case\n                 when cast(c.first_registration as date) >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') then 'New'\n                 when c.last_active_date >= add_months(current_date,-21) then 'Safe'\n                 when c.last_active_date >= add_months(current_date,-23) then 'At Risk'\n                 when c.last_active_date >= add_months(current_date,-24) then 'Expiring'\n                 when c.last_active_date >= add_months(current_date,-25) then 'Gone this month'\n                 else 'Anonymise'\n             end as customer_retention_group,\n             '' as customer_suppression_group,\n             c.emailable,\n             coalesce(en.sent_l6m,0) as sent_l6m,\n             coalesce(en.opened_l2y,0) as opened_l2y\n         from ${DatabaseHCP}.live.cid c\n         left join ${Database}.temp.nuk_monthly_reports_hcp_engagement en on en.cid = c.cid\n     ) base\nleft join (\n              select distinct\n                  xr.cid,\n                  trim(sar.brand) as brand\n              from ${Database}.live.xref_name_urn xr\n              inner join ${Database}.db.supps_manual supp on 'manual-'||lower(cast(supp.supp_urn as varchar)) = lower(xr.name_urn)\n              inner join supps.db.sar sar on sar.supp_id = cast(supp.source_urn as int)\n              where lower(supp.source) regexp '.*ir web form rtbf.*'\n          ) rtbf on rtbf.cid = base.cid\n                and (\n                        (lower(rtbf.brand) regexp 'sma' and lower(base.division) regexp '.*sma.*')\n                     or\n                        (lower(rtbf.brand) not regexp 'sma' and lower(base.division) not regexp '.*sma.*')\n                    )\nwhere rtbf.cid is null;\n\ndrop table if exists ${Database}.temp.nuk_data_retention_report_sent;\n\n\n-- If grouping New then check if other divisions exist with At Risk/Expiring as these will be classed as Safe\ndrop table if exists ${Database}.temp.nuk_monthly_reports_aio_safe;\n\ncreate or replace table ${Database}.temp.nuk_monthly_reports_aio_safe\nas\nselect distinct\n    ba1.cid\nfrom ${Database}.temp.nuk_monthly_reports_base ba1\ninner join ${Database}.temp.nuk_monthly_reports_base ba2 on ba1.cid = ba2.cid\nwhere ba1.customer_retention_group = 'New'\n    and lower(ba2.customer_retention_group) regexp '.*at risk.*|.*expiring.*';\n\n\n-- Create table with rollup for AiO and Infant Nutrition\ndrop table if exists ${Database}.temp.nuk_monthly_reports_rollup;\n\ncreate or replace table ${Database}.temp.nuk_monthly_reports_rollup\nas\nselect\n    cid,\n    division,\n    customer_retention_date,\n    customer_retention_date_ios15,\n    case\n        when customer_retention_group = 1 then 'Safe'\n        when customer_retention_group = 2 then 'Re-consent'\n        when customer_retention_group = 3 then 'New'\n        when customer_retention_group = 4 then 'At Risk'\n        when customer_retention_group = 5 then 'Expiring'\n        when customer_retention_group = 6 then 'Gone this month'\n    end as customer_retention_group,\n    customer_suppression_group,\n    emailable,\n    sent_l6m,\n    opened_l2y\nfrom (\n         select\n             cid,\n             division,\n             customer_retention_date,\n             customer_retention_date_ios15,\n             case\n                 when customer_retention_group = 'Safe' then 1\n                 when customer_retention_group = 'Re-consent' then 2\n                 when customer_retention_group = 'New' then 3\n                 when customer_retention_group = 'At Risk' then 4\n                 when customer_retention_group = 'Expiring' then 5\n                 when customer_retention_group = 'Gone this month' then 6\n             end as customer_retention_group,\n             customer_suppression_group,\n             emailable,\n             sent_l6m,\n             opened_l2y\n         from ${Database}.temp.nuk_monthly_reports_base\n         union all\n         select\n             cid,\n             'Infant Nutrition' as division,\n             max(customer_retention_date) as customer_retention_date,\n             max(customer_retention_date_ios15) as customer_retention_date_ios15,\n             min(\n                    case\n                        when customer_retention_group = 'Safe' then 1\n                        when customer_retention_group = 'Re-consent' then 2\n                        when customer_retention_group = 'New' then 3\n                        when customer_retention_group = 'At Risk' then 4\n                        when customer_retention_group = 'Expiring' then 5\n                        when customer_retention_group = 'Gone this month' then 6\n                    end\n                ) as customer_retention_group,\n             '' as customer_suppression_group,\n             max(emailable) as emailable,\n             max(sent_l6m) as sent_l6m,\n             max(opened_l2y) as opened_l2y\n         from ${Database}.temp.nuk_monthly_reports_base\n         where lower(division) regexp '.*hcp.*|.*sma.*|.*cerelac.*'\n         group by cid\n         union all\n         select\n             ba.cid,\n             'AiO' as division,\n             max(customer_retention_date) as customer_retention_date,\n             max(customer_retention_date_ios15) as customer_retention_date_ios15,\n             min(\n                    case \n                        when ba.customer_retention_group = 'Safe' then 1\n                        when aio.cid is not null then 1\n                        when ba.customer_retention_group = 'Re-consent' then 2\n                        when ba.customer_retention_group = 'New' then 3\n                        when ba.customer_retention_group = 'At Risk' then 4\n                        when ba.customer_retention_group = 'Expiring' then 5\n                        when ba.customer_retention_group = 'Gone this month' then 6\n                        else 8\n                    end\n                ) as customer_retention_group,\n             '' as customer_suppression_group,\n             max(ba.emailable) as emailable,\n             max(ba.sent_l6m) as sent_l6m,\n             max(ba.opened_l2y) as opened_l2y\n         from ${Database}.temp.nuk_monthly_reports_base ba\n         left join ${Database}.temp.nuk_monthly_reports_aio_safe aio on aio.cid = ba.cid\n         group by ba.cid\n     ) base;\n\ndrop table if exists ${Database}.temp.nuk_monthly_reports_base;\n\n\n/******************************************************************************************\n                              DATA RETENTION MONTHLY REPORT\n******************************************************************************************/\n\n/*\nBBW have implemented NestlÃŠâ??s data retention policy as described in the separate Data Retention Development Brief, \nwhich has categorised all records in the AiO database into 6 Customer Retention Groups:\nâ?¢    New\nâ?¢    Re-consent\nâ?¢    Active\nâ?¢    At risk\nâ?¢    Data orphan\nâ?¢    Inactive\n\nThe focus of this brief is production of a new database report, which will detail:\nâ?¢    The number of emailable contacts in each Customer Retention Group in the AiO as a whole\nâ?¢    The number of emailable contacts in each Customer Retention Group within each business unit\n*/\n\n\n/******************************************************************************************************/\n/*NOTE: This report will need to be amended once Data Processing Dates have been introduced to the AiO*/\n/******************************************************************************************************/\n\n-- Create blank table for all business units/division that are in the report\ndrop table if exists ${Database}.jobs.nuk_data_retention_report_data;\n\ncreate or replace table ${Database}.jobs.nuk_data_retention_report_data\nas \nselect \n    business_unit as division,\n    cast(0 as int) as new_,\n    cast(0 as int) as reconsent,\n    cast(0 as int) as safe,\n    cast(0 as int) as at_risk,\n    cast(0 as int) as expiring,\n    cast(0 as int) as gone_this_month,\n    cast(0 as int) as sent_l6m\nfrom ${Database}.live.ref_business_unit\nwhere lower(business_unit) not regexp '.*nestec.*|.*r&r.*|.*vitaflo.*|.*lactalis.*|.*nespresso.*|.*international.*'\nand business_unit <> 'Nestlé UK Ltd'\nunion all \nselect\n    'Nestlé '||replace(division,'Nestle ','') as division,\n    cast(0 as int) as new_,\n    cast(0 as int) as reconsent,\n    cast(0 as int) as safe,\n    cast(0 as int) as at_risk,\n    cast(0 as int) as expiring,\n    cast(0 as int) as gone_this_month,\n    cast(0 as int) as sent_l6m\nfrom ${Database}.live.ref_division\nwhere division in ('Beverage','Confectionery','Food','Nestle Professional','Nestle Health Science')\nunion all\nselect\n    'AiO' as division,\n    cast(0 as int) as new_,\n    cast(0 as int) as reconsent,\n    cast(0 as int) as safe,\n    cast(0 as int) as at_risk,\n    cast(0 as int) as expiring,\n    cast(0 as int) as gone_this_month,\n    cast(0 as int) as sent_l6m;\n\n\n-- Insert values\nmerge into ${Database}.jobs.nuk_data_retention_report_data a \nusing (\n          select \n              division as division,\n              sum(case when customer_retention_group = 'New' then 1 else 0 end) as new_,\n              sum(case when customer_retention_group = 'Re-consent' then 1 else 0 end) as reconsent,\n              sum(case when customer_retention_group = 'Safe' then 1 else 0 end) as safe,\n              sum(case when customer_retention_group = 'At Risk' then 1 else 0 end) as at_risk,\n              sum(case when customer_retention_group = 'Expiring' then 1 else 0 end) as expiring,\n              sum(case when lower(customer_retention_group) regexp '.*gone this month.*' then 1 else 0 end) as gone_this_month,\n              sum(case when lower(customer_retention_group) not regexp '.*gone this month.*' and sent_l6m = 1 then 1 else 0 end) as sent_l6m\n          from ${Database}.temp.nuk_monthly_reports_rollup\n          where customer_suppression_group in ('Engagement','')\n          and (emailable = 1 or lower(customer_retention_group) regexp '.*gone this month.*')\n          group by 1\n      ) b on a.division = b.division\nwhen matched then update\nset a.new_ = b.new_,\n    a.reconsent = b.reconsent,\n    a.safe = b.safe,\n    a.at_risk = b.at_risk,\n    a.expiring = b.expiring,\n    a.gone_this_month = b.gone_this_month,\n    a.sent_l6m = b.sent_l6m;\n\n\n/******************************************************************************************\n                              E-BUSINESS MONTHLY REPORT\n******************************************************************************************/\n\n-- Delete records from history table for previous runs this month\ndelete\nfrom ${Database}.db.e_business_report_historic\nwhere date_run >= date_trunc('month',current_date);\n\n\n-- Insert into history table for record of month on month and year on year\ninsert into ${Database}.db.e_business_report_historic\n(\n    date_run,\n    month_run,\n    year_run,\n    division,\n    total,\n    emailable,\n    active,\n    at_risk_emailable\n)\nselect\n    current_date as date_run,\n    month(current_date) as month_run,\n    year(current_date) as year_run,\n    division,\n    count(*) as total,\n    sum(emailable) as emailable,\n    sum(case when emailable = 1 and opened_l2y = 1 then 1 else 0 end) as active,\n    sum(case when emailable = 1 and lower(customer_retention_group) regexp '.*at risk.*|.*expiring.*' then 1 else 0 end) as at_risk_emailable\nfrom ${Database}.temp.nuk_monthly_reports_rollup\nwhere lower(division) not regexp '.*nestlé uk ltd.*|.*vitaflo.*|.*lactalis.*|.*international.*|.*sma.*|.*hcp.*|.*cerelac.*'\n    and lower(customer_retention_group) not regexp '.*gone this month.*|.*anonymise.*|.*other.*'\ngroup by division;\n\n\n-- Create table for excel to pull from\ndrop table if exists ${Database}.jobs.nuk_e_business_report_data;\n\ncreate or replace table ${Database}.jobs.nuk_e_business_report_data\nas\nselect\n    trim(division) as division,\n    sum(case when date_run = current_date then total end) as total,\n    sum(case when date_run = current_date then total end) - sum(case when year_run = year(add_months(current_date,-1)) and month_run = month(add_months(current_date,-1)) then total end) as total_change_mom,\n    sum(case when date_run = current_date then total end) - sum(case when year_run = (year(current_date)-1) and month_run = month(current_date) then total end) as total_change_yoy,\n    sum(case when date_run = current_date then emailable end) as emailable,\n    sum(case when date_run = current_date then emailable end) - sum(case when year_run = year(add_months(current_date,-1)) and month_run = month(add_months(current_date,-1)) then emailable end) as emailable_change_mom,\n    sum(case when date_run = current_date then emailable end) - sum(case when year_run = (year(current_date)-1) and month_run = month(current_date) then emailable end) as emailable_change_yoy,\n    sum(case when date_run = current_date then active end) as active,\n    sum(case when date_run = current_date then at_risk_emailable end) as at_risk_emailable\nfrom ${Database}.db.e_business_report_historic\ngroup by division;\n\n\n/******************************************************************************************\n                              GLOBAL DATA MONTHLY REPORT\n******************************************************************************************/\n\n--Create the table of Nestle groupings aginst barnd_id's\ndrop table if exists ${Database}.temp.nuk_global_data_report_lookuptable;\ncreate or replace table ${Database}.temp.nuk_global_data_report_lookuptable\n(\n    brand_id int,\n    global_category_id int\n);\n\n\ninsert into ${Database}.temp.nuk_global_data_report_lookuptable\n(brand_id,global_category_id)\nvalues\n(2,3),\n(3,6),\n(4,21),\n(5,21),\n(6,21),\n(7,21),\n(8,21),\n(9,21),\n(10,21),\n(11,21),\n(12,22),\n(13,21),\n(14,21),\n(15,22),\n(16,21),\n(17,21),\n(18,21),\n(19,21),\n(20,6),\n(21,6),\n(22,18),\n(31,2),\n(32,2),\n(33,2),\n(35,27),\n(36,27),\n(37,27),\n(38,27),\n(39,27),\n(40,27),\n(42,14),\n(43,14),\n(44,14),\n(45,14),\n(46,14),\n(47,14),\n(48,14),\n(49,14),\n(50,14),\n(51,14),\n(52,14),\n(53,14),\n(54,14),\n(55,14),\n(56,14),\n(57,14),\n(58,14),\n(59,14),\n(60,14),\n(61,14),\n(62,14),\n(63,14),\n(66,6),\n(67,6),\n(68,6),\n(69,6),\n(70,6),\n(71,6),\n(72,6),\n(73,6),\n(74,6),\n(75,6),\n(76,29),\n(77,29),\n(78,29),\n(83,6),\n(84,6),\n(89,23),\n(90,21),\n(91,21),\n(92,14),\n(93,14),\n(94,5),\n(95,21),\n(96,21),\n(97,21),\n(98,21),\n(99,6),\n(100,6),\n(101,6),\n(105,6),\n(106,6),\n(107,6),\n(108,6),\n(109,6),\n(110,6),\n(111,6),\n(112,6),\n(113,6),\n(114,6),\n(115,29),\n(116,29),\n(117,29),\n(118,29),\n(119,29),\n(120,29),\n(121,14),\n(134,14),\n(136,14),\n(137,14),\n(138,14),\n(139,14),\n(140,14),\n(155,29),\n(160,29);\n\n\ndrop table if exists ${Database}.temp.nuk_global_data_report_custbase;\n\ncreate or replace table ${Database}.temp.nuk_global_data_report_custbase\nas \nselect distinct cb.cid, \n    lu.global_category_id,\n--Assuming consent is either mailable or emailable\n    max(case when cb.mailable = 1 or cb.emailable = 1 then 1 else 0 end) as consent,\n    case when max(cb.last_email_open_date_brand) > add_months(current_date, -24) then 1 else 0 end as last_email_open_brand,\n    cd.add1,\n    cd.add2,\n    cd.add3,\n    cd.add4,\n    cd.add5,\n    cd.town,\n    cd.county,\n    coalesce(ci.country, '') as country,\n    ci.postcode,\n    ci.dob,\n    max(coalesce(na.name_gig, 0)) as name_gig\nfrom ${Database}.live.cid_brand cb\ninner join ${Database}.live.cid ci on cb.cid = ci.cid\ninner join ${Database}.live.cid_details cd on cb.cid = cd.cid\ninner join ${Database}.temp.nuk_global_data_report_lookuptable lu on cb.brand_id = lu.brand_id\nleft join (\n           select distinct\n               na.cid,\n               lu.global_category_id,\n               max(case when lower(na.name_urn) regexp '.*reg_gig.*'then 1 else 0 end) as name_gig\n           from ${Database}.live.names na\n           join ${Database}.temp.nuk_global_data_report_lookuptable lu on coalesce(na.source_brand_id,(select brand_id from ${Database}.live.ref_brand where lower(brand) regexp '.*purina masterbrand.*')) = lu.brand_id\n           group by na.cid,\n               lu.global_category_id\n          ) na on cb.cid = na.cid and lu.global_category_id = na.global_category_id\nwhere (cb.brand_preference = 1 or (cb.brand_engagement = 1 and cb.brand_preference <> 0 ))\nand lower(cb.customer_retention_group_brand) regexp '.*new.*|.*at risk.*|.*data orphan.*|.*re-consent.*|.*safe.*'\ngroup by cb.cid, \n    lu.global_category_id,\n    cd.add1,\n    cd.add2,\n    cd.add3,\n    cd.add4,\n    cd.add5,\n    cd.town,\n    cd.county,\n    coalesce(ci.country, ''),\n    ci.postcode,\n    ci.dob;\n\n\ndrop table if exists ${Database}.temp.nuk_global_data_report_filter;\n\ncreate or replace table ${Database}.temp.nuk_global_data_report_filter\nas\n--Bad addresses - ie. non UK or Ireland\nselect distinct cid\nfrom ${Database}.temp.nuk_global_data_report_custbase\nwhere add1 in   (select add1 from ${Database}.db.ref_bad_address)\nor    add2 in   (select add2 from ${Database}.db.ref_bad_address)\nor    add3 in   (select add3 from ${Database}.db.ref_bad_address)\nor    add4 in   (select add4 from ${Database}.db.ref_bad_address)\nor    add5 in   (select add5 from ${Database}.db.ref_bad_address)\nor    town in   (select town from ${Database}.db.ref_bad_address)\nor    county in (select county from ${Database}.db.ref_bad_address)\nunion\n-- Check blank country records\nselect    distinct cid\nfrom      ${Database}.temp.nuk_global_data_report_custbase\nwhere     add1 > ''\nand lower(postcode) not regexp '(.*)(a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z)(.*)' \nand lower(country) not regexp '.*ireland.*'\nunion\n-- Check for channel islands and isle of man\nselect    distinct cid\nfrom      ${Database}.temp.nuk_global_data_report_custbase\nwhere     lower(postcode) regexp '^im.*|^je.*|^gy.*'\nunion\n-- check under 18\nselect distinct cid \nfrom ${Database}.temp.nuk_global_data_report_custbase\nwhere dob > add_months(current_date,-216)\nunion\n-- Check for BFPOs\nselect    distinct cid\nfrom      ${Database}.temp.nuk_global_data_report_custbase\nwhere     lower(add1||add2||add3||add4||add5||town||county||country||postcode) regexp '.*bfpo.*|.*b.f.p.o.*';\n\n\n/*Create data to work out Global Data*/\ndrop table if exists ${Database}.jobs.nuk_global_data_report_lookup;\ncreate table ${Database}.jobs.nuk_global_data_report_lookup\n(\nreport_type         \t\tvarchar(3) default '',\nglobal_category_id          number(38,0) default 0,\nconsumer                    number(13,0) default 0,\nall_consent                 number(13,0) default 0,\nconsent_email         \t\tnumber(13,0) default 0,\ngigya                       number(13,0) default 0,\ngigya_consent        \t\tnumber(13,0) default 0,\ngigya_consent_email         number(13,0) default 0,\nnon_gigya        \t\t    number(13,0) default 0,\nnon_gigya_consent           number(13,0) default 0,\nnon_gigya_consent_email     number(13,0) default 0\n)\n;\n\ninsert into ${Database}.jobs.nuk_global_data_report_lookup\n(report_type,global_category_id)\nvalues\n('ALL',2),\n('ALL',3),\n('ALL',6),\n('ALL',14),\n('ALL',18),\n('ALL',21),\n('ALL',22),\n('ALL',27),\n('ALL',29),\n('IE',2),\n('IE',3),\n('IE',6),\n('IE',14),\n('IE',18),\n('IE',21),\n('IE',22),\n('IE',27),\n('IE',29),\n('UK',2),\n('UK',3),\n('UK',6),\n('UK',14),\n('UK',18),\n('UK',21),\n('UK',22),\n('UK',27),\n('UK',29)\n;\n\nmerge into ${Database}.jobs.nuk_global_data_report_lookup a\nusing (\nselect 'ALL'                                          as report_type,\n     gd.global_category_id, \n     count(gd.cid)                                    as consumer,\n     sum(gd.consent)                                  as all_consent,\n     sum(case when gd.consent = 1 and gd.last_email_open_brand = 1 then 1 else 0 end) as consent_email,     \n     sum(gd.name_gig)                                 as gigya,\n     sum(case when gd.name_gig = 1 and gd.consent = 1 then 1 else 0 end) as gigya_consent,\n     sum(case when gd.name_gig = 1 and gd.consent = 1 and last_email_open_brand = 1 then 1 else 0 end)    as gigya_consent_email,\n     sum(case when gd.name_gig = 0 then 1 else 0 end)                    as non_gigya,\n     sum(case when gd.name_gig = 0 and gd.consent = 1 then 1 else 0 end) as non_gigya_consent,\n     sum(case when gd.name_gig = 0 and gd.consent = 1 and gd.last_email_open_brand = 1 then 1 else 0 end) as non_gigya_consent_email\nfrom ${Database}.temp.nuk_global_data_report_custbase gd\nleft join ${Database}.temp.nuk_global_data_report_filter fi on gd.cid = fi.cid\nwhere (lower(gd.country) regexp '.*united kingdom.*|.*ireland.*' or gd.country = '')\nand   fi.cid is null\ngroup by gd.global_category_id\nunion\n--United Kingdom\nselect 'UK'                                           as report_type,\n     gd.global_category_id, \n     count(gd.cid)                                    as consumer,\n     sum(gd.consent)                                  as all_consent,\n     sum(case when gd.consent = 1 and gd.last_email_open_brand = 1 then 1 else 0 end) as consent_email,     \n     sum(gd.name_gig)                                 as gigya,\n     sum(case when gd.name_gig = 1 and gd.consent = 1 then 1 else 0 end) as gigya_consent,\n     sum(case when gd.name_gig = 1 and gd.consent = 1 and gd.last_email_open_brand = 1 then 1 else 0 end) as gigya_consent_email,\n     sum(case when gd.name_gig = 0 then 1 else 0 end)                 as non_gigya,\n     sum(case when gd.name_gig = 0 and gd.consent = 1 then 1 else 0 end) as non_gigya_consent,\n     sum(case when gd.name_gig = 0 and gd.consent = 1 and gd.last_email_open_brand = 1 then 1 else 0 end) as non_gigya_consent_email\nfrom ${Database}.temp.nuk_global_data_report_custbase gd\nleft join ${Database}.temp.nuk_global_data_report_filter fi on gd.cid = fi.cid\nwhere (lower(gd.country) regexp '.*united kingdom.*' or gd.country = '')\nand   fi.cid is null\ngroup by gd.global_category_id\nunion\n--Ireland\nselect 'IE'                                           as report_type,\n     gd.global_category_id, \n     count(gd.cid)                                    as consumer,\n     sum(gd.consent)                                  as all_consent,\n     sum(case when gd.consent = 1 and gd.last_email_open_brand = 1 then 1 else 0 end) as consent_email,     \n     sum(gd.name_gig)                                 as gigya,\n     sum(case when gd.name_gig = 1 and gd.consent = 1 then 1 else 0 end) as gigya_consent,\n     sum(case when gd.name_gig = 1 and gd.consent = 1 and gd.last_email_open_brand = 1 then 1 else 0 end) as gigya_consent_email,\n     sum(case when gd.name_gig = 0 then 1 else 0 end)                 as non_gigya,\n     sum(case when gd.name_gig = 0 and gd.consent = 1 then 1 else 0 end) as non_gigya_consent,\n     sum(case when gd.name_gig = 0 and gd.consent = 1 and gd.last_email_open_brand = 1 then 1 else 0 end) as non_gigya_consent_email\nfrom ${Database}.temp.nuk_global_data_report_custbase gd\nleft join ${Database}.temp.nuk_global_data_report_filter fi on gd.cid = fi.cid\nwhere lower(gd.country) regexp '.*ireland.*'\nand   fi.cid is null\ngroup by gd.global_category_id\n) b on a.report_type = b.report_type and a.global_category_id = b.global_category_id\nwhen matched then update \nset        \t\t        \na.consumer           \t   =  b.consumer,\na.all_consent              =  b.all_consent,\na.consent_email            =  b.consent_email, \na.gigya         \t\t   =  b.gigya,\na.gigya_consent            =  b.gigya_consent, \na.gigya_consent_email      =  b.gigya_consent_email, \na.non_gigya                =  b.non_gigya, \na.non_gigya_consent        =  b.non_gigya_consent,    \na.non_gigya_consent_email  =  b.non_gigya_consent_email\n;\n\n\ndrop table ${Database}.temp.nuk_global_data_report_custbase;\ndrop table ${Database}.temp.nuk_global_data_report_lookuptable;\ndrop table ${Database}.temp.nuk_global_data_report_filter;\n\n\n/******************************************************************************************\n            GROWING PUP AND KITTEN CODE WUNDERMAN DASHBOARD REPORT\n******************************************************************************************/\n\n--Growing Pup base table\ndrop table if exists ${Database}.temp.NPP07369_wunderman_dashboard_report_gp;\n\nCREATE OR REPLACE TABLE ${Database}.temp.NPP07369_wunderman_dashboard_report_gp\nas\nselect\n    x.cid,\n    case when contains(lower(pup.reg_source),'reg_kc') then 'Kennel Club'\n         when contains(lower(pup.reg_source),'reg_wun') then 'Purina Website'\n         when  contains(lower(pup.reg_source),'reg_thg') then 'The Hut Group'\n         when  contains(upper(pup.reg_source),'GP_SOCIAL') then 'Social'\n         else  'The Hut Group' end as registration_source,\n    pup.reg_date as registration_date,\n    x.campaign_id,\n    x.adestra_campaign_id,\n    x.adestra_campaign_name,\n    replace(x.adestra_campaign_name,'npp04398_growingpup_consumer','') as email,\n    x.link_label,\n    x.link_url,\n    x.event_name,\n    x.Content_Pillar,\n    x.Sub_Categories,\n    case when x.sent_date is not null then 1 else 0 end as sent,\n    x.sent_date,\n    case when (x.bounce_date is null and x.sent_date is not null) then 1 else 0 end as delivered,\n    case when (x.bounce_date is null and x.sent_date is not null) then x.sent_date end as delivered_date,\n    case when x.open_date is not null then 1 else 0 end as opened,\n    x.open_date,\n    case when x.clicked_date is not null then 1 else 0 end as clicked,\n    x.clicked_date,\n    x.num_clicks,\n    case when x.unsubscribed_date is not null then 1 else 0 end as unsubscribed,\n    x.unsubscribed_date,\n    case when right(x.kog_pack,1) = '1' then 'Pro Plan'\n         when right(x.kog_pack,1) = '2' then 'Beta'\n         else 'Pro Plan' -- older one\n         end as brand,\n    first_value(replace(x.adestra_campaign_name,'npp04398_growingpup_consumer','')) over(partition by x.cid order by sent_date desc) as last_sent,\n    first_value(case when open_date is not null then replace(x.adestra_campaign_name,'npp04398_growingpup_consumer','') else 'N/A' end) over(partition by x.cid order by open_date desc nulls last) as last_opened,\n    coalesce(p_age.signup_age,'8 Weeks') as pet_age\nfrom (\n        select\n            ae1.cid,\n            ae1.campaign_id,\n            ae1.adestra_campaign_id,\n            ae1.adestra_campaign_name,\n            ae1.kog_pack,\n            ae2.link_label,\n            ae2.link_url,\n            ae2.event_name,\n            ae2.Content_Pillar,\n            ae2.Sub_Categories,\n            ae2.num_clicks,\n            max(case when ae1.event_name = 'sent_campaign' then cast(ae1.event_timestamp as date) end) as sent_date,\n            max(case when rlike(ae1.event_name,'(.*)(known_bounce|suppressed_global|undeliverable)(.*)','i') then cast(ae1.event_timestamp as date) end) as bounce_date,\n            max(case when rlike(ae1.event_name,'(.*)(read|click)(.*)','i') then cast(ae1.event_timestamp as date) end) as open_date,\n            max(case when contains(lower(ae1.event_name),'click') then cast(ae1.event_timestamp as date) end) as clicked_date,\n            max(u.data_date) as unsubscribed_date\n        from ${Database}.live.adestra_events ae1\n        left join (\n                    select\n                        ae.cid,\n                        un.data_date,\n                        ae.campaign_id,\n                        ae.adestra_campaign_id,\n                        ae.adestra_campaign_name,\n                        row_number() over(partition by ae.cid, un.data_date order by case when contains(lower(link_url),'unsub') then 1 else 0 end desc, event_timestamp desc) as rn\n                    from ${Database}.db.supps_unsubscribe un\n                    inner join ${Database}.live.adestra_events ae on lower(ae.email) = lower(un.email)\n                                                            and un.data_date >= cast(ae.event_timestamp as date)\n                                                            and un.data_date <= (cast(ae.event_timestamp as date) + 7)\n                    where rlike(ae.event_name,'(.*)(read|click)(.*)','i')\n                    and un.source_file ilike 'export.csv'\n                    and un.brand_id is null\n                    ) u on ae1.cid = u.cid\n                       and ae1.campaign_id = u.campaign_id\n                       and ae1.adestra_campaign_id = u.adestra_campaign_id\n        left join (\n                    select\n                        ae.cid,\n                        ae.campaign_id,\n                        ae.adestra_campaign_id,\n                        ae.adestra_campaign_name,\n                        ae.event_name,\n                        rll.link_label,\n                        ae.link_url,\n                        case when contains(rll.link_label,'|') then trim(tbw.db.strchop(rll.link_label,'|',2,2)) else trim(tbw.db.strchop(rll.link_label,'-',2,2)) end as content_pillar,\n                        case when contains(rll.link_label,'|') then trim(tbw.db.strchop(rll.link_label,'|',3,3)) else trim(tbw.db.strchop(rll.link_label,'-',3,3)) end as sub_categories,\n                        sum(case when contains(lower(ae.event_name),'click') then 1 else 0 end) as num_clicks\n                    from ${Database}.live.adestra_events ae\n                    left join ${Database}.db.ref_link_label rll on ae.adestra_campaign_name = rll.campaign_name and ae.link_url = rll.link_url\n                    where ae.link_url > ''\n                    and contains(lower(ae.adestra_campaign_name),'npp04398_growingpup_consumer')\n                    group by 1,2,3,4,5,6,7,9\n                ) ae2 on ae1.cid = ae2.cid\n                     and ae1.campaign_id = ae2.campaign_id\n                     and ae1.adestra_campaign_id = ae2.adestra_campaign_id\n         where contains(lower(ae1.adestra_campaign_name),'npp04398_growingpup_consumer')\n        group by 1,2,3,4,5,6,7,8,9,10,11\n        ) x\njoin (\n        select distinct \n            n.cid,\n            first_value(case when contains(lower(n.name_urn),'growing pup social') then 'GP_SOCIAL' else n.source end) over(partition by n.cid order by source_date asc) as reg_source,\n            first_value(n.reg_date) over(partition by n.cid order by source_date asc) as reg_date\n        from ${Database}.live.names n \n        join ${Database}.live.cid_pet p on p.cid = n.cid\n        where (contains(lower(n.source),'reg_kc') or (contains(lower(n.source),'reg_wun') and contains(lower(n.name_urn),'growing pup'))\n        or (contains(lower(n.source),'reg_thg')))\n        ) pup on pup.cid = x.cid\nleft join (\n            select distinct \n                xr.cid, \n                first_value(trim(tbw.db.strchop(cell_description,'-',3,3))) over (partition by xr.cid order by ch.drop_date) as signup_age \n            from ${Database}.db.comms_hist ch \n            inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ch.name_urn\n            join ${Database}.db.comms_hist_lookup chl on chl.campaign_id = ch.campaign_id \n            and chl.cell_id = ch.cell_id\n            and chl.pack_id = ch.pack_id\n            where contains(lower(ch.promotion_id),'npp04398_c')\n            and ch.cell_id <> '1'\n           ) p_age on p_age.cid = x.cid\n;\n\n--GP_email tab\ndrop table if exists ${Database}.jobs.NPP_wunderman_report_gp_email;\ncreate table ${Database}.jobs.NPP_wunderman_report_gp_email\nas\nselect\n    sent_date,\n    'Growing Pup' as program,\n    brand,\n    pca.registration_source,\n    pet_age as age_of_puppy,\n    email,\n    count(distinct case when sent = 1 then cid else null end) as sent,\n    count(distinct case when delivered = 1 then cid else null end) as delivered,\n    count(distinct case when delivered = 1 then cid else null end)/cast(count(distinct case when sent = 1 then cid else null end) as decimal(16,4)) as delivered_percent,\n    count(distinct case when opened = 1 then cid else null end) as opened,\n    case when count(distinct case when opened = 1 then cid else null end) = 0 then 0\n         else count(distinct case when opened = 1 then cid else null end)/cast(count(distinct case when delivered = 1 then cid else null end) as decimal(16,4)) end as opened_percent,\n    count(distinct case when clicked = 1 then cid else null end) as clicked,\n    case when count(distinct case when clicked = 1 then cid else null end) = 0 then 0\n         else count(distinct case when clicked = 1 then cid else null end)/cast(count(distinct case when opened = 1 then cid else null end) as decimal(16,4)) end as clicked_opened,\n    count(distinct case when unsubscribed = 1 then cid else null end) as unsubs,\n    case when count(distinct case when unsubscribed = 1 then cid else null end) = 0 then 0\n         else count(distinct case when unsubscribed = 1 then cid else null end)/cast(count(distinct case when delivered = 1 then cid else null end) as decimal(16,4)) end as unsubs_percent\nfrom ${Database}.temp.NPP07369_wunderman_dashboard_report_gp pca\nwhere sent_date >= date_trunc('MONTH',add_months(current_date, -2)) \nand sent_date < (date_trunc('MONTH',current_date))\ngroup by 1,2,3,4,5,6\n;\n\n-- GP_email_content tab\ndrop table if exists ${Database}.jobs.NPP_wunderman_report_gp_email_content;\ncreate table ${Database}.jobs.NPP_wunderman_report_gp_email_content\nas\nselect\n    pca.sent_date,\n    'Growing Pup' as program,\n    pca.brand,\n    pca.registration_source,\n    pca.pet_age as age_of_puppy,\n    pca.email,\n    pca.content_pillar,\n    pca.sub_categories,\n    pca.link_url,\n    pca.num_clicks as clicks,\n    sum(num_clicks/cast(total_clicks as decimal(16,6))) as perc_total_clicks\nfrom ${Database}.temp.NPP07369_wunderman_dashboard_report_gp pca \nleft join (select sum(num_clicks) as total_clicks from ${Database}.temp.NPP07369_wunderman_dashboard_report_gp) s on 1 = 1\nwhere event_name = 'click'\nand link_label > '' \nand pca.sent_date >= date_trunc('MONTH',add_months(current_date, -2)) \nand pca.sent_date < (date_trunc('MONTH',current_date))\ngroup by \n    pca.sent_date,\n    pca.brand,\n    pca.registration_source,\n    pca.pet_age,\n    pca.email,\n    pca.content_pillar,\n    pca.sub_categories,\n    pca.link_url,\n    pca.num_clicks\n;\n\n-- GP_registration tab\ndrop table if exists ${Database}.jobs.NPP_wunderman_report_GP_registrations;\ncreate table ${Database}.jobs.NPP_wunderman_report_GP_registrations\nas\nselect \n    tbw.db.strchop(cid_brand_urn, '-', 1,1) as bbw_urn,\n    pca.registration_date,\n    'Growing Pup' as program,\n    pca.brand,\n    pca.registration_source,\n    '' as breed_of_puppy,\n    pet_age as age_of_puppy,\n    case when (cb.brand_preference = 1 or (cb.brand_engagement = 1 and cb.brand_preference <> 0)) and cb.emailable = 1 then 1 else 0 end as optin,\n    count(distinct case when sent = 1 then to_char(sent_date,'yyyy-mm-dd')||'|'||Adestra_campaign_name else null end) as emails_sent,\n    count(distinct case when opened = 1 then to_char(sent_date,'yyyy-mm-dd')||'|'||Adestra_campaign_name else null end) as emails_opened,\n    pca.last_sent,\n    pca.last_opened,\n    coalesce(thg.orders, 0) as orders,\n    '£'||coalesce(to_char(thg.total_spend), '0') as total_spend\nfrom ${Database}.temp.NPP07369_wunderman_dashboard_report_gp pca\nleft join (\n            select distinct\n                cid,\n                case when p.name_urn is not null then 1 else 0 end as thg_has_puppy\n            from ${Database}.live.names n\n            left join ${Database}.db.pet p on p.name_urn = n.name_urn\n            where n.source = 'REG_THG' \n            and source_brand_id = (select brand_id from ${Database}.db.ref_brand where brand = 'Growing Pup')\n            and (p.pet_dob >= add_months(current_date,-14)-2)\n          ) nm on pca.cid = nm.cid\ninner join ${Database}.live.cid_brand cb on pca.cid = cb.cid\nleft join (\n            select \n                xr.cid,\n                count (distinct order_number) as orders,\n                sum(tr.despatched_qty*transaction_charge_price_per_unit) as total_spend   \n            from ${Database}.live.xref_name_urn xr \n            join ${Database}.db.npp_thg_trans tr on 'REG_THG|'||cast(customer_id as varchar) = xr.name_urn\n            where tr.despatched_date is not null\n            group by 1\n           ) thg on thg.cid = cb.cid\nwhere ((cb.brand_id = (select brand_id from ${Database}.db.ref_brand where brand = 'Growing Pup') and nm.cid is null) or (nm.cid is not null and nm.thg_has_puppy = 1))\ngroup by 1,2,3,4,5,6,7,8,11,12,13,14\n;\n\n--Kitten Code base table\ndrop table if exists ${Database}.temp.NPP07369_wunderman_dashboard_report_kc;\nCREATE OR REPLACE TABLE ${Database}.temp.NPP07369_wunderman_dashboard_report_kc\nas\nselect\n    x.cid,\n    kit.reg_source as registration_source,\n    kit.reg_date as registration_date,\n    kit.organic_signup,\n    x.campaign_id,\n    x.adestra_campaign_id,\n    x.adestra_campaign_name,\n    replace(x.adestra_campaign_name,'NPP05975_kitten_code_','') as email,\n    x.link_label,\n    x.link_url,\n    x.event_name,\n    x.Content_Pillar,\n    x.Sub_Categories,\n    case when x.sent_date is not null then 1 else 0 end as sent,\n    x.sent_date,\n    case when (x.bounce_date is null and x.sent_date is not null) then 1 else 0 end as delivered,\n    case when (x.bounce_date is null and x.sent_date is not null) then x.sent_date end as delivered_date,\n    case when x.open_date is not null then 1 else 0 end as opened,\n    x.open_date,\n    case when x.clicked_date is not null then 1 else 0 end as clicked,\n    x.clicked_date,\n    x.num_clicks,\n    case when x.unsubscribed_date is not null then 1 else 0 end as unsubscribed,\n    x.unsubscribed_date,\n    'Kitten Code' as brand,\n    first_value(replace(x.adestra_campaign_name,'NPP05975_kitten_code_','')) over(partition by x.cid order by sent_date desc) as last_sent,\n    first_value(case when open_date is not null then replace(x.adestra_campaign_name,'NPP05975_kitten_code_','') else 'N/A' end) over(partition by x.cid order by open_date desc nulls last) as last_opened,\n    case when p_age.signup_age is null or p_age.signup_age = '' then '8 Weeks' else p_age.signup_age end as pet_age\nfrom (\n        select\n            ae1.cid,\n            ae1.campaign_id,\n            ae1.adestra_campaign_id,\n            ae1.adestra_campaign_name,\n            ae1.kog_pack,\n            ae2.link_label,\n            ae2.link_url,\n            ae2.event_name,\n            ae2.Content_Pillar,\n            ae2.Sub_Categories,\n            ae2.num_clicks,\n            max(case when ae1.event_name = 'sent_campaign' then cast(ae1.event_timestamp as date) end) as sent_date,\n            max(case when rlike(ae1.event_name,'(.*)(known_bounce|suppressed_global|undeliverable)(.*)','i') then cast(ae1.event_timestamp as date) end) as bounce_date,\n            max(case when rlike(ae1.event_name,'(.*)(read|click)(.*)','i') then cast(ae1.event_timestamp as date) end) as open_date,\n            max(case when rlike(ae1.event_name,'(.*)(click)(.*)','i') then cast(ae1.event_timestamp as date) end) as clicked_date,\n            max(u.data_date) as unsubscribed_date\n        from ${Database}.live.adestra_events ae1\n        left join (\n                    select\n                        ae.cid,\n                        un.data_date,\n                        ae.campaign_id,\n                        ae.adestra_campaign_id,\n                        ae.adestra_campaign_name,\n                        row_number() over(partition by ae.cid, un.data_date order by case when contains(lower(link_url),'unsub') then 1 else 0 end desc, event_timestamp desc) as rn\n                    from ${Database}.db.supps_unsubscribe un\n                    inner join ${Database}.live.adestra_events ae on lower(ae.email) = lower(un.email)\n                                                            and un.data_date >= cast(ae.event_timestamp as date)\n                                                            and un.data_date <= (cast(ae.event_timestamp as date) + 7)\n                    where rlike(ae.event_name,'(.*)(click|read)(.*)','i')\n                    and un.source_file ilike 'export.csv'\n                    and un.brand_id is null\n                    ) u on ae1.cid = u.cid\n                       and ae1.campaign_id = u.campaign_id\n                       and ae1.adestra_campaign_name = u.adestra_campaign_name\n        left join (\n                    select\n                        cid,\n                        campaign_id,\n                        adestra_campaign_id,\n                        adestra_campaign_name,\n                        event_name,\n                        link_label,\n                        link_url,\n                        case when contains(link_label,'|') then trim(tbw.db.strchop(link_label,'|',2,2)) else trim(tbw.db.strchop(link_label,'-',2,2)) end as content_pillar,\n                        case when contains(link_label,'|') then trim(tbw.db.strchop(link_label,'|',3,3)) else trim(tbw.db.strchop(link_label,'-',3,3)) end as sub_categories,\n                        sum(case when contains(lower(event_name),'click') then 1 else 0 end) as num_clicks\n                    from ${Database}.live.adestra_events\n                    where link_label > ''\n                    and contains(lower(adestra_campaign_name),'npp05975_kitten_code_')\n                    group by 1,2,3,4,5,6,7,8,9\n                ) ae2 on ae1.cid = ae2.cid\n                     and ae1.campaign_id = ae2.campaign_id\n                     and ae1.adestra_campaign_id = ae2.adestra_campaign_id\n        where contains(lower(ae1.adestra_campaign_name),'npp05975_kitten_code_')\n        group by 1,2,3,4,5,6,7,8,9,10,11\n        ) x\njoin (\n        select distinct \n            p.cid,\n            case when contains(lower(p.source),'reg_wun') and contains(lower(p.name_urn),'kitten code') then 1 else 0 end as organic_signup,\n            first_value(case when contains(lower(p.source),'reg_wun') then 'Purina Website'\n                       when contains(lower(p.source),'reg_gig') then 'CIAM'\n                       else 'Other' end) \n                  over (partition by p.cid \n                        order by n.reg_date asc\n                        ) as reg_source,\n            first_value(n.reg_date) over(partition by p.cid order by n.reg_date asc) as reg_date\n        from ${Database}.live.cid_pet p\n        left join ${Database}.live.names n on p.cid = n.cid and p.name_urn = n.name_urn\n--        where ((contains(lower(p.source),'reg_wun') and contains(lower(p.name_urn),'kitten code')) or (p.pet_dob >= add_months(current_date,-12) and p.pet_data_date > '2020-06-08')) --old\n        where ((contains(lower(p.source),'reg_wun') and contains(lower(p.name_urn),'kitten code')) or (p.pet_dob >= add_months(p.pet_data_date,-12) and p.pet_data_date > '2020-06-08')) --they want to see registrations going back all time now\n        and lower(p.pet_type) = 'cat'\n        and p.pet_dob is not null\n        ) kit on kit.cid = x.cid\nleft join (\n            select distinct \n                xr.cid,\n                first_value(trim(tbw.db.strchop(cell_description,'-',2,2))) over (partition by xr.cid order by ch.drop_date) as signup_age\n            from ${Database}.db.comms_hist ch \n            inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ch.name_urn\n            join ${Database}.db.comms_hist_lookup chl on chl.campaign_id = ch.campaign_id \n                                                and chl.cell_id = ch.cell_id\n                                                and chl.pack_id = ch.pack_id\n            where contains(upper(ch.promotion_id),'NPP05975')\n            and cell_description <> 'Email 1 - Welcome'\n           ) p_age on p_age.cid = x.cid\n;\n\n--KC_email tab\ndrop table if exists ${Database}.jobs.NPP_wunderman_report_kc_email;\ncreate table ${Database}.jobs.NPP_wunderman_report_kc_email\nas\nselect\n    sent_date,\n    'Kitten Code' as program,\n    brand,\n    pca.registration_source,\n    pet_age as age_of_kitten,\n    email,\n    count(distinct case when sent = 1 then cid else null end) as sent,\n    count(distinct case when delivered = 1 then cid else null end) as delivered,\n    count(distinct case when delivered = 1 then cid else null end)/cast(count(distinct case when sent = 1 then cid else null end) as decimal(16,4)) as delivered_percent,\n    count(distinct case when opened = 1 then cid else null end) as opened,\n    case when count(distinct case when opened = 1 then cid else null end) = 0 then 0\n         else count(distinct case when opened = 1 then cid else null end)/cast(count(distinct case when delivered = 1 then cid else null end) as decimal(16,4)) end as opened_percent,    \n    count(distinct case when clicked = 1 then cid else null end) as clicked,\n    case when count(distinct case when clicked = 1 then cid else null end) = 0 then 0\n         else count(distinct case when clicked = 1 then cid else null end)/cast(count(distinct case when opened = 1 then cid else null end) as decimal(16,4)) end as clicked_opened,\n    count(distinct case when unsubscribed = 1 then cid else null end) as unsubs,\n    case when count(distinct case when unsubscribed = 1 then cid else null end) = 0 then 0\n         else count(distinct case when unsubscribed = 1 then cid else null end)/cast(count(distinct case when delivered = 1 then cid else null end) as decimal(16,4)) end as unsubs_percent\nfrom ${Database}.temp.NPP07369_wunderman_dashboard_report_kc pca\nwhere sent_date >= date_trunc('MONTH',add_months(current_date, -2)) \nand sent_date < (date_trunc('MONTH',current_date))\ngroup by 1,2,3,4,5,6\n;\n\n-- KC_email_content tab\ndrop table if exists ${Database}.jobs.NPP_wunderman_report_kc_email_content;\ncreate table ${Database}.jobs.NPP_wunderman_report_kc_email_content\nas\nselect\n    pca.sent_date,\n    'Kitten Code' as program,\n    pca.brand,\n    pca.registration_source,\n    pca.pet_age as age_of_kitten,\n    pca.email,\n    pca.content_pillar,\n    pca.sub_categories,\n    pca.link_url,\n    pca.num_clicks as clicks,\n    sum(num_clicks/cast(total_clicks as decimal(16,6))) as perc_total_clicks\nfrom ${Database}.temp.NPP07369_wunderman_dashboard_report_kc pca \nleft join (select sum(num_clicks) as total_clicks from ${Database}.temp.NPP07369_wunderman_dashboard_report_kc) s on 1 = 1\nwhere event_name = 'click'\nand link_label > '' \nand pca.sent_date >= date_trunc('MONTH',add_months(current_date, -2)) \nand pca.sent_date < (date_trunc('MONTH',current_date))\ngroup by \n    pca.sent_date,\n    pca.brand,\n    pca.registration_source,\n    pca.pet_age,\n    pca.email,\n    pca.content_pillar,\n    pca.sub_categories,\n    pca.link_url,\n    pca.num_clicks\n;\n\n-- KC_registration tab\ndrop table if exists ${Database}.jobs.NPP_wunderman_report_kc_registrations;\ncreate table ${Database}.jobs.NPP_wunderman_report_kc_registrations\nas\nselect \n    tbw.db.strchop(cid_brand_urn, '-', 1,1) as bbw_urn,\n    pca.registration_date,\n    'Kitten Code' as program,\n    pca.brand,\n    pca.registration_source,\n    '' as breed_of_kitten,\n    pet_age as age_of_kitten,\n    max(case when organic_signup = 1 \n                  and rb.brand = 'Kitten Code'\n                  and (cb.brand_preference = 1 or (cb.brand_engagement = 1 and cb.brand_preference <> 0)) \n                  and cb.emailable = 1 then 1 \n             when organic_signup = 0\n                  and cb.business_unit_id = 5\n                  and (cb.brand_preference = 1 or (cb.brand_engagement = 1 and cb.brand_preference <> 0)) \n                  and cb.emailable = 1 then 1 \n             else 0 end) as optin,\n    count(distinct case when sent = 1 then to_char(sent_date,'yyyy-mm-dd')||'|'||Adestra_campaign_name else null end) as emails_sent,\n    count(distinct case when opened = 1 then to_char(sent_date,'yyyy-mm-dd')||'|'||Adestra_campaign_name else null end) as emails_opened,\n    pca.last_sent,\n    pca.last_opened,\n    coalesce(thg.orders,0) as orders,\n    '£'||coalesce(to_char(thg.total_spend),'0') as total_spend\nfrom ${Database}.temp.NPP07369_wunderman_dashboard_report_kc pca\ninner join ${Database}.live.cid_brand cb on pca.cid = cb.cid \nleft join ${Database}.live.ref_brand rb on rb.brand_id = cb.brand_id \nleft join (\n            select \n                xr.cid,\n                count(distinct order_number) as orders,\n                sum(tr.despatched_qty*transaction_charge_price_per_unit) as total_spend   \n            from ${Database}.live.xref_name_urn xr \n            join ${Database}.db.npp_thg_trans tr on 'REG_THG|'||cast(customer_id as varchar) = xr.name_urn\n            where tr.despatched_date is not null\n            group by 1\n           ) thg on thg.cid = cb.cid\nwhere ((cb.brand_id = (select brand_id from ${Database}.db.ref_brand where brand = 'Kitten Code') and organic_signup = 1) or (cb.business_unit_id = 5 and organic_signup = 0))\ngroup by 1,2,3,4,5,6,7,11,12,13,14\n;\n\n/******************************************************************************************\n             BREED SELECTOR WUNDERMAN DASHBOARD REPORT\n******************************************************************************************/\n\n--Breed Selector base table\ndrop table if exists ${Database}.temp.NPP07369_wunderman_dashboard_report_bs;\nCREATE OR REPLACE TABLE ${Database}.temp.NPP07369_wunderman_dashboard_report_bs\nas\nselect\n    x.cid,\n    'Purina Website' as registration_source,\n    reg.reg_date as registration_date,\n    x.campaign_id,\n    x.adestra_campaign_id,\n    x.adestra_campaign_name,\n    x.email_version as email,\n    x.link_label,\n    x.link_url,\n    x.event_name,\n    x.Content_Pillar,\n    x.Sub_Categories,\n    case when x.sent_date is not null then 1 else 0 end as sent,\n    x.sent_date,\n    case when (x.bounce_date is null and x.sent_date is not null) then 1 else 0 end as delivered,\n    case when (x.bounce_date is null and x.sent_date is not null) then x.sent_date end as delivered_date,\n    case when x.open_date is not null then 1 else 0 end as opened,\n    x.open_date,\n    case when x.clicked_date is not null then 1 else 0 end as clicked,\n    x.clicked_date,\n    x.num_clicks,\n    x.unsubscribed,\n    'Breed Selector' as brand,\n    first_value(email_version) over(partition by x.cid order by sent_date desc nulls last) as last_sent,\n    first_value(sent_date) over(partition by x.cid order by sent_date desc nulls last) as last_sent_date,\n    first_value(case when open_date is not null then email_version else 'N/A' end) over(partition by x.cid order by open_date desc nulls last) as last_opened\nfrom (\n        select\n            ae1.cid,\n            ae1.campaign_id,\n            ae1.adestra_campaign_id,\n            ae1.adestra_campaign_name,\n            case when ae1.adestra_campaign_name = 'NPP06155_Breed_Selector_GP_6_months' then '6 months to go'\n                 when ae1.adestra_campaign_name = 'NPP06155_Breed_Selector_GP_5_months' then '5 months to go'\n                 when ae1.adestra_campaign_name = 'NPP06155_Breed_Selector_GP_4_months' then '4 months to go'\n                 when ae1.adestra_campaign_name = 'NPP06155_Breed_Selector_GP_3_months' then '3 months to go'\n                 when ae1.adestra_campaign_name = 'NPP06155_Breed_Selector_GP_2_months' then '2 months to go'\n                 when ae1.adestra_campaign_name = 'NPP06155_Breed_Selector_GP_1_months' then '1 month to go'\n                 when ae1.adestra_campaign_name = 'NPP06155_Breed_Selector_GP_Welcome'  then 'Welcome'\n                 when ae1.adestra_campaign_name = 'NPP06155_Breed_Selector_GP_Sign_Up'  then 'Growing Pup Sign Up'\n                 end as email_version,\n            ae1.kog_pack,\n            ae2.link_label,\n            ae2.link_url,\n            ae2.event_name,\n            ae2.Content_Pillar,\n            ae2.Sub_Categories,\n            ae2.num_clicks,\n            max(case when ae1.event_name = 'sent_campaign' then cast(ae1.event_timestamp as date) end) as sent_date,\n            max(case when rlike(ae1.event_name,'(.*)(known_bounce|suppressed_global|undeliverable)(.*)','i') then cast(ae1.event_timestamp as date) end) as bounce_date,\n            max(case when rlike(ae1.event_name,'(.*)(read|click)(.*)','i') then cast(ae1.event_timestamp as date) end) as open_date,\n            max(case when rlike(ae1.event_name,'(.*)(click)(.*)','i') then cast(ae1.event_timestamp as date) end) as clicked_date,\n            max(case when u.email is not null then 1 else 0 end) as unsubscribed\n        from ${Database}.live.adestra_events ae1\n        left join ${Database}.db.supps_unsubscribe u on lower(ae1.email) = lower(u.email) \n                                               and lower(ae1.adestra_campaign_id) = lower(u.unsub_campaign)\n        left join (\n                    select\n                        cid,\n                        campaign_id,\n                        adestra_campaign_id,\n                        adestra_campaign_name,\n                        event_name,\n                        link_label,\n                        link_url,\n                        trim(tbw.db.strchop(link_label,'|',2,2)) as content_pillar,\n                        trim(tbw.db.strchop(link_label,'|',3,3)) as sub_categories,\n                        sum(case when contains(lower(event_name),'click') then 1 else 0 end) as num_clicks\n                    from ${Database}.live.adestra_events\n                    where link_url > ''\n                    and contains(lower(adestra_campaign_name),'npp06155_breed_selector_gp')\n                    group by 1,2,3,4,5,6,7,9\n                ) ae2 on ae1.cid = ae2.cid\n                     and ae1.campaign_id = ae2.campaign_id\n                     and ae1.adestra_campaign_id = ae2.adestra_campaign_id\n        where contains(lower(ae1.adestra_campaign_name),'npp06155_breed_selector_gp')\n        group by 1,2,3,4,5,6,7,8,9,10,11,12\n        ) x\njoin (\n        select distinct \n            cid,\n            first_value(data_date) over(partition by cid order by data_date asc) as reg_date\n        from ${Database}.live.names\n        where source_brand_id = (select brand_id from ${Database}.live.ref_brand where contains(lower(brand),'breed selector'))\n        ) reg on reg.cid = x.cid\n;\n\n\ndrop table if exists ${Database}.jobs.NPP_wunderman_report_bs_email;\ncreate table ${Database}.jobs.NPP_wunderman_report_bs_email\nas\nselect\n    sent_date,\n    'Breed Selector' as program,\n    brand,\n    r.registration_source,\n    email,\n    count(distinct case when sent = 1 then cid else null end) as sent,\n    count(distinct case when delivered = 1 then cid else null end) as delivered,\n    count(distinct case when delivered = 1 then cid else null end)/cast(count(distinct case when sent = 1 then cid else null end) as decimal(16,4)) as delivered_percent,\n    count(distinct case when opened = 1 then cid else null end) as opened,\n    case when count(distinct case when opened = 1 then cid else null end) = 0 then 0\n         else count(distinct case when opened = 1 then cid else null end)/cast(count(distinct case when delivered = 1 then cid else null end) as decimal(16,4)) end as opened_percent,\n    count(distinct case when clicked = 1 then cid else null end) as clicked,\n    case when count(distinct case when clicked = 1 then cid else null end) = 0 then 0\n         else count(distinct case when clicked = 1 then cid else null end)/cast(count(distinct case when opened = 1 then cid else null end) as decimal(16,4)) end as clicked_opened,\n    count(distinct case when unsubscribed = 1 then cid else null end) as unsubs,\n    case when count(distinct case when unsubscribed = 1 then cid else null end) = 0 then 0\n         else count(distinct case when unsubscribed = 1 then cid else null end)/cast(count(distinct case when delivered = 1 then cid else null end) as decimal(16,4)) end as unsubs_percent\nfrom ${Database}.temp.NPP07369_wunderman_dashboard_report_bs r\nwhere sent_date >= date_trunc('MONTH',add_months(current_date, -2)) \nand sent_date < (date_trunc('MONTH',current_date))\ngroup by 1,2,3,4,5\n;\n\n-- BS_email_content tab\ndrop table if exists ${Database}.jobs.NPP_wunderman_report_bs_email_content;\ncreate table ${Database}.jobs.NPP_wunderman_report_bs_email_content\nas\nselect\n    r.sent_date,\n    'Breed Selector' as program,\n    r.brand,\n    r.registration_source,\n    r.email,\n    r.content_pillar,\n    r.sub_categories,\n    r.link_url,\n    r.num_clicks as clicks,\n    sum(num_clicks/cast(total_clicks as decimal(16,6))) as perc_total_clicks\nfrom ${Database}.temp.NPP07369_wunderman_dashboard_report_bs r\nleft join (select sum(num_clicks) as total_clicks from ${Database}.temp.NPP07369_wunderman_dashboard_report_bs) s on 1 = 1\nwhere event_name = 'click'\nand link_label > '' \nand r.sent_date >= date_trunc('MONTH',add_months(current_date, -2)) \nand r.sent_date < (date_trunc('MONTH',current_date))\ngroup by \n    r.sent_date,\n    r.brand,\n    r.registration_source,\n    r.email,\n    r.content_pillar,\n    r.sub_categories,\n    r.link_url,\n    r.num_clicks\n;\n\n-- BS_registration tab\ndrop table if exists ${Database}.jobs.NPP_wunderman_report_bs_registrations;\ncreate table ${Database}.jobs.NPP_wunderman_report_bs_registrations\nas\nselect \n    tbw.db.strchop(cid_brand_urn, '-', 1,1) as bbw_urn,\n    r.registration_date,\n    'Breed Selector' as program,\n    r.brand,\n    r.registration_source,\n    case when (cb.brand_preference = 1 or (cb.brand_engagement = 1 and cb.brand_preference <> 0)) and cb.emailable = 1 then 1 else 0 end as optin,\n    count(distinct case when sent = 1 then to_char(sent_date,'yyyy-mm-dd')||'|'||Adestra_campaign_name else null end) as emails_sent,\n    count(distinct case when opened = 1 then to_char(sent_date,'yyyy-mm-dd')||'|'||Adestra_campaign_name else null end) as emails_opened,\n    r.last_sent,\n    r.last_opened,\n    case when gp.cid is not null then 'Y' else 'N' end as gp_signup,\n    coalesce(t.puppy_timings_pdc, '') as puppy_timings_pdc,\n    coalesce(pdc.concern_pdc, '') as concern_pdc,\n    coalesce(pdc.concern_breakdown_pdc, '') as concern_breakdown_pdc\nfrom ${Database}.temp.NPP07369_wunderman_dashboard_report_bs r\nleft join (\n            select distinct\n                xr.cid,\n                resp.concern_pdc,\n                first_value(resp.response) over (partition by xr.cid, resp.concern_pdc order by event_timestamp desc) as concern_breakdown_pdc\n            from (select \n                    urn,\n                    'Lifestyle' as concern_pdc,\n                    bs_concern_lifestyle as response,\n                    event_timestamp\n                  from ${Database}.db.npp_breed_selector_pdc_responses\n                  where bs_concern_lifestyle > ''\n                  union all\n                  select \n                    urn,\n                    'Acquisition' as concern_pdc,\n                    bs_concern_acquisition as response,\n                    event_timestamp\n                  from ${Database}.db.npp_breed_selector_pdc_responses\n                  where bs_concern_acquisition > ''\n                  union all\n                  select \n                    urn,\n                    'Training' as concern_pdc,\n                    bs_concern_training as response,\n                    event_timestamp\n                  from ${Database}.db.npp_breed_selector_pdc_responses\n                  where bs_concern_training > ''\n                  ) resp\n            left join ${Database}.live.xref_name_urn xr on resp.urn = xr.name_urn\n          ) pdc on r.cid = pdc.cid\nleft join (\n            select distinct\n                xr.cid,\n                first_value(resp.bs_puppy_expected) over (partition by xr.cid order by resp.event_timestamp desc) as puppy_timings_pdc\n            from ${Database}.db.npp_breed_selector_pdc_responses resp\n            left join ${Database}.live.xref_name_urn xr on resp.urn = xr.name_urn\n            where bs_puppy_expected > ''\n            ) t on r.cid = t.cid\nleft join (\n            select distinct\n                ae.cid\n            from ${Database}.live.adestra_events ae \n            inner join ${Database}.live.names n on ae.cid = n.cid \n                                          and source = 'REG_WUN'\n                                          and n.reg_date <= cast(ae.event_timestamp as date)+5 --they signed up to Growing Pup via the website signup page within 5 days of the GP signup email open\n            inner join ${Database}.live.ref_brand rb on n.source_brand_id = rb.brand_id and contains(lower(rb.brand),'growing pup')\n            where ae.adestra_campaign_name = 'NPP06155_Breed_Selector_GP_Sign_Up' and rlike(event_name,'(.*)(read|click)(.*)','i') --they received and opened the GP signup email\n            ) gp on r.cid = gp.cid\ninner join ${Database}.live.cid_brand cb on r.cid = cb.cid\nwhere (cb.brand_id = (select brand_id from ${Database}.db.ref_brand where contains(lower(brand),'breed selector')))\nand (r.last_sent not in ('1 month to go','Growing Pup Sign Up') or (r.last_sent in ('1 month to go','Growing Pup Sign Up') and last_sent_date >= date_trunc('MONTH',current_date) -2)) --'After consumers have received the \"1 month to go\" or \"Growing Pup Sign Up\" email they should drop out of the report the following month'\ngroup by 1,2,3,4,5,6,9,10,11,12,13,14\n;\n\n\n/******************************************************************************************\n             IOS15 DATA RETENTION REPORT\n******************************************************************************************/\n\ncreate or replace table ${Database}.jobs.nuk_pilot_retention_comparison_report_data\nas\nselect\n    a.division,\n    b.current_retention_group,\n    a.active_consumers,\n    a.unaffected_consumers,\n    a.affected_consumers,\n    a.pilot_retention_0_3,\n    a.pilot_retention_4_6,\n    a.pilot_retention_7_9,\n    a.pilot_retention_10_12,\n    a.pilot_retention_13_15,\n    a.pilot_retention_16_18,\n    a.pilot_retention_19_21,\n    a.pilot_retention_22_24,\n    a.pilot_retention_25\nfrom (\n         select\n             business_unit as division,\n             cast(0 as int) as active_consumers,\n             cast(0 as int) as unaffected_consumers,\n             cast(0 as int) as affected_consumers,\n             cast(0 as int) as pilot_retention_0_3,\n             cast(0 as int) as pilot_retention_4_6,\n             cast(0 as int) as pilot_retention_7_9,\n             cast(0 as int) as pilot_retention_10_12,\n             cast(0 as int) as pilot_retention_13_15,\n             cast(0 as int) as pilot_retention_16_18,\n             cast(0 as int) as pilot_retention_19_21,\n             cast(0 as int) as pilot_retention_22_24,\n             cast(0 as int) as pilot_retention_25\n         from ${Database}.live.ref_business_unit\n         where lower(business_unit) not regexp '(.*)(nestec|r&r|vitaflo|lactalis|nespresso|international)(.*)'\n         and business_unit <> 'Nestlé UK Ltd'\n         union all\n         select\n             'Nestlé '||replace(division,'Nestle ','') as division,\n             cast(0 as int) as active_consumers,\n             cast(0 as int) as unaffected_consumers,\n             cast(0 as int) as affected_consumers,\n             cast(0 as int) as pilot_retention_0_3,\n             cast(0 as int) as pilot_retention_4_6,\n             cast(0 as int) as pilot_retention_7_9,\n             cast(0 as int) as pilot_retention_10_12,\n             cast(0 as int) as pilot_retention_13_15,\n             cast(0 as int) as pilot_retention_16_18,\n             cast(0 as int) as pilot_retention_19_21,\n             cast(0 as int) as pilot_retention_22_24,\n             cast(0 as int) as pilot_retention_25\n         from ${Database}.live.ref_division\n         where division in ('Beverage','Confectionery','Food','Nestle Professional','Nestle Health Science')\n         union all\n         select\n             'Total NUK&I' as division,\n             cast(0 as int) as active_consumers,\n             cast(0 as int) as unaffected_consumers,\n             cast(0 as int) as affected_consumers,\n             cast(0 as int) as pilot_retention_0_3,\n             cast(0 as int) as pilot_retention_4_6,\n             cast(0 as int) as pilot_retention_7_9,\n             cast(0 as int) as pilot_retention_10_12,\n             cast(0 as int) as pilot_retention_13_15,\n             cast(0 as int) as pilot_retention_16_18,\n             cast(0 as int) as pilot_retention_19_21,\n             cast(0 as int) as pilot_retention_22_24,\n             cast(0 as int) as pilot_retention_25\n     ) a\njoin (\n         select '0 - 3 Months' as current_retention_group\n         union all\n         select '4 - 6 Months' as current_retention_group\n         union all\n         select '7 - 9 Months' as current_retention_group\n         union all\n         select '10 - 12 Months' as current_retention_group\n         union all\n         select '13 - 15 Months' as current_retention_group\n         union all\n         select '16 - 18 Months' as current_retention_group\n         union all\n         select '19 - 21 Months' as current_retention_group\n         union all\n         select '22 - 24 Months' as current_retention_group\n     ) b on 1 = 1;\n\n\nmerge into ${Database}.jobs.nuk_pilot_retention_comparison_report_data a\nusing (\n          select\n              division,\n              current_retention_group,\n              count(*) as active_consumers,\n              sum(case when coalesce(customer_retention_date,'1900-01-01') = coalesce(customer_retention_date_ios15,'1900-01-01') then 1 else 0 end) as unaffected_consumers,\n              sum(case when coalesce(customer_retention_date,'1900-01-01') <> coalesce(customer_retention_date_ios15,'1900-01-01') then 1 else 0 end) as affected_consumers,\n              sum(case when pilot_retention_group = '0 - 3 Months'   then 1 else 0 end) as pilot_retention_0_3,\n              sum(case when pilot_retention_group = '4 - 6 Months'   then 1 else 0 end) as pilot_retention_4_6,\n              sum(case when pilot_retention_group = '7 - 9 Months'   then 1 else 0 end) as pilot_retention_7_9,\n              sum(case when pilot_retention_group = '10 - 12 Months' then 1 else 0 end) as pilot_retention_10_12,\n              sum(case when pilot_retention_group = '13 - 15 Months' then 1 else 0 end) as pilot_retention_13_15,\n              sum(case when pilot_retention_group = '16 - 18 Months' then 1 else 0 end) as pilot_retention_16_18,\n              sum(case when pilot_retention_group = '19 - 21 Months' then 1 else 0 end) as pilot_retention_19_21,\n              sum(case when pilot_retention_group = '22 - 24 Months' then 1 else 0 end) as pilot_retention_22_24,\n              sum(case when pilot_retention_group = '25+ Months' then 1 else 0 end) as pilot_retention_25\n          from (\n                   select\n                       cid,\n                       case when division = 'AiO' then 'Total NUK&I' else division end as division,\n                       customer_retention_date,\n                       customer_retention_date_ios15,\n                       case\n                           when customer_retention_date >= add_months(current_date,-3)                                                             then '0 - 3 Months'  \n                           when customer_retention_date >= add_months(current_date,-6)  and customer_retention_date < add_months(current_date,-3)  then '4 - 6 Months'  \n                           when customer_retention_date >= add_months(current_date,-9)  and customer_retention_date < add_months(current_date,-6)  then '7 - 9 Months'  \n                           when customer_retention_date >= add_months(current_date,-12) and customer_retention_date < add_months(current_date,-9)  then '10 - 12 Months'\n                           when customer_retention_date >= add_months(current_date,-15) and customer_retention_date < add_months(current_date,-12) then '13 - 15 Months'\n                           when customer_retention_date >= add_months(current_date,-18) and customer_retention_date < add_months(current_date,-15) then '16 - 18 Months'\n                           when customer_retention_date >= add_months(current_date,-21) and customer_retention_date < add_months(current_date,-18) then '19 - 21 Months'\n                           when customer_retention_date >= add_months(current_date,-24) and customer_retention_date < add_months(current_date,-21) then '22 - 24 Months'\n                           when customer_retention_date < add_months(current_date,-24)                                                             then '25+ Months'\n                       end as current_retention_group,\n                       case\n                           when customer_retention_date_ios15 >= add_months(current_date,-3)                                                                   then '0 - 3 Months'  \n                           when customer_retention_date_ios15 >= add_months(current_date,-6)  and customer_retention_date_ios15 < add_months(current_date,-3)  then '4 - 6 Months'  \n                           when customer_retention_date_ios15 >= add_months(current_date,-9)  and customer_retention_date_ios15 < add_months(current_date,-6)  then '7 - 9 Months'  \n                           when customer_retention_date_ios15 >= add_months(current_date,-12) and customer_retention_date_ios15 < add_months(current_date,-9)  then '10 - 12 Months'   \n                           when customer_retention_date_ios15 >= add_months(current_date,-15) and customer_retention_date_ios15 < add_months(current_date,-12) then '13 - 15 Months'\n                           when customer_retention_date_ios15 >= add_months(current_date,-18) and customer_retention_date_ios15 < add_months(current_date,-15) then '16 - 18 Months'\n                           when customer_retention_date_ios15 >= add_months(current_date,-21) and customer_retention_date_ios15 < add_months(current_date,-18) then '19 - 21 Months'\n                           when customer_retention_date_ios15 >= add_months(current_date,-24) and customer_retention_date_ios15 < add_months(current_date,-21) then '22 - 24 Months'         \n                           when customer_retention_date_ios15 < add_months(current_date,-24)                                                                   then '25+ Months'\n                       end as pilot_retention_group\n                   from ${Database}.temp.nuk_monthly_reports_rollup\n                   where emailable = 1\n                       and customer_retention_group <> 'Gone this month'\n               ) a\n          group by 1,2\n      ) b on b.division = a.division\n         and b.current_retention_group = a.current_retention_group\nwhen matched then update\nset a.active_consumers = b.active_consumers,\n    a.unaffected_consumers = b.unaffected_consumers,\n    a.affected_consumers = b.affected_consumers,\n    a.pilot_retention_0_3 = b.pilot_retention_0_3,\n    a.pilot_retention_4_6 = b.pilot_retention_4_6,\n    a.pilot_retention_7_9 = b.pilot_retention_7_9,\n    a.pilot_retention_10_12 = b.pilot_retention_10_12,\n    a.pilot_retention_13_15 = b.pilot_retention_13_15,\n    a.pilot_retention_16_18 = b.pilot_retention_16_18,\n    a.pilot_retention_19_21 = b.pilot_retention_19_21,\n    a.pilot_retention_22_24 = b.pilot_retention_22_24,\n    a.pilot_retention_25 = b.pilot_retention_25;\n\n\ndrop table if exists ${Database}.temp.nuk_monthly_reports_rollup;\n\n/******************************************************************************************\n             PURINA GP, KC, BT ACQUISITION SOURCE REPORT\n******************************************************************************************/\n\n-- Get all Purina consumers who registered during the proposed time frame (will work out whether it is their first reg during the retention part).\ncreate or replace table ${Database}.temp.NPP09204_purina_registrations\nas\nselect distinct\n    nm.cid,\n    nm.reg_date,\n    nm.name_urn,\n    nm.source_brand_id,\n    nm.source,\n    nm.source_file,\n    nm.source_date,\n    first_value(trim(coalesce(na.registration_campaign,''))) over (partition by nm.cid order by na.data_date asc nulls last, na.source_date asc nulls last) as registration_campaign,\n    first_value(dp.dp_emailable) over(partition by nm.cid order by dp.dp_date asc nulls last, dp.data_date asc nulls last, dp.source_date asc nulls last) as emailable\nfrom (\n         select\n             xr.cid,\n             nm.reg_date,\n             nm.name_urn,\n             nm.source_brand_id,\n             nm.source,\n             nm.source_file,\n             nm.source_date,\n             row_number() over(partition by xr.cid order by nm.reg_date asc nulls last, nm.data_date asc nulls last, nm.source_date asc nulls last, nm.bbw_urn asc nulls last) as rn\n         from ${Database}.db.names nm\n         join ${Database}.live.xref_name_urn xr on xr.name_urn = nm.name_urn\n         where nm.source_data_controller_id = 5 -- Purina\n             and nm.source_brand_id not in (136,137,142,149) -- Breeder & Vet\n             and reg_date >= '2020-01-01'\n             and reg_date < date_trunc('MONTH',current_date)            --1st day of current month\n     ) nm\nleft join ${Database}.db.names_attributes na on trim(na.name_urn) = trim(nm.name_urn)\n                                       and trim(na.source) = trim(nm.source)\n                                       and na.source_date >= nm.source_date\nleft join ${Database}.db.names_dp dp on trim(dp.name_urn) = trim(nm.name_urn)\n                               and trim(dp.source) = trim(nm.source)\n                               and dp.source_date >= nm.source_date\n                               and dp.data_controller_id = 5 -- Purina\nwhere rn = 1;\n\n\n-- Get the acquisition type and channel (code ripped from build).\ncreate or replace table ${Database}.temp.NPP09204_ref_acquisition_type\nas\n--new source - has populated registration_campaign and brand_id\n--join on source, reg_campaign and brand\nselect distinct\n    b.cid,\n    case when b.source = 'REG_GIG' then 'Website Registrations' else tc.acquisition_type end as acquisition_type, --Issue with reg_campaign when joining CIAM records to names_attributes, but they're all website reg\n    tc.acquisition_channel\nfrom ${Database}.temp.NPP09204_purina_registrations b\nleft join ${Database}.db.ref_acquisition_type tc on b.source = tc.acquisition_source\n                                           and b.registration_campaign = tc.registration_campaign\n                                           and b.source_brand_id = tc.acquisition_source_brand_id\nwhere (b.registration_campaign > '')\n    and b.source_brand_id is not null\n    and contains(lower(tc.source_old_new),'new')\nunion all\n--new source - has null or blank registration_campaign and populated brand_id\n--join on source and brand_id\nselect distinct\n    b.cid,\n    case when b.source = 'REG_GIG' then 'Website Registrations' else tc.acquisition_type end as acquisition_type, --Issue with reg_campaign when joining CIAM records to names_attributes, but they're all website reg\n    tc.acquisition_channel\nfrom ${Database}.temp.NPP09204_purina_registrations b\nleft join ${Database}.db.ref_acquisition_type tc on b.source = tc.acquisition_source\n                                           and b.source_brand_id = tc.acquisition_source_brand_id\nwhere (b.registration_campaign is null or b.registration_campaign = '')\n    and tc.registration_campaign is null\n    and b.source_brand_id is not null\n    and contains(lower(tc.source_old_new),'new')\nunion all\n--new source - has populated registration_campaign and null brand_id\n--join on source and reg_campaign\nselect distinct\n    b.cid,\n    case when b.source = 'REG_GIG' then 'Website Registrations' else tc.acquisition_type end as acquisition_type, --Issue with reg_campaign when joining CIAM records to names_attributes, but they're all website reg\n    tc.acquisition_channel\nfrom ${Database}.temp.NPP09204_purina_registrations b\nleft join ${Database}.db.ref_acquisition_type tc on b.source = tc.acquisition_source\n                                           and b.registration_campaign = tc.registration_campaign\nwhere (b.registration_campaign > '')\n    and b.source_brand_id is null\n    and tc.acquisition_source_brand_id is null\n    and contains(lower(tc.source_old_new),'new')\nunion all\n--new source - has null registration_campaign and null brand_id\n--hard coding as Website Registrations\nselect distinct\n    b.cid,\n    'Website Registrations' as acquisition_type,\n    tc.acquisition_channel\nfrom ${Database}.temp.NPP09204_purina_registrations b\ninner join ${Database}.db.ref_acquisition_type tc on b.source = tc.acquisition_source\n                                            and tc.acquisition_source_brand_id is null\n                                            and (tc.registration_campaign = '' or tc.registration_campaign is null)\nwhere (b.registration_campaign is null or b.registration_campaign = '')\n    and b.source_brand_id is null\n    and not contains(upper(b.source),'NPP')\nunion all\n--old source - non-null acquisition_source_brand_id\nselect distinct\n    b.cid,\n    tc.acquisition_type,\n    tc.acquisition_channel\nfrom ${Database}.temp.NPP09204_purina_registrations b\nleft join ${Database}.db.ref_acquisition_type tc on b.source = tc.acquisition_source\n                                           and b.source_file = tc.acquisition_source_file\n                                           and b.source_brand_id = tc.acquisition_source_brand_id\nwhere contains(lower(tc.source_old_new),'old')\n    and b.source_brand_id is not null\nunion all\n--old source - has null acquisition_source_brand_id\nselect distinct\n    b.cid,\n    tc.acquisition_type,\n    tc.acquisition_channel\nfrom ${Database}.temp.NPP09204_purina_registrations b\nleft join ${Database}.db.ref_acquisition_type tc on b.source = tc.acquisition_source\n                                           and b.source_file = tc.acquisition_source_file\nwhere contains(lower(tc.source_old_new),'old')\n    and b.source_brand_id is null;\n\n\n-- Add acquisition type and channel to main selection.\ncreate or replace table ${Database}.temp.NPP09204_purina_registrations_w_acquisition\nas\nselect\n    rg.*,\n    ac.acquisition_channel,\n    ac.acquisition_type\nfrom ${Database}.temp.NPP09204_purina_registrations rg\nleft join ${Database}.temp.NPP09204_ref_acquisition_type ac on ac.cid = rg.cid;\n\n\n-- Create a rollup of pets at the time of registration (code just ripped from build but restricted to our registrants and taking reg date for calculations of current date).\n-- Don't need all the name clean stuff that can just come from the live table.\n\n--Work out suppressions from supps_pet table.\ncreate or replace table ${Database}.temp.NPP09204_supps_pets\nas\nselect distinct\n    deceased_urn\nfrom (\n         select distinct\n              upper(x2.name_urn||'|'||trim(sp.pet_name)) as deceased_urn\n         from ${Database}.db.supps_pet sp\n         inner join ${Database}.live.xref_name_urn x1 on lower(x1.email) = lower(trim(sp.email))\n         inner join ${Database}.live.xref_name_urn x2 on x2.cid = x1.cid\n         inner join ${Database}.temp.NPP09204_purina_registrations_w_acquisition rg on rg.cid = x2.cid\n                                                                              and rg.source_date >= sp.data_date\n         where trim(sp.email) > ''\n         union all\n         select distinct\n              upper(x2.name_urn||'|'||trim(sp.pet_name)) as deceased_urn\n         from ${Database}.db.supps_pet sp\n         inner join ${Database}.live.xref_name_urn x1 on x1.name_urn = trim(sp.source_urn)\n         inner join ${Database}.live.xref_name_urn x2 on x2.cid = x1.cid\n         inner join ${Database}.temp.NPP09204_purina_registrations_w_acquisition rg on rg.cid = x2.cid\n                                                                              and rg.source_date >= sp.data_date\n     ) s;\n\n\n--Create full version of pet information (will be deduped later).\ncreate or replace table ${Database}.temp.NPP09204_cid_pet_temp as\nselect\n    cid,\n    name_urn,\n    pet_type,\n    pet_breed,\n    nvl(pet_gender,'') as pet_gender,\n    upper(nvl(pet_size,'')) as pet_size,\n    pet_indoor_outdoor,\n    pet_colour,\n    nvl(pet_name_cleaned,'') as pet_name_cleaned,\n    case\n        when pet_dob is not null then pet_dob --CIAM actual DOB\n        when pet_age_years is not null and pet_age_months is not null then add_months(pet_dob_first_data_date, -((pet_age_years*12)+pet_age_months)) --CIAM pet age years or months\n        when pet_birth_month is not null and pet_birth_year is not null\n            then case\n                      when is_date(cast(cast(pet_birth_year as varchar)||'-'||pet_birth_month||'-'||left(to_char(pet_dob_first_data_date),2) as variant)) = 1\n                          then cast(cast(pet_birth_year as varchar)||'-'||pet_birth_month||'-'||left(to_char(pet_dob_first_data_date),2) as date)\n                      else last_day(cast(cast(pet_birth_year as varchar)||'-'||pet_birth_month||'-01' as date))\n                 end --Birthday email\n        when pet_age_years is not null and pet_birth_month is not null\n            then case\n                     when is_date(cast(to_char(cast(left(cast(pet_dob_first_data_date as varchar),4) as int) - cast(pet_age_years as int))||'-'||pet_birth_month||'-'||left(to_char(pet_dob_first_data_date),2) as variant)) = 1\n                         then cast(to_char(cast(left(cast(pet_dob_first_data_date as varchar),4) as int) - cast(pet_age_years as int))||'-'||pet_birth_month||'-'||left(to_char(pet_dob_first_data_date),2) as date)\n                     else last_day(cast(to_char(cast(left(cast(pet_dob_first_data_date as varchar),4) as int) - cast(pet_age_years as int))||'-'||pet_birth_month||'-01' as date))\n                 end --Winalot campaign and eCRM 'sorry' email\n        when pet_age_weeks is not null then (pet_dob_first_data_date - (pet_age_weeks*7)) --Purina GP signup (age given in weeks)\n        when pet_age_months is not null then add_months(pet_dob_first_data_date, -pet_age_months) --Purina GP signup (age given in months)\n    end as derived_pet_dob,\n    case\n        when pet_dob is not null then 'Actual pet DOB'\n        when pet_age_years is not null and pet_age_months is not null then 'Pet age years and months'\n        when pet_birth_month is not null and pet_birth_year is not null then 'Pet birth month and year'\n        when pet_age_years is not null and pet_birth_month is not null then 'Pet age years and pet birth month'\n        when pet_age_weeks is not null then 'Pet age weeks'\n        when pet_age_months is not null then 'Pet age months'\n        else 'No DOB details'\n    end as dob_type,\n    pet_life_stage,\n    source,\n    pet_dob_last_data_date,\n    data_date,\n    reg_date\nfrom (\n         select distinct\n             x.cid,\n             x.name_urn,\n             case\n                 when lower(p.pet_type) regexp '.*cat.*' then 'Cat'\n                 when lower(p.pet_type) regexp '.*dog.*' then 'Dog'\n                 else initcap(trim(p.pet_type))\n             end as pet_type,\n             trim(coalesce(pbc.clean_breed_name,'')) as pet_breed,\n             trim(pet_gender) as pet_gender,\n             trim(pet_size) as pet_size,\n             trim(pet_indoor_outdoor) as pet_indoor_outdoor,\n             trim(pet_colour) as pet_colour,\n             case when l.multi_word_flag = 1 and left(upper(x.name_urn),6) <> 'REG_KC' then '' else pet_name_cleaned end as pet_name_cleaned,\n             pet_dob,\n             lpad(to_char(pet_birth_month),2,'0') as pet_birth_month,\n             pet_birth_year,\n             pet_age_years,\n             pet_age_months,\n             pet_age_weeks,\n             pet_life_stage,\n             trim(p.source) as source,\n             least(p.data_date,p.source_date) as data_date,\n             first_value(least(p.data_date,p.source_date)) over (partition by x.cid,case when lower(p.pet_type) regexp '.*cat.*' then 'Cat' when lower(collate(p.pet_type,'')) regexp 'dog' then 'Dog' else initcap(p.pet_type) end,pet_name_cleaned,pet_dob,pet_birth_month,pet_age_years,pet_age_months,pet_age_weeks order by least(p.data_date,p.source_date) asc) as pet_dob_first_data_date,\n             first_value(least(p.data_date,p.source_date)) over (partition by x.cid,case when lower(p.pet_type) regexp '.*cat.*' then 'Cat' when lower(collate(p.pet_type,'')) regexp 'dog' then 'Dog' else initcap(p.pet_type) end,pet_name_cleaned,pet_dob,pet_birth_month,pet_age_years,pet_age_months,pet_age_weeks order by least(p.data_date,p.source_date) desc) as pet_dob_last_data_date,\n             rg.reg_date\n         from ${Database}.live.xref_name_urn x\n         inner join ${Database}.db.pet p on x.name_urn = p.name_urn\n         inner join ${Database}.temp.NPP09204_purina_registrations_w_acquisition rg on rg.cid = x.cid\n                                                                              and rg.source_date >= p.data_date\n         left join ${Database}.live.pet_name_lookup l on upper(trim(p.pet_name)) = upper(l.pet_name)\n         left join ${Database}.db.ref_pet_breeds_clean pbc on lower(trim(pbc.breed_name)) = lower(trim(p.pet_breed))\n                                                     and lower(trim(pbc.pet_type)) = lower(trim(p.pet_type))\n         where nvl(l.deceased_flag,0) = 0\n             and upper(x.name_urn||'|'||trim(p.pet_name)) not in (\n                                                                     select\n                                                                         deceased_urn\n                                                                     from ${Database}.temp.NPP09204_supps_pets\n                                                                 )\n     ) t;\n\n\ndrop table if exists ${Database}.temp.NPP09204_supps_pets;\n\n\n--Create deduped table of pet names with information.\ncreate or replace table ${Database}.temp.NPP09204_cid_pet as\nselect\n    row_number() over (partition by cid order by case when nvl(pet_name,'') > '' then 1 else 0 end desc,pet_dob asc,case when nvl(pet_breed,'') > '' then 1 else 0 end desc,case when nvl(pet_gender,'') > '' then 1 else 0 end desc,name_urn desc,pet_name asc) as pet_number,\n    *\nfrom (\n         select\n             cid,\n             name_urn,\n             cast('' as varchar(50)) as pet_id,\n             pet_type,\n             pet_name_cleaned as pet_name,\n             pet_breed,\n             pet_gender,\n             first_value(derived_pet_dob) over (partition by cid,pet_type,pet_name_cleaned order by case when derived_pet_dob is null then 0 else 1 end desc,pet_dob_last_data_date desc,derived_pet_dob desc) as pet_dob,\n             first_value(dob_type) over (partition by cid,pet_type,pet_name_cleaned order by case when derived_pet_dob is null then 0 else 1 end desc,pet_dob_last_data_date desc,derived_pet_dob desc,dob_type desc) as pet_dob_type,\n             coalesce(trim(lk.size),pt.pet_size) as pet_size,\n             pet_indoor_outdoor,\n             pet_colour,\n             pet_dob_last_data_date as pet_data_date,\n             case\n                 when pet_life_stage > '' then pet_life_stage\n                 when pet_type = 'Dog' and derived_pet_dob >  add_months(reg_date,-12)  and coalesce(lk.size,pt.pet_size) in ('T','S')          then 'Puppy'\n                 when pet_type = 'Dog' and derived_pet_dob >  add_months(reg_date,-24)  and coalesce(lk.size,pt.pet_size) in ('L','XL')         then 'Puppy'\n                 when pet_type = 'Dog' and derived_pet_dob >  add_months(reg_date,-120) and coalesce(lk.size,pt.pet_size) in ('T','S')          then 'Adult'\n                 when pet_type = 'Dog' and derived_pet_dob >  add_months(reg_date,-60)  and coalesce(lk.size,pt.pet_size) in ('L','XL')         then 'Adult'\n                 when pet_type = 'Dog' and derived_pet_dob >  add_months(reg_date,-156) and coalesce(lk.size,pt.pet_size) in ('T','S','L','XL') then 'Senior'\n                 when pet_type = 'Dog' and derived_pet_dob >  add_months(reg_date,-12)                                                          then 'Puppy'\n                 when pet_type = 'Dog' and derived_pet_dob >  add_months(reg_date,-84)                                                          then 'Adult'\n                 when pet_type = 'Dog' and derived_pet_dob >  add_months(reg_date,-156)                                                         then 'Senior'\n                 when pet_type = 'Dog' and derived_pet_dob <= add_months(reg_date,-156)                                                         then 'Older'\n                 when pet_type = 'Cat' and derived_pet_dob >  add_months(reg_date,-12)                                                          then 'Kitten'\n                 when pet_type = 'Cat' and derived_pet_dob >  add_months(reg_date,-84)                                                          then 'Adult'\n                 when pet_type = 'Cat' and derived_pet_dob >  add_months(reg_date,-192)                                                         then 'Senior'\n                 when pet_type = 'Cat' and derived_pet_dob <= add_months(reg_date,-192)                                                         then 'Older'\n                 else 'Unknown'\n             end as pet_life_stage,\n             source,\n             row_number() over (partition by cid,pet_type,pet_name_cleaned order by data_date desc,pet_dob_last_data_date desc,derived_pet_dob desc,pet_size desc,pet_indoor_outdoor desc,pet_gender desc,pet_breed desc) as rownum,\n             reg_date\n         from ${Database}.temp.NPP09204_cid_pet_temp pt\n         left join ${Database}.db.dog_breed_size_lookup lk on upper(pt.pet_breed) =  upper(trim(lk.breed))\n         where pet_type in ('Cat','Dog')\n     ) t\nwhere rownum = 1\n    and (\n            (\n                pet_type = 'Dog'\n                and pet_dob > add_months(reg_date, -240) --Dogs must be under 20\n            )\n            or\n            (\n                pet_type = 'Cat'\n                and pet_dob > add_months(reg_date, -360) --Cats must be under 30\n            )\n            or\n            (\n                pet_type in ('Dog', 'Cat') --remove anything other than cat/dog\n                and pet_data_date >= add_months(reg_date, -12) --everything captured in the last 12 months is valid\n            )\n        )\n    and name_urn not in (\n                            select distinct\n                                c.name_urn\n                            from ${Database}.temp.NPP09204_cid_pet_temp c\n                            inner join ${Database}.temp.NPP09204_cid_pet_temp c2 on c.cid = c2.cid\n                                                                           and c.pet_type = c2.pet_type\n                                                                           and c2.source = 'RESP_REV_DAILY'\n                            where c.pet_name_cleaned = ''\n                        );\n\n\n-- Update the registration table to set brand to kitten code (143) where they only have kittens and not growing pup or kitten code already\nmerge into ${Database}.temp.NPP09204_purina_registrations_w_acquisition rg\nusing (\n          select\n              cid,\n              max(case when pet_type = 'Cat' and (pet_dob >= add_months(reg_date,-12) or pet_life_stage = 'Kitten') then 1 else 0 end) as has_kittens,\n              max(case when pet_type = 'Cat' and (pet_dob >= add_months(reg_date,-12) or pet_life_stage = 'Kitten') then 0 else 1 end) as has_other_pets\n          from ${Database}.temp.NPP09204_cid_pet\n          group by 1\n      ) pt on pt.cid = rg.cid\n          and pt.has_kittens = 1\n          and pt.has_other_pets = 0\nwhen matched and rg.source_brand_id not in (138,143) then update\nset rg.source_brand_id = 143;\n\n\n-- Update all other brands to act as Purina Masterbrand (121)\nupdate ${Database}.temp.NPP09204_purina_registrations_w_acquisition\nset source_brand_id = 121\nwhere source_brand_id not in (138,143);\n\n\n-- DATA RETENTION\n-- Retention is refreshed by first registration, logging in, opening an email and giving positive consent (tables ripped from build but changed to show all dates rather than latest to compare against reg date).\n\n-- Get first registration per consumer.\ncreate or replace table ${Database}.temp.NPP09204_retention_first_reg\nas\nselect\n    xr.cid,\n    min(nm.reg_date) as first_reg_date\nfrom ${Database}.db.names nm\ninner join ${Database}.live.xref_name_urn xr on xr.name_urn = trim(nm.name_urn)\nwhere nm.source_data_controller_id = 5 -- Purina\ngroup by 1;\n\n\ncreate or replace table ${Database}.temp.NPP09204_retention_prep_name_urn\nas\nselect\n    cid,\n    hid,\n    name_urn,\n    source_data_controller_id,\n    source_brand_id,\n    source_date,\n    data_date,\n    email,\n    phone_home,\n    phone_work,\n    phone_mobile,\n    add1\nfrom ${Database}.live.names;\n\n\ncreate or replace table ${Database}.temp.NPP09204_retention_dp_prep\nas\nselect\n    nmt.cid,\n    nmt.hid,\n    nmt.name_urn,\n    nmt.email,\n    dp.data_controller_id, --dc for opt ins\n    dp.brand_id, --brand is for opt in brand rather than source\n    dp.dp_date,\n    dp.dp_mailable,\n    dp.dp_emailable,\n    dp.dp_phoneable,\n    dp.dp_smsable,\n    dp.dp_newsletter,\n    dp.source_date,\n    dp.data_date,\n    date_trunc('MONTH', dateadd(day,-1,current_date())) as month_start_dt\nfrom ${Database}.temp.NPP09204_retention_prep_name_urn nmt\ninner join ${Database}.db.names_dp dp on nmt.name_urn = trim(dp.name_urn)\nwhere --must have at least 1 permission\n       dp.dp_mailable is not null\n    or dp.dp_emailable is not null\n    or dp.dp_phoneable is not null\n    or dp.dp_smsable is not null\n    or dp.dp_newsletter is not null;\n\n\n-- Get login dates.\ncreate or replace table ${Database}.temp.NPP09204_retention_login\nas\nselect distinct\n    xr.cid,\n    cast(wh.browser_date as date) as login_date\nfrom ${Database}.db.web_browser_hist wh\ninner join ${Database}.live.xref_name_urn xr on xr.name_urn = trim(wh.name_urn)\nleft join ${Database}.temp.NPP09204_retention_dp_prep dp on dp.name_urn = wh.name_urn\n                                                   and dp.data_controller_id = wh.data_controller_id\n                                                   and dp.dp_date = cast(wh.browser_date as date)\n                                                   and dp.dp_mailable = 0\n                                                   and dp.dp_emailable = 0\nwhere dp.name_urn is null\n    and trim(wh.source) <> 'REG_GIG_Initial_Load'\n    and wh.data_controller_id = 5; -- Purina\n\n\n-- Get email opens from Adestra (build does this on email address but I just want to know if they have any record in retention so have rolled up to cid).\ncreate or replace table ${Database}.temp.NPP09204_adestra_events\nas\nselect\n    xe.cid,\n    ae.*\nfrom ${Database}.db.adestra_events ae\njoin ${Database}.live.xref_email xe on lower(trim(xe.email)) = lower(trim(ae.email))\njoin ${Database}.temp.NPP09204_purina_registrations_w_acquisition rg on rg.cid = xe.cid;\n\n\ncreate or replace table ${Database}.temp.NPP09204_adestra_events_opens\nas\nselect distinct\n    ae.cid,\n    lower(trim(ae.campaign_name)) as campaign_name,\n    lower(case when trim(ae.campaign_name) ilike '%_MTE_%' then split_part(trim(ae.campaign_name),'_',3) else split_part(trim(ae.campaign_name),'_',1) end) as split_campaign_name,\n    ae.event_name,\n    ae.event_timestamp    \nfrom ${Database}.temp.NPP09204_adestra_events ae\nwhere lower(trim(event_name)) regexp '(.*)(click|open|read|shared|submit)(.*)'\n    and lower(trim(link_url)) not regexp '.*unsub.*'\n    and lower(trim(email)) > '';\n\n\ncreate or replace table ${Database}.temp.NPP09204_retention_email_engagement\nas\nselect distinct\n    cid,\n    open_date\nfrom (\nselect distinct\n  ae.cid,\n  cast(ae.event_timestamp as date) as open_date\nfrom ${Database}.temp.NPP09204_adestra_events_opens ae\nleft join ${Database}.db.ref_response_events_comms_hist_xref xr on ae.campaign_name = lower(xr.adestra_campaign_name)\nleft join ${Database}.db.comms_hist_lookup chl on lower(chl.campaign_id) = lower(xr.ch_campaign_id)\nleft join ${Database}.live.ref_business_unit_brand bu on bu.brand_id = chl.brand_id\nwhere case\n          when bu.business_unit_id is not null then bu.business_unit_id\n          when chl.data_controller_id is not null then chl.data_controller_id\n          when ae.campaign_name regexp '^npp.*' then (select business_unit_id from ${Database}.live.ref_business_unit where trim(business_unit) like 'Nestl_ Purina Petcare (UK) Ltd')\n      end = 5   -- Purina\nunion all\nselect distinct\n  ae.cid,\n  cast(ae.event_timestamp as date) as open_date\nfrom ${Database}.temp.NPP09204_adestra_events_opens ae\nleft join ${Database}.db.ref_response_events_comms_hist_xref xr on ae.campaign_name = lower(xr.adestra_campaign_name)\nleft join ${Database}.db.comms_hist_lookup chl on lower(chl.campaign_id) = ae.split_campaign_name\nleft join ${Database}.live.ref_business_unit_brand bu on bu.brand_id = chl.brand_id\nwhere case\n          when bu.business_unit_id is not null then bu.business_unit_id\n          when chl.data_controller_id is not null then chl.data_controller_id\n          when ae.campaign_name regexp '^npp.*' then (select business_unit_id from ${Database}.live.ref_business_unit where trim(business_unit) like 'Nestl_ Purina Petcare (UK) Ltd')\n      end = 5  -- Purina\n); \n\n-- Add email opens from Mapp (build does this on email address but I just want to know if they have any record in retention so have rolled up to cid).\ncreate or replace table ${Database}.temp.NPP09204_mapp_events\nas\nselect\n    xe.cid,\n    mp.*\nfrom ${Database}.db.mapp_events mp\njoin ${Database}.live.xref_email xe on lower(trim(xe.email)) = lower(trim(mp.user_email))\njoin ${Database}.temp.NPP09204_purina_registrations_w_acquisition rg on rg.cid = xe.cid;\n\n\ncreate or replace table ${Database}.temp.NPP09204_mapp_events_opens\nas\nselect\n    *\nfrom ${Database}.temp.NPP09204_mapp_events\nwhere lower(trim(record_type)) regexp '.*click.*|.*render.*'\n    and lower(trim(click_link_url)) not regexp '.*unsub.*'\n    and lower(trim(user_email)) > '';\n\n\ninsert into ${Database}.temp.NPP09204_retention_email_engagement\nselect distinct\n    mp.cid,\n    cast(mp.record_timestamp as date) as open_date\nfrom ${Database}.temp.NPP09204_mapp_events_opens mp\nleft join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(trim(mp.message_name)) = lower(trim(xr.mapp_message_name))\nleft join ${Database}.db.comms_hist_lookup chl on lower(trim(chl.campaign_id)) = lower(trim(xr.ch_campaign_id))\n                                          or lower(trim(chl.campaign_id)) = lower(case when trim(mp.message_name) ilike '%_MTE_%' then split_part(trim(mp.message_name),'_',3) else split_part(trim(mp.message_name),'_',1) end)\nleft join ${Database}.live.ref_business_unit_brand bu on bu.brand_id = chl.brand_id\nwhere case\n          when bu.business_unit_id is not null then bu.business_unit_id\n          when chl.data_controller_id is not null then chl.data_controller_id\n          when lower(trim(mp.message_name)) regexp '^npp.*' then (select business_unit_id from ${Database}.live.ref_business_unit where trim(business_unit) like 'Nestl_ Purina Petcare (UK) Ltd')\n      end = 5; -- Purina\n\n\n-- Get positive email optins (build does this on email address but I just want to know if they have any record in retention so have rolled up to cid).\ncreate or replace table ${Database}.temp.NPP09204_retention_positive_dp_email\nas\nselect distinct\n    xr.cid,\n    dp.dp_date\nfrom ${Database}.temp.NPP09204_retention_dp_prep dp\njoin ${Database}.live.xref_email xr on lower(trim(xr.email)) = lower(trim(dp.email))\nwhere dp.data_controller_id = 5 -- Purina\n    and dp_emailable = 1;\n\n\n-- Get positive mail optins.\ncreate or replace table ${Database}.temp.NPP09204_retention_positive_dp_mail\nas\nselect distinct\n    dp.cid,\n    dp.dp_date\nfrom ${Database}.temp.NPP09204_retention_dp_prep dp\nwhere dp.data_controller_id = 5 -- Purina\n    and dp_mailable = 1;\n\n\n-- Take latest retention date that took place before the registration. Can then see if there existing record was in retention still or not.\ncreate or replace table ${Database}.temp.NPP09204_retention_final\nas\nselect\n    rt.cid,\n    max(rt.retention_date) as retention_date\nfrom (\n         select\n             cid,\n             first_reg_date as retention_date\n         from ${Database}.temp.NPP09204_retention_first_reg\n         union all\n         select\n             cid,\n             login_date as retention_date\n         from ${Database}.temp.NPP09204_retention_login\n         union all\n         select\n             cid,\n             open_date as retention_date\n         from ${Database}.temp.NPP09204_retention_email_engagement\n         union all\n         select\n             cid,\n             dp_date as retention_date\n         from ${Database}.temp.NPP09204_retention_positive_dp_email\n         union all\n         select\n             cid,\n             dp_date as retention_date\n         from ${Database}.temp.NPP09204_retention_positive_dp_mail\n     ) rt\njoin ${Database}.temp.NPP09204_purina_registrations_w_acquisition rg on rg.cid = rt.cid\n                                                               and rg.reg_date > rt.retention_date\ngroup by 1;\n\n\n-- Create final table with whether they were already in retention when registered.\ncreate or replace table ${Database}.jobs.NPP09204_purina_registrations_final\nas\nselect\n    rg.*,\n    case when rt.cid is not null then 1 else 0 end as pre_existing,\n    case when rt.retention_date < add_months(rg.reg_date,-24) then 1 else 0 end as expired\nfrom ${Database}.temp.NPP09204_purina_registrations_w_acquisition rg\nleft join ${Database}.temp.NPP09204_retention_final rt on rt.cid = rg.cid;\n\n\n-- Update acquisition channel formatting to match Qlik dashboards.\nupdate ${Database}.jobs.NPP09204_purina_registrations_final\nset acquisition_channel = case\n                              when acquisition_channel ilike '%Historic%' then 'Historic'\n                              when trim(acquisition_channel) = 'RESP_ADVENT' then 'CIAM'\n                              when trim(acquisition_channel) = 'HASHTING' then 'Hashting'\n                              else trim(acquisition_channel)\n                          end;\n\n\n-- CREATE TABLE FOR SHEETS 2, 3 & 4\n\n--now including engagement level and pet profile level to final table.\ncreate or replace table ${Database}.jobs.NPP09204_purina_total_active_base\nas\nselect distinct\n    cb.cid,\n    case\n        when first_value(cb.brand_id) over(partition by cb.cid order by cb.first_date_brand asc nulls last) not in (138,143) then 121\n        else first_value(cb.brand_id) over(partition by cb.cid order by cb.first_date_brand asc nulls last)\n    end as brand_id,\n    case\n        when trim(cbu.acquisition_type) = 'WEBSITE REGISTRATIONS' then 'Website Registrations'\n        when trim(cbu.acquisition_type) = '' then 'Legacy'\n        else trim(cbu.acquisition_type)\n    end as acquisition_type,\n    case\n        when trim(cbu.acquisition_channel) ilike 'Historic%' then 'Historic'\n        when trim(cbu.acquisition_channel) = 'RESP_ADVENT' then 'CIAM'\n        when trim(cbu.acquisition_channel) = 'HASHTING' then 'Hashting'\n        when trim(cbu.acquisition_channel) = '' then 'Historic'\n        else trim(cbu.acquisition_channel)\n    end as acquisition_channel,\n    cast(null as varchar(10)) as core_pet_profile,\n    cast(null as int) as highly_engaged\nfrom ${Database}.live.cid_brand cb\nleft join ${Database}.live.cid_business_unit cbu on cbu.cid = cb.cid\n                                           and cbu.business_unit_id = cb.business_unit_id\nwhere cb.business_unit_id = 5 -- Purina\n    and cb.brand_id not in (136,137,142,149)\n    and cb.brand_campaignable = 1\n    and cb.emailable = 1;\n\n\n-- Set engagement group\nmerge into ${Database}.jobs.NPP09204_purina_total_active_base a\nusing ${Database}.live.cid b on a.cid = b.cid\nwhen matched then update\nset a.highly_engaged = case when b.purina_engagement_score > 170 then 1 else 0 end;\n\n\n-- Set pet profile group\nmerge into ${Database}.jobs.NPP09204_purina_total_active_base a\nusing (\n          select\n              p.cid,\n              max(case when cd.firstname > '' then 1 else 0 end) as firstname_populated,\n              max(case when pet_name > '' then 1 else 0 end) as petname_populated,\n              max(case when pet_dob is not null then 1 else 0 end) as pet_dob_populated,\n              max(case when pet_type = 'Cat' or (pet_type = 'Dog' and pet_breed > '') then 1 else 0 end) as pet_breed_populated\n          from ${Database}.live.cid_pet p\n          inner join ${Database}.live.cid_details cd on cd.cid = p.cid\n          group by 1\n      ) b on a.cid = b.cid\nwhen matched then update\nset core_pet_profile = case when firstname_populated + petname_populated + pet_dob_populated + pet_breed_populated = 4 then 1 else 0 end;\n\n--create table to pull reg campaign source report data\ncreate or replace table ${Database}.temp.NPP09204_purina_registrations_report\nas\nselect\n    date_trunc('month',reg_date) as reg_date,\n    'GP' as Campaign,\n    to_char(reg_date,'MON-YYYY') as Campaign_Month,\n    count(distinct case when acquisition_channel = 'The Hut Group' then cid end) as The_Hut_Group,\n    count(distinct case when acquisition_channel = 'Wunderman' and acquisition_type = 'Website Registrations' then cid end) as Website,\n    0 as Christmas_Website,\n    count(distinct case when acquisition_channel = 'Wunderman' and acquisition_type = 'Social' then cid end) as Social,\n    count(distinct case when acquisition_channel = 'Kennel Club' then cid end) as Kennel_Club,\n    count(distinct case when acquisition_channel = 'Your Baby Club' then cid end) as Your_Baby_Club,\n    0 as R_R,\n    0 as CES,\n    0 as Hashting,\n    0 as SoPost,\n    0 as Winalot_GBD,\n    count(distinct case when acquisition_channel in ('Wamiz','Wamiz Dog Personality Test','Wamiz Cat Personality Test') then cid end) as Wamiz,\n    count(distinct case when acquisition_channel = 'Avatar Creation' then cid end) as Pet_Avatar_Creation,\n    0 as Emmas_Diary,\n    0 as Qualifio_Gourmet_Personality_Quiz,\n    count(distinct case when acquisition_channel in ('Your Purina') then cid end) as Your_purina,    \n    count(distinct case when acquisition_channel||' - '||acquisition_type not in ('Wunderman - Website Registrations','Wunderman - Social') and acquisition_channel not in ('The Hut Group','Kennel Club','Your Baby Club','Wamiz','Avatar Creation','Wamiz Dog Personality Test','Wamiz Cat Personality Test','Your Purina') then cid end) as Other\nfrom ${Database}.jobs.NPP09204_purina_registrations_final rg\njoin ${Database}.live.ref_brand rb on rb.brand_id = rg.source_brand_id\nwhere emailable = 1\n    and (pre_existing = 0 or expired = 1)\n    and source_brand_id = 138\ngroup by 1,2,3\nunion all\nselect\n    date_trunc('month',reg_date) as reg_date,\n    'KC' as Campaign,\n    to_char(reg_date,'MON-YYYY') as Campaign_Month,\n    count(distinct case when acquisition_channel = 'The Hut Group' and acquisition_type = 'Partnership' then cid end) as The_Hut_Group,\n    count(distinct case when acquisition_channel in  ('Wunderman') and acquisition_type = 'Website Registrations' then cid end) as Website,\n    count(distinct case when acquisition_channel in  ('Better Together Christmas') and acquisition_type = 'Website Registrations' then cid end) as Christmas_Website,\n    count(distinct case when acquisition_channel = 'Wunderman' and acquisition_type = 'Social' then cid end) as Social,\n    0 as Kennel_Club,\n    count(distinct case when acquisition_channel = 'Your Baby Club' then cid end) as Your_Baby_Club,\n    0 as R_R,\n    0 as CES,\n    0 as Hashting,\n    0 as SoPost,\n    0 as Winalot_GBD,\n    count(distinct case when acquisition_channel in ('Wamiz','Wamiz Dog Personality Test','Wamiz Cat Personality Test') then cid end) as Wamiz,\n    count(distinct case when acquisition_channel = 'Avatar Creation' then cid end) as Pet_Avatar_Creation,\n    0 as Emmas_Diary,\n    count(distinct case when acquisition_channel = 'Qualifio Gourmet Personality Quiz' then cid end) as Qualifio_Gourmet_Personality_Quiz,\n    count(distinct case when acquisition_channel in ('Your Purina') then cid end) as Your_purina,    \n    count(distinct case when acquisition_channel not in ('Qualifio Gourmet Personality Quiz','Wamiz Dog Personality Test','Wamiz Cat Personality Test','Your Purina') and acquisition_channel||' - '||acquisition_type not in ('The Hut Group - Partnership','Wunderman - Website Registrations','Better Together Christmas - Website Registrations','Wunderman - Social','Wamiz - Competition','Your Baby Club - Partnership','Avatar Creation - Social') then cid end) as Other\nfrom ${Database}.jobs.NPP09204_purina_registrations_final rg\njoin ${Database}.live.ref_brand rb on rb.brand_id = rg.source_brand_id\nwhere emailable = 1\n    and (pre_existing = 0 or expired = 1)\n    and source_brand_id = 143\ngroup by 1,2,3\nunion all\nselect\n    date_trunc('month',reg_date) as reg_date,\n    'BS' as \"Campaign\",\n    to_char(reg_date,'MON-YYYY') as \"Month\",\n    0 as \"The Hut Group\",\n    count(distinct case when acquisition_channel = 'Wunderman' or (acquisition_channel <> 'Better Together Christmas' and acquisition_type = 'Website Registrations') then cid end) as \"Website\",\n    0 as \"Christmas Website\",\n    0 as \"Social\",\n    0 as \"Kennel Club\",\n    0 as \"Your Baby Club\",\n    0 as \"R&R\",\n    0 as \"CES\",\n    0 as \"Hashting\",\n    0 as \"SoPost\",\n    0 as \"Winalot GBD\",\n    0 as  \"Wamiz\",\n    0 as  \"Pet Avatar Creation\",\n    0 as \"Emma's Diary\",\n    0 as \"Qualifio - Gourmet Personality Quiz\",\n    0 as \"Your Purina\",\n    0 as \"Other\"\nfrom ${Database}.jobs.NPP09204_purina_registrations_final rg\njoin ${Database}.live.ref_brand rb on rb.brand_id = rg.source_brand_id\nwhere emailable = 1\n    and (pre_existing = 0 or expired = 1)\n    and source_brand_id = 147\ngroup by 1,2,3\nunion all\nselect\n    date_trunc('month',reg_date) as reg_date,\n    'BT' as Campaign,\n    to_char(reg_date,'MON-YYYY') as Campaign_Month,\n    count(distinct case when acquisition_channel = 'The Hut Group' then cid end) as The_Hut_Group,\n    --count(distinct case when acquisition_type = 'Website Registrations' or acquisition_channel = 'Wunderman' then cid end) as Website original compare,\n    count(distinct case when acquisition_channel = 'Wunderman' or (acquisition_channel <> 'Better Together Christmas' and acquisition_type = 'Website Registrations') then cid end) as Website,\n    count(distinct case when acquisition_channel in ('Better Together Christmas') then cid end) as Christmas_Website,\n    0 as Social,\n    count(distinct case when acquisition_channel = 'Kennel Club' then cid end) as Kennel_Club,\n    count(distinct case when acquisition_channel = 'Your Baby Club' then cid end) as Your_Baby_Club,\n    count(distinct case when acquisition_channel = 'Bazaarvoice' then cid end) as R_R,\n    count(distinct case when acquisition_channel = 'CES Feed' then cid end) as CES,\n    count(distinct case when acquisition_channel = 'Hashting' then cid end) as Hashting,\n    count(distinct case when acquisition_channel = 'SoPost' then cid end) as SoPost,\n    count(distinct case when acquisition_channel = 'Winalot GBD' then cid end) as Winalot_GBD,\n    count(distinct case when acquisition_channel in ('Wamiz','Wamiz Dog Personality Test','Wamiz Cat Personality Test') then cid end) as Wamiz,\n    count(distinct case when acquisition_channel = 'Avatar Creation' then cid end) as Pet_Avatar_Creation,\n    count(distinct case when acquisition_channel = 'Emmas Diary' then cid end) as Emmas_Diary,\n    count(distinct case when acquisition_channel = 'Qualifio Gourmet Personality Quiz' then cid end) as Qualifio_Gourmet_Personality_Quiz,\n    count(distinct case when acquisition_channel in ('Your Purina') then cid end) as Your_purina,    \n    count(distinct case when acquisition_type <> 'Website Registrations' and acquisition_channel not in ('Qualifio Gourmet Personality Quiz','The Hut Group','Wunderman','Kennel Club','Your Baby Club','Bazaarvoice','CES Feed','Hashting','SoPost','Winalot GBD','Wamiz','Avatar Creation','Emmas Diary','Wamiz Dog Personality Test','Wamiz Cat Personality Test','Your Purina') then cid end) as Other\nfrom ${Database}.jobs.NPP09204_purina_registrations_final rg\njoin ${Database}.live.ref_brand rb on rb.brand_id = rg.source_brand_id\nwhere emailable = 1\n    and (pre_existing = 0 or expired = 1)\n    and source_brand_id = 121\ngroup by 1,2,3\norder by case when Campaign = 'BT' then 'Z' else Campaign end,1;\n\n--amend the column width for total\nalter table ${Database}.temp.NPP09204_purina_registrations_report\nalter column Campaign varchar(5);\n\n--insert the total rows\ninsert into ${Database}.temp.NPP09204_purina_registrations_report\n(reg_date,\n Campaign,\n Campaign_Month,\n The_Hut_Group,\n Website,\n Christmas_Website,\n Social,\n Kennel_Club,\n Your_Baby_Club,\n R_R,\n CES,\n Hashting,\n SoPost,\n Winalot_GBD,\n Wamiz,\n Pet_Avatar_Creation,\n Emmas_Diary,\n Qualifio_Gourmet_Personality_Quiz,\n Your_purina,\n Other\n)\nselect \nreg_date,\n'Total' as Campaign,\nCampaign_Month,\nsum(The_Hut_Group) as The_Hut_Group,\nsum(Website) as Website,\nsum(Christmas_Website) as Christmas_Website,\nsum(Social) as Social,\nsum(Kennel_Club) as Kennel_Club,\nsum(Your_Baby_Club) as Your_Baby_Club,\nsum(R_R) as R_R,\nsum(CES) as CES,\nsum(Hashting) as Hashting,\nsum(SoPost) as SoPost,\nsum(Winalot_GBD) as Winalot_GBD,\nsum(Wamiz) as Wamiz,\nsum(Pet_Avatar_Creation) as Pet_Avatar_Creation,\nsum(Emmas_Diary) as Emmas_Diary,\nsum(Qualifio_Gourmet_Personality_Quiz) as Qualifio_Gourmet_Personality_Quiz,\nsum(Your_purina) as Your_purina,\nsum(Other) as Other\nfrom ${Database}.temp.NPP09204_purina_registrations_report\ngroup by 1,2,3\norder by campaign, reg_date;\n\n--add a total column\nalter table ${Database}.temp.NPP09204_purina_registrations_report\nadd column total number(18,0) default 0;\n\n--update total column\nupdate ${Database}.temp.NPP09204_purina_registrations_report\nset total = The_Hut_Group+Website+Christmas_Website+Social+Kennel_Club+Your_Baby_Club+R_R+CES+Hashting+SoPost+Winalot_GBD+Wamiz+Pet_Avatar_Creation+Emmas_Diary+Qualifio_Gourmet_Personality_Quiz+Your_purina+Other;\n\n\n--create a history table for comparison\n\n--remove this months data from history table in case of re-run \n delete from ${Database}.db.NPP09204_purina_registrations_report_history where report_month = date_trunc('MONTH',current_date - interval '1 month');\n \n insert into ${Database}.db.NPP09204_purina_registrations_report_history (\n    REPORT_MONTH,\n\tREG_DATE,\n\tCAMPAIGN,\n\tCAMPAIGN_MONTH,\n\tTHE_HUT_GROUP,\n\tWEBSITE,\n\tCHRISTMAS_WEBSITE,\n\tSOCIAL,\n\tKENNEL_CLUB,\n\tYOUR_BABY_CLUB,\n\tR_R,\n\tCES,\n\tHASHTING,\n\tSOPOST,\n\tWINALOT_GBD,\n\tWAMIZ,\n\tPET_AVATAR_CREATION,\n\tEMMAS_DIARY,\n\tQUALIFIO_GOURMET_PERSONALITY_QUIZ,\n    YOUR_PURINA,\n\tOTHER,\n    TOTAL\n)\nselect \ndate_trunc('MONTH',current_date - interval '1 month') as report_month, \n*\nfrom ${Database}.temp.NPP09204_purina_registrations_report;\n\n-- COUNTS FOR SHEET 2 (# Registered)\ncreate or replace table ${Database}.temp.NPP09204_purina_registrations_registered\nas\nselect\n    date_trunc('month',add_months(current_date,-1)) as reg_date,\n    'GP' as Campaign,\n    to_char(add_months(current_date,-1),'MON-YYYY') as Campaign_Month,\n    count(distinct case when acquisition_channel = 'The Hut Group' then cid end) as The_Hut_Group,\n    count(distinct case when acquisition_channel = 'Wunderman' and acquisition_type = 'Website Registrations' then cid end) as Website,\n    0 as Christmas_Website,\n    count(distinct case when acquisition_channel = 'Wunderman' and acquisition_type = 'Social' then cid end) as Social,\n    count(distinct case when acquisition_channel = 'Kennel Club' then cid end) as Kennel_Club,\n    count(distinct case when acquisition_channel = 'Your Baby Club' then cid end) as Your_Baby_Club,\n    0 as R_R,\n    0 as CES,\n    0 as Hashting,\n    0 as SoPost,\n    0 as Winalot_GBD,\n    count(distinct case when acquisition_channel in ('Wamiz','Wamiz Dog Personality Test','Wamiz Cat Personality Test') then cid end) as Wamiz,\n    count(distinct case when acquisition_channel = 'Avatar Creation' then cid end) as Pet_Avatar_Creation,\n    0 as Emmas_Diary,\n    0 as Qualifio_Gourmet_Personality_Quiz,\n    count(distinct case when acquisition_channel in ('Your Purina') then cid end) as Your_purina,    \n    count(distinct case when acquisition_channel||' - '||acquisition_type not in ('Wunderman - Website Registrations','Wunderman - Social') and acquisition_channel not in ('The Hut Group','Kennel Club','Your Baby Club','Wamiz','Avatar Creation','Wamiz Dog Personality Test','Wamiz Cat Personality Test','Your Purina') then cid end) as Other\nfrom ${Database}.jobs.NPP09204_purina_total_active_base rg\njoin ${Database}.live.ref_brand rb on rb.brand_id = rg.brand_id\nwhere rb.brand_id = 138\ngroup by 1,2,3\nunion all\nselect\n    date_trunc('month',add_months(current_date,-1)) as reg_date,\n    'KC' as Campaign,\n    to_char(add_months(current_date,-1),'MON-YYYY') as Campaign_Month,\n    count(distinct case when acquisition_channel = 'The Hut Group' and acquisition_type = 'Partnership' then cid end) as The_Hut_Group,\n    count(distinct case when acquisition_channel in  ('Wunderman') and acquisition_type = 'Website Registrations' then cid end) as Website,\n    count(distinct case when acquisition_channel in  ('Better Together Christmas') and acquisition_type = 'Website Registrations' then cid end) as Christmas_Website,\n    count(distinct case when acquisition_channel = 'Wunderman' and acquisition_type = 'Social' then cid end) as Social,\n    0 as Kennel_Club,\n    count(distinct case when acquisition_channel = 'Your Baby Club' then cid end) as Your_Baby_Club,\n    0 as R_R,\n    0 as CES,\n    0 as Hashting,\n    0 as SoPost,\n    0 as Winalot_GBD,\n    count(distinct case when acquisition_channel in ('Wamiz','Wamiz Dog Personality Test','Wamiz Cat Personality Test') then cid end) as Wamiz,\n    count(distinct case when acquisition_channel = 'Avatar Creation' then cid end) as Pet_Avatar_Creation,\n    0 as Emmas_Diary,\n    count(distinct case when acquisition_channel = 'Qualifio Gourmet Personality Quiz' then cid end) as Qualifio_Gourmet_Personality_Quiz,\n    count(distinct case when acquisition_channel in ('Your Purina') then cid end) as Your_purina,    \n    count(distinct case when acquisition_channel not in ('Qualifio Gourmet Personality Quiz','Wamiz Dog Personality Test','Wamiz Cat Personality Test','Your Purina') and acquisition_channel||' - '||acquisition_type not in ('The Hut Group - Partnership','Wunderman - Website Registrations','Better Together Christmas - Website Registrations','Wunderman - Social','Wamiz - Competition','Your Baby Club - Partnership','Avatar Creation - Social') then cid end) as Other \nfrom ${Database}.jobs.NPP09204_purina_total_active_base rg\njoin ${Database}.live.ref_brand rb on rb.brand_id = rg.brand_id\nwhere rb.brand_id = 143\ngroup by 1,2,3\nunion all\nselect\n    date_trunc('month',add_months(current_date,-1)) as reg_date,\n    'BS' as Campaign,\n    to_char(add_months(current_date,-1),'MON-YYYY') as Campaign_Month,\n    0 as The_Hut_Group,\n    count(distinct case when acquisition_channel = 'Wunderman' or (acquisition_channel <> 'Better Together Christmas' and acquisition_type = 'Website Registrations') then cid end) as Website,\n    0 as Christmas_Website,\n    0 as Social,\n    0 as Kennel_Club,\n    0 as Your_Baby_Club,\n    0 as R_R,\n    0 as CES,\n    0 as Hashting,\n    0 as SoPost,\n    0 as Winalot_GBD,\n    0 as Wamiz,\n    0 as Pet_Avatar_Creation,\n    0 as Emmas_Diary,\n    0 as Qualifio_Gourmet_Personality_Quiz,\n    0 as Your_purina,\n    0 as Other\nfrom ${Database}.jobs.NPP09204_purina_total_active_base rg\njoin ${Database}.live.ref_brand rb on rb.brand_id = rg.brand_id\nwhere rb.brand_id = 147\ngroup by 1,2,3\nunion all\nselect\n    date_trunc('month',add_months(current_date,-1)) as reg_date,\n    'BT' as Campaign,\n    to_char(add_months(current_date,-1),'MON-YYYY') as Campaign_Month,\n    count(distinct case when acquisition_channel = 'The Hut Group' then cid end) as The_Hut_Group,\n    count(distinct case when acquisition_channel = 'Wunderman' or (acquisition_channel <> 'Better Together Christmas' and acquisition_type = 'Website Registrations') then cid end) as Website,\n    count(distinct case when acquisition_type = 'Website Registrations' and acquisition_channel in ('Better Together Christmas') then cid end) as Christmas_Website,\n    0 as Social,\n    count(distinct case when acquisition_channel = 'Kennel Club' then cid end) as Kennel_Club,\n    count(distinct case when acquisition_channel = 'Your Baby Club' then cid end) as Your_Baby_Club,\n    count(distinct case when acquisition_channel = 'Bazaarvoice' then cid end) as R_R,\n    count(distinct case when acquisition_channel = 'CES Feed' then cid end) as CES,\n    count(distinct case when acquisition_channel = 'Hashting' then cid end) as Hashting,\n    count(distinct case when acquisition_channel = 'SoPost' then cid end) as SoPost,\n    count(distinct case when acquisition_channel = 'Winalot GBD' then cid end) as Winalot_GBD,\n    count(distinct case when acquisition_channel in ('Wamiz','Wamiz Dog Personality Test','Wamiz Cat Personality Test') then cid end) as Wamiz,\n    count(distinct case when acquisition_channel = 'Avatar Creation' then cid end) as Pet_Avatar_Creation,\n    count(distinct case when acquisition_channel = 'Emmas Diary' then cid end) as Emmas_Diary,\n    count(distinct case when acquisition_channel = 'Qualifio Gourmet Personality Quiz' then cid end) as Qualifio_Gourmet_Personality_Quiz,\n    count(distinct case when acquisition_channel in ('Your Purina') then cid end) as Your_purina,    \n    count(distinct case when acquisition_type <> 'Website Registrations' and acquisition_channel not in ('Qualifio Gourmet Personality Quiz','The Hut Group','Wunderman','Kennel Club','Your Baby Club','Bazaarvoice','CES Feed','Hashting','SoPost','Winalot GBD','Wamiz','Avatar Creation','Emmas Diary','Wamiz Dog Personality Test','Wamiz Cat Personality Test','Your Purina') then cid end) as Other\nfrom ${Database}.jobs.NPP09204_purina_total_active_base rg\njoin ${Database}.live.ref_brand rb on rb.brand_id = rg.brand_id\nwhere rb.brand_id = 121\ngroup by 1,2,3\norder by case when Campaign = 'BT' then 'Z' else Campaign end;\n\n--add a total column\nalter table ${Database}.temp.NPP09204_purina_registrations_registered\nadd column total number(18,0) default 0;\n\n--update total column\nupdate ${Database}.temp.NPP09204_purina_registrations_registered\nset total = The_Hut_Group+Website+Christmas_Website+Social+Kennel_Club+Your_Baby_Club+R_R+CES+Hashting+SoPost+Winalot_GBD+Wamiz+Pet_Avatar_Creation+Emmas_Diary+Qualifio_Gourmet_Personality_Quiz+your_purina+Other;\n\n--create a history table for macro\n\n--remove this months data from history table in case of re-run \n delete from ${Database}.db.NPP09204_purina_registrations_registered_history where reg_date = date_trunc('MONTH',current_date - interval '1 month');\n \n insert into ${Database}.db.NPP09204_purina_registrations_registered_history (\n\tREG_DATE,\n\tCAMPAIGN,\n\tCAMPAIGN_MONTH,\n\tTHE_HUT_GROUP,\n\tWEBSITE,\n\tCHRISTMAS_WEBSITE,\n\tSOCIAL,\n\tKENNEL_CLUB,\n\tYOUR_BABY_CLUB,\n\tR_R,\n\tCES,\n\tHASHTING,\n\tSOPOST,\n\tWINALOT_GBD,\n\tWAMIZ,\n\tPET_AVATAR_CREATION,\n\tEMMAS_DIARY,\n\tQUALIFIO_GOURMET_PERSONALITY_QUIZ,\n    YOUR_PURINA,\n\tOTHER,\n    TOTAL\n)\nselect \n*\nfrom ${Database}.temp.NPP09204_purina_registrations_registered;\n\n-- COUNT FOR SHEET 3 (% Engaged)\ncreate or replace table ${Database}.temp.NPP09204_purina_registrations_engaged\nas\nselect\n    date_trunc('month',add_months(current_date,-1)) as reg_date,\n    'GP' as Campaign,\n    to_char(add_months(current_date,-1),'MON-YYYY') as Campaign_Month,\n    count(distinct case when highly_engaged = 1 and acquisition_channel = 'The Hut Group' then cid end)/count(distinct case when acquisition_channel = 'The Hut Group' then cid end) as The_Hut_Group,\n    count(distinct case when highly_engaged = 1 and acquisition_channel = 'Wunderman' and acquisition_type = 'Website Registrations' then cid end)/count(distinct case when acquisition_channel = 'Wunderman' and acquisition_type = 'Website Registrations' then cid end) as Website,\n    0 as Christmas_Website,\n    count(distinct case when highly_engaged = 1 and acquisition_channel = 'Wunderman' and acquisition_type = 'Social' then cid end)/count(distinct case when acquisition_channel = 'Wunderman' and acquisition_type = 'Social' then cid end) as Social,\n    count(distinct case when highly_engaged = 1 and acquisition_channel = 'Kennel Club' then cid end)/count(distinct case when acquisition_channel = 'Kennel Club' then cid end) as Kennel_Club,\n    count(distinct case when highly_engaged = 1 and acquisition_channel = 'Your Baby Club' then cid end)/count(distinct case when acquisition_channel = 'Your Baby Club' then cid end) as Your_Baby_Club,\n    0 as R_R,\n    0 as CES,\n    0 as Hashting,\n    0 as SoPost,\n    0 as Winalot_GBD,\n    count(distinct case when highly_engaged = 1 and acquisition_channel in ('Wamiz','Wamiz Dog Personality Test','Wamiz Cat Personality Test') then cid end)/count(distinct case when acquisition_channel in ('Wamiz','Wamiz Dog Personality Test','Wamiz Cat Personality Test') then cid end) as Wamiz,\n    count(distinct case when highly_engaged = 1 and acquisition_channel = 'Avatar Creation' then cid end)/count(distinct case when acquisition_channel = 'Avatar Creation' then cid end) as Pet_Avatar_Creation,\n    0 as Emmas_Diary,\n    0 as Qualifio_Gourmet_Personality_Quiz,\n    count(distinct case when highly_engaged = 1 and acquisition_channel in ('Your Purina') then cid end)/count(distinct case when acquisition_channel in ('Your Purina') then cid end) as Your_purina,\n    count(distinct case when highly_engaged = 1 and acquisition_channel||' - '||acquisition_type not in ('Wunderman - Website Registrations','Wunderman - Social') and acquisition_channel not in ('The Hut Group','Kennel Club','Your Baby Club','Wamiz','Avatar Creation','Wamiz Dog Personality Test','Wamiz Cat Personality Test','Your Purina') then cid end)\n                          /count(distinct case when acquisition_channel||' - '||acquisition_type not in ('Wunderman - Website Registrations','Wunderman - Social') and acquisition_channel not in ('The Hut Group','Kennel Club','Your Baby Club','Wamiz','Avatar Creation','Wamiz Dog Personality Test','Wamiz Cat Personality Test','Your Purina') then cid end) as Other\nfrom ${Database}.jobs.NPP09204_purina_total_active_base rg\njoin ${Database}.live.ref_brand rb on rb.brand_id = rg.brand_id\nwhere rb.brand_id = 138\ngroup by 1,2,3\nunion all\nselect\n    date_trunc('month',add_months(current_date,-1)) as reg_date,\n    'KC' as Campaign,\n    to_char(add_months(current_date,-1),'MON-YYYY') as Campaign_Month,\n    count(distinct case when highly_engaged = 1 and acquisition_channel = 'The Hut Group' and acquisition_type = 'Partnership' then cid end)/count(distinct case when acquisition_channel = 'The Hut Group' and acquisition_type = 'Partnership' then cid end) as The_Hut_Group,\n    count(distinct case when highly_engaged = 1 and acquisition_channel in ('Wunderman') and acquisition_type = 'Website Registrations' then cid end)/count(distinct case when acquisition_channel in ('Wunderman') and acquisition_type = 'Website Registrations' then cid end) as Website,\n    count(distinct case when highly_engaged = 1 and acquisition_channel in ('Better Together Christmas') and acquisition_type = 'Website Registrations' then cid end)/count(distinct case when acquisition_channel in ('Better Together Christmas') and acquisition_type = 'Website Registrations' then cid end) as Christmas_Website,\n    count(distinct case when highly_engaged = 1 and acquisition_channel = 'Wunderman' and acquisition_type = 'Social' then cid end)/count(distinct case when acquisition_channel = 'Wunderman' and acquisition_type = 'Social' then cid end) as Social,\n    0 as Kennel_Club,\n    count(distinct case when highly_engaged = 1 and acquisition_channel = 'Your Baby Club' then cid end)/count(distinct case when  acquisition_channel = 'Your Baby Club' then cid end) as Your_Baby_Club,\n    0 as R_R,\n    0 as CES,\n    0 as Hashting,\n    0 as SoPost,\n    0 as Winalot_GBD,\n    count(distinct case when highly_engaged = 1 and acquisition_channel in ('Wamiz','Wamiz Dog Personality Test','Wamiz Cat Personality Test') then cid end)/count(distinct case when acquisition_channel in ('Wamiz','Wamiz Dog Personality Test','Wamiz Cat Personality Test') then cid end) as Wamiz,\n    count(distinct case when highly_engaged = 1 and acquisition_channel = 'Avatar Creation' then cid end)/count(distinct case when acquisition_channel = 'Avatar Creation' then cid end) as Pet_Avatar_Creation,\n    0 as Emmas_Diary,\n    count(distinct case when highly_engaged = 1 and acquisition_channel = 'Qualifio Gourmet Personality Quiz' then cid end)/count(distinct case when acquisition_channel = 'Qualifio Gourmet Personality Quiz' then cid end) as Qualifio_Gourmet_Personality_Quiz,\n    count(distinct case when highly_engaged = 1 and acquisition_channel in ('Your Purina') then cid end)/count(distinct case when acquisition_channel in ('Your Purina') then cid end) as Your_purina,\n    count(distinct case when highly_engaged = 1 and acquisition_channel not in ('Qualifio Gourmet Personality Quiz','Wamiz Dog Personality Test','Wamiz Cat Personality Test','Your Purina') and acquisition_channel||' - '||acquisition_type not in ('The Hut Group - Partnership','Wunderman - Website Registrations','Better Together Christmas - Website Registrations','Wunderman - Social','Wamiz - Competition','Your Baby Club - Partnership','Avatar Creation - Social') then cid end)\n                          /count(distinct case when acquisition_channel not in ('Qualifio Gourmet Personality Quiz','Wamiz Dog Personality Test','Wamiz Cat Personality Test','Your Purina') and acquisition_channel||' - '||acquisition_type not in ('The Hut Group - Partnership','Wunderman - Website Registrations','Better Together Christmas - Website Registrations','Wunderman - Social','Wamiz - Competition','Your Baby Club - Partnership','Avatar Creation - Social') then cid end) as Other\nfrom ${Database}.jobs.NPP09204_purina_total_active_base rg\njoin ${Database}.live.ref_brand rb on rb.brand_id = rg.brand_id\nwhere rb.brand_id = 143\ngroup by 1,2,3\nunion all\nselect\n    date_trunc('month',add_months(current_date,-1)) as reg_date,\n    'BS' as Campaign,\n    to_char(add_months(current_date,-1),'MON-YYYY') as Campaign_Month,\n    0 as The_Hut_Group,\n    count(distinct case when highly_engaged = 1 and (acquisition_channel = 'Wunderman' or (acquisition_channel <> 'Better Together Christmas' and acquisition_type = 'Website Registrations')) then cid end)\n                           /count(distinct case when acquisition_channel = 'Wunderman' or (acquisition_channel <> 'Better Together Christmas' and acquisition_type = 'Website Registrations')  then cid end) as Website,\n    0 as Christmas_Website,\n    0 as Social,\n    0 as Kennel_Club,\n    0 as Your_Baby_Club,\n    0 as R_R,\n    0 as CES,\n    0 as Hashting,\n    0 as SoPost,\n    0 as Winalot_GBD,\n    0 as Wamiz,\n    0 as Pet_Avatar_Creation,\n    0 as Emmas_Diary,\n    0 as Qualifio_Gourmet_Personality_Quiz,\n    0 as Your_purina,\n    0 as Other\nfrom ${Database}.jobs.NPP09204_purina_total_active_base rg\njoin ${Database}.live.ref_brand rb on rb.brand_id = rg.brand_id\nwhere rb.brand_id = 147\ngroup by 1,2,3\nunion all\nselect\n    date_trunc('month',add_months(current_date,-1)) as reg_date,\n    'BT' as Campaign,\n    to_char(add_months(current_date,-1),'MON-YYYY') as Campaign_Month,\n    count(distinct case when highly_engaged = 1 and acquisition_channel = 'The Hut Group' then cid end)/count(distinct case when acquisition_channel = 'The Hut Group' then cid end)                                           as The_Hut_Group,\n    count(distinct case when highly_engaged = 1 and (acquisition_channel = 'Wunderman' or (acquisition_channel <> 'Better Together Christmas' and acquisition_type = 'Website Registrations')) then cid end)\n                           /count(distinct case when acquisition_channel = 'Wunderman' or (acquisition_channel <> 'Better Together Christmas' and acquisition_type = 'Website Registrations')  then cid end) as Website,\n    count(distinct case when highly_engaged = 1 and acquisition_channel in ('Better Together Christmas') and acquisition_type = 'Website Registrations' then cid end)/count(distinct case when acquisition_channel in ('Better Together Christmas') and acquisition_type = 'Website Registrations' then cid end) as Christmas_Website,\n    0 as Social,\n    count(distinct case when highly_engaged = 1 and acquisition_channel = 'Kennel Club' then cid end)/count(distinct case when acquisition_channel = 'Kennel Club' then cid end) as Kennel_Club,\n    count(distinct case when highly_engaged = 1 and acquisition_channel = 'Your Baby Club' then cid end)/count(distinct case when acquisition_channel = 'Your Baby Club' then cid end) as Your_Baby_Club,\n    count(distinct case when highly_engaged = 1 and acquisition_channel = 'Bazaarvoice' then cid end)/count(distinct case when acquisition_channel = 'Bazaarvoice' then cid end) as R_R,\n    count(distinct case when highly_engaged = 1 and acquisition_channel = 'CES Feed' then cid end)/count(distinct case when acquisition_channel = 'CES Feed' then cid end) as CES,\n    count(distinct case when highly_engaged = 1 and acquisition_channel = 'Hashting' then cid end)/count(distinct case when acquisition_channel = 'Hashting' then cid end) as Hashting,\n    count(distinct case when highly_engaged = 1 and acquisition_channel = 'SoPost' then cid end)/count(distinct case when acquisition_channel = 'SoPost' then cid end) as SoPost,\n    count(distinct case when highly_engaged = 1 and acquisition_channel = 'Winalot GBD' then cid end)/count(distinct case when acquisition_channel = 'Winalot GBD' then cid end) as Winalot_GBD,\n    count(distinct case when highly_engaged = 1 and acquisition_channel in ('Wamiz','Wamiz Dog Personality Test','Wamiz Cat Personality Test') then cid end)/count(distinct case when acquisition_channel in ('Wamiz','Wamiz Dog Personality Test','Wamiz Cat Personality Test') then cid end) as Wamiz,\n    count(distinct case when highly_engaged = 1 and acquisition_channel = 'Avatar Creation' then cid end)/count(distinct case when acquisition_channel = 'Avatar Creation' then cid end) as Pet_Avatar_Creation,\n    count(distinct case when highly_engaged = 1 and acquisition_channel = 'Emmas Diary' then cid end)/count(distinct case when acquisition_channel = 'Emmas Diary' then cid end) as Emmas_Diary,\n    count(distinct case when highly_engaged = 1 and acquisition_channel = 'Qualifio Gourmet Personality Quiz' then cid end)/count(distinct case when acquisition_channel = 'Qualifio Gourmet Personality Quiz' then cid end) as Qualifio_Gourmet_Personality_Quiz,\n    count(distinct case when highly_engaged = 1 and acquisition_channel in ('Your Purina') then cid end)/count(distinct case when acquisition_channel in ('Your Purina') then cid end) as Your_purina,\n    count(distinct case when highly_engaged = 1 and acquisition_type <> 'Website Registrations' and acquisition_channel not in ('Qualifio Gourmet Personality Quiz','The Hut Group','Wunderman','Kennel Club','Your Baby Club','Bazaarvoice','CES Feed','Hashting','SoPost','Winalot GBD','Wamiz','Avatar Creation','Emmas Diary','Wamiz Dog Personality Test','Wamiz Cat Personality Test','Your Purina') then cid end)/\n                           count(distinct case when acquisition_type <> 'Website Registrations' and acquisition_channel not in ('Qualifio Gourmet Personality Quiz','The Hut Group','Wunderman','Kennel Club','Your Baby Club','Bazaarvoice','CES Feed','Hashting','SoPost','Winalot GBD','Wamiz','Avatar Creation','Emmas Diary','Wamiz Dog Personality Test','Wamiz Cat Personality Test','Your Purina') then cid end) as Other\nfrom ${Database}.jobs.NPP09204_purina_total_active_base rg\njoin ${Database}.live.ref_brand rb on rb.brand_id = rg.brand_id\nwhere rb.brand_id = 121\ngroup by 1,2,3\norder by case when Campaign = 'BT' then 'Z' else Campaign end;\n\n--create a history table for macro\n\n--remove this months data from history table in case of re-run \n delete from ${Database}.db.NPP09204_purina_registrations_engaged_history where reg_date = date_trunc('MONTH',current_date - interval '1 month');\n \n insert into ${Database}.db.NPP09204_purina_registrations_engaged_history (\n\tREG_DATE,\n\tCAMPAIGN,\n\tCAMPAIGN_MONTH,\n\tTHE_HUT_GROUP,\n\tWEBSITE,\n\tCHRISTMAS_WEBSITE,\n\tSOCIAL,\n\tKENNEL_CLUB,\n\tYOUR_BABY_CLUB,\n\tR_R,\n\tCES,\n\tHASHTING,\n\tSOPOST,\n\tWINALOT_GBD,\n\tWAMIZ,\n\tPET_AVATAR_CREATION,\n\tEMMAS_DIARY,\n\tQUALIFIO_GOURMET_PERSONALITY_QUIZ,\n    YOUR_PURINA,\n\tOTHER\n)\nselect \n*\nfrom ${Database}.temp.NPP09204_purina_registrations_engaged;\n\n-- COUNT FOR SHEET 4 (% of Profiles)\ncreate or replace table ${Database}.temp.NPP09204_purina_registrations_profiles\nas\nselect\n    date_trunc('month',add_months(current_date,-1)) as reg_date,\n    'GP' as Campaign,\n    to_char(add_months(current_date,-1),'MON-YYYY') as Campaign_Month,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel = 'The Hut Group' then cid end)/count(distinct case when acquisition_channel = 'The Hut Group' then cid end) as The_Hut_Group,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel = 'Wunderman' and acquisition_type = 'Website Registrations' then cid end)/count(distinct case when acquisition_channel = 'Wunderman' and acquisition_type = 'Website Registrations' then cid end) as Website,\n    0 as Christmas_Website,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel = 'Wunderman' and acquisition_type = 'Social' then cid end)/count(distinct case when acquisition_channel = 'Wunderman' and acquisition_type = 'Social' then cid end) as Social,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel = 'Kennel Club' then cid end)/count(distinct case when acquisition_channel = 'Kennel Club' then cid end) as Kennel_Club,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel = 'Your Baby Club' then cid end)/count(distinct case when acquisition_channel = 'Your Baby Club' then cid end) as Your_Baby_Club,\n    0 as R_R,\n    0 as CES,\n    0 as Hashting,\n    0 as SoPost,\n    0 as Winalot_GBD,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel in ('Wamiz','Wamiz Dog Personality Test','Wamiz Cat Personality Test') then cid end)/count(distinct case when acquisition_channel in ('Wamiz','Wamiz Dog Personality Test','Wamiz Cat Personality Test') then cid end) as Wamiz,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel = 'Avatar Creation' then cid end)/count(distinct case when acquisition_channel = 'Avatar Creation' then cid end) as Pet_Avatar_Creation,\n    0 as Emmas_Diary,\n    0 Qualifio_Gourmet_Personality_Quiz,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel in ('Your Purina') then cid end)/count(distinct case when acquisition_channel in ('Your Purina') then cid end) as Your_purina,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel||' - '||acquisition_type not in ('Wunderman - Website Registrations','Wunderman - Social') and acquisition_channel not in ('The Hut Group','Kennel Club','Your Baby Club','Wamiz','Avatar Creation','Wamiz Dog Personality Test','Wamiz Cat Personality Test','Your Purina') then cid end)\n                            /count(distinct case when acquisition_channel||' - '||acquisition_type not in ('Wunderman - Website Registrations','Wunderman - Social') and acquisition_channel not in ('The Hut Group','Kennel Club','Your Baby Club','Wamiz','Avatar Creation','Wamiz Dog Personality Test','Wamiz Cat Personality Test','Your Purina') then cid end) as Other\nfrom ${Database}.jobs.NPP09204_purina_total_active_base rg\njoin ${Database}.live.ref_brand rb on rb.brand_id = rg.brand_id\nwhere rb.brand_id = 138\ngroup by 1,2,3\nunion all\nselect\n    date_trunc('month',add_months(current_date,-1)) as reg_date,\n    'KC' as Campaign,\n    to_char(add_months(current_date,-1),'MON-YYYY') as Campaign_Month,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel = 'The Hut Group' and acquisition_type = 'Partnership' then cid end)/count(distinct case when acquisition_channel = 'The Hut Group' and acquisition_type = 'Partnership' then cid end) as The_Hut_Group,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel in ('Wunderman') and acquisition_type = 'Website Registrations' then cid end)/count(distinct case when acquisition_channel in ('Wunderman') and acquisition_type = 'Website Registrations' then cid end) as Website,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel in ('Better Together Christmas') and acquisition_type = 'Website Registrations' then cid end)/count(distinct case when acquisition_channel in ('Better Together Christmas') and acquisition_type = 'Website Registrations' then cid end) as Christmas_Website,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel = 'Wunderman' and acquisition_type = 'Social' then cid end)/count(distinct case when acquisition_channel = 'Wunderman' and acquisition_type = 'Social' then cid end) as Social,\n    0 as Kennel_Club,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel = 'Your Baby Club' then cid end)/count(distinct case when acquisition_channel = 'Your Baby Club' then cid end) as Your_Baby_Club,\n    0 as R_R,\n    0 as CES,\n    0 as Hashting,\n    0 as SoPost,\n    0 as Winalot_GBD,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel in ('Wamiz','Wamiz Dog Personality Test','Wamiz Cat Personality Test') then cid end)/count(distinct case when acquisition_channel in ('Wamiz','Wamiz Dog Personality Test','Wamiz Cat Personality Test') then cid end) as Wamiz,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel = 'Avatar Creation' then cid end)/count(distinct case when acquisition_channel = 'Avatar Creation' then cid end) as Pet_Avatar_Creation,\n    0 as Emmas_Diary,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel = 'Qualifio Gourmet Personality Quiz' then cid end)/count(distinct case when acquisition_channel = 'Qualifio Gourmet Personality Quiz' then cid end) as Qualifio_Gourmet_Personality_Quiz,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel in ('Your Purina') then cid end)/count(distinct case when acquisition_channel in ('Your Purina') then cid end) as Your_purina,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel not in ('Qualifio Gourmet Personality Quiz','Wamiz Dog Personality Test','Wamiz Cat Personality Test','Your Purina') and acquisition_channel||' - '||acquisition_type not in ('The Hut Group - Partnership','Wunderman - Website Registrations','Better Together Christmas - Website Registrations','Wunderman - Social','Wamiz - Competition','Your Baby Club - Partnership','Avatar Creation - Social') then cid end)\n                            /count(distinct case when acquisition_channel not in ('Qualifio Gourmet Personality Quiz','Wamiz Dog Personality Test','Wamiz Cat Personality Test','Your Purina') and acquisition_channel||' - '||acquisition_type not in ('The Hut Group - Partnership','Wunderman - Website Registrations','Better Together Christmas - Website Registrations','Wunderman - Social','Wamiz - Competition','Your Baby Club - Partnership','Avatar Creation - Social') then cid end) as Other\nfrom ${Database}.jobs.NPP09204_purina_total_active_base rg\njoin ${Database}.live.ref_brand rb on rb.brand_id = rg.brand_id\nwhere rb.brand_id = 143\ngroup by 1,2,3\nunion all\nselect\n    date_trunc('month',add_months(current_date,-1)) as reg_date,\n    'BS' as Campaign,\n    to_char(add_months(current_date,-1),'MON-YYYY') as Campaign_Month,\n    0 as The_Hut_Group,\n    count(distinct case when core_pet_profile = 1 and (acquisition_channel = 'Wunderman' or (acquisition_channel <> 'Better Together Christmas' and acquisition_type = 'Website Registrations')) then cid end)\n                             /count(distinct case when acquisition_channel = 'Wunderman' or (acquisition_channel <> 'Better Together Christmas' and acquisition_type = 'Website Registrations')  then cid end) as Website,\n    0 as Christmas_Website,\n    0 as Social,\n    0 as Kennel_Club,\n    0 as Your_Baby_Club,\n    0 as R_R,\n    0 as CES,\n    0 as Hashting,\n    0 as SoPost,\n    0 as Winalot_GBD,\n    0 as Wamiz,\n    0 as Pet_Avatar_Creation,\n    0 as Emmas_Diary,\n    0 as Qualifio_Gourmet_Personality_Quiz,\n    0 as Your_purina,\n    0 as Other\nfrom ${Database}.jobs.NPP09204_purina_total_active_base rg\njoin ${Database}.live.ref_brand rb on rb.brand_id = rg.brand_id\nwhere rb.brand_id = 147\ngroup by 1,2,3\nunion all\nselect\n    date_trunc('month',add_months(current_date,-1)) as reg_date,\n    'BT' as Campaign,\n    to_char(add_months(current_date,-1),'MON-YYYY') as Campaign_Month,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel = 'The Hut Group' then cid end)/count(distinct case when acquisition_channel = 'The Hut Group' then cid end)                                           as The_Hut_Group,\n    count(distinct case when core_pet_profile = 1 and (acquisition_channel = 'Wunderman' or (acquisition_channel <> 'Better Together Christmas' and acquisition_type = 'Website Registrations')) then cid end)\n                             /count(distinct case when acquisition_channel = 'Wunderman' or (acquisition_channel <> 'Better Together Christmas' and acquisition_type = 'Website Registrations')  then cid end) as Website,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel in ('Better Together Christmas') and acquisition_type = 'Website Registrations' then cid end)/count(distinct case when acquisition_channel in ('Better Together Christmas') and acquisition_type = 'Website Registrations' then cid end) as Christmas_Website,\n    0 as Social,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel = 'Kennel Club' then cid end)/count(distinct case when acquisition_channel = 'Kennel Club' then cid end) as Kennel_Club,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel = 'Your Baby Club' then cid end)/count(distinct case when acquisition_channel = 'Your Baby Club' then cid end) as Your_Baby_Club,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel = 'Bazaarvoice' then cid end)/count(distinct case when acquisition_channel = 'Bazaarvoice' then cid end) as R_R,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel = 'CES Feed' then cid end)/count(distinct case when acquisition_channel = 'CES Feed' then cid end) as CES,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel = 'Hashting' then cid end)/count(distinct case when acquisition_channel = 'Hashting' then cid end) as Hashting,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel = 'SoPost' then cid end)/count(distinct case when acquisition_channel = 'SoPost' then cid end) as SoPost,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel = 'Winalot GBD' then cid end)/count(distinct case when acquisition_channel = 'Winalot GBD' then cid end) as Winalot_GBD,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel in ('Wamiz','Wamiz Dog Personality Test','Wamiz Cat Personality Test') then cid end)/count(distinct case when acquisition_channel in ('Wamiz','Wamiz Dog Personality Test','Wamiz Cat Personality Test') then cid end) as Wamiz,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel = 'Avatar Creation' then cid end)/count(distinct case when acquisition_channel = 'Avatar Creation' then cid end) as Pet_Avatar_Creation,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel = 'Emmas Diary' then cid end)/count(distinct case when acquisition_channel = 'Emmas Diary' then cid end) as Emmas_Diary,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel = 'Qualifio Gourmet Personality Quiz' then cid end)/count(distinct case when acquisition_channel = 'Qualifio Gourmet Personality Quiz' then cid end) as Qualifio_Gourmet_Personality_Quiz,\n    count(distinct case when core_pet_profile = 1 and acquisition_channel in ('Your Purina') then cid end)/count(distinct case when acquisition_channel in ('Your Purina') then cid end) as Your_purina,\n    count(distinct case when core_pet_profile = 1 and acquisition_type <> 'Website Registrations' and acquisition_channel not in ('Qualifio Gourmet Personality Quiz','The Hut Group','Wunderman','Kennel Club','Your Baby Club','Bazaarvoice','CES Feed','Hashting','SoPost','Winalot GBD','Wamiz','Avatar Creation','Emmas Diary','Wamiz Dog Personality Test','Wamiz Cat Personality Test','Your Purina') then cid end)\n                            /count(distinct case when acquisition_type <> 'Website Registrations' and acquisition_channel not in ('Qualifio Gourmet Personality Quiz','The Hut Group','Wunderman','Kennel Club','Your Baby Club','Bazaarvoice','CES Feed','Hashting','SoPost','Winalot GBD','Wamiz','Avatar Creation','Emmas Diary','Wamiz Dog Personality Test','Wamiz Cat Personality Test','Your Purina') then cid end) as Other\nfrom ${Database}.jobs.NPP09204_purina_total_active_base rg\njoin ${Database}.live.ref_brand rb on rb.brand_id = rg.brand_id\nwhere rb.brand_id = 121\ngroup by 1,2,3\norder by case when Campaign = 'BT' then 'Z' else Campaign end;\n\n--create a history table for macro\n\n--remove this months data from history table in case of re-run \n delete from ${Database}.db.NPP09204_purina_registrations_profiles_history where reg_date = date_trunc('MONTH',current_date - interval '1 month');\n \n insert into ${Database}.db.NPP09204_purina_registrations_profiles_history (\n\tREG_DATE,\n\tCAMPAIGN,\n\tCAMPAIGN_MONTH,\n\tTHE_HUT_GROUP,\n\tWEBSITE,\n\tCHRISTMAS_WEBSITE,\n\tSOCIAL,\n\tKENNEL_CLUB,\n\tYOUR_BABY_CLUB,\n\tR_R,\n\tCES,\n\tHASHTING,\n\tSOPOST,\n\tWINALOT_GBD,\n\tWAMIZ,\n\tPET_AVATAR_CREATION,\n\tEMMAS_DIARY,\n\tQUALIFIO_GOURMET_PERSONALITY_QUIZ,\n    YOUR_PURINA,\n\tOTHER\n)\nselect \n*\nfrom ${Database}.temp.NPP09204_purina_registrations_profiles;\n\n\n/***********************************************\n             END OF CODE\n***********************************************/\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_monthly_reports',\n    '*************************',\n    '*************************',\n    'end of script',\n    CURRENT_TIMESTAMP::timestamp_ntz; \n\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 18 Monthly Reports'\n, \t\t'SCRIPT'\n, \t\t'FINISHED'\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"195695":{"id":195695,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-288,"y":16,"width":32,"height":32,"inputConnectorIDs":[195747],"outputSuccessConnectorIDs":[195729,195739],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc 21 Nestle Unsubs Output"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nProgram           : Nestle daily unsubs outputs (Gigya, KC, THG)\nAuthor            : Lindsay Timms\nClient Name       : Nestle\nJob Number        : \nStandard Machine  : Kognitio\nAmendment History : v01 - LT 20180425 - Created\n                        - LT 20180926 - changed from old proc (build_proc_21_Nestle_Gigya_Report.sql)\n                            to incorportate KC and THG\n******************************************************************************************/\n\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 21 Unsubs Outputs'\n, \t\t'SCRIPT'\n, \t\t'STARTED'\n;\n\n\n--alter warehouse set warehouse_size = 'Large';\n\ninsert into ${Database}.db.build_log \nselect    'nestle_unsubs_outputs'\n,         '*************************'\n,         '*************************'\n,         'start of script'\n,         CURRENT_TIMESTAMP::timestamp_ntz\n; \n\n\n\ndrop table if exists ${Database}.temp.temp_unsub_base;\n\nCREATE OR REPLACE TABLE ${Database}.temp.temp_unsub_base\nas\nselect *\nfrom ${Database}.db.names\nwhere lower(source) regexp '.*gig.*|.*reg_thg.*|.*reg_kc.*' \n    and trim(source_file) <> '9999';\n--481756\n\n\n\ndrop table if exists ${Database}.temp.temp_unsub_rollup;\n\nCREATE OR REPLACE TABLE ${Database}.temp.temp_unsub_rollup\nas\nselect distinct \n    lower(nm.email) as email, \n    nm.source,\n    nm.source_brand_id,\n    xr.cid, --all cids incase the emails are shared\n    first_value(nm.name_urn) over \n        (\n            partition by lower(nm.email), nm.source, nm.source_brand_id\n            order by \n                nm.data_date desc nulls last, \n                nm.reg_date desc nulls last,\n                nm.source_date desc nulls last\n        ) as name_urn, --latest name_urn (per source/brand) to get the most recent contact details\n    first_value(case when lower(nm.source_file) regexp '.*json.*' then nm.source_date else nm.data_date end) over --the json file is gigya migration file - only need unsubs since migration\n        (\n            partition by lower(nm.email), nm.source, nm.source_brand_id\n            order by \n                nm.data_date desc nulls last, \n                nm.reg_date desc nulls last,\n                nm.source_date desc nulls last\n        ) as data_date --latest source date to check for unsubs/dead since then\nfrom ${Database}.temp.temp_unsub_base nm\ninner join ${Database}.live.xref_name_urn xr on nm.name_urn = xr.name_urn;\n\ndrop table ${Database}.temp.temp_unsub_base;\n\n------------------------\n\ndrop table if exists ${Database}.temp.temp_unsub_extract;\n\nCREATE OR REPLACE TABLE ${Database}.temp.temp_unsub_extract\nas \nselect distinct \n    ba.name_urn, \n    ba.email, \n    ba.source,\n    ba.source_brand_id,\n    su.data_controller_id,\n    su.data_date\nfrom ${Database}.temp.temp_unsub_rollup ba\ninner join \n    (\n        select \n            lower(trim(email)) as email, \n            min(data_date) as data_date, \n            min(source_date) as source_date, \n            max(data_controller_id) as data_controller_id \n        from ${Database}.db.supps_unsubscribe \n        where unsubscribe_channel_email = 1\n            and brand_id is null --if they have a brand then they spcifically opt out of that brand\n        group by lower(trim(email))\n    ) su on ba.email = su.email \nwhere \n    (\n        ba.source_brand_id is null \n        or ba.source_brand_id <> (select brand_id from ${Database}.live.ref_brand where lower(trim(brand)) = 'pro plan breeder')\n    )\n    and su.data_date >= ba.data_date\n    and su.source_date >= dateadd(day,-1,current_date());\n\n--add in breeder specific unsubs\ninsert into ${Database}.temp.temp_unsub_extract\nselect distinct \n    ba.name_urn, \n    ba.email, \n    ba.source,\n    ba.source_brand_id,\n    su.data_controller_id,\n    su.data_date\nfrom ${Database}.temp.temp_unsub_rollup ba\ninner join \n    (\n        select \n            lower(trim(email)) as email, \n            min(data_date) as data_date, \n            min(source_date) as source_date, \n            max(data_controller_id) as data_controller_id \n        from ${Database}.db.supps_unsubscribe \n        where unsubscribe_channel_email = 1\n            and brand_id = (select brand_id from ${Database}.live.ref_brand where lower(trim(brand)) = 'pro plan breeder') --opt in/out is to 'pro plan breeder'\n        group by lower(trim(email))\n    ) su on ba.email = su.email \nwhere lower(ba.source) regexp '.*thg.*'\n    and ba.source_brand_id = (select brand_id from ${Database}.live.ref_brand where lower(trim(brand)) = 'pro plan breeder') --source is pro plan breeder\n    and su.data_date >= ba.data_date\n    and su.source_date >= dateadd(day,-1,current_date());\n    \n\ninsert into ${Database}.temp.temp_unsub_extract\nselect distinct \n    ba.name_urn, \n    ba.email, \n    ba.source, \n    ba.source_brand_id,\n    1 as data_controller_id,\n    su.data_date\nfrom ${Database}.temp.temp_unsub_rollup ba\ninner join \n    (\n        select \n            xr.cid, \n            min(sd.data_date) as data_date, \n            min(sd.source_date) as source_date \n        from ${Database}.live.xref_name_urn xr\n        inner join ${Database}.db.supps_dead sd on xr.name_urn = 'dead-'||cast(sd.supp_urn as varchar(20))\n        group by cid\n    ) su on ba.cid = su.cid \nwhere su.data_date >= ba.data_date\n    and su.source_date >= dateadd(day,-1,current_date())\n    and ba.email not in (select email from ${Database}.temp.temp_unsub_extract);\n\ndrop table ${Database}.temp.temp_unsub_rollup;\n    \n\n------------------------\n--thg extract\n------------------------\ndrop table if exists ${Database}.jobs.thg_daily_unsubs_extract;\n\nCREATE OR REPLACE TABLE ${Database}.jobs.thg_daily_unsubs_extract\nas \nselect distinct\n    case \n        when source_brand_id = (select brand_id from ${Database}.live.ref_brand where lower(trim(brand)) = 'pro plan breeder') then 'Purina Breeders' \n        else 'Purina Owners'\n    end as \"Site_Name\",\n    tbw.db.strchop(name_urn,'|',-1,-1) as \"Customer_Id\",\n    email as \"Email\",\n    0 as \"Subscribed_Status\",\n    data_date as \"Date\"\nfrom ${Database}.temp.temp_unsub_extract   \nwhere lower(source) regexp '.*thg.*';\n\n------------------------\n--kc extract\n------------------------\n\ndrop table if exists ${Database}.jobs.kc_daily_unsubs_extract;\n\nCREATE OR REPLACE TABLE ${Database}.jobs.kc_daily_unsubs_extract\nas \nselect distinct\n    email as Email_Address,\n    tbw.db.strchop(name_urn,'|',-1,-1) as ContactID\nfrom ${Database}.temp.temp_unsub_extract   \nwhere lower(source) regexp '.*kc.*';\n\n------------------------\n--gigya extract\n------------------------\n\n\ndrop table if exists ${Database}.jobs.gigya_daily_extract_name_urn;\n\nCREATE OR REPLACE TABLE ${Database}.jobs.gigya_daily_extract_name_urn\nas \nselect\n    coalesce(ru.ciam_uid,tbw.db.strchop(un.name_urn,'|',2,2)) as ciam_uid,\n    cc.ciam_code,\n    'false' as value\nfrom ${Database}.temp.temp_unsub_extract un\nleft join ${Database}.db.ref_ciam_uid ru on un.name_urn = trim(ru.name_urn)\ninner join ${Database}.db.ref_ciam_code cc on 1 = 1\nwhere lower(un.source) regexp '.*gig.*';\n\ndrop table ${Database}.temp.temp_unsub_extract;\n\n\n-- Create a reference of all cid's and their associated CIAM uid's where they have one\ndrop table if exists ${Database}.temp.ciam_sync_cid_uid_xref;\n\nCREATE OR REPLACE TABLE ${Database}.temp.ciam_sync_cid_uid_xref\nas\nselect distinct\n    cid,\n    coalesce(trim(ru.ciam_uid),tbw.db.strchop(xr.name_urn,'|',2,2)) as ciam_uid\nfrom ${Database}.live.xref_name_urn xr\nleft join ${Database}.db.ref_ciam_uid ru on trim(ru.name_urn) = xr.name_urn\nwhere lower(xr.source) regexp '.*reg_gig.*';\n\n\n\n-- Create table of all preferences CIAM and non CIAM\ndrop table if exists ${Database}.temp.ciam_sync_all_pref;\n\nCREATE OR REPLACE TABLE ${Database}.temp.ciam_sync_all_pref\nas\nselect distinct\n    trim(name_urn) as name_urn,\n    brand_id,\n    greatest\n        (\n            coalesce(pref_emailable,0),\n            coalesce(pref_mailable,0)\n        ) as preference,\n    data_date,\n    case when lower(source) regexp '.*reg_gig.*' then 1 else 0 end as ciam_source\nfrom ${Database}.db.names_preference\nwhere brand_id is not null\nunion all\nselect distinct \n    trim(name_urn) as name_urn,\n    source_brand_id as brand_id,\n    1 as preference,\n    data_date,\n    0 as ciam_source\nfrom ${Database}.db.names\nwhere source_brand_id is not null\n    and lower(source) not regexp '.*reg_gig.*'\n    and trim(source_file) <> '9999'\n    and data_date >= add_months(current_date,-12);\n\n\n\n-- Get the latest preference for each brand from CIAM (this is to be used as a date barrier)\ndrop table if exists ${Database}.temp.ciam_sync_latest_ciam_pref;\n\nCREATE OR REPLACE TABLE ${Database}.temp.ciam_sync_latest_ciam_pref\nas\nselect\n    ciam_uid,\n    brand_id,\n    preference,\n    data_date\nfrom (\n         select\n             coalesce(trim(rcu.ciam_uid),tbw.db.strchop(pr.name_urn,'|',2,2)) as ciam_uid,\n             pr.brand_id,\n             pr.preference,\n             pr.data_date,\n             row_number() over\n                 (\n                     partition by coalesce(trim(rcu.ciam_uid),tbw.db.strchop(pr.name_urn,'|',2,2)), pr.brand_id\n                     order by pr.data_date desc nulls last\n                 ) as rn\n         from ${Database}.temp.ciam_sync_all_pref pr\n         left join ${Database}.db.ref_ciam_uid rcu on trim(rcu.name_urn) = pr.name_urn\n         where pr.ciam_source = 1\n     ) pref\nwhere rn = 1;\n\n\n-- Create table of all preference for each brand not from CIAM (they must have occurred after the last CIAM preference)\ndrop table if exists ${Database}.temp.ciam_sync_latest_non_ciam_pref;\n\nCREATE OR REPLACE TABLE ${Database}.temp.ciam_sync_latest_non_ciam_pref\nas\nselect distinct\n    ncp.ciam_uid,\n    ncp.brand_id,\n    ncp.preference\nfrom (\n         select\n             ref.ciam_uid,\n             pr.brand_id,\n             pr.preference,\n             pr.data_date,\n             row_number() over\n                 (\n                     partition by ref.ciam_uid, pr.brand_id\n                     order by pr.data_date desc nulls last\n                 ) as rn\n         from ${Database}.temp.ciam_sync_all_pref pr\n         join ${Database}.live.xref_name_urn xr on xr.name_urn = pr.name_urn\n         join ${Database}.temp.ciam_sync_cid_uid_xref ref on ref.cid = xr.cid\n         where pr.ciam_source = 0\n     ) ncp\nleft join ${Database}.temp.ciam_sync_latest_ciam_pref cp on cp.ciam_uid = ncp.ciam_uid\n                                                    and cp.brand_id = ncp.brand_id\nwhere ncp.rn = 1\n    and ncp.data_date > coalesce(cp.data_date,cast('1900-01-01' as date))\n    and ncp.preference <> coalesce(cp.preference,-1);\n\ndrop table if exists ${Database}.temp.ciam_sync_latest_ciam_pref;\ndrop table if exists ${Database}.temp.ciam_sync_cid_uid_xref;\ndrop table if exists ${Database}.temp.ciam_sync_all_pref;\n\n\n-- Merge into the unsubscribe table as a unsubscribe will overwrite any preferences\nmerge into ${Database}.jobs.gigya_daily_extract_name_urn un\nusing (\n          select distinct\n              trim(ciam_uid) as ciam_uid,\n              trim(ciam_code) as ciam_code,\n              case when pr.preference = 1 then 'true' else 'false' end as value\n          from ${Database}.temp.ciam_sync_latest_non_ciam_pref pr\n          inner join ${Database}.db.ref_ciam_code cc on cc.brand_id = pr.brand_id\n      ) pr on pr.ciam_uid = un.ciam_uid\nwhen not matched then insert\n(\n    ciam_uid,\n    ciam_code,\n    value\n)\nvalues\n(\n    pr.ciam_uid,\n    pr.ciam_code,\n    pr.value\n);\n\ndrop table if exists ${Database}.temp.ciam_sync_latest_non_ciam_pref;\n\n\ninsert into ${Database}.db.build_log \nselect    'nestle_unsubs_outputs'\n,         '*************************'\n,         '*************************'\n,         'end of script'\n,         CURRENT_TIMESTAMP::timestamp_ntz\n; \n\n\n--alter warehouse set warehouse_size = 'Xsmall';\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 21 Unsubs Outputs'\n, \t\t'SCRIPT'\n, \t\t'FINISHED'\n;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"195696":{"id":195696,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":-734,"y":178,"width":32,"height":32,"inputConnectorIDs":[195710],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[195703],"outputFalseConnectorIDs":[195707],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Monday check"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Advanced"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"newdate().getTime()"},"2":{"slot":2,"type":"STRING","value":"Is"},"3":{"slot":3,"type":"STRING","value":"Equal to"},"4":{"slot":4,"type":"STRING","value":"TRUE"}}}},"visible":false},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":false},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"new Date().getDay() == 1"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"195697":{"id":195697,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":-574,"y":178,"width":32,"height":32,"inputConnectorIDs":[195705],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[195702],"outputFalseConnectorIDs":[195706],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Monthly check"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Advanced"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"newdate().getTime()"},"2":{"slot":2,"type":"STRING","value":"Is"},"3":{"slot":3,"type":"STRING","value":"Equal to"},"4":{"slot":4,"type":"STRING","value":"TRUE"}}}},"visible":false},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":false},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"new Date().getDate() == 1"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"195698":{"id":195698,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-128,"y":16,"width":32,"height":32,"inputConnectorIDs":[195728],"outputSuccessConnectorIDs":[195741],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc 22b Cerelac Qlik output"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nProgram           : Nestle daily Cerelac qlik reports outputs\nAuthor            : Luke Dudley\nClient Name       : Nestle\nJob Number        :\nStandard Machine  : Kognitio\nAmendment History : v01 - LD 20200709 - Created\n******************************************************************************************/\n\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 22b Cerelac Qlik'\n, \t\t'SCRIPT'\n, \t\t'STARTED'\n;\n\n\ninsert into ${Database}.db.build_log\nselect\n    'cerelac_qliksense',\n    '*************************',\n    '*************************',\n    'start of script',\n    current_timestamp;\n\n\n/******************************************************************************************\n                                         QLIKSENSE\n******************************************************************************************/\n\n\ndrop table if exists ${Database}.temp.qlik_cerelac_retention;\n\nCREATE OR REPLACE TABLE ${Database}.temp.qlik_cerelac_retention\nas\nselect distinct\n    cid\nfrom ${Database}.live.cid_brand\nwhere brand_id = (select brand_id from ${Database}.live.ref_brand where lower(brand) = 'cerelac')\n    and customer_retention_group_brand not in ('Anonymise','Gone this month');\n\n\ndrop table if exists ${Database}.jobs.qlik_cerelac_children cascade;\n\nCREATE OR REPLACE TABLE ${Database}.jobs.qlik_cerelac_children\nas\nselect distinct\n    xr.cid,\n    de.dob,\n    case\n        when floor(datediff(month,de.dob,de.created_date)) < 5 then 'under 5 months'\n        when floor(datediff(month,de.dob,de.created_date))  between 5 and 18 then to_char(cast(floor(datediff(month,de.dob,de.created_date)) as int)) ||' months'\n        when floor(datediff(month,de.dob,de.created_date))  between 19 and 24 then '19-24 months'\n        when floor(datediff(month,de.dob,de.created_date))  > 24 then 'over 24 months'\n        else ''\n    end as child_stage,\n    case\n        when floor(datediff(month,de.dob,de.created_date)) < 5 then 1\n        when floor(datediff(month,de.dob,de.created_date))  between 5 and 18 then cast(floor(datediff(month,de.dob,de.created_date)) as int)\n        when floor(datediff(month,de.dob,de.created_date))  between 19 and 24 then 19\n        when floor(datediff(month,de.dob,de.created_date))  > 24 then 20\n        else 21\n    end as child_stage_order\nfrom ${Database}.db.dependant de\ninner join ${Database}.live.xref_name_urn xr on xr.name_urn = de.name_urn\ninner join ${Database}.temp.qlik_cerelac_retention rt on rt.cid = xr.cid\nwhere de.source in ('REG_CERE','REG_CER_MIG2','REG_GIG')\n    and de.dob is not null;\n\n\ndrop table if exists ${Database}.temp.qlik_cerelac_websitereg cascade;\n\nCREATE OR REPLACE TABLE ${Database}.temp.qlik_cerelac_websitereg\nas\nselect\n    xr.cid,\n    min(nm.reg_date) as reg_date\nfrom ${Database}.db.names nm\ninner join ${Database}.live.xref_name_urn xr on xr.name_urn = nm.name_urn\ninner join ${Database}.temp.qlik_cerelac_retention rt on rt.cid = xr.cid\nleft join ${Database}.db.names_attributes na on na.name_urn = nm.name_urn\nwhere na.cerelac_active = 'Yes'\n    or (\n           nm.source in ('REG_GIG','REG_CER_MIG1') \n        and \n           nm.source_brand_id = (select brand_id from ${Database}.live.ref_brand where lower(brand) = 'cerelac')\n       )\ngroup by xr.cid;\n\n\ndrop table if exists ${Database}.jobs.qlik_cerelac_customer cascade;\n\nCREATE OR REPLACE TABLE ${Database}.jobs.qlik_cerelac_customer\nas\nselect\n    cer.cid,\n    cer.cerelac_aov,\n    cer.emailable,\n    cer.country,\n    case when sma.source_nestle = 1 then 'Yes' else 'No' end as Baby_Club_Member,\n    case when web.reg_date <= '2017-01-01' then cast('2017-01-01' as date) else web.reg_date end as reg_date,\n    case\n        when cer.cerelac_webshop = 1 and cer.cerelac_website = 1 then 'Both'\n        when cer.cerelac_webshop = 1 then 'Webshop Customer'\n        else 'Website Registrant'\n    end as member_status\nfrom ${Database}.live.cid_cerelac cer\ninner join ${Database}.temp.qlik_cerelac_retention rt on rt.cid = cer.cid\nleft join ${Database}.live.cid_sma sma on sma.cid = cer.cid\nleft join ${Database}.temp.qlik_cerelac_websitereg web on web.cid = cer.cid\nwhere cer.cerelac_website = 1\n    or cer.cerelac_webshop = 1;\n\ndrop table if exists ${Database}.temp.qlik_cerelac_websitereg;\ndrop table if exists ${Database}.temp.qlik_cerelac_retention;\n\n\n/******************************************************************************************\n                                             FINISH PROC\n******************************************************************************************/\n\nupdate ${Database}.db.build_dates\nset cerelac_qliksense = current_timestamp\nwhere build_flag = 'C';\n\n\ninsert into ${Database}.db.build_log\nselect\n    'cerelac_qliksense',\n    '*************************',\n    '*************************',\n    'end of script',\n    current_timestamp;\n\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 22b Cerelac Qlik'\n, \t\t'SCRIPT'\n, \t\t'FINISHED'\n;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"195699":{"id":195699,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":-496,"y":176,"width":32,"height":32,"inputConnectorIDs":[195706,195732],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[195704],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 4"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"195700":{"id":195700,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":-654,"y":178,"width":32,"height":32,"inputConnectorIDs":[195707,195733],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[195705],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 3"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"195712":{"id":195712,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":-368,"y":176,"width":32,"height":32,"inputConnectorIDs":[195704],"outputSuccessConnectorIDs":[195745,195747],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc20 EmailOutput"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc20 EmailOutput"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"195713":{"id":195713,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":160,"y":288,"width":32,"height":32,"inputConnectorIDs":[195701],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"QlikAppReload"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"QlikAppReload"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"195714":{"id":195714,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":32,"y":16,"width":32,"height":32,"inputConnectorIDs":[195744],"outputSuccessConnectorIDs":[195734,195735,195736,195737,195743,195746,195748,195749],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc 24 LiveRamp Extract"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\n   Author            : Luke Dudley\n   Client Name       : Nestle\n   Job Number        :\n   Standard Machine  : Snowflake\n   Amendment History : v01 - LD - Created\n******************************************************************************************/\n\n--if merges run successfully but file export fails then final output will need to be amended to mop up going back to date of last export\n\n/******************************************************************************************\n   NESTLE LIVERAMP DAILY EXTRACT\n******************************************************************************************/\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect\n    CURRENT_TIMESTAMP::timestamp_ntz,\n    '${Database}',\n    'BUILD',\n    'Proc 24 - LiveRamp Extract',\n    'SCRIPT',\n    'STARTED';\n\n\n--alter warehouse set warehouse_size = 'Large';\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    '*************************',\n    '*************************',\n    'start of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n-- ================================================================================================\n--                                          PURINA\n-- ================================================================================================\n\n\n/******************************************************************************************\n   LOOKUPS\n******************************************************************************************/\n\n--email addresses and opt-in status (roll up to cid level based on brand hierarchy)\ncreate or replace table ${Database}.temp.npp_live_ramp_opted_in_flag as\nselect distinct\n    cb.cid,\n    first_value(case when cb.emailable = 1 then 'Y' else 'N' end) over\n        (\n            partition by cb.cid\n            order by cb.emailable desc\n        ) as opt_in,\n    first_value(xr.email) over\n        (\n            partition by cb.cid\n            order by case when lower(rb.brand) regexp '.*purina masterbrand.*' then 1 else 0 end asc\n        ) as email\nfrom ${Database}.live.cid_brand cb\ninner join ${Database}.live.ref_brand rb on cb.brand_id = rb.brand_id\ninner join ${Database}.live.xref_email xr on xr.bbw_urn = cast(split_part(cb.cid_brand_urn,'-',1) as int)\nwhere cb.business_unit_id = 5\n    and (cb.brand_preference = 1 or (cb.brand_engagement = 1 and cb.brand_preference <> 0))\n    and cb.customer_retention_date_brand >= add_months(current_date,-24);\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'npp_live_ramp_opted_in_flag',\n    'total records',\n    cast((select count(*) from ${Database}.temp.npp_live_ramp_opted_in_flag) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n/******************************************************************************************\n   BASE TABLE\n******************************************************************************************/\n\n--get table with all consumers and pets\ncreate or replace table ${Database}.temp.npp_live_ramp_prep\nas\nselect distinct\n    cid.bbw_urn,\n    cd.cid,\n    cd.firstname,\n    cd.lastname,\n    cd.add1,\n    cd.add2,\n    cd.add3,\n    cd.town,\n    cd.county,\n    cd.postcode,\n    coalesce(opt.email,'') as email,\n    coalesce(opt.opt_in,'N') as opt_in,\n    max(case when rb.brand = 'Pro Plan' then 'Y' else 'N' end)           as pro_plan_consumer,\n    max(case when rb.brand = 'Beta' then 'Y' else 'N' end)               as beta_consumer,\n    max(case when rb.brand = 'Purina ONE' then 'Y' else 'N' end)         as purina_one_consumer,\n    max(case when rb.brand = 'my dog is' then 'Y' else 'N' end)          as my_dog_is_consumer,\n    max(case when rb.brand = 'Beyond' then 'Y' else 'N' end)             as beyond_consumer,\n    max(case when rb.brand = 'Gourmet' then 'Y' else 'N' end)            as gourmet_consumer,\n    max(case when rb.brand = 'Dentalife' then 'Y' else 'N' end)          as dentalife_consumer,\n    max(case when rb.brand = 'Bakers' then 'Y' else 'N' end)             as bakers_consumer,\n    max(case when rb.brand = 'Felix' then 'Y' else 'N' end)              as felix_consumer,\n    max(case when rb.brand = 'Adventuros' then 'Y' else 'N' end)         as adventuros_consumer,\n    max(case when rb.brand = 'Go Cat' then 'Y' else 'N' end)             as go_cat_consumer,\n    max(case when rb.brand = 'Delibakie' then 'Y' else 'N' end)          as delibakie_consumer,\n    max(case when rb.brand = 'Winalot' then 'Y' else 'N' end)            as winalot_consumer,\n    max(case when rb.brand = 'Bonio' then 'Y' else 'N' end)              as bonio_consumer,\n    max(case when rb.brand = 'Purina Masterbrand' then 'Y' else 'N' end) as purina_master_brand_consumer,\n    --engaged L6M\n    max(case when eng.cid is not null and lower(eng.brand) regexp '.*pro plan.*' then 'Y' else 'N' end)   as pro_plan_recent_product_interaction,\n    max(case when eng.cid is not null and eng.brand = 'Beta' then 'Y' else 'N' end)                       as beta_recent_product_interaction,\n    max(case when eng.cid is not null and lower(eng.brand) regexp '.*purina one.*' then 'Y' else 'N' end) as purina_one_recent_product_interaction,\n    max(case when eng.cid is not null and eng.brand = 'my dog is' then 'Y' else 'N' end)                  as my_dog_is_recent_product_interaction,\n    max(case when eng.cid is not null and eng.brand = 'Beyond' then 'Y' else 'N' end)                     as beyond_recent_product_interaction,\n    max(case when eng.cid is not null and eng.brand = 'Gourmet' then 'Y' else 'N' end)                    as gourmet_recent_product_interaction,\n    max(case when eng.cid is not null and eng.brand = 'Dentalife' then 'Y' else 'N' end)                  as dentalife_recent_product_interaction,\n    max(case when eng.cid is not null and eng.brand = 'Bakers' then 'Y' else 'N' end)                     as bakers_recent_product_interaction,\n    max(case when eng.cid is not null and eng.brand = 'Felix' then 'Y' else 'N' end)                      as felix_recent_product_interaction,\n    max(case when eng.cid is not null and eng.brand = 'Adventuros' then 'Y' else 'N' end)                 as adventuros_recent_product_interaction,\n    max(case when eng.cid is not null and eng.brand = 'Go Cat' then 'Y' else 'N' end)                     as go_cat_recent_product_interaction,\n    max(case when eng.cid is not null and eng.brand = 'Delibakie' then 'Y' else 'N' end)                  as delibakie_recent_product_interaction,\n    max(case when eng.cid is not null and eng.brand = 'Winalot' then 'Y' else 'N' end)                    as winalot_recent_product_interaction,\n    max(case when eng.cid is not null and eng.brand = 'Bonio' then 'Y' else 'N' end)                      as bonio_recent_product_interaction,\n    max(case when eng.cid is not null and eng.brand = 'Purina Masterbrand' then 'Y' else 'N' end)         as purina_master_brand_recent_product_interaction,\n    cid.number_of_cats,\n    cid.number_of_dogs,\n    cid.have_dog,\n    cid.have_cat,\n    min(case when cb.customer_retention_date_brand > add_months(current_date,-19) then 'Safe' else 'At Risk' end) as reconsent_status,\n    case when gp.cid is null then 'N' else 'Y' end as growing_pup_member,\n    case\n        when cid.gender = 'M' then 'Male'\n        when cid.gender = 'F' then 'Female'\n        else 'Unknown'\n    end as gender,\n    coalesce(cast(datediff(year,cid.dob,current_date) as varchar),'Unknown') as age,\n    case\n        when cid.purina_engagement_score <= 72  then 'Low'\n        when cid.purina_engagement_score <= 170 then 'Medium'\n        when cid.purina_engagement_score > 170  then 'High'\n        else 'Low'\n    end as engagement_cluster,\n    case\n        when last_email_opened > add_months(current_date,-1)                                                        then 'Months0_1'\n        when last_email_opened > add_months(current_date,-2) and last_email_opened <= add_months(current_date,-1)   then '1_2m'\n        when last_email_opened > add_months(current_date,-3) and last_email_opened <= add_months(current_date,-2)   then '2_3m'\n        when last_email_opened > add_months(current_date,-4) and last_email_opened <= add_months(current_date,-3)   then '3_4m'\n        when last_email_opened > add_months(current_date,-5) and last_email_opened <= add_months(current_date,-4)   then '4_5m'\n        when last_email_opened > add_months(current_date,-6) and last_email_opened <= add_months(current_date,-5)   then '5_6m'\n        when last_email_opened > add_months(current_date,-7) and last_email_opened <= add_months(current_date,-6)   then '6_7m'\n        when last_email_opened > add_months(current_date,-8) and last_email_opened <= add_months(current_date,-7)   then '7_8m'\n        when last_email_opened > add_months(current_date,-9) and last_email_opened <= add_months(current_date,-8)   then '8_9m'\n        when last_email_opened > add_months(current_date,-10) and last_email_opened <= add_months(current_date,-9)  then '9_10m'\n        when last_email_opened > add_months(current_date,-11) and last_email_opened <= add_months(current_date,-10) then '10_11m'\n        when last_email_opened > add_months(current_date,-12) and last_email_opened <= add_months(current_date,-11) then '11_12m'\n        when last_email_opened > add_months(current_date,-13) and last_email_opened <= add_months(current_date,-12) then '12_13m'\n        when last_email_opened > add_months(current_date,-14) and last_email_opened <= add_months(current_date,-13) then '13_14m'\n        when last_email_opened > add_months(current_date,-15) and last_email_opened <= add_months(current_date,-14) then '14_15m'\n        when last_email_opened > add_months(current_date,-16) and last_email_opened <= add_months(current_date,-15) then '15_16m'\n        when last_email_opened > add_months(current_date,-17) and last_email_opened <= add_months(current_date,-16) then '16_17m'\n        when last_email_opened > add_months(current_date,-18) and last_email_opened <= add_months(current_date,-17) then '17_18m'\n        when last_email_opened > add_months(current_date,-19) and last_email_opened <= add_months(current_date,-18) then '18_19m'\n        when last_email_opened > add_months(current_date,-20) and last_email_opened <= add_months(current_date,-19) then '19_20m'\n        when last_email_opened > add_months(current_date,-21) and last_email_opened <= add_months(current_date,-20) then '20_21m'\n        when last_email_opened > add_months(current_date,-22) and last_email_opened <= add_months(current_date,-21) then '21_22m'\n        when last_email_opened > add_months(current_date,-23) and last_email_opened <= add_months(current_date,-22) then '22_23m'\n        when last_email_opened > add_months(current_date,-24) and last_email_opened <= add_months(current_date,-23) then '23_24m'\n        else 'More_than_24_months'\n    end as email_engagement_recency\nfrom ${Database}.live.cid_details cd\ninner join ${Database}.live.cid cid on cd.cid = cid.cid\ninner join ${Database}.live.cid_brand cb on cd.cid = cb.cid\ninner join ${Database}.live.ref_brand rb on rb.brand_id = cb.brand_id\nleft join (\n              select distinct\n                  cb.cid\n              from ${Database}.live.cid_brand cb\n              left join ${Database}.live.cid_pet p on cb.cid = p.cid\n              where cb.business_unit_id = 5 -- purina\n                  and cb.emailable = 1\n                  and (cb.brand_preference = 1 or (cb.brand_engagement = 1 and cb.brand_preference <> 0))\n                  and lower(p.pet_type) = 'dog'\n                  and (pet_dob > add_months(current_date,-12) or pet_dob is null)\n                  and cb.brand_id = (select brand_id from ${Database}.live.ref_brand where lower(brand) regexp '.*growing pup.*')\n          ) gp on gp.cid = cb.cid\nleft join (\n              select distinct\n                  ac.cid,\n                  rb.brand\n              from ${Database}.live.npp_engagement_scoring_activities ac\n              left join ${Database}.live.ref_brand rb on rb.brand_id = ac.activity_brand_id\n              where ac.activity in ('Clicked Buy Now','Left Positive Rate & Review','Requested free product sample','Redeemed Coupon','Clicked Product')\n                  and ac.activity_date >= add_months(current_date,-6)\n          ) eng on eng.cid = cb.cid\nleft join (\n              select distinct\n                  cid,\n                  first_value(event_timestamp) over (partition by cid order by event_timestamp desc) as last_email_opened\n              from ${Database}.live.adestra_events\n              where lower(event_name) regexp '.*read.*|.*click.*'\n          ) ae on ae.cid = cb.cid\nleft join ${Database}.temp.npp_live_ramp_opted_in_flag opt on opt.cid = cb.cid\nwhere cb.business_unit_id = 5\n    and (cb.brand_preference = 1 or (cb.brand_engagement = 1 and cb.brand_preference <> 0))\n    and cb.customer_retention_date_brand >= add_months(current_date,-24)\ngroup by\n    cid.bbw_urn,\n    cd.cid,\n    cd.firstname,\n    cd.lastname,\n    cd.add1,\n    cd.add2,\n    cd.add3,\n    cd.town,\n    cd.county,\n    cd.postcode,\n    opt.email,\n    opt.opt_in,\n    cid.number_of_cats,\n    cid.number_of_dogs,\n    cid.have_dog,\n    cid.have_cat,\n    case when gp.cid is null then 'N' else 'Y' end,\n    case\n        when cid.gender = 'M' then 'Male'\n        when cid.gender = 'F' then 'Female'\n        else 'Unknown'\n    end,\n    coalesce(cast(datediff(year,cid.dob,current_date) as varchar),'Unknown'),\n    case\n        when cid.purina_engagement_score <= 72  then 'Low'\n        when cid.purina_engagement_score <= 170 then 'Medium'\n        when cid.purina_engagement_score > 170  then 'High'\n        else 'Low'\n    end,\n    case\n        when last_email_opened > add_months(current_date,-1)                                                        then 'Months0_1'\n        when last_email_opened > add_months(current_date,-2) and last_email_opened <= add_months(current_date,-1)   then '1_2m'\n        when last_email_opened > add_months(current_date,-3) and last_email_opened <= add_months(current_date,-2)   then '2_3m'\n        when last_email_opened > add_months(current_date,-4) and last_email_opened <= add_months(current_date,-3)   then '3_4m'\n        when last_email_opened > add_months(current_date,-5) and last_email_opened <= add_months(current_date,-4)   then '4_5m'\n        when last_email_opened > add_months(current_date,-6) and last_email_opened <= add_months(current_date,-5)   then '5_6m'\n        when last_email_opened > add_months(current_date,-7) and last_email_opened <= add_months(current_date,-6)   then '6_7m'\n        when last_email_opened > add_months(current_date,-8) and last_email_opened <= add_months(current_date,-7)   then '7_8m'\n        when last_email_opened > add_months(current_date,-9) and last_email_opened <= add_months(current_date,-8)   then '8_9m'\n        when last_email_opened > add_months(current_date,-10) and last_email_opened <= add_months(current_date,-9)  then '9_10m'\n        when last_email_opened > add_months(current_date,-11) and last_email_opened <= add_months(current_date,-10) then '10_11m'\n        when last_email_opened > add_months(current_date,-12) and last_email_opened <= add_months(current_date,-11) then '11_12m'\n        when last_email_opened > add_months(current_date,-13) and last_email_opened <= add_months(current_date,-12) then '12_13m'\n        when last_email_opened > add_months(current_date,-14) and last_email_opened <= add_months(current_date,-13) then '13_14m'\n        when last_email_opened > add_months(current_date,-15) and last_email_opened <= add_months(current_date,-14) then '14_15m'\n        when last_email_opened > add_months(current_date,-16) and last_email_opened <= add_months(current_date,-15) then '15_16m'\n        when last_email_opened > add_months(current_date,-17) and last_email_opened <= add_months(current_date,-16) then '16_17m'\n        when last_email_opened > add_months(current_date,-18) and last_email_opened <= add_months(current_date,-17) then '17_18m'\n        when last_email_opened > add_months(current_date,-19) and last_email_opened <= add_months(current_date,-18) then '18_19m'\n        when last_email_opened > add_months(current_date,-20) and last_email_opened <= add_months(current_date,-19) then '19_20m'\n        when last_email_opened > add_months(current_date,-21) and last_email_opened <= add_months(current_date,-20) then '20_21m'\n        when last_email_opened > add_months(current_date,-22) and last_email_opened <= add_months(current_date,-21) then '21_22m'\n        when last_email_opened > add_months(current_date,-23) and last_email_opened <= add_months(current_date,-22) then '22_23m'\n        when last_email_opened > add_months(current_date,-24) and last_email_opened <= add_months(current_date,-23) then '23_24m'\n        else 'More_than_24_months'\n    end;\n\ndrop table if exists ${Database}.temp.npp_live_ramp_opted_in_flag;\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'npp_live_ramp_prep',\n    'total records',\n    cast((select count(*) from ${Database}.temp.npp_live_ramp_prep) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\ncreate or replace table ${Database}.temp.npp_live_ramp_all_eligible\nas\nselect distinct\n    lr.bbw_urn as customerid,\n    lr.firstname,\n    lr.lastname,\n    lr.add1 as address1,\n    lr.add2 as address2,\n    lr.add3 as address3,\n    lr.town,\n    lr.county,\n    lr.postcode,\n    lr.email as email1,\n    lr.opt_in,\n    lr.pro_plan_consumer,\n    lr.beta_consumer,\n    lr.purina_one_consumer,\n    lr.my_dog_is_consumer,\n    lr.beyond_consumer,\n    lr.gourmet_consumer,\n    lr.dentalife_consumer,\n    lr.bakers_consumer,\n    lr.felix_consumer,\n    lr.adventuros_consumer,\n    lr.go_cat_consumer,\n    lr.delibakie_consumer,\n    lr.winalot_consumer,\n    lr.bonio_consumer,\n    lr.purina_master_brand_consumer,\n    lr.pro_plan_recent_product_interaction,\n    lr.beta_recent_product_interaction,\n    lr.purina_one_recent_product_interaction,\n    lr.my_dog_is_recent_product_interaction,\n    lr.beyond_recent_product_interaction,\n    lr.gourmet_recent_product_interaction,\n    lr.dentalife_recent_product_interaction,\n    lr.bakers_recent_product_interaction,\n    lr.felix_recent_product_interaction,\n    lr.adventuros_recent_product_interaction,\n    lr.go_cat_recent_product_interaction,\n    lr.delibakie_recent_product_interaction,\n    lr.winalot_recent_product_interaction,\n    lr.bonio_recent_product_interaction,\n    lr.purina_master_brand_recent_product_interaction,\n    first_value(case when p.pet_life_stage = 'Puppy' then 'Y' else 'N' end) over\n        (\n            partition by p.cid\n            order by case when p.pet_life_stage = 'Puppy' then 'Y' else 'N' end desc\n        ) as puppy_owner,\n    first_value(case when p.pet_life_stage = 'Kitten' then 'Y' else 'N' end) over\n        (\n            partition by p.cid\n            order by case when p.pet_life_stage = 'Kitten' then 'Y' else 'N' end desc\n        ) as kitten_owner,\n    first_value(case when p.pet_type = 'Dog' and pet_life_stage = 'Adult' then 'Y' else 'N' end) over\n        (\n            partition by p.cid\n            order by case when p.pet_type = 'Dog' and p.pet_life_stage = 'Adult' then 'Y' else 'N' end desc\n        ) as adult_dog_owner,\n    first_value(case when p.pet_type = 'Cat' and pet_life_stage = 'Adult' then 'Y' else 'N' end) over\n        (\n            partition by p.cid\n            order by case when p.pet_type = 'Cat' and p.pet_life_stage = 'Adult' then 'Y' else 'N' end desc\n        ) as adult_cat_owner,\n    first_value(case when p.pet_type = 'Dog' and pet_life_stage = 'Senior' then 'Y' else 'N' end) over\n        (\n            partition by p.cid\n            order by case when p.pet_type = 'Dog' and p.pet_life_stage = 'Senior' then 'Y' else 'N' end desc\n        ) as senior_dog_owner,\n    first_value(case when p.pet_type = 'Cat' and pet_life_stage = 'Senior' then 'Y' else 'N' end) over\n        (\n            partition by p.cid\n            order by case when p.pet_type = 'Cat' and p.pet_life_stage = 'Senior' then 'Y' else 'N' end desc\n        ) as senior_cat_owner,\n    first_value(case when cid.number_of_cats > 1 then 'Y' else 'N' end) over\n        (\n            partition by p.cid\n            order by case when cid.number_of_cats > 1 then 'Y' else 'N' end desc\n        ) as multi_cat,\n    first_value(case when cid.number_of_dogs > 1 then 'Y' else 'N' end) over\n        (\n            partition by p.cid\n            order by case when cid.number_of_dogs > 1 then 'Y' else 'N' end desc\n        ) as multi_dog,\n    first_value(case when p.pet_type = 'Dog' and p.pet_size = 'T' then 'Y' else 'N' end) over\n        (\n            partition by p.cid\n            order by case when p.pet_type = 'Dog' and p.pet_size = 'T' then 'Y' else 'N' end desc\n        ) as xsmall_dog, -- npp07795_pet_size_addition\n    first_value(case when p.pet_type = 'Dog' and p.pet_size = 'S' then 'Y' else 'N' end) over\n        (\n            partition by p.cid\n            order by case when p.pet_type = 'Dog' and p.pet_size = 'S' then 'Y' else 'N' end desc\n        ) as small_dog, -- npp07795_pet_size_addition\n    first_value(case when p.pet_type = 'Dog' and p.pet_size = 'M' then 'Y' else 'N' end) over\n        (\n            partition by p.cid\n            order by case when p.pet_type = 'Dog' and p.pet_size = 'M' then 'Y' else 'N' end desc\n        ) as medium_dog, -- npp07795_pet_size_addition\n    first_value(case when p.pet_type = 'Dog' and p.pet_size = 'L' then 'Y' else 'N' end) over\n        (\n            partition by p.cid\n            order by case when p.pet_type = 'Dog' and p.pet_size = 'L' then 'Y' else 'N' end desc\n        ) as large_dog, -- npp07795_pet_size_addition\n    first_value(case when p.pet_type = 'Dog' and (p.pet_size ='EL' or p.pet_size = 'XL') then 'Y' else 'N' end) over\n        (\n            partition by p.cid\n            order by case when p.pet_type = 'Dog' and (p.pet_size ='EL' or p.pet_size = 'XL')  then 'Y' else 'N' end desc\n        ) as xlarge_dog, -- npp07795_pet_size_addition\n    growing_pup_member,\n    reconsent_status,\n    case\n        when lr.have_dog in ('Y','IN','IO') and lr.have_cat in ('Y','IN','IO') then 'Both'\n        when lr.have_cat in ('Y','IN','IO') then 'Cat'\n        when lr.have_dog in ('Y','IN','IO') then 'Dog'\n        else 'Unknown'\n    end as pet_ownership_segment,\n    lr.gender,\n    lr.age,\n    lr.engagement_cluster,\n    lr.email_engagement_recency\nfrom ${Database}.temp.npp_live_ramp_prep lr\ninner join ${Database}.live.cid cid on lr.cid = cid.cid\nleft join ${Database}.live.cid_pet p on p.cid = lr.cid;\n\n\ndrop table if exists ${Database}.temp.npp_live_ramp_prep;\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'npp_live_ramp_all_eligible',\n    'total records',\n    cast((select count(*) from ${Database}.temp.npp_live_ramp_all_eligible) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n/******************************************************************************************\n   UPDATE DB TABLE\n******************************************************************************************/\n\n--Daily comparison against db table to add newly eligible or changed record\n--Will then dedupe to most recent record per bbw_urn (customerID)\n\nmerge into ${Database}.db.npp_live_ramp db\nusing ${Database}.temp.npp_live_ramp_all_eligible el on el.customerid = db.customerid\n                                                    and trim(el.firstname) = trim(db.firstname)\n                                                    and trim(el.lastname) = trim(db.lastname)\n                                                    and trim(el.address1) = trim(db.address1)\n                                                    and trim(el.address2) = trim(db.address2)\n                                                    and trim(el.address3) = trim(db.address3)\n                                                    and trim(el.town) = trim(db.town)\n                                                    and trim(el.county) = trim(db.county)\n                                                    and trim(el.postcode) = trim(db.postcode)\n                                                    and trim(el.email1) = trim(db.email1)\n                                                    and trim(el.opt_in) = trim(db.opt_in)\n                                                    and trim(el.pro_plan_consumer) = trim(db.pro_plan_consumer)\n                                                    and trim(el.beta_consumer) = trim(db.beta_consumer)\n                                                    and trim(el.purina_one_consumer) = trim(db.purina_one_consumer)\n                                                    and trim(el.my_dog_is_consumer) = trim(db.my_dog_is_consumer)\n                                                    and trim(el.beyond_consumer) = trim(db.beyond_consumer)\n                                                    and trim(el.gourmet_consumer) = trim(db.gourmet_consumer)\n                                                    and trim(el.dentalife_consumer) = trim(db.dentalife_consumer)\n                                                    and trim(el.bakers_consumer) = trim(db.bakers_consumer)\n                                                    and trim(el.felix_consumer) = trim(db.felix_consumer)\n                                                    and trim(el.adventuros_consumer) = trim(db.adventuros_consumer)\n                                                    and trim(el.go_cat_consumer) = trim(db.go_cat_consumer)\n                                                    and trim(el.delibakie_consumer) = trim(db.delibakie_consumer)\n                                                    and trim(el.winalot_consumer) = trim(db.winalot_consumer)\n                                                    and trim(el.bonio_consumer) = trim(db.bonio_consumer)\n                                                    and trim(el.purina_master_brand_consumer) = trim(db.purina_master_brand_consumer)\n                                                    and trim(el.pro_plan_recent_product_interaction) = trim(db.pro_plan_recent_product_interaction)\n                                                    and trim(el.beta_recent_product_interaction) = trim(db.beta_recent_product_interaction)\n                                                    and trim(el.purina_one_recent_product_interaction) = trim(db.purina_one_recent_product_interaction)\n                                                    and trim(el.my_dog_is_recent_product_interaction) = trim(db.my_dog_is_recent_product_interaction)\n                                                    and trim(el.beyond_recent_product_interaction) = trim(db.beyond_recent_product_interaction)\n                                                    and trim(el.gourmet_recent_product_interaction) = trim(db.gourmet_recent_product_interaction)\n                                                    and trim(el.dentalife_recent_product_interaction) = trim(db.dentalife_recent_product_interaction)\n                                                    and trim(el.bakers_recent_product_interaction) = trim(db.bakers_recent_product_interaction)\n                                                    and trim(el.felix_recent_product_interaction) = trim(db.felix_recent_product_interaction)\n                                                    and trim(el.adventuros_recent_product_interaction) = trim(db.adventuros_recent_product_interaction)\n                                                    and trim(el.go_cat_recent_product_interaction) = trim(db.go_cat_recent_product_interaction)\n                                                    and trim(el.delibakie_recent_product_interaction) = trim(db.delibakie_recent_product_interaction)\n                                                    and trim(el.winalot_recent_product_interaction) = trim(db.winalot_recent_product_interaction)\n                                                    and trim(el.bonio_recent_product_interaction) = trim(db.bonio_recent_product_interaction)\n                                                    and trim(el.purina_master_brand_recent_product_interaction) = trim(db.purina_master_brand_recent_product_interaction)\n                                                    and trim(el.puppy_owner) = trim(db.puppy_owner)\n                                                    and trim(el.kitten_owner) = trim(db.kitten_owner)\n                                                    and trim(el.adult_dog_owner) = trim(db.adult_dog_owner)\n                                                    and trim(el.adult_cat_owner) = trim(db.adult_cat_owner)\n                                                    and trim(el.senior_dog_owner) = trim(db.senior_dog_owner)\n                                                    and trim(el.senior_cat_owner) = trim(db.senior_cat_owner)\n                                                    and trim(el.multi_cat) = trim(db.multi_cat)\n                                                    and trim(el.multi_dog) = trim(db.multi_dog)\n                                                    and trim(el.xsmall_dog) = trim(db.xsmall_dog) -- npp07795_pet_size_addition\n                                                    and trim(el.small_dog) = trim(db.small_dog) -- npp07795_pet_size_addition\n                                                    and trim(el.medium_dog) = trim(db.medium_dog) -- npp07795_pet_size_addition\n                                                    and trim(el.large_dog) = trim(db.large_dog) -- npp07795_pet_size_addition\n                                                    and trim(el.xlarge_dog) = trim(db.xlarge_dog) -- npp07795_pet_size_addition\n                                                    and trim(el.growing_pup_member) = trim(db.growing_pup_member)\n                                                    and trim(el.reconsent_status) = trim(db.reconsent_status)\n                                                    and trim(el.pet_ownership_segment) = trim(db.pet_ownership_segment)\n                                                    and trim(el.gender) = trim(db.gender)\n                                                    and trim(el.age) = trim(db.age)\n                                                    and trim(el.engagement_cluster) = trim(db.engagement_cluster)\n                                                    and trim(el.email_engagement_recency) = trim(db.email_engagement_recency)\nwhen not matched then insert\n(\n    customerid,\n    firstname,\n    lastname,\n    address1,\n    address2,\n    address3,\n    town,\n    county,\n    postcode,\n    email1,\n    opt_in,\n    pro_plan_consumer,\n    beta_consumer,\n    purina_one_consumer,\n    my_dog_is_consumer,\n    beyond_consumer,\n    gourmet_consumer,\n    dentalife_consumer,\n    bakers_consumer,\n    felix_consumer,\n    adventuros_consumer,\n    go_cat_consumer,\n    delibakie_consumer,\n    winalot_consumer,\n    bonio_consumer,\n    purina_master_brand_consumer,\n    pro_plan_recent_product_interaction,\n    beta_recent_product_interaction,\n    purina_one_recent_product_interaction,\n    my_dog_is_recent_product_interaction,\n    beyond_recent_product_interaction,\n    gourmet_recent_product_interaction,\n    dentalife_recent_product_interaction,\n    bakers_recent_product_interaction,\n    felix_recent_product_interaction,\n    adventuros_recent_product_interaction,\n    go_cat_recent_product_interaction,\n    delibakie_recent_product_interaction,\n    winalot_recent_product_interaction,\n    bonio_recent_product_interaction,\n    purina_master_brand_recent_product_interaction,\n    puppy_owner,\n    kitten_owner,\n    adult_dog_owner,\n    adult_cat_owner,\n    senior_dog_owner,\n    senior_cat_owner,\n    multi_cat,\n    multi_dog,\n    xsmall_dog, -- npp07795_pet_size_addition\n    small_dog, -- npp07795_pet_size_addition\n    medium_dog, -- npp07795_pet_size_addition\n    large_dog, -- npp07795_pet_size_addition\n    xlarge_dog, -- npp07795_pet_size_addition\n    growing_pup_member,\n    reconsent_status,\n    pet_ownership_segment,\n    gender,\n    age,\n    engagement_cluster,\n    email_engagement_recency,\n    updated_date\n)\nvalues\n(\n    el.customerid,\n    trim(el.firstname),\n    trim(el.lastname),\n    trim(el.address1),\n    trim(el.address2),\n    trim(el.address3),\n    trim(el.town),\n    trim(el.county),\n    trim(el.postcode),\n    trim(el.email1),\n    trim(el.opt_in),\n    trim(el.pro_plan_consumer),\n    trim(el.beta_consumer),\n    trim(el.purina_one_consumer),\n    trim(el.my_dog_is_consumer),\n    trim(el.beyond_consumer),\n    trim(el.gourmet_consumer),\n    trim(el.dentalife_consumer),\n    trim(el.bakers_consumer),\n    trim(el.felix_consumer),\n    trim(el.adventuros_consumer),\n    trim(el.go_cat_consumer),\n    trim(el.delibakie_consumer),\n    trim(el.winalot_consumer),\n    trim(el.bonio_consumer),\n    trim(el.purina_master_brand_consumer),\n    trim(el.pro_plan_recent_product_interaction),\n    trim(el.beta_recent_product_interaction),\n    trim(el.purina_one_recent_product_interaction),\n    trim(el.my_dog_is_recent_product_interaction),\n    trim(el.beyond_recent_product_interaction),\n    trim(el.gourmet_recent_product_interaction),\n    trim(el.dentalife_recent_product_interaction),\n    trim(el.bakers_recent_product_interaction),\n    trim(el.felix_recent_product_interaction),\n    trim(el.adventuros_recent_product_interaction),\n    trim(el.go_cat_recent_product_interaction),\n    trim(el.delibakie_recent_product_interaction),\n    trim(el.winalot_recent_product_interaction),\n    trim(el.bonio_recent_product_interaction),\n    trim(el.purina_master_brand_recent_product_interaction),\n    trim(el.puppy_owner),\n    trim(el.kitten_owner),\n    trim(el.adult_dog_owner),\n    trim(el.adult_cat_owner),\n    trim(el.senior_dog_owner),\n    trim(el.senior_cat_owner),\n    trim(el.multi_cat),\n    trim(el.multi_dog),\n    trim(el.xsmall_dog), -- npp07795_pet_size_addition\n    trim(el.small_dog), -- npp07795_pet_size_addition\n    trim(el.medium_dog), -- npp07795_pet_size_addition\n    trim(el.large_dog), -- npp07795_pet_size_addition\n    trim(el.xlarge_dog), -- npp07795_pet_size_addition\n    trim(el.growing_pup_member),\n    trim(el.reconsent_status),\n    trim(el.pet_ownership_segment),\n    trim(el.gender),\n    trim(el.age),\n    trim(el.engagement_cluster),\n    trim(el.email_engagement_recency),\n    current_date\n);\n\n\n--remove older records for people who have been updated\ndelete from ${Database}.db.npp_live_ramp\nwhere customerid in (\n                        select distinct\n                            customerid\n                        from ${Database}.db.npp_live_ramp\n                        group by customerid\n                        having count(*) > 1\n                    )\nand updated_date <> current_date;\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'npp_live_ramp',\n    'insert merge',\n    cast((select count(*) from ${Database}.db.npp_live_ramp where updated_date = current_date) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n--blank out all records for people no longer picked up by cid_brand (i.e. RTBF or fallen out of data retention)\nupdate ${Database}.db.npp_live_ramp db\nset db.firstname = '',\n    db.lastname = '',\n    db.address1 = '',\n    db.address2 = '',\n    db.address3 = '',\n    db.town = '',\n    db.county = '',\n    db.postcode = '',\n    db.email1 = '',\n    db.opt_in = '',\n    db.pro_plan_consumer = '',\n    db.beta_consumer = '',\n    db.purina_one_consumer = '',\n    db.my_dog_is_consumer = '',\n    db.beyond_consumer = '',\n    db.gourmet_consumer = '',\n    db.dentalife_consumer = '',\n    db.bakers_consumer = '',\n    db.felix_consumer = '',\n    db.adventuros_consumer = '',\n    db.go_cat_consumer = '',\n    db.delibakie_consumer = '',\n    db.winalot_consumer = '',\n    db.bonio_consumer = '',\n    db.purina_master_brand_consumer = '',\n    db.pro_plan_recent_product_interaction = '',\n    db.beta_recent_product_interaction = '',\n    db.purina_one_recent_product_interaction = '',\n    db.my_dog_is_recent_product_interaction = '',\n    db.beyond_recent_product_interaction = '',\n    db.gourmet_recent_product_interaction = '',\n    db.dentalife_recent_product_interaction = '',\n    db.bakers_recent_product_interaction = '',\n    db.felix_recent_product_interaction = '',\n    db.adventuros_recent_product_interaction = '',\n    db.go_cat_recent_product_interaction = '',\n    db.delibakie_recent_product_interaction = '',\n    db.winalot_recent_product_interaction = '',\n    db.bonio_recent_product_interaction = '',\n    db.purina_master_brand_recent_product_interaction = '',\n    db.puppy_owner = '',\n    db.kitten_owner = '',\n    db.adult_dog_owner = '',\n    db.adult_cat_owner = '',\n    db.senior_dog_owner = '',\n    db.senior_cat_owner = '',\n    db.multi_cat = '',\n    db.multi_dog = '',\n    db.xsmall_dog = '', -- npp07795_pet_size_addition\n    db.small_dog = '', -- npp07795_pet_size_addition\n    db.medium_dog = '', -- npp07795_pet_size_addition\n    db.large_dog = '', -- npp07795_pet_size_addition\n    db.xlarge_dog = '', -- npp07795_pet_size_addition\n    db.growing_pup_member = '',\n    db.reconsent_status = '',\n    db.pet_ownership_segment = '',\n    db.gender = '',\n    db.age = '',\n    db.engagement_cluster = '',\n    db.email_engagement_recency = '',\n    db.updated_date = current_date\nwhere customerid not in (\n                            select distinct\n                                customerid\n                            from ${Database}.temp.npp_live_ramp_all_eligible\n                        );\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'npp_live_ramp',\n    'blanking records merge',\n    cast((select count(*) from ${Database}.db.npp_live_ramp where updated_date = current_date and email_engagement_recency = '') as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n/******************************************************************************************\n   OUTPUT\n******************************************************************************************/\n\n--if merges run successfully but file export fails then below will need to be amended to mop up going back to date of last export\ncreate or replace table ${Database}.jobs.npp_live_ramp_final_output_opt_in\nas\nselect\n    customerid,\n    trim(firstname) as firstname,\n    trim(lastname) as lastname,\n    trim(address1) as address1,\n    trim(address2) as address2,\n    trim(address3) as address3,\n    trim(town) as town,\n    trim(county) as county,\n    trim(postcode) as postcode,\n    trim(email1) as email1,\n    trim(opt_in) as opt_in,\n    trim(pro_plan_consumer) as pro_plan_consumer,\n    trim(beta_consumer) as beta_consumer,\n    trim(purina_one_consumer) as purina_one_consumer,\n    trim(my_dog_is_consumer) as my_dog_is_consumer,\n    trim(beyond_consumer) as beyond_consumer,\n    trim(gourmet_consumer) as gourmet_consumer,\n    trim(dentalife_consumer) as dentalife_consumer,\n    trim(bakers_consumer) as bakers_consumer,\n    trim(felix_consumer) as felix_consumer,\n    trim(adventuros_consumer) as adventuros_consumer,\n    trim(go_cat_consumer) as go_cat_consumer,\n    trim(delibakie_consumer) as delibakie_consumer,\n    trim(winalot_consumer) as winalot_consumer,\n    trim(bonio_consumer) as bonio_consumer,\n    trim(purina_master_brand_consumer) as purina_master_brand_consumer,\n    trim(pro_plan_recent_product_interaction) as pro_plan_recent_product_interaction,\n    trim(beta_recent_product_interaction) as beta_recent_product_interaction,\n    trim(purina_one_recent_product_interaction) as purina_one_recent_product_interaction,\n    trim(my_dog_is_recent_product_interaction) as my_dog_is_recent_product_interaction,\n    trim(beyond_recent_product_interaction) as beyond_recent_product_interaction,\n    trim(gourmet_recent_product_interaction) as gourmet_recent_product_interaction,\n    trim(dentalife_recent_product_interaction) as dentalife_recent_product_interaction,\n    trim(bakers_recent_product_interaction) as bakers_recent_product_interaction,\n    trim(felix_recent_product_interaction) as felix_recent_product_interaction,\n    trim(adventuros_recent_product_interaction) as adventuros_recent_product_interaction,\n    trim(go_cat_recent_product_interaction) as go_cat_recent_product_interaction,\n    trim(delibakie_recent_product_interaction) as delibakie_recent_product_interaction,\n    trim(winalot_recent_product_interaction) as winalot_recent_product_interaction,\n    trim(bonio_recent_product_interaction) as bonio_recent_product_interaction,\n    trim(purina_master_brand_recent_product_interaction) as purina_master_brand_recent_product_interaction,\n    trim(puppy_owner) as puppy_owner,\n    trim(kitten_owner) as kitten_owner,\n    trim(adult_dog_owner) as adult_dog_owner,\n    trim(adult_cat_owner) as adult_cat_owner,\n    trim(senior_dog_owner) as senior_dog_owner,\n    trim(senior_cat_owner) as senior_cat_owner,\n    trim(multi_cat) as multi_cat,\n    trim(multi_dog) as multi_dog,\n    trim(xsmall_dog) as xsmall_dog, -- npp07795_pet_size_addition\n    trim(small_dog) as small_dog, -- npp07795_pet_size_addition\n    trim(medium_dog) as medium_dog, -- npp07795_pet_size_addition\n    trim(large_dog) as large_dog, -- npp07795_pet_size_addition\n    trim(xlarge_dog) as xlarge_dog, -- npp07795_pet_size_addition\n    trim(growing_pup_member) as growing_pup_member,\n    trim(reconsent_status) as reconsent_status,\n    trim(pet_ownership_segment) as pet_ownership_segment,\n    trim(gender) as gender,\n    trim(age) as age,\n    trim(engagement_cluster) as engagement_cluster,\n    trim(email_engagement_recency) as email_engagement_recency\nfrom ${Database}.db.npp_live_ramp\nwhere updated_date = current_date\n    and trim(opt_in) = 'Y';\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'npp_live_ramp_final_output_opt_in',\n    'total records',\n    cast((select count(*) from ${Database}.jobs.npp_live_ramp_final_output_opt_in) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\ncreate or replace table ${Database}.jobs.npp_live_ramp_final_output_opt_out\nas\nselect\n    customerid,\n    trim(firstname) as firstname,\n    trim(lastname) as lastname,\n    trim(address1) as address1,\n    trim(address2) as address2,\n    trim(address3) as address3,\n    trim(town) as town,\n    trim(county) as county,\n    trim(postcode) as postcode,\n    trim(email1) as email1,\n    trim(opt_in) as opt_in,\n    trim(pro_plan_consumer) as pro_plan_consumer,\n    trim(beta_consumer) as beta_consumer,\n    trim(purina_one_consumer) as purina_one_consumer,\n    trim(my_dog_is_consumer) as my_dog_is_consumer,\n    trim(beyond_consumer) as beyond_consumer,\n    trim(gourmet_consumer) as gourmet_consumer,\n    trim(dentalife_consumer) as dentalife_consumer,\n    trim(bakers_consumer) as bakers_consumer,\n    trim(felix_consumer) as felix_consumer,\n    trim(adventuros_consumer) as adventuros_consumer,\n    trim(go_cat_consumer) as go_cat_consumer,\n    trim(delibakie_consumer) as delibakie_consumer,\n    trim(winalot_consumer) as winalot_consumer,\n    trim(bonio_consumer) as bonio_consumer,\n    trim(purina_master_brand_consumer) as purina_master_brand_consumer,\n    trim(pro_plan_recent_product_interaction) as pro_plan_recent_product_interaction,\n    trim(beta_recent_product_interaction) as beta_recent_product_interaction,\n    trim(purina_one_recent_product_interaction) as purina_one_recent_product_interaction,\n    trim(my_dog_is_recent_product_interaction) as my_dog_is_recent_product_interaction,\n    trim(beyond_recent_product_interaction) as beyond_recent_product_interaction,\n    trim(gourmet_recent_product_interaction) as gourmet_recent_product_interaction,\n    trim(dentalife_recent_product_interaction) as dentalife_recent_product_interaction,\n    trim(bakers_recent_product_interaction) as bakers_recent_product_interaction,\n    trim(felix_recent_product_interaction) as felix_recent_product_interaction,\n    trim(adventuros_recent_product_interaction) as adventuros_recent_product_interaction,\n    trim(go_cat_recent_product_interaction) as go_cat_recent_product_interaction,\n    trim(delibakie_recent_product_interaction) as delibakie_recent_product_interaction,\n    trim(winalot_recent_product_interaction) as winalot_recent_product_interaction,\n    trim(bonio_recent_product_interaction) as bonio_recent_product_interaction,\n    trim(purina_master_brand_recent_product_interaction) as purina_master_brand_recent_product_interaction,\n    trim(puppy_owner) as puppy_owner,\n    trim(kitten_owner) as kitten_owner,\n    trim(adult_dog_owner) as adult_dog_owner,\n    trim(adult_cat_owner) as adult_cat_owner,\n    trim(senior_dog_owner) as senior_dog_owner,\n    trim(senior_cat_owner) as senior_cat_owner,\n    trim(multi_cat) as multi_cat,\n    trim(multi_dog) as multi_dog,\n    trim(xsmall_dog) as xsmall_dog, -- npp07795_pet_size_addition\n    trim(small_dog) as small_dog, -- npp07795_pet_size_addition\n    trim(medium_dog) as medium_dog, -- npp07795_pet_size_addition\n    trim(large_dog) as large_dog, -- npp07795_pet_size_addition\n    trim(xlarge_dog) as xlarge_dog, -- npp07795_pet_size_addition\n    trim(growing_pup_member) as growing_pup_member,\n    trim(reconsent_status) as reconsent_status,\n    trim(pet_ownership_segment) as pet_ownership_segment,\n    trim(gender) as gender,\n    trim(age) as age,\n    trim(engagement_cluster) as engagement_cluster,\n    trim(email_engagement_recency) as email_engagement_recency\nfrom ${Database}.db.npp_live_ramp\nwhere updated_date = current_date\n    and trim(opt_in) = 'N';\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'npp_live_ramp_final_output_opt_out',\n    'total records',\n    cast((select count(*) from ${Database}.jobs.npp_live_ramp_final_output_opt_out) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n-- ================================================================================================\n--                                          NESCAFE\n-- ================================================================================================\n\n\n/******************************************************************************************\n   LOOKUPS\n******************************************************************************************/\n\n--email addresses and opt-in status (roll up to cid level based on brand hierarchy)\ncreate or replace table ${Database}.temp.nuk_nescafe_live_ramp_opted_in_flag as\nselect distinct\n    cb.cid,\n    first_value(case when cb.emailable = 1 then 'Y' else 'N' end) over\n        (\n            partition by cb.cid\n            order by cb.emailable desc\n        ) as opt_in,\n    first_value(xr.email) over\n        (\n            partition by cb.cid\n            order by cb.emailable desc\n        ) as email\nfrom ${Database}.live.cid_brand cb\ninner join ${Database}.live.ref_brand rb on cb.brand_id = rb.brand_id\ninner join ${Database}.live.xref_email xr on xr.bbw_urn = cast(split_part(cb.cid_brand_urn,'-',1) as int)\nwhere cb.brand_id in (select brand_id from ${Database}.live.ref_brand where brand in ('Nescafe','Nescafe Azera','Nescafe Gold','Nescafe Original') and lower(division) regexp '.*beverage.*') --don't want any other similarly named Nescafe brands in here\n    and (cb.brand_preference = 1 or (cb.brand_engagement = 1 and cb.brand_preference <> 0))\n    and cb.customer_retention_date_brand >= add_months(current_date,-24);\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'nuk_nescafe_live_ramp_opted_in_flag',\n    'total records',\n    cast((select count(*) from ${Database}.temp.nuk_nescafe_live_ramp_opted_in_flag) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n/******************************************************************************************\n   BASE TABLE\n******************************************************************************************/\n\n--get table with all consumers and pets\ncreate or replace table ${Database}.temp.nuk_nescafe_live_ramp_prep\nas\nselect distinct\n    cid.bbw_urn as customerid,\n    cd.cid,\n    cd.firstname,\n    cd.lastname,\n    cd.add1 as address1,\n    cd.add2 as address2,\n    cd.add3 as address3,\n    cd.town,\n    cd.county,\n    cd.postcode,\n    coalesce(opt.email,'') as email1,\n    coalesce(opt.opt_in,'N') as opt_in,\n    first_value(case when rb.brand = 'Nescafe' then 'Y' else 'N' end) over(partition by cb.cid order by case when rb.brand = 'Nescafe' then 0 else 1 end) as nescafe,\n    first_value(case when rb.brand = 'Nescafe Azera' then 'Y' else 'N' end) over(partition by cb.cid order by case when rb.brand = 'Nescafe Azera' then 0 else 1 end) as nescafe_gold,\n    first_value(case when rb.brand = 'Nescafe Gold' then 'Y' else 'N' end) over(partition by cb.cid order by case when rb.brand = 'Nescafe Gold' then 0 else 1 end) as nescafe_azera,\n    first_value(case when rb.brand = 'Nescafe Original' then 'Y' else 'N' end) over(partition by cb.cid order by case when rb.brand = 'Nescafe Original' then 0 else 1 end) as nescafe_original,\n    'N' as nescafe_buy_now,               --From v1 brief: NB. We do not currently hold any coupon interaction data but we should plan to add this in due course\n    'N' as nescafe_gold_buy_now,          --From v1 brief: NB. We do not currently hold any coupon interaction data but we should plan to add this in due course\n    'N' as nescafe_azera_buy_now,         --From v1 brief: NB. We do not currently hold any coupon interaction data but we should plan to add this in due course\n    'N' as nescafe_original_buy_now,      --From v1 brief: NB. We do not currently hold any coupon interaction data but we should plan to add this in due course\n    first_value(case when rr.cid is not null and rb.brand = 'Nescafe' then 'Y' else 'N' end) over(partition by cd.cid order by case when rr.cid is not null and rb.brand = 'Nescafe' then 0 else 1 end) as nescafe_rr,\n    first_value(case when rr.cid is not null and rb.brand = 'Nescafe Azera' then 'Y' else 'N' end) over(partition by cd.cid order by case when rr.cid is not null and rb.brand = 'Nescafe Azera' then 0 else 1 end) as nescafe_gold_rr,\n    first_value(case when rr.cid is not null and rb.brand = 'Nescafe Gold' then 'Y' else 'N' end) over(partition by cd.cid order by case when rr.cid is not null and rb.brand = 'Nescafe Gold' then 0 else 1 end) as nescafe_azera_rr,\n    first_value(case when rr.cid is not null and rb.brand = 'Nescafe Original' then 'Y' else 'N' end) over(partition by cd.cid order by case when rr.cid is not null and rb.brand = 'Nescafe Original' then 0 else 1 end) as nescafe_original_rr,\n    'N' as nescafe_sample,                --From v1 brief: NB. We do not currently hold any coupon interaction data but we should plan to add this in due course\n    'N' as nescafe_gold_sample,           --From v1 brief: NB. We do not currently hold any coupon interaction data but we should plan to add this in due course\n    'N' as nescafe_azera_sample,          --From v1 brief: NB. We do not currently hold any coupon interaction data but we should plan to add this in due course\n    'N' as nescafe_original_sample,       --From v1 brief: NB. We do not currently hold any coupon interaction data but we should plan to add this in due course\n    'N' as nescafe_coupon,                --From v1 brief: NB. We do not currently hold any coupon interaction data but we should plan to add this in due course\n    'N' as nescafe_gold_coupon,           --From v1 brief: NB. We do not currently hold any coupon interaction data but we should plan to add this in due course\n    'N' as nescafe_azera_coupon,          --From v1 brief: NB. We do not currently hold any coupon interaction data but we should plan to add this in due course\n    'N' as nescafe_original_coupon,       --From v1 brief: NB. We do not currently hold any coupon interaction data but we should plan to add this in due course\n    case when ae.nescafe_product_click  = 1 then 'Y' else 'N' end as nescafe_product_click,\n    case when ae.nescafe_gold_product_click  = 1 then 'Y' else 'N' end as nescafe_azera_product_click,\n    case when ae.nescafe_azera_product_click  = 1 then 'Y' else 'N' end as nescafe_gold_product_click,\n    case when ae.nescafe_original_product_click  = 1 then 'Y' else 'N' end as nescafe_original_product_click,\n    first_value(case\n                    when cb.customer_retention_date_brand > add_months(current_date,-1)                                                                       then '0_1m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-2) and cb.customer_retention_date_brand <= add_months(current_date,-1)   then '1_2m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-3) and cb.customer_retention_date_brand <= add_months(current_date,-2)   then '2_3m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-4) and cb.customer_retention_date_brand <= add_months(current_date,-3)   then '3_4m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-5) and cb.customer_retention_date_brand <= add_months(current_date,-4)   then '4_5m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-6) and cb.customer_retention_date_brand <= add_months(current_date,-5)   then '5_6m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-7) and cb.customer_retention_date_brand <= add_months(current_date,-6)   then '6_7m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-8) and cb.customer_retention_date_brand <= add_months(current_date,-7)   then '7_8m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-9) and cb.customer_retention_date_brand <= add_months(current_date,-8)   then '8_9m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-10) and cb.customer_retention_date_brand <= add_months(current_date,-9)  then '9_10m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-11) and cb.customer_retention_date_brand <= add_months(current_date,-10) then '10_11m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-12) and cb.customer_retention_date_brand <= add_months(current_date,-11) then '11_12m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-13) and cb.customer_retention_date_brand <= add_months(current_date,-12) then '12_13m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-14) and cb.customer_retention_date_brand <= add_months(current_date,-13) then '13_14m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-15) and cb.customer_retention_date_brand <= add_months(current_date,-14) then '14_15m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-16) and cb.customer_retention_date_brand <= add_months(current_date,-15) then '15_16m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-17) and cb.customer_retention_date_brand <= add_months(current_date,-16) then '16_17m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-18) and cb.customer_retention_date_brand <= add_months(current_date,-17) then '17_18m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-19) and cb.customer_retention_date_brand <= add_months(current_date,-18) then '18_19m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-20) and cb.customer_retention_date_brand <= add_months(current_date,-19) then '19_20m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-21) and cb.customer_retention_date_brand <= add_months(current_date,-20) then '20_21m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-22) and cb.customer_retention_date_brand <= add_months(current_date,-21) then '21_22m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-23) and cb.customer_retention_date_brand <= add_months(current_date,-22) then '22_23m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-24) and cb.customer_retention_date_brand <= add_months(current_date,-23) then '23_24m'\n                    else ''\n                end) over (partition by cb.cid order by cb.customer_retention_date_brand desc) as data_retention_recency,\n    '' as engagement_score, --From v1 brief: NB. Engagement scoring doesn't yet exist but we should plan to add this in due course\n    first_value(case\n                    when cb.last_email_open_date_brand > add_months(current_date,-1)                                                                    then '0_1m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-2) and cb.last_email_open_date_brand <= add_months(current_date,-1)   then '1_2m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-3) and cb.last_email_open_date_brand <= add_months(current_date,-2)   then '2_3m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-4) and cb.last_email_open_date_brand <= add_months(current_date,-3)   then '3_4m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-5) and cb.last_email_open_date_brand <= add_months(current_date,-4)   then '4_5m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-6) and cb.last_email_open_date_brand <= add_months(current_date,-5)   then '5_6m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-7) and cb.last_email_open_date_brand <= add_months(current_date,-6)   then '6_7m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-8) and cb.last_email_open_date_brand <= add_months(current_date,-7)   then '7_8m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-9) and cb.last_email_open_date_brand <= add_months(current_date,-8)   then '8_9m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-10) and cb.last_email_open_date_brand <= add_months(current_date,-9)  then '9_10m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-11) and cb.last_email_open_date_brand <= add_months(current_date,-10) then '10_11m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-12) and cb.last_email_open_date_brand <= add_months(current_date,-11) then '11_12m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-13) and cb.last_email_open_date_brand <= add_months(current_date,-12) then '12_13m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-14) and cb.last_email_open_date_brand <= add_months(current_date,-13) then '13_14m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-15) and cb.last_email_open_date_brand <= add_months(current_date,-14) then '14_15m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-16) and cb.last_email_open_date_brand <= add_months(current_date,-15) then '15_16m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-17) and cb.last_email_open_date_brand <= add_months(current_date,-16) then '16_17m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-18) and cb.last_email_open_date_brand <= add_months(current_date,-17) then '17_18m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-19) and cb.last_email_open_date_brand <= add_months(current_date,-18) then '18_19m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-20) and cb.last_email_open_date_brand <= add_months(current_date,-19) then '19_20m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-21) and cb.last_email_open_date_brand <= add_months(current_date,-20) then '20_21m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-22) and cb.last_email_open_date_brand <= add_months(current_date,-21) then '21_22m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-23) and cb.last_email_open_date_brand <= add_months(current_date,-22) then '22_23m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-24) and cb.last_email_open_date_brand <= add_months(current_date,-23) then '23_24m'\n                    else ''\n                end) over (partition by cb.cid order by cb.last_email_open_date_brand desc) as email_engagement_recency,\n    case\n        when cid.gender = 'M' then 'Male'\n        when cid.gender = 'F' then 'Female'\n        else 'Unknown'\n    end as gender,\n    coalesce(cast(datediff(year,cid.dob,current_date) as varchar),'') as age,\n    case\n        when lower(type_) regexp '.*black.*'                then 'Perfect purist'\n        when lower(type_) regexp '.*frothy and flavoured.*' then 'Frothy flavoured joy'\n        when lower(type_) regexp '.*frothy.*'               then 'Frothy joy'\n        when lower(type_) regexp '.*milk.*'                 then 'Dairy delight'\n        else ''\n    end as coffee_profiler_1,\n    case\n        when lower(intensity) regexp '.*dark.*'   then 'Full bodied'\n        when lower(intensity) regexp '.*medium.*' then 'Well rounded'\n        when lower(intensity) regexp '.*light.*'  then 'Deliciously delicate'\n        else ''\n    end as coffee_profiler_2,\n    case\n        when lower(purpose) regexp '.*get me up and going.*'        then 'Let''s go'\n        when lower(purpose) regexp '.*give myself a little treat.*' then 'You deserve it'\n        when lower(purpose) regexp '.*enjoy over a catch up.*'      then 'Get together'\n        when lower(purpose) regexp '.*get refreshed and go.*'       then 'Keep it up'\n        else ''\n    end as coffee_profiler_3,\n    case\n        when lower(time_) regexp '.*morning.*'   then 'Start the day'\n        when lower(time_) regexp '.*afternoon.*' then 'Keep on moving'\n        when lower(time_) regexp '.*evening.*'   then 'Relax'\n        when lower(time_) regexp '.*anytime.*'   then 'Can''t get enough'\n        else ''\n    end as coffee_profiler_4,\n    case\n        when lower(prof.type_) regexp '.*black.*' and lower(prof.intensity) regexp '.*dark.*'                  then 'Full-bodied, perfect purist'\n        when lower(prof.type_) regexp '.*black.*' and lower(prof.intensity) regexp '.*light.*'                 then 'Deliciously delicate, perfect purist'\n        when lower(prof.type_) regexp '.*black.*' and lower(prof.intensity) regexp '.*medium.*'                then 'Well-rounded, perfect purist'\n        when lower(prof.type_) regexp '.*frothy and flavoured.*' and lower(prof.intensity) regexp '.*dark.*'   then 'Full-bodied, frothy flavoured joy'\n        when lower(prof.type_) regexp '.*frothy and flavoured.*' and lower(prof.intensity) regexp '.*light.*'  then 'Deliciously delicate, frothy flavoured joy'\n        when lower(prof.type_) regexp '.*frothy and flavoured.*' and lower(prof.intensity) regexp '.*medium.*' then 'Well-rounded, frothy flavoured joy'\n        when lower(prof.type_) regexp '.*frothy.*' and lower(prof.intensity) regexp '.*dark.*'                 then 'Full-bodied, frothy joy'\n        when lower(prof.type_) regexp '.*frothy.*' and lower(prof.intensity) regexp '.*light.*'                then 'Deliciously delicate, frothy joy'\n        when lower(prof.type_) regexp '.*frothy.*' and lower(prof.intensity) regexp '.*medium.*'               then 'Well-rounded, frothy flavoured joy'\n        when lower(prof.type_) regexp '.*milk.*' and lower(prof.intensity) regexp '.*dark.*'                   then 'Full-bodied, dairy delight'\n        when lower(prof.type_) regexp '.*milk.*' and lower(prof.intensity) regexp '.*light.*'                  then 'Deliciously delicate, dairy delight'\n        when lower(prof.type_) regexp '.*milk.*' and lower(prof.intensity) regexp '.*medium.*'                 then 'Well-rounded, dairy delight'\n        else ''\n    end as coffee_profiler_segment\nfrom ${Database}.live.cid_details cd\ninner join ${Database}.live.cid cid on cd.cid = cid.cid\ninner join ${Database}.live.cid_brand cb on cd.cid = cb.cid\ninner join ${Database}.live.ref_brand rb on rb.brand_id = cb.brand_id\nleft join (\n              select distinct\n                  cid,\n                  brand_id\n              from ${Database}.live.cid_brand_question\n              where brand_id in (select brand_id from ${Database}.live.ref_brand where brand in ('Nescafe','Nescafe Azera','Nescafe Gold','Nescafe Original') and lower(division) regexp '.*beverage.*')\n                  and lower(question) regexp '.*overall rating of product.*'\n                  and answer_data_date >= add_months(current_date, -6)\n                  and answer in ('3','4','5')\n          ) rr on rr.cid = cd.cid\n              and rr.brand_id = cb.brand_id\nleft join (\n              select\n                  cid,\n                  0 as nescafe_product_click, --brief asks for this field but there aren't any generic Nescafe product links\n                  max(case when trim(split_part(links.link_label,'|',2)) = 'Product' and lower(split_part(links.link_label,'|',3)) regexp '.*gold.*' then 1 else 0 end) as nescafe_gold_product_click,\n                  max(case when trim(split_part(links.link_label,'|',2)) = 'Product' and lower(split_part(links.link_label,'|',3)) regexp '.*azera.*' then 1 else 0 end) as nescafe_azera_product_click,\n                  max(case when trim(split_part(links.link_label,'|',2)) = 'Product' and lower(split_part(links.link_label,'|',3)) regexp '.*original.*' then 1 else 0 end) as nescafe_original_product_click\n              from (\n                       select distinct\n                           cid,\n                           coalesce(rll.link_label, ae.link_label) as link_label\n                       from ${Database}.live.adestra_events ae\n                       left join ${Database}.db.comms_hist_lookup chl on lower(chl.campaign_id) = lower(ae.campaign_id)\n                       left join ${Database}.db.ref_link_label rll on rll.campaign_name = ae.adestra_campaign_name\n                                                             and rll.link_url = ae.link_url\n                       where chl.brand_id in (select brand_id from ${Database}.live.ref_brand where brand in ('Nescafe','Nescafe Azera','Nescafe Gold','Nescafe Original') and lower(division) regexp '.*beverage.*')\n                           and lower(ae.event_name) regexp '.*click.*'\n                           and ae.link_url > ''\n                           and event_timestamp >= add_months(current_date,-6)\n                   ) links\n              group by cid\n          ) ae on ae.cid = cb.cid\nleft join ${Database}.temp.nuk_nescafe_live_ramp_opted_in_flag opt on opt.cid = cb.cid\nleft join (\n              select\n                  cid,\n                  max(case when question = 'How do you like your coffee' then answer else '' end) as type_,\n                  max(case when question = 'What intensity do you prefer' then answer else '' end) as intensity,\n                  max(case when question = 'In what way do you require/want a coffee' then answer else '' end) as purpose,\n                  max(case when question = 'What time of day do you drink your coffee' then answer else '' end) as time_\n              from ${Database}.live.cid_brand_question cbq\n              where question in ('How do you like your coffee','What intensity do you prefer','In what way do you require/want a coffee','What time of day do you drink your coffee')\n              group by cid\n          ) prof on prof.cid = cb.cid\nwhere cb.brand_id in (select brand_id from ${Database}.live.ref_brand where brand in ('Nescafe','Nescafe Azera','Nescafe Gold','Nescafe Original') and lower(division) regexp '.*beverage.*')\n    and (cb.brand_preference = 1 or (cb.brand_engagement = 1 and cb.brand_preference <> 0))\n    and cb.customer_retention_date_brand >= add_months(current_date,-24);\n\ndrop table if exists ${Database}.temp.nuk_nescafe_live_ramp_opted_in_flag;\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'nuk_nescafe_live_ramp_prep',\n    'total records',\n    cast((select count(*) from ${Database}.temp.nuk_nescafe_live_ramp_prep) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n/******************************************************************************************\n   UPDATE DB TABLE\n******************************************************************************************/\n\n--Daily comparison against db table to add newly eligible or changed record\n--Will then dedupe to most recent record per bbw_urn (customerID)\n\nmerge into ${Database}.db.nuk_nescafe_live_ramp db\nusing ${Database}.temp.nuk_nescafe_live_ramp_prep lr on lr.customerid = db.customerid\n                                                    and trim(lr.firstname) = trim(db.firstname)\n                                                    and trim(lr.lastname) = trim(db.lastname)\n                                                    and trim(lr.address1) = trim(db.address1)\n                                                    and trim(lr.address2) = trim(db.address2)\n                                                    and trim(lr.address3) = trim(db.address3)\n                                                    and trim(lr.town) = trim(db.town)\n                                                    and trim(lr.county) = trim(db.county)\n                                                    and trim(lr.postcode) = trim(db.postcode)\n                                                    and trim(lr.email1) = trim(db.email1)\n                                                    and trim(lr.opt_in) = trim(db.opt_in)\n                                                    and trim(lr.nescafe) = trim(db.nescafe)\n                                                    and trim(lr.nescafe_gold) = trim(db.nescafe_gold)\n                                                    and trim(lr.nescafe_azera) = trim(db.nescafe_azera)\n                                                    and trim(lr.nescafe_original) = trim(db.nescafe_original)\n                                                    and trim(lr.nescafe_buy_now) = trim(db.nescafe_buy_now)\n                                                    and trim(lr.nescafe_gold_buy_now) = trim(db.nescafe_gold_buy_now)\n                                                    and trim(lr.nescafe_azera_buy_now) = trim(db.nescafe_azera_buy_now)\n                                                    and trim(lr.nescafe_original_buy_now) = trim(db.nescafe_original_buy_now)\n                                                    and trim(lr.nescafe_rr) = trim(db.nescafe_rr)\n                                                    and trim(lr.nescafe_gold_rr) = trim(db.nescafe_gold_rr)\n                                                    and trim(lr.nescafe_azera_rr) = trim(db.nescafe_azera_rr)\n                                                    and trim(lr.nescafe_original_rr) = trim(db.nescafe_original_rr)\n                                                    and trim(lr.nescafe_sample) = trim(db.nescafe_sample)\n                                                    and trim(lr.nescafe_gold_sample) = trim(db.nescafe_gold_sample)\n                                                    and trim(lr.nescafe_azera_sample) = trim(db.nescafe_azera_sample)\n                                                    and trim(lr.nescafe_original_sample) = trim(db.nescafe_original_sample)\n                                                    and trim(lr.nescafe_coupon) = trim(db.nescafe_coupon)\n                                                    and trim(lr.nescafe_gold_coupon) = trim(db.nescafe_gold_coupon)\n                                                    and trim(lr.nescafe_azera_coupon) = trim(db.nescafe_azera_coupon)\n                                                    and trim(lr.nescafe_original_coupon) = trim(db.nescafe_original_coupon)\n                                                    and trim(lr.nescafe_product_click) = trim(db.nescafe_product_click)\n                                                    and trim(lr.nescafe_gold_product_click) = trim(db.nescafe_gold_product_click)\n                                                    and trim(lr.nescafe_azera_product_click) = trim(db.nescafe_azera_product_click)\n                                                    and trim(lr.nescafe_original_product_click) = trim(db.nescafe_original_product_click)\n                                                    and trim(lr.data_retention_recency) = trim(db.data_retention_recency)\n                                                    and trim(lr.engagement_score) = trim(db.engagement_score)\n                                                    and trim(lr.email_engagement_recency) = trim(db.email_engagement_recency)\n                                                    and trim(lr.gender) = trim(db.gender)\n                                                    and trim(lr.age) = trim(db.age)\n                                                    and trim(lr.coffee_profiler_1) = trim(db.coffee_profiler_1)\n                                                    and trim(lr.coffee_profiler_2) = trim(db.coffee_profiler_2)\n                                                    and trim(lr.coffee_profiler_3) = trim(db.coffee_profiler_3)\n                                                    and trim(lr.coffee_profiler_4) = trim(db.coffee_profiler_4)\n                                                    and trim(lr.coffee_profiler_segment) = trim(db.coffee_profiler_segment)\nwhen not matched then insert\n(\n    customerid,\n    firstname,\n    lastname,\n    address1,\n    address2,\n    address3,\n    town,\n    county,\n    postcode,\n    email1,\n    opt_in,\n    nescafe,\n    nescafe_gold,\n    nescafe_azera,\n    nescafe_original,\n    nescafe_buy_now,\n    nescafe_gold_buy_now,\n    nescafe_azera_buy_now,\n    nescafe_original_buy_now,\n    nescafe_rr,\n    nescafe_gold_rr,\n    nescafe_azera_rr,\n    nescafe_original_rr,\n    nescafe_sample,\n    nescafe_gold_sample,\n    nescafe_azera_sample,\n    nescafe_original_sample,\n    nescafe_coupon,\n    nescafe_gold_coupon,\n    nescafe_azera_coupon,\n    nescafe_original_coupon,\n    nescafe_product_click,\n    nescafe_gold_product_click,\n    nescafe_azera_product_click,\n    nescafe_original_product_click,\n    data_retention_recency,\n    engagement_score,\n    email_engagement_recency,\n    gender,\n    age,\n    coffee_profiler_1,\n    coffee_profiler_2,\n    coffee_profiler_3,\n    coffee_profiler_4,\n    coffee_profiler_segment,\n    updated_date\n)\nvalues\n(\n    lr.customerid,\n    trim(lr.firstname),\n    trim(lr.lastname),\n    trim(lr.address1),\n    trim(lr.address2),\n    trim(lr.address3),\n    trim(lr.town),\n    trim(lr.county),\n    trim(lr.postcode),\n    trim(lr.email1),\n    trim(lr.opt_in),\n    trim(lr.nescafe),\n    trim(lr.nescafe_gold),\n    trim(lr.nescafe_azera),\n    trim(lr.nescafe_original),\n    trim(lr.nescafe_buy_now),\n    trim(lr.nescafe_gold_buy_now),\n    trim(lr.nescafe_azera_buy_now),\n    trim(lr.nescafe_original_buy_now),\n    trim(lr.nescafe_rr),\n    trim(lr.nescafe_gold_rr),\n    trim(lr.nescafe_azera_rr),\n    trim(lr.nescafe_original_rr),\n    trim(lr.nescafe_sample),\n    trim(lr.nescafe_gold_sample),\n    trim(lr.nescafe_azera_sample),\n    trim(lr.nescafe_original_sample),\n    trim(lr.nescafe_coupon),\n    trim(lr.nescafe_gold_coupon),\n    trim(lr.nescafe_azera_coupon),\n    trim(lr.nescafe_original_coupon),\n    trim(lr.nescafe_product_click),\n    trim(lr.nescafe_gold_product_click),\n    trim(lr.nescafe_azera_product_click),\n    trim(lr.nescafe_original_product_click),\n    trim(lr.data_retention_recency),\n    trim(lr.engagement_score),\n    trim(lr.email_engagement_recency),\n    trim(lr.gender),\n    trim(lr.age),\n    trim(lr.coffee_profiler_1),\n    trim(lr.coffee_profiler_2),\n    trim(lr.coffee_profiler_3),\n    trim(lr.coffee_profiler_4),\n    trim(lr.coffee_profiler_segment),\n    current_date\n);\n\n\n--remove older records for people who have been updated\ndelete from ${Database}.db.nuk_nescafe_live_ramp\nwhere customerid in (\n                        select distinct\n                            customerid\n                        from ${Database}.db.nuk_nescafe_live_ramp\n                        group by customerid\n                        having count(*) > 1\n                    )\nand updated_date <> current_date;\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'nuk_nescafe_live_ramp',\n    'insert merge',\n    cast((select count(*) from ${Database}.db.nuk_nescafe_live_ramp where updated_date = current_date) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n--blank out all records for people no longer picked up by cid_brand (i.e. RTBF or fallen out of data retention)\nupdate ${Database}.db.nuk_nescafe_live_ramp db\nset db.firstname = '',\n    db.lastname = '',\n    db.address1 = '',\n    db.address2 = '',\n    db.address3 = '',\n    db.town = '',\n    db.county = '',\n    db.postcode = '',\n    db.email1 = '',\n    db.opt_in = '',\n    db.nescafe = '',\n    db.nescafe_gold = '',\n    db.nescafe_azera = '',\n    db.nescafe_original = '',\n    db.nescafe_buy_now = '',\n    db.nescafe_gold_buy_now = '',\n    db.nescafe_azera_buy_now = '',\n    db.nescafe_original_buy_now = '',\n    db.nescafe_RR = '',\n    db.nescafe_gold_RR = '',\n    db.nescafe_azera_RR = '',\n    db.nescafe_original_RR = '',\n    db.nescafe_sample = '',\n    db.nescafe_gold_sample = '',\n    db.nescafe_azera_sample = '',\n    db.nescafe_original_sample = '',\n    db.nescafe_coupon = '',\n    db.nescafe_gold_coupon = '',\n    db.nescafe_azera_coupon = '',\n    db.nescafe_original_coupon = '',\n    db.nescafe_product_click = '',\n    db.nescafe_gold_product_click = '',\n    db.nescafe_azera_product_click = '',\n    db.nescafe_original_product_click = '',\n    db.data_retention_recency = '',\n    db.engagement_score = '',\n    db.email_engagement_recency = '',\n    db.gender = '',\n    db.age = '',\n    db.coffee_profiler_1 = '',\n    db.coffee_profiler_2 = '',\n    db.coffee_profiler_3 = '',\n    db.coffee_profiler_4 = '',\n    db.coffee_profiler_segment = '',\n    db.updated_date = current_date\nwhere customerid not in (\n                            select distinct\n                                customerid\n                            from ${Database}.temp.nuk_nescafe_live_ramp_prep\n                        );\n\ndrop table if exists ${Database}.temp.nuk_nescafe_live_ramp_prep;\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'nuk_nescafe_live_ramp',\n    'blanking records merge',\n    cast((select count(*) from ${Database}.db.nuk_nescafe_live_ramp where updated_date = current_date and email_engagement_recency = '') as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n/******************************************************************************************\n   OUTPUT\n******************************************************************************************/\n\n--if merges run successfully but file export fails then below will need to be amended to mop up going back to date of last export\ncreate or replace table ${Database}.jobs.nuk_nescafe_live_ramp_final_output_opt_in\nas\nselect\n    customerid,\n    trim(firstname) as firstname,\n    trim(lastname) as lastname,\n    trim(address1) as address1,\n    trim(address2) as address2,\n    trim(address3) as address3,\n    trim(town) as town,\n    trim(county) as county,\n    trim(postcode) as postcode,\n    trim(email1) as email1,\n    trim(opt_in) as opt_in,\n    trim(nescafe) as nescafe,\n    trim(nescafe_gold) as nescafe_gold,\n    trim(nescafe_azera) as nescafe_azera,\n    trim(nescafe_original) as nescafe_original,\n    trim(nescafe_buy_now) as nescafe_buy_now,\n    trim(nescafe_gold_buy_now) as nescafe_gold_buy_now,\n    trim(nescafe_azera_buy_now) as nescafe_azera_buy_now,\n    trim(nescafe_original_buy_now) as nescafe_original_buy_now,\n    trim(nescafe_rr) as nescafe_rr,\n    trim(nescafe_gold_rr) as nescafe_gold_rr,\n    trim(nescafe_azera_rr) as nescafe_azera_rr,\n    trim(nescafe_original_rr) as nescafe_original_rr,\n    trim(nescafe_sample) as nescafe_sample,\n    trim(nescafe_gold_sample) as nescafe_gold_sample,\n    trim(nescafe_azera_sample) as nescafe_azera_sample,\n    trim(nescafe_original_sample) as nescafe_original_sample,\n    trim(nescafe_coupon) as nescafe_coupon,\n    trim(nescafe_gold_coupon) as nescafe_gold_coupon,\n    trim(nescafe_azera_coupon) as nescafe_azera_coupon,\n    trim(nescafe_original_coupon) as nescafe_original_coupon,\n    trim(nescafe_product_click) as nescafe_product_click,\n    trim(nescafe_gold_product_click) as nescafe_gold_product_click,\n    trim(nescafe_azera_product_click) as nescafe_azera_product_click,\n    trim(nescafe_original_product_click) as nescafe_original_product_click,\n    trim(data_retention_recency) as data_retention_recency,\n    trim(engagement_score) as engagement_score,\n    trim(email_engagement_recency) as email_engagement_recency,\n    trim(gender) as gender,\n    trim(age) as age,\n    trim(coffee_profiler_1) as coffee_profiler_1,\n    trim(coffee_profiler_2) as coffee_profiler_2,\n    trim(coffee_profiler_3) as coffee_profiler_3,\n    trim(coffee_profiler_4) as coffee_profiler_4,\n    trim(coffee_profiler_segment) as coffee_profiler_segment\nfrom ${Database}.db.nuk_nescafe_live_ramp\nwhere updated_date = current_date\nand trim(opt_in) = 'Y';\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'nuk_nescafe_live_ramp_final_output_opt_in',\n    'total records',\n    cast((select count(*) from ${Database}.jobs.nuk_nescafe_live_ramp_final_output_opt_in) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\ncreate or replace table ${Database}.jobs.nuk_nescafe_live_ramp_final_output_opt_out\nas\nselect\n    customerid,\n    trim(firstname) as firstname,\n    trim(lastname) as lastname,\n    trim(address1) as address1,\n    trim(address2) as address2,\n    trim(address3) as address3,\n    trim(town) as town,\n    trim(county) as county,\n    trim(postcode) as postcode,\n    trim(email1) as email1,\n    trim(opt_in) as opt_in,\n    trim(nescafe) as nescafe,\n    trim(nescafe_gold) as nescafe_gold,\n    trim(nescafe_azera) as nescafe_azera,\n    trim(nescafe_original) as nescafe_original,\n    trim(nescafe_buy_now) as nescafe_buy_now,\n    trim(nescafe_gold_buy_now) as nescafe_gold_buy_now,\n    trim(nescafe_azera_buy_now) as nescafe_azera_buy_now,\n    trim(nescafe_original_buy_now) as nescafe_original_buy_now,\n    trim(nescafe_rr) as nescafe_rr,\n    trim(nescafe_gold_rr) as nescafe_gold_rr,\n    trim(nescafe_azera_rr) as nescafe_azera_rr,\n    trim(nescafe_original_rr) as nescafe_original_rr,\n    trim(nescafe_sample) as nescafe_sample,\n    trim(nescafe_gold_sample) as nescafe_gold_sample,\n    trim(nescafe_azera_sample) as nescafe_azera_sample,\n    trim(nescafe_original_sample) as nescafe_original_sample,\n    trim(nescafe_coupon) as nescafe_coupon,\n    trim(nescafe_gold_coupon) as nescafe_gold_coupon,\n    trim(nescafe_azera_coupon) as nescafe_azera_coupon,\n    trim(nescafe_original_coupon) as nescafe_original_coupon,\n    trim(nescafe_product_click) as nescafe_product_click,\n    trim(nescafe_gold_product_click) as nescafe_gold_product_click,\n    trim(nescafe_azera_product_click) as nescafe_azera_product_click,\n    trim(nescafe_original_product_click) as nescafe_original_product_click,\n    trim(data_retention_recency) as data_retention_recency,\n    trim(engagement_score) as engagement_score,\n    trim(email_engagement_recency) as email_engagement_recency,\n    trim(gender) as gender,\n    trim(age) as age,\n    trim(coffee_profiler_1) as coffee_profiler_1,\n    trim(coffee_profiler_2) as coffee_profiler_2,\n    trim(coffee_profiler_3) as coffee_profiler_3,\n    trim(coffee_profiler_4) as coffee_profiler_4,\n    trim(coffee_profiler_segment) as coffee_profiler_segment\nfrom ${Database}.db.nuk_nescafe_live_ramp\nwhere updated_date = current_date\nand trim(opt_in) = 'N';\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'nuk_nescafe_live_ramp_final_output_opt_out',\n    'total records',\n    cast((select count(*) from ${Database}.jobs.nuk_nescafe_live_ramp_final_output_opt_out) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n-- ================================================================================================\n--                                          CEREALS\n-- ================================================================================================\n\n\n/******************************************************************************************\n   LOOKUPS\n******************************************************************************************/\n\n--email addresses and opt-in status (roll up to cid level based on brand hierarchy)\ncreate or replace table ${Database}.temp.nuk_cereals_live_ramp_opted_in_flag as\nselect distinct\n    cb.cid,\n    first_value(case when cb.emailable = 1 then 'Y' else 'N' end) over\n        (\n            partition by cb.cid\n            order by cb.emailable desc\n        ) as opt_in,\n    first_value(xr.email) over\n        (\n            partition by cb.cid\n            order by cb.emailable desc\n        ) as email\nfrom ${Database}.live.cid_brand cb\ninner join ${Database}.live.ref_brand rb on cb.brand_id = rb.brand_id\ninner join ${Database}.live.xref_email xr on xr.bbw_urn = cast(split_part(cb.cid_brand_urn,'-',1) as int)\nleft join (\n              select distinct\n                  cid\n              from ${Database}.live.cid_business_unit\n              where business_unit_id = (select business_unit_id from ${Database}.live.ref_business_unit where business_unit = 'Cereal Partners UK')\n                  and first_date_business_unit is not null\n                  and customer_retention_date_business_unit >= add_months(current_date,-24)\n          ) cbu on cb.cid = cbu.cid\nwhere cb.brand_id in (select brand_id from ${Database}.live.ref_brand where division = 'CPUK') --don't want any other similarly named Nescafe brands in here\n    and ((cb.brand_preference = 1 or (cb.brand_engagement = 1 and cb.brand_preference <> 0)) or cbu.cid is not null)\n    and cb.customer_retention_date_brand >= add_months(current_date,-24);\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'nuk_cereals_live_ramp_opted_in_flag',\n    'total records',\n    cast((select count(*) from ${Database}.temp.nuk_cereals_live_ramp_opted_in_flag) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n/******************************************************************************************\n   BASE TABLE\n******************************************************************************************/\n\n--get table with all consumers and pets\ncreate or replace table ${Database}.temp.nuk_cereals_live_ramp_prep\nas\nselect distinct\n    cid.bbw_urn as customerid,\n    cd.cid,\n    cd.firstname,\n    cd.lastname,\n    cd.add1 as address1,\n    cd.add2 as address2,\n    cd.add3 as address3,\n    cd.town,\n    cd.county,\n    cd.postcode,\n    coalesce(opt.email,'') as email1,\n    coalesce(opt.opt_in,'N') as opt_in,\n    first_value(case when cbu.cid is not null then 'Y' else 'N' end) over(partition by cb.cid order by case when cbu.cid is not null then 0 else 1 end) as cereals_division,\n    first_value(case when cb.brand_preference = 1 and rb.brand = 'Shreddies' then 'Y' else 'N' end) over(partition by cb.cid order by case when cb.brand_preference = 1 and rb.brand = 'Shreddies' then 0 else 1 end) as shreddies,\n    first_value(case when cb.brand_preference = 1 and rb.brand = 'Cheerios' then 'Y' else 'N' end) over(partition by cb.cid order by case when cb.brand_preference = 1 and rb.brand = 'Cheerios' then 0 else 1 end) as cheerios,\n    first_value(case when cb.brand_preference = 1 and rb.brand = 'Shredded Wheat' then 'Y' else 'N' end) over(partition by cb.cid order by case when cb.brand_preference = 1 and rb.brand = 'Shredded Wheat' then 0 else 1 end) as shredded_wheat,\n    first_value(case when cb.brand_preference = 1 and rb.brand = 'GO FREE' then 'Y' else 'N' end) over(partition by cb.cid order by case when cb.brand_preference = 1 and rb.brand = 'GO FREE' then 0 else 1 end) as go_free,\n    first_value(case when cb.brand_preference = 1 and rb.brand = 'Curiously Cinnamon' then 'Y' else 'N' end) over(partition by cb.cid order by case when cb.brand_preference = 1 and rb.brand = 'Curiously Cinnamon' then 0 else 1 end) as curiously_cinnamon,\n    first_value(case when cb.brand_preference = 1 and rb.brand = 'Nesquik Cereal' then 'Y' else 'N' end) over(partition by cb.cid order by case when cb.brand_preference = 1 and rb.brand = 'Nesquik Cereal' then 0 else 1 end) as nesquik,\n    first_value(case when cb.brand_preference = 1 and rb.brand = 'NAT Bears' then 'Y' else 'N' end) over(partition by cb.cid order by case when cb.brand_preference = 1 and rb.brand = 'NAT Bears' then 0 else 1 end) as nat_bears,\n    first_value(case when cb.brand_preference = 1 and rb.brand = 'BOULDERS' then 'Y' else 'N' end) over(partition by cb.cid order by case when cb.brand_preference = 1 and rb.brand = 'BOULDERS' then 0 else 1 end) as boulders,\n    first_value(case when cb.brand_preference = 1 and rb.brand = 'BRAN FLAKES' then 'Y' else 'N' end) over(partition by cb.cid order by case when cb.brand_preference = 1 and rb.brand = 'BRAN FLAKES' then 0 else 1 end) as bran_flakes,\n    first_value(case when cb.brand_preference = 1 and rb.brand = 'CHEERIO OATS' then 'Y' else 'N' end) over(partition by cb.cid order by case when cb.brand_preference = 1 and rb.brand = 'CHEERIO OATS' then 0 else 1 end) as cheerio_oats,\n    first_value(case when cb.brand_preference = 1 and rb.brand = 'CORN FLAKES' then 'Y' else 'N' end) over(partition by cb.cid order by case when cb.brand_preference = 1 and rb.brand = 'CORN FLAKES' then 0 else 1 end) as cornflakes,\n    first_value(case when cb.brand_preference = 1 and rb.brand = 'CRISP RICE' then 'Y' else 'N' end) over(partition by cb.cid order by case when cb.brand_preference = 1 and rb.brand = 'CRISP RICE' then 0 else 1 end) as crisp_rice,\n    first_value(case when cb.brand_preference = 1 and rb.brand = 'CRUNCHY GRANOLA' then 'Y' else 'N' end) over(partition by cb.cid order by case when cb.brand_preference = 1 and rb.brand = 'CRUNCHY GRANOLA' then 0 else 1 end) as crunchy_granola,\n    first_value(case when cb.brand_preference = 1 and rb.brand = 'Clusters' then 'Y' else 'N' end) over(partition by cb.cid order by case when cb.brand_preference = 1 and rb.brand = 'Clusters' then 0 else 1 end) as clusters,\n    first_value(case when cb.brand_preference = 1 and rb.brand = 'Cookie Crisp' then 'Y' else 'N' end) over(partition by cb.cid order by case when cb.brand_preference = 1 and rb.brand = 'Cookie Crisp' then 0 else 1 end) as cookie_crisp,\n    first_value(case when cb.brand_preference = 1 and rb.brand = 'Golden Nuggets' then 'Y' else 'N' end) over(partition by cb.cid order by case when cb.brand_preference = 1 and rb.brand = 'Golden Nuggets' then 0 else 1 end) as golden_nuggets,\n    first_value(case when cb.brand_preference = 1 and rb.brand = 'Grahams' then 'Y' else 'N' end) over(partition by cb.cid order by case when cb.brand_preference = 1 and rb.brand = 'Grahams' then 0 else 1 end) as grahams,\n    first_value(case when cb.brand_preference = 1 and rb.brand = 'Lion Cereal' then 'Y' else 'N' end) over(partition by cb.cid order by case when cb.brand_preference = 1 and rb.brand = 'Lion Cereal' then 0 else 1 end) as lion_cereal,\n    first_value(case when cb.brand_preference = 1 and rb.brand = 'Oats & More' then 'Y' else 'N' end) over(partition by cb.cid order by case when cb.brand_preference = 1 and rb.brand = 'Oats & More' then 0 else 1 end) as oats_more,\n    first_value(case when cb.brand_preference = 1 and rb.brand = 'PIC A PAC' then 'Y' else 'N' end) over(partition by cb.cid order by case when cb.brand_preference = 1 and rb.brand = 'PIC A PAC' then 0 else 1 end) as pic_a_pac,\n    first_value(case when cb.brand_preference = 1 and rb.brand = 'RICE' then 'Y' else 'N' end) over(partition by cb.cid order by case when cb.brand_preference = 1 and rb.brand = 'RICE' then 0 else 1 end) as rice,\n    first_value(case when cb.brand_preference = 1 and rb.brand = 'Toffee Crisp Cereal' then 'Y' else 'N' end) over(partition by cb.cid order by case when cb.brand_preference = 1 and rb.brand = 'Toffee Crisp Cereal' then 0 else 1 end) as toffee_crisp_cereal,\n    first_value(case\n                    when cb.customer_retention_date_brand > add_months(current_date,-1)                                                                       then '0_1m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-2) and cb.customer_retention_date_brand <= add_months(current_date,-1)   then '1_2m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-3) and cb.customer_retention_date_brand <= add_months(current_date,-2)   then '2_3m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-4) and cb.customer_retention_date_brand <= add_months(current_date,-3)   then '3_4m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-5) and cb.customer_retention_date_brand <= add_months(current_date,-4)   then '4_5m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-6) and cb.customer_retention_date_brand <= add_months(current_date,-5)   then '5_6m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-7) and cb.customer_retention_date_brand <= add_months(current_date,-6)   then '6_7m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-8) and cb.customer_retention_date_brand <= add_months(current_date,-7)   then '7_8m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-9) and cb.customer_retention_date_brand <= add_months(current_date,-8)   then '8_9m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-10) and cb.customer_retention_date_brand <= add_months(current_date,-9)  then '9_10m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-11) and cb.customer_retention_date_brand <= add_months(current_date,-10) then '10_11m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-12) and cb.customer_retention_date_brand <= add_months(current_date,-11) then '11_12m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-13) and cb.customer_retention_date_brand <= add_months(current_date,-12) then '12_13m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-14) and cb.customer_retention_date_brand <= add_months(current_date,-13) then '13_14m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-15) and cb.customer_retention_date_brand <= add_months(current_date,-14) then '14_15m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-16) and cb.customer_retention_date_brand <= add_months(current_date,-15) then '15_16m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-17) and cb.customer_retention_date_brand <= add_months(current_date,-16) then '16_17m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-18) and cb.customer_retention_date_brand <= add_months(current_date,-17) then '17_18m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-19) and cb.customer_retention_date_brand <= add_months(current_date,-18) then '18_19m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-20) and cb.customer_retention_date_brand <= add_months(current_date,-19) then '19_20m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-21) and cb.customer_retention_date_brand <= add_months(current_date,-20) then '20_21m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-22) and cb.customer_retention_date_brand <= add_months(current_date,-21) then '21_22m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-23) and cb.customer_retention_date_brand <= add_months(current_date,-22) then '22_23m'\n                    when cb.customer_retention_date_brand > add_months(current_date,-24) and cb.customer_retention_date_brand <= add_months(current_date,-23) then '23_24m'\n                    else ''\n                end) over(partition by cb.cid order by cb.customer_retention_date_brand desc) as data_retention_recency,\n    '' as engagement_score, --From brief: NB. Engagement scoring doesn't yet exist but we should plan to add this in due course\n    first_value(case\n                    when cb.last_email_open_date_brand > add_months(current_date,-1)                                                                    then '0_1m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-2) and cb.last_email_open_date_brand <= add_months(current_date,-1)   then '1_2m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-3) and cb.last_email_open_date_brand <= add_months(current_date,-2)   then '2_3m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-4) and cb.last_email_open_date_brand <= add_months(current_date,-3)   then '3_4m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-5) and cb.last_email_open_date_brand <= add_months(current_date,-4)   then '4_5m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-6) and cb.last_email_open_date_brand <= add_months(current_date,-5)   then '5_6m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-7) and cb.last_email_open_date_brand <= add_months(current_date,-6)   then '6_7m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-8) and cb.last_email_open_date_brand <= add_months(current_date,-7)   then '7_8m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-9) and cb.last_email_open_date_brand <= add_months(current_date,-8)   then '8_9m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-10) and cb.last_email_open_date_brand <= add_months(current_date,-9)  then '9_10m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-11) and cb.last_email_open_date_brand <= add_months(current_date,-10) then '10_11m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-12) and cb.last_email_open_date_brand <= add_months(current_date,-11) then '11_12m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-13) and cb.last_email_open_date_brand <= add_months(current_date,-12) then '12_13m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-14) and cb.last_email_open_date_brand <= add_months(current_date,-13) then '13_14m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-15) and cb.last_email_open_date_brand <= add_months(current_date,-14) then '14_15m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-16) and cb.last_email_open_date_brand <= add_months(current_date,-15) then '15_16m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-17) and cb.last_email_open_date_brand <= add_months(current_date,-16) then '16_17m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-18) and cb.last_email_open_date_brand <= add_months(current_date,-17) then '17_18m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-19) and cb.last_email_open_date_brand <= add_months(current_date,-18) then '18_19m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-20) and cb.last_email_open_date_brand <= add_months(current_date,-19) then '19_20m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-21) and cb.last_email_open_date_brand <= add_months(current_date,-20) then '20_21m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-22) and cb.last_email_open_date_brand <= add_months(current_date,-21) then '21_22m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-23) and cb.last_email_open_date_brand <= add_months(current_date,-22) then '22_23m'\n                    when cb.last_email_open_date_brand > add_months(current_date,-24) and cb.last_email_open_date_brand <= add_months(current_date,-23) then '23_24m'\n                    else ''\n                end) over(partition by cb.cid order by cb.last_email_open_date_brand desc) as email_engagement_recency,\n    case when links.recent_buy_now_click = 'Y' then 'Y' else 'N' end as recent_buy_now_click,\n    'N' as recent_coupon_interaction,      --From v1 brief: NB. We do not currently hold any coupon interaction data but we should plan to add this in due course\n    case when n.recent_cashback_interaction = 'Y' then 'Y' else 'N' end as recent_cashback_interaction,          --from hashtings feed not live yet so all will be N\n    'N' as recent_sample_interaction,      --From v1 brief: NB. We do not currently hold any sample request data but we should plan to add this in due course\n    case\n        when cid.gender = 'M' then 'Male'\n        when cid.gender = 'F' then 'Female'\n        else 'Unknown'\n    end as gender,\n    coalesce(cast(datediff(year,cid.dob,current_date) as varchar),'') as age,\n    coalesce(prof.sustainability,'') as sustainability,\n    coalesce(prof.recycling,'') as recycling,\n    coalesce(prof.farming,'') as farming,\n    coalesce(prof.wholegrain,'') as wholegrain,\n    coalesce(prof.vegan,'') as vegan,\n    coalesce(prof.gluten_free,'') as gluten_free,\n    coalesce(prof.gut_health,'') as gut_health,\n    coalesce(prof.fitness,'') as fitness,\n    coalesce(prof.breakfast_general,'') as breakfast_general,\n    coalesce(prof.offers_discounts,'') as offers_discounts,\n    coalesce(prof.competitions,'') as competitions\nfrom ${Database}.live.cid_details cd\ninner join ${Database}.live.cid cid on cd.cid = cid.cid\ninner join ${Database}.live.cid_brand cb on cd.cid = cb.cid\ninner join ${Database}.live.ref_brand rb on rb.brand_id = cb.brand_id\ninner join ${Database}.temp.nuk_cereals_live_ramp_opted_in_flag opt on opt.cid = cb.cid\nleft join (\n              select distinct\n                  cid\n              from ${Database}.live.cid_business_unit\n              where business_unit_id = (select business_unit_id from ${Database}.live.ref_business_unit where business_unit = 'Cereal Partners UK')\n                 and emailable = 1\n                 and first_date_business_unit is not null\n          ) cbu on cd.cid = cbu.cid\nleft join (\n              select distinct\n                  cid,\n                  'Y' as recent_cashback_interaction\n              from ${Database}.live.names\n              where source = 'REG_HASHTINGS'\n          ) n on cd.cid = n.cid\nleft join (\n              select distinct\n                  cid,\n                  'Y' as recent_buy_now_click\n              from ${Database}.live.adestra_events ae\n              left join ${Database}.db.comms_hist_lookup chl on lower(chl.campaign_id) = lower(ae.campaign_id)\n              where chl.data_controller_id = 7\n                  and lower(ae.event_name) regexp '.*click.*'\n                  and (\n                          ae.link_url in (\n                                             'https://campaigns.adimo.co/campaigns/cpw/nat-bears/?touchpointIdentifier=ae082650-ee68-48cb-b9d4-9144ba557121',\n                                             'https://www.nestle-cereals.com/uk/en/wholegrain-less-november-0',\n                                             'https://get.adimo.co/cpukasdaemail',\n                                             'https://get.adimo.co/cpukmorrisonsemail',\n                                             'https://get.adimo.co/cpuktescoemail',\n                                             'https://www.nestle-cereals.com/uk/en/products-promotions/brands/cheerios-brand/honey-cheerios',\n                                             'https://www.nestle-cereals.com/uk/en/products-promotions/brands/shreddies-brand/coco-shreddies',\n                                             'https://www.nestle-cereals.com/uk/en/products-promotions/brands/shreddies-brand?a_open=18eb7908-a5bf-4626-89c1-3bbf2a831069',\n                                             'https://campaigns.adimo.co/campaigns/cpw/cpw-website/wtb/?touchpointIdentifier=b60e5837-23db-4021-9b63-b7c1655dde0b&altTouchpointIdentifier=e0d657e7-777f-4997-b8d1-83c11fbcc9c1'\n                                         )\n                       or\n                          (\n                              trim(split_part(ae.link_label, '|',2)) = 'Buy Now'\n                           and\n                              lower(split_part(ae.link_label, '|',3)) regexp '(.*)(shreddies|cheerios|shredded wheat|go free|curiously cinnamon|nesquik|nat bears|boulders|bran flakes|cheerio oats|corn flakes|crisp rice|crunchy granola|clusters|cookie crisp|golden nuggets|grahams|lion cereal|oats & more|pic a pac|rice|toffee crisp cereal|map)(.*)'\n                          )\n                      )\n                  and event_timestamp >= add_months(current_date,-6)\n          ) links on links.cid = cb.cid\nleft join (\n              select\n                  cid,\n                  max(case when question = 'Are you interested in sustainability?' then answer else '' end) as sustainability,\n                  max(case when question = 'Are you interested in recycling?' then answer else '' end) as recycling,\n                  max(case when question = 'Are you interested in farming?' then answer else '' end) as farming,\n                  max(case when question = 'Are you interested in wholegrain?' then answer else '' end) as wholegrain,\n                  max(case when question = 'Are you interested in vegan?' then answer else '' end) as vegan,\n                  max(case when question = 'Are you interested in glutenfree?' then answer else '' end) as gluten_free,\n                  max(case when question = 'Are you interested in guthealth?' then answer else '' end) as gut_health,\n                  max(case when question = 'Are you interested in fitness?' then answer else '' end) as fitness,\n                  max(case when question = 'Are you interested in breakfast?' then answer else '' end) as breakfast_general,\n                  max(case when question = 'Are you interested in promos?' then answer else '' end) as offers_discounts,\n                  max(case when question = 'Are you interested in comps?' then answer else '' end) as competitions\n              from ${Database}.live.cid_question cq\n              where question in (\n                                    'Are you interested in sustainability?',\n                                    'Are you interested in recycling?',\n                                    'Are you interested in farming?',\n                                    'Are you interested in wholegrain?',\n                                    'Are you interested in vegan?',\n                                    'Are you interested in glutenfree?',\n                                    'Are you interested in guthealth?',\n                                    'Are you interested in fitness?',\n                                    'Are you interested in breakfast?',\n                                    'Are you interested in promos?',\n                                    'Are you interested in comps?'\n                                )\n              group by cid\n          ) prof on prof.cid = cb.cid\nwhere cb.brand_id in (select brand_id from ${Database}.live.ref_brand where division = 'CPUK')\n    and ((cb.brand_preference = 1 or (cb.brand_engagement = 1 and cb.brand_preference <> 0)) or cbu.cid is not null)\n    and cb.customer_retention_date_brand > add_months(current_date,-24);\n\ndrop table if exists ${Database}.temp.nuk_cereals_live_ramp_opted_in_flag;\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'nuk_cereals_live_ramp_prep',\n    'total records',\n    cast((select count(*) from ${Database}.temp.nuk_cereals_live_ramp_prep) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n/******************************************************************************************\n   UPDATE DB TABLE\n******************************************************************************************/\n\n--Daily comparison against db table to add newly eligible or changed record\n--Will then dedupe to most recent record per bbw_urn (customerID)\n\nmerge into ${Database}.db.nuk_cereals_live_ramp db\nusing ${Database}.temp.nuk_cereals_live_ramp_prep lr on lr.customerid = db.customerid\n                                                    and trim(lr.firstname) = trim(db.firstname)\n                                                    and trim(lr.lastname) = trim(db.lastname)\n                                                    and trim(lr.address1) = trim(db.address1)\n                                                    and trim(lr.address2) = trim(db.address2)\n                                                    and trim(lr.address3) = trim(db.address3)\n                                                    and trim(lr.town) = trim(db.town)\n                                                    and trim(lr.county) = trim(db.county)\n                                                    and trim(lr.postcode) = trim(db.postcode)\n                                                    and trim(lr.email1) = trim(db.email1)\n                                                    and trim(lr.opt_in) = trim(db.opt_in)\n                                                    and trim(lr.cereals_division) = trim(db.cereals_division)\n                                                    and trim(lr.shreddies) = trim(db.shreddies)\n                                                    and trim(lr.cheerios) = trim(db.cheerios)\n                                                    and trim(lr.shredded_wheat) = trim(db.shredded_wheat)\n                                                    and trim(lr.go_free) = trim(db.go_free)\n                                                    and trim(lr.curiously_cinnamon) = trim(db.curiously_cinnamon)\n                                                    and trim(lr.nesquik) = trim(db.nesquik)\n                                                    and trim(lr.nat_bears) = trim(db.nat_bears)\n                                                    and trim(lr.boulders) = trim(db.boulders)\n                                                    and trim(lr.bran_flakes) = trim(db.bran_flakes)\n                                                    and trim(lr.cheerio_oats) = trim(db.cheerio_oats)\n                                                    and trim(lr.cornflakes) = trim(db.cornflakes)\n                                                    and trim(lr.crisp_rice) = trim(db.crisp_rice)\n                                                    and trim(lr.crunchy_granola) = trim(db.crunchy_granola)\n                                                    and trim(lr.clusters) = trim(db.clusters)\n                                                    and trim(lr.cookie_crisp) = trim(db.cookie_crisp)\n                                                    and trim(lr.golden_nuggets) = trim(db.golden_nuggets)\n                                                    and trim(lr.grahams) = trim(db.grahams)\n                                                    and trim(lr.lion_cereal) = trim(db.lion_cereal)\n                                                    and trim(lr.oats_more) = trim(db.oats_more)\n                                                    and trim(lr.pic_a_pac) = trim(db.pic_a_pac)\n                                                    and trim(lr.rice) = trim(db.rice)\n                                                    and trim(lr.toffee_crisp_cereal) = trim(db.toffee_crisp_cereal)\n                                                    and trim(lr.data_retention_recency) = trim(db.data_retention_recency)\n                                                    and trim(lr.engagement_score) = trim(db.engagement_score)\n                                                    and trim(lr.email_engagement_recency) = trim(db.email_engagement_recency)\n                                                    and trim(lr.recent_buy_now_click) = trim(db.recent_buy_now_click)\n                                                    and trim(lr.recent_coupon_interaction) = trim(db.recent_coupon_interaction)\n                                                    and trim(lr.recent_cashback_interaction) = trim(db.recent_cashback_interaction)\n                                                    and trim(lr.recent_sample_interaction) = trim(db.recent_sample_interaction)\n                                                    and trim(lr.gender) = trim(db.gender)\n                                                    and trim(lr.age) = trim(db.age)\n                                                    and trim(lr.sustainability) = trim(db.sustainability)\n                                                    and trim(lr.recycling) = trim(db.recycling)\n                                                    and trim(lr.farming) = trim(db.farming)\n                                                    and trim(lr.wholegrain) = trim(db.wholegrain)\n                                                    and trim(lr.vegan) = trim(db.vegan)\n                                                    and trim(lr.gluten_free) = trim(db.gluten_free)\n                                                    and trim(lr.gut_health) = trim(db.gut_health)\n                                                    and trim(lr.fitness) = trim(db.fitness)\n                                                    and trim(lr.breakfast_general) = trim(db.breakfast_general)\n                                                    and trim(lr.offers_discounts) = trim(db.offers_discounts)\n                                                    and trim(lr.competitions) = trim(db.competitions)\nwhen not matched then insert\n(\n    customerid,\n    firstname,\n    lastname,\n    address1,\n    address2,\n    address3,\n    town,\n    county,\n    postcode,\n    email1,\n    opt_in,\n    cereals_division,\n    shreddies,\n    cheerios,\n    shredded_wheat,\n    go_free,\n    curiously_cinnamon,\n    nesquik,\n    nat_bears,\n    boulders,\n    bran_flakes,\n    cheerio_oats,\n    cornflakes,\n    crisp_rice,\n    crunchy_granola,\n    clusters,\n    cookie_crisp,\n    golden_nuggets,\n    grahams,\n    lion_cereal,\n    oats_more,\n    pic_a_pac,\n    rice,\n    toffee_crisp_cereal,\n    data_retention_recency,\n    engagement_score,\n    email_engagement_recency,\n    recent_buy_now_click,\n    recent_coupon_interaction,\n    recent_cashback_interaction,\n    recent_sample_interaction,\n    gender,\n    age,\n    sustainability,\n    recycling,\n    farming,\n    wholegrain,\n    vegan,\n    gluten_free,\n    gut_health,\n    fitness,\n    breakfast_general,\n    offers_discounts,\n    competitions,\n    updated_date\n)\nvalues\n(\n    lr.customerid,\n    trim(lr.firstname),\n    trim(lr.lastname),\n    trim(lr.address1),\n    trim(lr.address2),\n    trim(lr.address3),\n    trim(lr.town),\n    trim(lr.county),\n    trim(lr.postcode),\n    trim(lr.email1),\n    trim(lr.opt_in),\n    trim(lr.cereals_division),\n    trim(lr.shreddies),\n    trim(lr.cheerios),\n    trim(lr.shredded_wheat),\n    trim(lr.go_free),\n    trim(lr.curiously_cinnamon),\n    trim(lr.nesquik),\n    trim(lr.nat_bears),\n    trim(lr.boulders),\n    trim(lr.bran_flakes),\n    trim(lr.cheerio_oats),\n    trim(lr.cornflakes),\n    trim(lr.crisp_rice),\n    trim(lr.crunchy_granola),\n    trim(lr.clusters),\n    trim(lr.cookie_crisp),\n    trim(lr.golden_nuggets),\n    trim(lr.grahams),\n    trim(lr.lion_cereal),\n    trim(lr.oats_more),\n    trim(lr.pic_a_pac),\n    trim(lr.rice),\n    trim(lr.toffee_crisp_cereal),\n    trim(lr.data_retention_recency),\n    trim(lr.engagement_score),\n    trim(lr.email_engagement_recency),\n    trim(lr.recent_buy_now_click),\n    trim(lr.recent_coupon_interaction),\n    trim(lr.recent_cashback_interaction),\n    trim(lr.recent_sample_interaction),\n    trim(lr.gender),\n    trim(lr.age),\n    trim(lr.sustainability),\n    trim(lr.recycling),\n    trim(lr.farming),\n    trim(lr.wholegrain),\n    trim(lr.vegan),\n    trim(lr.gluten_free),\n    trim(lr.gut_health),\n    trim(lr.fitness),\n    trim(lr.breakfast_general),\n    trim(lr.offers_discounts),\n    trim(lr.competitions),\n    current_date\n);\n\n\n--remove older records for people who have been updated\ndelete from ${Database}.db.nuk_cereals_live_ramp\nwhere customerid in (\n                        select distinct\n                            customerid\n                        from ${Database}.db.nuk_cereals_live_ramp\n                        group by customerid\n                        having count(*) > 1\n                    )\nand updated_date <> current_date;\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'nuk_cereals_live_ramp',\n    'insert merge',\n    cast((select count(*) from ${Database}.db.nuk_cereals_live_ramp where updated_date = current_date) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n--blank out all records for people no longer picked up by cid_brand (i.e. RTBF or fallen out of data retention)\nupdate ${Database}.db.nuk_cereals_live_ramp db\nset db.firstname = '',\n    db.lastname = '',\n    db.address1 = '',\n    db.address2 = '',\n    db.address3 = '',\n    db.town = '',\n    db.county = '',\n    db.postcode = '',\n    db.email1 = '',\n    db.opt_in = '',\n    db.cereals_division = '',\n    db.shreddies = '',\n    db.cheerios = '',\n    db.shredded_wheat = '',\n    db.go_free = '',\n    db.curiously_cinnamon = '',\n    db.nesquik = '',\n    db.nat_bears = '',\n    db.boulders = '',\n    db.bran_flakes = '',\n    db.cheerio_oats = '',\n    db.cornflakes = '',\n    db.crisp_rice = '',\n    db.crunchy_granola = '',\n    db.clusters = '',\n    db.cookie_crisp = '',\n    db.golden_nuggets = '',\n    db.grahams = '',\n    db.lion_cereal = '',\n    db.oats_more = '',\n    db.pic_a_pac = '',\n    db.rice = '',\n    db.toffee_crisp_cereal = '',\n    db.data_retention_recency = '',\n    db.engagement_score = '',\n    db.email_engagement_recency = '',\n    db.recent_buy_now_click = '',\n    db.recent_coupon_interaction = '',\n    db.recent_cashback_interaction = '',\n    db.recent_sample_interaction = '',\n    db.gender = '',\n    db.age = '',\n    db.sustainability = '',\n    db.recycling = '',\n    db.farming = '',\n    db.wholegrain = '',\n    db.vegan = '',\n    db.gluten_free = '',\n    db.gut_health = '',\n    db.fitness = '',\n    db.breakfast_general = '',\n    db.offers_discounts = '',\n    db.competitions = '',\n    db.updated_date = current_date\nwhere customerid not in (\n                            select distinct\n                                customerid\n                            from ${Database}.temp.nuk_cereals_live_ramp_prep\n                        );\n\ndrop table if exists ${Database}.temp.nuk_cereals_live_ramp_prep;\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'nuk_cereals_live_ramp',\n    'blanking records merge',\n    cast((select count(*) from ${Database}.db.nuk_cereals_live_ramp where updated_date = current_date and email_engagement_recency = '') as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n/******************************************************************************************\n   OUTPUT\n******************************************************************************************/\n\n--if merges run successfully but file export fails then below will need to be amended to mop up going back to date of last export\ncreate or replace table ${Database}.jobs.nuk_cereals_live_ramp_final_output_opt_in\nas\nselect\n    customerid,\n    trim(firstname) as firstname,\n    trim(lastname) as lastname,\n    trim(address1) as address1,\n    trim(address2) as address2,\n    trim(address3) as address3,\n    trim(town) as town,\n    trim(county) as county,\n    trim(postcode) as postcode,\n    trim(email1) as email1,\n    trim(opt_in) as opt_in,\n    trim(cereals_division) as cereals_division,\n    trim(shreddies) as shreddies,\n    trim(cheerios) as cheerios,\n    trim(shredded_wheat) as shredded_wheat,\n    trim(go_free) as go_free,\n    trim(curiously_cinnamon) as curiously_cinnamon,\n    trim(nesquik) as nesquik,\n    trim(nat_bears) as nat_bears,\n    trim(boulders) as boulders,\n    trim(bran_flakes) as bran_flakes,\n    trim(cheerio_oats) as cheerio_oats,\n    trim(cornflakes) as cornflakes,\n    trim(crisp_rice) as crisp_rice,\n    trim(crunchy_granola) as crunchy_granola,\n    trim(clusters) as clusters,\n    trim(cookie_crisp) as cookie_crisp,\n    trim(golden_nuggets) as golden_nuggets,\n    trim(grahams) as grahams,\n    trim(lion_cereal) as lion_cereal,\n    trim(oats_more) as oats_more,\n    trim(pic_a_pac) as pic_a_pac,\n    trim(rice) as rice,\n    trim(toffee_crisp_cereal) as toffee_crisp_cereal,\n    trim(data_retention_recency) as data_retention_recency,\n    trim(engagement_score) as engagement_score,\n    trim(email_engagement_recency) as email_engagement_recency,\n    trim(recent_buy_now_click) as recent_buy_now_click,\n    trim(recent_coupon_interaction) as recent_coupon_interaction,\n    trim(recent_cashback_interaction) as recent_cashback_interaction,\n    trim(recent_sample_interaction) as recent_sample_interaction,\n    trim(gender) as gender,\n    trim(age) as age,\n    trim(sustainability) as sustainability,\n    trim(recycling) as recycling,\n    trim(farming) as farming,\n    trim(wholegrain) as wholegrain,\n    trim(vegan) as vegan,\n    trim(gluten_free) as gluten_free,\n    trim(gut_health) as gut_health,\n    trim(fitness) as fitness,\n    trim(breakfast_general) as breakfast_general,\n    trim(offers_discounts) as offers_discounts,\n    trim(competitions) as competitions\nfrom ${Database}.db.nuk_cereals_live_ramp\nwhere updated_date = current_date\nand trim(opt_in) = 'Y';\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'nuk_cereals_live_ramp_final_output_opt_in',\n    'total records',\n    cast((select count(*) from ${Database}.jobs.nuk_cereals_live_ramp_final_output_opt_in) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\ncreate or replace table ${Database}.jobs.nuk_cereals_live_ramp_final_output_opt_out\nas\nselect\n    customerid,\n    trim(firstname) as firstname,\n    trim(lastname) as lastname,\n    trim(address1) as address1,\n    trim(address2) as address2,\n    trim(address3) as address3,\n    trim(town) as town,\n    trim(county) as county,\n    trim(postcode) as postcode,\n    trim(email1) as email1,\n    trim(opt_in) as opt_in,\n    trim(cereals_division) as cereals_division,\n    trim(shreddies) as shreddies,\n    trim(cheerios) as cheerios,\n    trim(shredded_wheat) as shredded_wheat,\n    trim(go_free) as go_free,\n    trim(curiously_cinnamon) as curiously_cinnamon,\n    trim(nesquik) as nesquik,\n    trim(nat_bears) as nat_bears,\n    trim(boulders) as boulders,\n    trim(bran_flakes) as bran_flakes,\n    trim(cheerio_oats) as cheerio_oats,\n    trim(cornflakes) as cornflakes,\n    trim(crisp_rice) as crisp_rice,\n    trim(crunchy_granola) as crunchy_granola,\n    trim(clusters) as clusters,\n    trim(cookie_crisp) as cookie_crisp,\n    trim(golden_nuggets) as golden_nuggets,\n    trim(grahams) as grahams,\n    trim(lion_cereal) as lion_cereal,\n    trim(oats_more) as oats_more,\n    trim(pic_a_pac) as pic_a_pac,\n    trim(rice) as rice,\n    trim(toffee_crisp_cereal) as toffee_crisp_cereal,\n    trim(data_retention_recency) as data_retention_recency,\n    trim(engagement_score) as engagement_score,\n    trim(email_engagement_recency) as email_engagement_recency,\n    trim(recent_buy_now_click) as recent_buy_now_click,\n    trim(recent_coupon_interaction) as recent_coupon_interaction,\n    trim(recent_cashback_interaction) as recent_cashback_interaction,\n    trim(recent_sample_interaction) as recent_sample_interaction,\n    trim(gender) as gender,\n    trim(age) as age,\n    trim(sustainability) as sustainability,\n    trim(recycling) as recycling,\n    trim(farming) as farming,\n    trim(wholegrain) as wholegrain,\n    trim(vegan) as vegan,\n    trim(gluten_free) as gluten_free,\n    trim(gut_health) as gut_health,\n    trim(fitness) as fitness,\n    trim(breakfast_general) as breakfast_general,\n    trim(offers_discounts) as offers_discounts,\n    trim(competitions) as competitions\nfrom ${Database}.db.nuk_cereals_live_ramp\nwhere updated_date = current_date\nand trim(opt_in) = 'N';\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'nuk_cereals_live_ramp_final_output_opt_out',\n    'total records',\n    cast((select count(*) from ${Database}.jobs.nuk_cereals_live_ramp_final_output_opt_out) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n-- ================================================================================================\n--                                          CARNATION\n-- ================================================================================================\n\n\n/******************************************************************************************\n   LOOKUPS\n******************************************************************************************/\n\n--email addresses and opt-in status (roll up to cid level based on brand hierarchy)\ncreate or replace table ${Database}.temp.nuk_carnation_live_ramp_opted_in_flag as\nselect distinct\n    cb.cid,\n    first_value(case when cb.emailable_newsletter = 1 then 'Y' else 'N' end) over\n        (\n            partition by cb.cid\n            order by cb.emailable_newsletter desc\n        ) as opt_in,\n    first_value(xr.email) over\n        (\n            partition by cb.cid\n            order by cb.emailable_newsletter desc\n        ) as email\nfrom ${Database}.live.cid_brand cb\ninner join ${Database}.live.ref_brand rb on cb.brand_id = rb.brand_id\ninner join ${Database}.live.xref_email xr on xr.bbw_urn = cast(split_part(cb.cid_brand_urn, '-', 1) as int)\nwhere cb.business_unit_id = (select business_unit_id from ${Database}.live.ref_business_unit where business_unit = 'Carnation')\n    and (cb.brand_preference = 1 or (cb.brand_engagement = 1 and cb.brand_preference <> 0))\n    and cb.customer_retention_date_brand >= add_months(current_date,-24);\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'nuk_carnation_live_ramp_opted_in_flag',\n    'total records',\n    cast((select count(*) from ${Database}.temp.nuk_carnation_live_ramp_opted_in_flag) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n/******************************************************************************************\n   BASE TABLE\n******************************************************************************************/\n\n--get table with all consumers\ncreate or replace table ${Database}.temp.nuk_carnation_live_ramp_prep\nas\nselect distinct\n    cid.bbw_urn as customerid,\n    cd.cid,\n    cd.firstname,\n    cd.lastname,\n    cd.add1 as address1,\n    cd.add2 as address2,\n    cd.add3 as address3,\n    cd.town,\n    cd.county,\n    cd.postcode,\n    opt.email as email1,\n    opt.opt_in,\n    first_value(case when cdiv.cid is not null  then 'Y' else 'N' end) over (partition by cb.cid order by case when cdiv.cid is not null then 0 else 1 end) as carnation,\n    first_value(case when (eng.link_label like '%vegan%' or  lower(eng.link_url) like '%vegan%')           then 'Y' else 'N' end) over (partition by cb.cid order by case when (eng.link_label like '%vegan%' or  lower(eng.link_url) like '%vegan%')           then 'Y' else 'N' end desc) as vegan,\n    first_value(case when (seas.link_label like '%christmas%' or  lower(seas.link_url) like '%christmas%') then 'Y' else 'N' end) over (partition by cb.cid order by case when (seas.link_label like '%christmas%' or  lower(seas.link_url) like '%christmas%') then 'Y' else 'N' end desc) as christmas,\n    first_value(case when (seas.link_label like '%halloween%' or  lower(seas.link_url) like '%halloween%') then 'Y' else 'N' end) over (partition by cb.cid order by case when (seas.link_label like '%halloween%' or  lower(seas.link_url) like '%halloween%') then 'Y' else 'N' end desc) as halloween,\n    first_value(case when (eng.link_label like '%lighter%' or  lower(eng.link_url) like '%lighter%')       then 'Y' else 'N' end) over (partition by cb.cid order by case when (eng.link_label like '%lighter%' or  lower(eng.link_url) like '%lighter%')       then 'Y' else 'N' end desc) as lighter,\n    first_value(case when (seas.link_label like '%valentine%' or  lower(seas.link_url) like '%valentine%') then 'Y' else 'N' end) over (partition by cb.cid order by case when (seas.link_label like '%valentine%' or  lower(seas.link_url) like '%valentine%') then 'Y' else 'N' end desc) as valentines_day,\n    first_value(case when (seas.link_label like '%autumn%' or  lower(seas.link_url) like '%autumn%' or seas.link_label like '%winter%' or  lower(seas.link_url) like '%winter%') then 'Y' else 'N' end) over (partition by cb.cid order by case when (seas.link_label like '%autumn%' or  lower(seas.link_url) like '%autumn%' or seas.link_label like '%winter%' or  lower(seas.link_url) like '%winter%') then 'Y' else 'N' end desc) as autumn_winter,\n    first_value(case when (seas.link_label like '%pancake%' or  lower(seas.link_url) like '%pancake%')     then 'Y' else 'N' end) over (partition by cb.cid order by case when (seas.link_label like '%pancake%' or  lower(seas.link_url) like '%pancake%')     then 'Y' else 'N' end desc) as pancake_day,\n    first_value(case when (eng.link_label like '%caramel%' or  lower(eng.link_url) like '%caramel%')       then 'Y' else 'N' end) over (partition by cb.cid order by case when (eng.link_label like '%caramel%' or  lower(eng.link_url) like '%caramel%')       then 'Y' else 'N' end desc) as caramel,\n    first_value(case when (seas.link_label like '%mother%' or  lower(seas.link_url) like '%mother%')       then 'Y' else 'N' end) over (partition by cb.cid order by case when (seas.link_label like '%mother%' or  lower(seas.link_url) like '%mother%')       then 'Y' else 'N' end desc) as mothers_day,\n    first_value(case when (seas.link_label like '%easter%' or  lower(seas.link_url) like '%easter%')       then 'Y' else 'N' end) over (partition by cb.cid order by case when (seas.link_label like '%easter%' or  lower(seas.link_url) like '%easter%')       then 'Y' else 'N' end desc) as easter,\n    first_value(case when (eng.link_label like '%quick%' or  lower(eng.link_url) like '%quick%')           then 'Y' else 'N' end) over (partition by cb.cid order by case when (eng.link_label like '%quick%' or  lower(eng.link_url) like '%quick%')           then 'Y' else 'N' end desc) as quick,\n    first_value(case when (eng.link_label like '%fudge%' or  lower(eng.link_url) like '%fudge%' or eng.link_label like '%sweet%' or  lower(eng.link_url) like '%sweet%') then 'Y' else 'N' end) over (partition by cb.cid order by case when (eng.link_label like '%fudge%' or  lower(eng.link_url) like '%fudge%' or eng.link_label like '%sweet%' or  lower(eng.link_url) like '%sweet%') then 'Y' else 'N' end desc) as fudge_sweets,\n    first_value(case when (eng.link_label like '%family%' or  lower(eng.link_url) like '%family%')         then 'Y' else 'N' end) over (partition by cb.cid order by case when (eng.link_label like '%family%' or  lower(eng.link_url) like '%family%')         then 'Y' else 'N' end desc) as family,\n    first_value(case when (eng.link_label like '%birthday%' or  lower(eng.link_url) like '%birthday%')     then 'Y' else 'N' end) over (partition by cb.cid order by case when (eng.link_label like '%birthday%' or  lower(eng.link_url) like '%birthday%')     then 'Y' else 'N' end desc) as birthday,\n    first_value(case when (eng.link_label like '%banoffee%' or  lower(eng.link_url) like '%banoffee%')     then 'Y' else 'N' end) over (partition by cb.cid order by case when (eng.link_label like '%banoffee%' or  lower(eng.link_url) like '%banoffee%')     then 'Y' else 'N' end desc) as banoffee,\n    first_value(case when (eng.link_label like '%drizzle%' or  lower(eng.link_url) like '%drizzle%')       then 'Y' else 'N' end) over (partition by cb.cid order by case when (eng.link_label like '%drizzle%' or  lower(eng.link_url) like '%drizzle%')       then 'Y' else 'N' end desc) as drizzle,\n    first_value(case when (eng.link_label like '%cheesecake%' or  lower(eng.link_url) like '%cheesecake%') then 'Y' else 'N' end) over (partition by cb.cid order by case when (eng.link_label like '%cheesecake%' or  lower(eng.link_url) like '%cheesecake%') then 'Y' else 'N' end desc) as cheesecake,\n    first_value(case when (eng.link_label like '%pudding%' or  lower(eng.link_url) like '%pudding%')       then 'Y' else 'N' end) over (partition by cb.cid order by case when (eng.link_label like '%pudding%' or  lower(eng.link_url) like '%pudding%')       then 'Y' else 'N' end desc) as puddings,\n    first_value(case when (seas.link_label like '%father%' or  lower(seas.link_url) like '%father%')       then 'Y' else 'N' end) over (partition by cb.cid order by case when (seas.link_label like '%father%' or  lower(seas.link_url) like '%father%')       then 'Y' else 'N' end desc) as fathers_day,\n    first_value(case when (seas.link_label like '%summer%' or  lower(seas.link_url) like '%summer%' or seas.link_label like '%bbq%' or  lower(seas.link_url) like '%bbq%') then 'Y' else 'N' end) over (partition by cb.cid order by case when (seas.link_label like '%summer%' or  lower(seas.link_url) like '%summer%' or seas.link_label like '%bbq%' or  lower(seas.link_url) like '%bbq%') then 'Y' else 'N' end desc) as summer_bbq,\n    first_value(case when (seas.link_label like '%bonfire%' or  lower(seas.link_url) like '%bonfire%')     then 'Y' else 'N' end) over (partition by cb.cid order by case when (seas.link_label like '%bonfire%' or  lower(seas.link_url) like '%bonfire%')       then 'Y' else 'N' end desc) as bonfire_night,\n    first_value(case when (seas.link_label like '%diwali%' or  lower(seas.link_url) like '%diwali%' or seas.link_label like '%eid%' or  lower(seas.link_url) like '%eid%') then 'Y' else 'N' end) over (partition by cb.cid order by case when (seas.link_label like '%diwali%' or  lower(seas.link_url) like '%diwali%') then 'Y' else 'N' end desc) as diwali_eid,\n    first_value(case when prod.link_label = 'condensed milk'        then 'Y' else 'N' end) over (partition by cb.cid order by case when prod.link_label = 'condensed milk'        then 'Y' else 'N' end desc) as condensed_milk,\n    first_value(case when prod.link_label = 'vegan condensed milk'  then 'Y' else 'N' end) over (partition by cb.cid order by case when prod.link_label = 'vegan condensed milk'  then 'Y' else 'N' end desc) as vegan_condensed_milk,\n    first_value(case when prod.link_label = 'drizzle sauce'         then 'Y' else 'N' end) over (partition by cb.cid order by case when prod.link_label = 'drizzle sauce'         then 'Y' else 'N' end desc) as drizzle_sauce,\n    first_value(case when prod.link_label = 'caramel drizzle'       then 'Y' else 'N' end) over (partition by cb.cid order by case when prod.link_label = 'caramel drizzle'       then 'Y' else 'N' end desc) as caramel_drizzle,\n    first_value(case when prod.link_label = 'light evaporated milk' then 'Y' else 'N' end) over (partition by cb.cid order by case when prod.link_label = 'light evaporated milk' then 'Y' else 'N' end desc) as light_evaporated_milk,\n    first_value(case when prod.link_label = 'extra thick cream'     then 'Y' else 'N' end) over (partition by cb.cid order by case when prod.link_label = 'extra thick cream'     then 'Y' else 'N' end desc) as extra_thick_cream,\n    first_value(case when prod.link_label = 'evaporated milk'       then 'Y' else 'N' end) over (partition by cb.cid order by case when prod.link_label = 'evaporated milk'       then 'Y' else 'N' end desc) as evaporated_milk,\n    first_value(case when cb.customer_retention_date_brand > add_months(current_date, - 1) then '0_1m'\n               when cb.customer_retention_date_brand > add_months(current_date, - 2)  and cb.customer_retention_date_brand <= add_months(current_date, - 1)  then '1_2m'\n               when cb.customer_retention_date_brand > add_months(current_date, - 3)  and cb.customer_retention_date_brand <= add_months(current_date, - 2)  then '2_3m'\n               when cb.customer_retention_date_brand > add_months(current_date, - 4)  and cb.customer_retention_date_brand <= add_months(current_date, - 3)  then '3_4m'\n               when cb.customer_retention_date_brand > add_months(current_date, - 5)  and cb.customer_retention_date_brand <= add_months(current_date, - 4)  then '4_5m'\n               when cb.customer_retention_date_brand > add_months(current_date, - 6)  and cb.customer_retention_date_brand <= add_months(current_date, - 5)  then '5_6m'\n               when cb.customer_retention_date_brand > add_months(current_date, - 7)  and cb.customer_retention_date_brand <= add_months(current_date, - 6)  then '6_7m'\n               when cb.customer_retention_date_brand > add_months(current_date, - 8)  and cb.customer_retention_date_brand <= add_months(current_date, - 7)  then '7_8m'\n               when cb.customer_retention_date_brand > add_months(current_date, - 9)  and cb.customer_retention_date_brand <= add_months(current_date, - 8)  then '8_9m'\n               when cb.customer_retention_date_brand > add_months(current_date, - 10) and cb.customer_retention_date_brand <= add_months(current_date, - 9)  then '9_10m'\n               when cb.customer_retention_date_brand > add_months(current_date, - 11) and cb.customer_retention_date_brand <= add_months(current_date, - 10) then '10_11m'\n               when cb.customer_retention_date_brand > add_months(current_date, - 12) and cb.customer_retention_date_brand <= add_months(current_date, - 11) then '11_12m'\n               when cb.customer_retention_date_brand > add_months(current_date, - 13) and cb.customer_retention_date_brand <= add_months(current_date, - 12) then '12_13m'\n               when cb.customer_retention_date_brand > add_months(current_date, - 14) and cb.customer_retention_date_brand <= add_months(current_date, - 13) then '13_14m'\n               when cb.customer_retention_date_brand > add_months(current_date, - 15) and cb.customer_retention_date_brand <= add_months(current_date, - 14) then '14_15m'\n               when cb.customer_retention_date_brand > add_months(current_date, - 16) and cb.customer_retention_date_brand <= add_months(current_date, - 15) then '15_16m'\n               when cb.customer_retention_date_brand > add_months(current_date, - 17) and cb.customer_retention_date_brand <= add_months(current_date, - 16) then '16_17m'\n               when cb.customer_retention_date_brand > add_months(current_date, - 18) and cb.customer_retention_date_brand <= add_months(current_date, - 17) then '17_18m'\n               when cb.customer_retention_date_brand > add_months(current_date, - 19) and cb.customer_retention_date_brand <= add_months(current_date, - 18) then '18_19m'\n               when cb.customer_retention_date_brand > add_months(current_date, - 20) and cb.customer_retention_date_brand <= add_months(current_date, - 19) then '19_20m'\n               when cb.customer_retention_date_brand > add_months(current_date, - 21) and cb.customer_retention_date_brand <= add_months(current_date, - 20) then '20_21m'\n               when cb.customer_retention_date_brand > add_months(current_date, - 22) and cb.customer_retention_date_brand <= add_months(current_date, - 21) then '21_22m'\n               when cb.customer_retention_date_brand > add_months(current_date, - 23) and cb.customer_retention_date_brand <= add_months(current_date, - 22) then '22_23m'\n               when cb.customer_retention_date_brand > add_months(current_date, - 24) and cb.customer_retention_date_brand <= add_months(current_date, - 23) then '23_24m'\n               else '' end) over (partition by cb.cid order by cb.customer_retention_date_brand desc) as data_retention_recency,\n    '' as engagement_score,                         --NB. Engagement scoring doesn't yet exist but we should plan to add this in due course\n    first_value(case when cb.last_email_open_date_brand > add_months(current_date, - 1) then '0_1m'\n               when cb.last_email_open_date_brand > add_months(current_date, - 2)  and cb.last_email_open_date_brand <= add_months(current_date, - 1)  then '1_2m'\n               when cb.last_email_open_date_brand > add_months(current_date, - 3)  and cb.last_email_open_date_brand <= add_months(current_date, - 2)  then '2_3m'\n               when cb.last_email_open_date_brand > add_months(current_date, - 4)  and cb.last_email_open_date_brand <= add_months(current_date, - 3)  then '3_4m'\n               when cb.last_email_open_date_brand > add_months(current_date, - 5)  and cb.last_email_open_date_brand <= add_months(current_date, - 4)  then '4_5m'\n               when cb.last_email_open_date_brand > add_months(current_date, - 6)  and cb.last_email_open_date_brand <= add_months(current_date, - 5)  then '5_6m'\n               when cb.last_email_open_date_brand > add_months(current_date, - 7)  and cb.last_email_open_date_brand <= add_months(current_date, - 6)  then '6_7m'\n               when cb.last_email_open_date_brand > add_months(current_date, - 8)  and cb.last_email_open_date_brand <= add_months(current_date, - 7)  then '7_8m'\n               when cb.last_email_open_date_brand > add_months(current_date, - 9)  and cb.last_email_open_date_brand <= add_months(current_date, - 8)  then '8_9m'\n               when cb.last_email_open_date_brand > add_months(current_date, - 10) and cb.last_email_open_date_brand <= add_months(current_date, - 9)  then '9_10m'\n               when cb.last_email_open_date_brand > add_months(current_date, - 11) and cb.last_email_open_date_brand <= add_months(current_date, - 10) then '10_11m'\n               when cb.last_email_open_date_brand > add_months(current_date, - 12) and cb.last_email_open_date_brand <= add_months(current_date, - 11) then '11_12m'\n               when cb.last_email_open_date_brand > add_months(current_date, - 13) and cb.last_email_open_date_brand <= add_months(current_date, - 12) then '12_13m'\n               when cb.last_email_open_date_brand > add_months(current_date, - 14) and cb.last_email_open_date_brand <= add_months(current_date, - 13) then '13_14m'\n               when cb.last_email_open_date_brand > add_months(current_date, - 15) and cb.last_email_open_date_brand <= add_months(current_date, - 14) then '14_15m'\n               when cb.last_email_open_date_brand > add_months(current_date, - 16) and cb.last_email_open_date_brand <= add_months(current_date, - 15) then '15_16m'\n               when cb.last_email_open_date_brand > add_months(current_date, - 17) and cb.last_email_open_date_brand <= add_months(current_date, - 16) then '16_17m'\n               when cb.last_email_open_date_brand > add_months(current_date, - 18) and cb.last_email_open_date_brand <= add_months(current_date, - 17) then '17_18m'\n               when cb.last_email_open_date_brand > add_months(current_date, - 19) and cb.last_email_open_date_brand <= add_months(current_date, - 18) then '18_19m'\n               when cb.last_email_open_date_brand > add_months(current_date, - 20) and cb.last_email_open_date_brand <= add_months(current_date, - 19) then '19_20m'\n               when cb.last_email_open_date_brand > add_months(current_date, - 21) and cb.last_email_open_date_brand <= add_months(current_date, - 20) then '20_21m'\n               when cb.last_email_open_date_brand > add_months(current_date, - 22) and cb.last_email_open_date_brand <= add_months(current_date, - 21) then '21_22m'\n               when cb.last_email_open_date_brand > add_months(current_date, - 23) and cb.last_email_open_date_brand <= add_months(current_date, - 22) then '22_23m'\n               when cb.last_email_open_date_brand > add_months(current_date, - 24) and cb.last_email_open_date_brand <= add_months(current_date, - 23) then '23_24m'\n               else '' end) over (partition by cb.cid order by cb.last_email_open_date_brand desc) as email_engagement_recency,\n    case when links.recent_buy_now_click = 'Y' then 'Y' else 'N' end as buy_now, --recent_buy_now_click,\n    case when n.rnr_interaction = 'Y' then 'Y' else 'N' end as ratings_review, --recent_rnr_interaction,\n    case\n        when cid.gender = 'M' then 'Male'\n        when cid.gender = 'F' then 'Female'\n        else 'Unknown'\n    end as gender,\n    coalesce(cast(datediff(year,cid.dob,current_date) as varchar),'') as age\nfrom ${Database}.live.cid_details cd\ninner join ${Database}.live.cid cid on cd.cid = cid.cid\ninner join ${Database}.live.cid_brand cb on cd.cid = cb.cid\ninner join ${Database}.live.ref_brand rb on rb.brand_id = cb.brand_id\ninner join ${Database}.temp.nuk_carnation_live_ramp_opted_in_flag opt on opt.cid = cb.cid\nleft join (\n              select distinct\n                  cid\n              from ${Database}.live.cid_division\n              where division_id = 17\n                  and emailable_newsletter = 1\n                  and first_date_division is not null\n          ) cdiv on cd.cid = cdiv.cid\nleft join (\n              select distinct\n                  cid,\n                  'Y' as rnr_interaction\n              from ${Database}.live.cid_brand_question cbq\n              join ${Database}.live.ref_brand rb on cbq.brand_id = rb.brand_id\n              where rb.division = 'Carnation'\n                  and cbq.answer_data_date >= add_months(current_date,-6)\n            ) n on cd.cid=n.cid\nleft join (\n              select distinct\n                    cid,\n                    trim(split_part(lower(link_label),'|',3)) as link_label,\n                    link_url\n              from ${Database}.live.adestra_events ae\n              left join ${Database}.db.comms_hist_lookup chl on lower(chl.campaign_id) = lower(ae.campaign_id)\n              where chl.data_controller_id = 1        -- < Nestlé UK\n                  and chl.brand_id in (select brand_id from ${Database}.live.ref_brand where division = 'Carnation')\n                  and lower(ae.event_name) = 'click'\n                  and (split_part(lower(link_label),'|',2) = 'recipe' or lower(link_url) like '%/recipes/%')\n                  and lower(link_label) like any ('%vegan%','%lighter%','%caramel%','%quick%','%fudge%','%sweet%','%family%','%birthday%','%banoffee%','%drizzle%','%cheesecake%','%pudding%')\n                  and event_timestamp >= add_months(current_date,-6)\n            ) eng on eng.cid = cb.cid\nleft join (\n              select distinct\n                  cid,\n                  trim(split_part(lower(link_label),'|',3)) as link_label,\n                  link_url\n              from ${Database}.live.adestra_events ae\n              left join ${Database}.db.comms_hist_lookup chl on lower(chl.campaign_id) = lower(ae.campaign_id)\n              where chl.data_controller_id = 1        -- < Nestlé UK\n                  and chl.brand_id in (select brand_id from ${Database}.live.ref_brand where division = 'Carnation')\n                  and lower(ae.event_name) = 'click'\n                  and (split_part(lower(link_label),'|',2) = 'recipe' or lower(link_url) like '%/recipes/%')\n                  and lower(link_label) like any ('%christmas%','%halloween%','%valentine%','%autumn%','%winter%','%pancake%','%mother%','%easter%','%father%','%summer%','%bbq%','%bonfire%','%diwali%','%eid%')\n                  and event_timestamp >= add_months(current_date,-13) -- 13 months for seasonal events\n            ) seas on seas.cid = cb.cid\nleft join (\n              select distinct\n                  cid,\n                  trim(split_part(lower(link_label),'|',3)) as link_label--,\n                  --link_url --not needed (no historic records)\n              from ${Database}.live.adestra_events ae\n              left join ${Database}.db.comms_hist_lookup chl on lower(chl.campaign_id) = lower(ae.campaign_id)\n              where chl.data_controller_id = 1        -- < Nestlé UK\n                  and chl.brand_id in (select brand_id from ${Database}.live.ref_brand where division = 'Carnation')\n                  and lower(ae.event_name) = 'click'\n                  and (split_part(lower(link_label),'|',2) = 'product' or lower(link_url) like '%/product/%')\n                  and event_timestamp >= add_months(current_date,-6)\n            ) prod on prod.cid = cb.cid\nleft join (\n              select distinct\n                  cid,\n                  'Y' as recent_buy_now_click\n              from ${Database}.live.adestra_events ae\n              left join ${Database}.db.comms_hist_lookup chl on lower(chl.campaign_id) = lower(ae.campaign_id)\n              where chl.data_controller_id = 1        -- < Nestlé UK\n                  and chl.brand_id in (select brand_id from ${Database}.live.ref_brand where division = 'Carnation')\n                  and lower(ae.event_name) = 'click'\n                  and (trim(split_part(lower(ae.link_label),'|',3)) = 'buy now' or (lower(ae.link_url) like '%adimo%' and lower(ae.link_label) like '%buy%'))  --TBC\n                  and event_timestamp >= add_months(current_date,-6)\n            ) links on links.cid = cb.cid\nwhere rb.division = 'Carnation'\n    and (cb.brand_preference = 1 or (cb.brand_engagement = 1 and cb.brand_preference <> 0))\n    and cb.customer_retention_date_brand > add_months(current_date,-24);\n\ndrop table if exists ${Database}.temp.nuk_carnation_live_ramp_opted_in_flag;\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'nuk_carnation_live_ramp_prep',\n    'total records',\n    cast((select count(*) from ${Database}.temp.nuk_carnation_live_ramp_prep) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n/******************************************************************************************\n   UPDATE DB TABLE\n******************************************************************************************/\n\n--Daily comparison against db table to add newly eligible or changed record\n--Will then dedupe to most recent record per bbw_urn (customerID)\n\nmerge into ${Database}.db.nuk_carnation_live_ramp db\nusing ${Database}.temp.nuk_carnation_live_ramp_prep lr on lr.customerid = db.customerid\n                                                      and trim(lr.firstname) = trim(db.firstname)\n                                                      and trim(lr.lastname) = trim(db.lastname)\n                                                      and trim(lr.address1) = trim(db.address1)\n                                                      and trim(lr.address2) = trim(db.address2)\n                                                      and trim(lr.address3) = trim(db.address3)\n                                                      and trim(lr.town) = trim(db.town)\n                                                      and trim(lr.county) = trim(db.county)\n                                                      and trim(lr.postcode) = trim(db.postcode)\n                                                      and trim(lr.email1) = trim(db.email1)\n                                                      and trim(lr.opt_in) = trim(db.opt_in)\n                                                      and trim(lr.carnation) = trim(db.carnation)\n                                                      and trim(lr.vegan) = trim(db.vegan)\n                                                      and trim(lr.christmas) = trim(db.christmas)\n                                                      and trim(lr.halloween) = trim(db.halloween)\n                                                      and trim(lr.lighter) = trim(db.lighter)\n                                                      and trim(lr.valentines_day) = trim(db.valentines_day)\n                                                      and trim(lr.autumn_winter) = trim(db.autumn_winter)\n                                                      and trim(lr.pancake_day) = trim(db.pancake_day)\n                                                      and trim(lr.caramel) = trim(db.caramel)\n                                                      and trim(lr.mothers_day) = trim(db.mothers_day)\n                                                      and trim(lr.easter) = trim(db.easter)\n                                                      and trim(lr.quick) = trim(db.quick)\n                                                      and trim(lr.fudge_sweets) = trim(db.fudge_sweets)\n                                                      and trim(lr.family) = trim(db.family)\n                                                      and trim(lr.birthday) = trim(db.birthday)\n                                                      and trim(lr.banoffee) = trim(db.banoffee)\n                                                      and trim(lr.drizzle) = trim(db.drizzle)\n                                                      and trim(lr.cheesecake) = trim(db.cheesecake)\n                                                      and trim(lr.puddings) = trim(db.puddings)\n                                                      and trim(lr.fathers_day) = trim(db.fathers_day)\n                                                      and trim(lr.summer_bbq) = trim(db.summer_bbq)\n                                                      and trim(lr.bonfire_night) = trim(db.bonfire_night)\n                                                      and trim(lr.diwali_eid) = trim(db.diwali_eid)\n                                                      and trim(lr.condensed_milk) = trim(db.condensed_milk)\n                                                      and trim(lr.vegan_condensed_milk) = trim(db.vegan_condensed_milk)\n                                                      and trim(lr.drizzle_sauce) = trim(db.drizzle_sauce)\n                                                      and trim(lr.caramel_drizzle) = trim(db.caramel_drizzle)\n                                                      and trim(lr.light_evaporated_milk) = trim(db.light_evaporated_milk)\n                                                      and trim(lr.extra_thick_cream) = trim(db.extra_thick_cream)\n                                                      and trim(lr.evaporated_milk) = trim(db.evaporated_milk)\n                                                      and trim(lr.data_retention_recency) = trim(db.data_retention_recency)\n                                                      and trim(lr.engagement_score) = trim(db.engagement_score)\n                                                      and trim(lr.email_engagement_recency) = trim(db.email_engagement_recency)\n                                                      and trim(lr.buy_now) = trim(db.buy_now)\n                                                      and trim(lr.ratings_review) = trim(db.ratings_review)\n                                                      -- and trim(lr.recent_buy_now_click) = trim(db.recent_buy_now_click)\n                                                      -- and trim(lr.recent_rnr_interaction) = trim(db.recent_rnr_interaction)\n                                                      and trim(lr.gender) = trim(db.gender)\n                                                      and trim(lr.age) = trim(db.age)\nwhen not matched then insert\n(\n    customerid,\n    firstname,\n    lastname,\n    address1,\n    address2,\n    address3,\n    town,\n    county,\n    postcode,\n    email1,\n    opt_in,\n    carnation,\n    vegan,\n    christmas,\n    halloween,\n    lighter,\n    valentines_day,\n    autumn_winter,\n    pancake_day,\n    caramel,\n    mothers_day,\n    easter,\n    quick,\n    fudge_sweets,\n    family,\n    birthday,\n    banoffee,\n    drizzle,\n    cheesecake,\n    puddings,\n    fathers_day,\n    summer_bbq,\n    bonfire_night,\n    diwali_eid,\n    condensed_milk,\n    vegan_condensed_milk,\n    drizzle_sauce,\n    caramel_drizzle,\n    light_evaporated_milk,\n    extra_thick_cream,\n    evaporated_milk,\n    data_retention_recency,\n    engagement_score,\n    email_engagement_recency,\n    buy_now,\n    ratings_review,\n    -- recent_buy_now_click,\n    -- recent_rnr_interaction,\n    gender,\n    age,\n    updated_date\n)\nvalues\n(\n    lr.customerid,\n    trim(lr.firstname),\n    trim(lr.lastname),\n    trim(lr.address1),\n    trim(lr.address2),\n    trim(lr.address3),\n    trim(lr.town),\n    trim(lr.county),\n    trim(lr.postcode),\n    trim(lr.email1),\n    trim(lr.opt_in),\n    trim(lr.carnation),\n    trim(lr.vegan),\n    trim(lr.christmas),\n    trim(lr.halloween),\n    trim(lr.lighter),\n    trim(lr.valentines_day),\n    trim(lr.autumn_winter),\n    trim(lr.pancake_day),\n    trim(lr.caramel),\n    trim(lr.mothers_day),\n    trim(lr.easter),\n    trim(lr.quick),\n    trim(lr.fudge_sweets),\n    trim(lr.family),\n    trim(lr.birthday),\n    trim(lr.banoffee),\n    trim(lr.drizzle),\n    trim(lr.cheesecake),\n    trim(lr.puddings),\n    trim(lr.fathers_day),\n    trim(lr.summer_bbq),\n    trim(lr.bonfire_night),\n    trim(lr.diwali_eid),\n    trim(lr.condensed_milk),\n    trim(lr.vegan_condensed_milk),\n    trim(lr.drizzle_sauce),\n    trim(lr.caramel_drizzle),\n    trim(lr.light_evaporated_milk),\n    trim(lr.extra_thick_cream),\n    trim(lr.evaporated_milk),\n    trim(lr.data_retention_recency),\n    trim(lr.engagement_score),\n    trim(lr.email_engagement_recency),\n    trim(lr.buy_now),\n    trim(lr.ratings_review),\n    -- trim(lr.recent_buy_now_click),\n    -- trim(lr.recent_rnr_interaction),\n    trim(lr.gender),\n    trim(lr.age),\n    current_date\n);\n\n\n--remove older records for people who have been updated\ndelete from ${Database}.db.nuk_carnation_live_ramp\nwhere customerid in (\n                        select distinct\n                            customerid\n                        from ${Database}.db.nuk_carnation_live_ramp\n                        group by customerid\n                        having count(*) > 1\n                    )\nand updated_date <> current_date;\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'nuk_carnation_live_ramp',\n    'insert merge',\n    cast((select count(*) from ${Database}.db.nuk_carnation_live_ramp where updated_date = current_date) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n\n--blank out all records for people no longer picked up by cid_brand (i.e. RTBF or fallen out of data retention)\n\nupdate ${Database}.db.nuk_carnation_live_ramp db\nset db.firstname = '',\n    db.lastname = '',\n    db.address1 = '',\n    db.address2 = '',\n    db.address3 = '',\n    db.town = '',\n    db.county = '',\n    db.postcode = '',\n    db.email1 = '',\n    db.opt_in = '',\n    db.carnation = '',\n    db.vegan = '',\n    db.christmas = '',\n    db.halloween = '',\n    db.lighter = '',\n    db.valentines_day = '',\n    db.autumn_winter = '',\n    db.pancake_day = '',\n    db.caramel = '',\n    db.mothers_day = '',\n    db.easter = '',\n    db.quick = '',\n    db.fudge_sweets = '',\n    db.family = '',\n    db.birthday = '',\n    db.banoffee = '',\n    db.drizzle = '',\n    db.cheesecake = '',\n    db.puddings = '',\n    db.fathers_day = '',\n    db.summer_bbq = '',\n    db.bonfire_night = '',\n    db.diwali_eid = '',\n    db.condensed_milk = '',\n    db.vegan_condensed_milk = '',\n    db.drizzle_sauce = '',\n    db.caramel_drizzle = '',\n    db.light_evaporated_milk = '',\n    db.extra_thick_cream = '',\n    db.evaporated_milk = '',\n    db.data_retention_recency = '',\n    db.engagement_score = '',\n    db.email_engagement_recency = '',\n    db.buy_now = '',\n    db.ratings_review = '',\n    -- db.recent_buy_now_click = '',\n    -- db.recent_rnr_interaction = '',\n    db.gender = '',\n    db.age = '',\n    db.updated_date = current_date\nwhere customerid not in (\n                            select distinct\n                                customerid\n                            from ${Database}.temp.nuk_carnation_live_ramp_prep\n                        );\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'nuk_carnation_live_ramp',\n    'blanking records merge',\n    cast((select count(*) from ${Database}.db.nuk_carnation_live_ramp where updated_date = current_date and email_engagement_recency = '') as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n/******************************************************************************************\n   OUTPUT\n******************************************************************************************/\n\n--if merges run successfully but file export fails then below will need to be amended to mop up going back to date of last export\ncreate or replace table ${Database}.jobs.nuk_carnation_live_ramp_final_output_opt_in\nas\nselect\n    customerid,\n    trim(firstname) as firstname,\n    trim(lastname) as lastname,\n    trim(address1) as address1,\n    trim(address2) as address2,\n    trim(address3) as address3,\n    trim(town) as town,\n    trim(county) as county,\n    trim(postcode) as postcode,\n    trim(email1) as email1,\n    trim(opt_in) as opt_in,\n    trim(carnation) as carnation,\n    trim(vegan) as vegan,\n    trim(christmas) as christmas,\n    trim(halloween) as halloween,\n    trim(lighter) as lighter,\n    trim(valentines_day) as valentines_day,\n    trim(autumn_winter) as autumn_winter,\n    trim(pancake_day) as pancake_day,\n    trim(caramel) as caramel,\n    trim(mothers_day) as mothers_day,\n    trim(easter) as easter,\n    trim(quick) as quick,\n    trim(fudge_sweets) as fudge_sweets,\n    trim(family) as family,\n    trim(birthday) as birthday,\n    trim(banoffee) as banoffee,\n    trim(drizzle) as drizzle,\n    trim(cheesecake) as cheesecake,\n    trim(puddings) as puddings,\n    trim(fathers_day) as fathers_day,\n    trim(summer_bbq) as summer_bbq,\n    trim(bonfire_night) as bonfire_night,\n    trim(diwali_eid) as diwali_eid,\n    trim(condensed_milk) as condensed_milk,\n    trim(vegan_condensed_milk) as vegan_condensed_milk,\n    trim(drizzle_sauce) as drizzle_sauce,\n    trim(caramel_drizzle) as caramel_drizzle,\n    trim(light_evaporated_milk) as light_evaporated_milk,\n    trim(extra_thick_cream) as extra_thick_cream,\n    trim(evaporated_milk) as evaporated_milk,\n    trim(data_retention_recency) as data_retention_recency,\n    trim(engagement_score) as engagement_score,\n    trim(email_engagement_recency) as email_engagement_recency,\n    trim(buy_now) as buy_now,\n    trim(ratings_review) as ratings_review,\n    -- trim(recent_buy_now_click) as recent_buy_now_click,\n    -- trim(recent_rnr_interaction) as recent_rnr_interaction,\n    trim(gender) as gender,\n    trim(age) as age\nfrom ${Database}.db.nuk_carnation_live_ramp\nwhere updated_date = current_date\nand trim(opt_in) = 'Y';\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'nuk_carnation_live_ramp_final_output_opt_in',\n    'total records',\n    cast((select count(*) from ${Database}.jobs.nuk_carnation_live_ramp_final_output_opt_in) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\ncreate or replace table ${Database}.jobs.nuk_carnation_live_ramp_final_output_opt_out\nas\nselect\n    customerid,\n    trim(firstname) as firstname,\n    trim(lastname) as lastname,\n    trim(address1) as address1,\n    trim(address2) as address2,\n    trim(address3) as address3,\n    trim(town) as town,\n    trim(county) as county,\n    trim(postcode) as postcode,\n    trim(email1) as email1,\n    trim(opt_in) as opt_in,\n    trim(carnation) as carnation,\n    trim(vegan) as vegan,\n    trim(christmas) as christmas,\n    trim(halloween) as halloween,\n    trim(lighter) as lighter,\n    trim(valentines_day) as valentines_day,\n    trim(autumn_winter) as autumn_winter,\n    trim(pancake_day) as pancake_day,\n    trim(caramel) as caramel,\n    trim(mothers_day) as mothers_day,\n    trim(easter) as easter,\n    trim(quick) as quick,\n    trim(fudge_sweets) as fudge_sweets,\n    trim(family) as family,\n    trim(birthday) as birthday,\n    trim(banoffee) as banoffee,\n    trim(drizzle) as drizzle,\n    trim(cheesecake) as cheesecake,\n    trim(puddings) as puddings,\n    trim(fathers_day) as fathers_day,\n    trim(summer_bbq) as summer_bbq,\n    trim(bonfire_night) as bonfire_night,\n    trim(diwali_eid) as diwali_eid,\n    trim(condensed_milk) as condensed_milk,\n    trim(vegan_condensed_milk) as vegan_condensed_milk,\n    trim(drizzle_sauce) as drizzle_sauce,\n    trim(caramel_drizzle) as caramel_drizzle,\n    trim(light_evaporated_milk) as light_evaporated_milk,\n    trim(extra_thick_cream) as extra_thick_cream,\n    trim(evaporated_milk) as evaporated_milk,\n    trim(data_retention_recency) as data_retention_recency,\n    trim(engagement_score) as engagement_score,\n    trim(email_engagement_recency) as email_engagement_recency,\n    trim(buy_now) as buy_now,\n    trim(ratings_review) as ratings_review,\n    -- trim(recent_buy_now_click) as recent_buy_now_click,\n    -- trim(recent_rnr_interaction) as recent_rnr_interaction,\n    trim(gender) as gender,\n    trim(age) as age\nfrom ${Database}.db.nuk_carnation_live_ramp\nwhere updated_date = current_date\nand trim(opt_in) = 'N';\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'nuk_carnation_live_ramp_final_output_opt_out',\n    'total records',\n    cast((select count(*) from ${Database}.jobs.nuk_carnation_live_ramp_final_output_opt_out) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n-- ================================================================================================\n--                                      CONFECTIONERY\n-- ================================================================================================\n\n\n/******************************************************************************************\n   LOOKUPS\n******************************************************************************************/\n\n--email addresses and opt-in status (roll up to cid level based on brand hierarchy)\ncreate or replace table ${Database}.temp.nuk_confectionery_live_ramp_opted_in_flag as\nselect distinct\n    cb.cid,\n    first_value(case when cb.emailable = 1 then 'Y' else 'N' end) over\n        (\n            partition by cb.cid\n            order by cb.emailable desc\n        ) as opt_in,\n    first_value(xr.email) over\n        (\n            partition by cb.cid\n            order by cb.emailable desc\n        ) as email\nfrom ${Database}.live.cid_brand cb\ninner join ${Database}.live.ref_brand rb on cb.brand_id = rb.brand_id\ninner join ${Database}.live.xref_email xr on xr.bbw_urn = cast(split_part(cb.cid_brand_urn,'-', 1) as int)\nleft join (\n              select distinct\n                  cid\n              from ${Database}.live.cid_division\n              where division_id = (select division_id from ${Database}.live.ref_division where lower(division) = 'confectionery')\n                  and first_date_division is not null\n                  and customer_retention_date_division >= add_months(current_date,-24)\n          ) cd on cb.cid = cd.cid\nwhere cb.brand_id in (select brand_id from ${Database}.live.ref_brand where lower(division) = 'confectionery') --don't want any other similarly named confectionery brands in here\n    and ((cb.brand_preference = 1 or (cb.brand_engagement = 1 and cb.brand_preference <> 0)) or cd.cid is not null)\n    and cb.customer_retention_date_brand >= add_months(current_date,-24);\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'nuk_confectionery_live_ramp_opted_in_flag',\n    'total records',\n    cast((select count(*) from ${Database}.temp.nuk_confectionery_live_ramp_opted_in_flag) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n/******************************************************************************************\n   BASE TABLE\n******************************************************************************************/\n\n--get table with all consumers\ncreate or replace table ${Database}.temp.nuk_confectionery_live_ramp_prep\nas\nselect distinct\n    cid.bbw_urn as customerid,\n    cd.cid,\n    cd.firstname,\n    cd.lastname,\n    cd.add1 as address1,\n    cd.add2 as address2,\n    cd.add3 as address3,\n    cd.town,\n    cd.county,\n    cd.postcode,\n    opt.email as email1,\n    opt.opt_in,\n    first_value(case when div.cid is not null  then 'Y' else 'N' end) over (partition by cb.cid order by case when div.cid is not null then 0 else 1 end) as nestle_confectionery,\n    first_value(case when cb.brand_preference = 1 and  lower(rb.brand) = 'aero'           then 'Y' else 'N' end) over (partition by cb.cid order by case when cb.brand_preference = 1 and  lower(rb.brand) = 'aero'           then 0 else 1 end) as aero,\n    first_value(case when cb.brand_preference = 1 and  lower(rb.brand) = 'after eight'    then 'Y' else 'N' end) over (partition by cb.cid order by case when cb.brand_preference = 1 and  lower(rb.brand) = 'after eight'    then 0 else 1 end) as after_eight,\n    first_value(case when cb.brand_preference = 1 and  lower(rb.brand) = 'kit kat'        then 'Y' else 'N' end) over (partition by cb.cid order by case when cb.brand_preference = 1 and  lower(rb.brand) = 'kit kat'        then 0 else 1 end) as kit_kat,\n    first_value(case when cb.brand_preference = 1 and  lower(rb.brand) = 'milky bar'      then 'Y' else 'N' end) over (partition by cb.cid order by case when cb.brand_preference = 1 and  lower(rb.brand) = 'milky bar'      then 0 else 1 end) as milky_bar,\n    first_value(case when cb.brand_preference = 1 and  lower(rb.brand) = 'quality street' then 'Y' else 'N' end) over (partition by cb.cid order by case when cb.brand_preference = 1 and  lower(rb.brand) = 'quality street' then 0 else 1 end) as quality_street,\n    first_value(case when cb.brand_preference = 1 and  lower(rb.brand) = 'rowntrees'      then 'Y' else 'N' end) over (partition by cb.cid order by case when cb.brand_preference = 1 and  lower(rb.brand) = 'rowntrees'      then 0 else 1 end) as rowntrees,\n    first_value(case when cb.brand_preference = 1 and  lower(rb.brand) = 'smarties'       then 'Y' else 'N' end) over (partition by cb.cid order by case when cb.brand_preference = 1 and  lower(rb.brand) = 'smarties'       then 0 else 1 end) as smarties,\n    first_value(case when cb.brand_preference = 1 and  lower(rb.brand) = 'yorkie'         then 'Y' else 'N' end) over (partition by cb.cid order by case when cb.brand_preference = 1 and  lower(rb.brand) = 'yorkie'         then 0 else 1 end) as yorkie,\n    first_value(case when cb.brand_preference = 1 and  lower(rb.brand) = 'yes snacks'     then 'Y' else 'N' end) over (partition by cb.cid order by case when cb.brand_preference = 1 and  lower(rb.brand) = 'yes snacks'     then 0 else 1 end) as yes_snacks,\n    first_value(case when div.customer_retention_date_division > add_months(current_date, - 1) then '00_01m'\n               when div.customer_retention_date_division > add_months(current_date, - 2)  and div.customer_retention_date_division <= add_months(current_date, - 1)  then '01_2m'\n               when div.customer_retention_date_division > add_months(current_date, - 3)  and div.customer_retention_date_division <= add_months(current_date, - 2)  then '02_3m'\n               when div.customer_retention_date_division > add_months(current_date, - 4)  and div.customer_retention_date_division <= add_months(current_date, - 3)  then '03_4m'\n               when div.customer_retention_date_division > add_months(current_date, - 5)  and div.customer_retention_date_division <= add_months(current_date, - 4)  then '04_5m'\n               when div.customer_retention_date_division > add_months(current_date, - 6)  and div.customer_retention_date_division <= add_months(current_date, - 5)  then '05_6m'\n               when div.customer_retention_date_division > add_months(current_date, - 7)  and div.customer_retention_date_division <= add_months(current_date, - 6)  then '06_7m'\n               when div.customer_retention_date_division > add_months(current_date, - 8)  and div.customer_retention_date_division <= add_months(current_date, - 7)  then '07_8m'\n               when div.customer_retention_date_division > add_months(current_date, - 9)  and div.customer_retention_date_division <= add_months(current_date, - 8)  then '08_9m'\n               when div.customer_retention_date_division > add_months(current_date, - 10) and div.customer_retention_date_division <= add_months(current_date, - 9)  then '09_10m'\n               when div.customer_retention_date_division > add_months(current_date, - 11) and div.customer_retention_date_division <= add_months(current_date, - 10) then '10_11m'\n               when div.customer_retention_date_division > add_months(current_date, - 12) and div.customer_retention_date_division <= add_months(current_date, - 11) then '11_12m'\n               when div.customer_retention_date_division > add_months(current_date, - 13) and div.customer_retention_date_division <= add_months(current_date, - 12) then '12_13m'\n               when div.customer_retention_date_division > add_months(current_date, - 14) and div.customer_retention_date_division <= add_months(current_date, - 13) then '13_14m'\n               when div.customer_retention_date_division > add_months(current_date, - 15) and div.customer_retention_date_division <= add_months(current_date, - 14) then '14_15m'\n               when div.customer_retention_date_division > add_months(current_date, - 16) and div.customer_retention_date_division <= add_months(current_date, - 15) then '15_16m'\n               when div.customer_retention_date_division > add_months(current_date, - 17) and div.customer_retention_date_division <= add_months(current_date, - 16) then '16_17m'\n               when div.customer_retention_date_division > add_months(current_date, - 18) and div.customer_retention_date_division <= add_months(current_date, - 17) then '17_18m'\n               when div.customer_retention_date_division > add_months(current_date, - 19) and div.customer_retention_date_division <= add_months(current_date, - 18) then '18_19m'\n               when div.customer_retention_date_division > add_months(current_date, - 20) and div.customer_retention_date_division <= add_months(current_date, - 19) then '19_20m'\n               when div.customer_retention_date_division > add_months(current_date, - 21) and div.customer_retention_date_division <= add_months(current_date, - 20) then '20_21m'\n               when div.customer_retention_date_division > add_months(current_date, - 22) and div.customer_retention_date_division <= add_months(current_date, - 21) then '21_22m'\n               when div.customer_retention_date_division > add_months(current_date, - 23) and div.customer_retention_date_division <= add_months(current_date, - 22) then '22_23m'\n               when div.customer_retention_date_division > add_months(current_date, - 24) and div.customer_retention_date_division <= add_months(current_date, - 23) then '23_24m'\n               else '' end) over (partition by div.cid order by div.customer_retention_date_division desc) as data_retention_recency,\n    '' as engagement_score, --From brief: NB. Engagement scoring doesn't yet exist but we should plan to add this in due course\n    first_value(case when div.last_email_open_date_division > add_months(current_date, - 1) then '00_01m'\n               when div.last_email_open_date_division > add_months(current_date, - 2)  and div.last_email_open_date_division <= add_months(current_date, - 1)  then '01_2m'\n               when div.last_email_open_date_division > add_months(current_date, - 3)  and div.last_email_open_date_division <= add_months(current_date, - 2)  then '02_3m'\n               when div.last_email_open_date_division > add_months(current_date, - 4)  and div.last_email_open_date_division <= add_months(current_date, - 3)  then '03_4m'\n               when div.last_email_open_date_division > add_months(current_date, - 5)  and div.last_email_open_date_division <= add_months(current_date, - 4)  then '04_5m'\n               when div.last_email_open_date_division > add_months(current_date, - 6)  and div.last_email_open_date_division <= add_months(current_date, - 5)  then '05_6m'\n               when div.last_email_open_date_division > add_months(current_date, - 7)  and div.last_email_open_date_division <= add_months(current_date, - 6)  then '06_7m'\n               when div.last_email_open_date_division > add_months(current_date, - 8)  and div.last_email_open_date_division <= add_months(current_date, - 7)  then '07_8m'\n               when div.last_email_open_date_division > add_months(current_date, - 9)  and div.last_email_open_date_division <= add_months(current_date, - 8)  then '08_9m'\n               when div.last_email_open_date_division > add_months(current_date, - 10) and div.last_email_open_date_division <= add_months(current_date, - 9)  then '09_10m'\n               when div.last_email_open_date_division > add_months(current_date, - 11) and div.last_email_open_date_division <= add_months(current_date, - 10) then '10_11m'\n               when div.last_email_open_date_division > add_months(current_date, - 12) and div.last_email_open_date_division <= add_months(current_date, - 11) then '11_12m'\n               when div.last_email_open_date_division > add_months(current_date, - 13) and div.last_email_open_date_division <= add_months(current_date, - 12) then '12_13m'\n               when div.last_email_open_date_division > add_months(current_date, - 14) and div.last_email_open_date_division <= add_months(current_date, - 13) then '13_14m'\n               when div.last_email_open_date_division > add_months(current_date, - 15) and div.last_email_open_date_division <= add_months(current_date, - 14) then '14_15m'\n               when div.last_email_open_date_division > add_months(current_date, - 16) and div.last_email_open_date_division <= add_months(current_date, - 15) then '15_16m'\n               when div.last_email_open_date_division > add_months(current_date, - 17) and div.last_email_open_date_division <= add_months(current_date, - 16) then '16_17m'\n               when div.last_email_open_date_division > add_months(current_date, - 18) and div.last_email_open_date_division <= add_months(current_date, - 17) then '17_18m'\n               when div.last_email_open_date_division > add_months(current_date, - 19) and div.last_email_open_date_division <= add_months(current_date, - 18) then '18_19m'\n               when div.last_email_open_date_division > add_months(current_date, - 20) and div.last_email_open_date_division <= add_months(current_date, - 19) then '19_20m'\n               when div.last_email_open_date_division > add_months(current_date, - 21) and div.last_email_open_date_division <= add_months(current_date, - 20) then '20_21m'\n               when div.last_email_open_date_division > add_months(current_date, - 22) and div.last_email_open_date_division <= add_months(current_date, - 21) then '21_22m'\n               when div.last_email_open_date_division > add_months(current_date, - 23) and div.last_email_open_date_division <= add_months(current_date, - 22) then '22_23m'\n               when div.last_email_open_date_division > add_months(current_date, - 24) and div.last_email_open_date_division <= add_months(current_date, - 23) then '23_24m'\n               else '' end) over (partition by div.cid order by div.last_email_open_date_division desc) as email_engagement_recency,\n    case when links.cid is not null then 'Y' else 'N' end as buy_now,\n    case when rr.cid is not null then 'Y' else 'N' end as rating_review,\n    case\n        when cid.gender = 'M' then 'Male'\n        when cid.gender = 'F' then 'Female'\n        else 'Unknown'\n    end as gender,\n    coalesce(cast(datediff(year,cid.dob,current_date) as varchar),'') as age,\n    coalesce(to_char(cid.dob,'DD/MM/YYYY'),'') as dob,\n    '' as purchase,\n    '' as sku_pref,\n    '' as range_pref,\n    '' as flavour_pref,\n    '' as occasion_pref,\n    coalesce(cd.town,'') as city,\n    '' as household -- blank or N?\nfrom ${Database}.live.cid_details cd\ninner join ${Database}.live.cid         cid on cd.cid = cid.cid\ninner join ${Database}.live.cid_brand  cb on cd.cid = cb.cid\ninner join ${Database}.live.ref_brand  rb on rb.brand_id = cb.brand_id\ninner join ${Database}.temp.nuk_confectionery_live_ramp_opted_in_flag opt on opt.cid = cb.cid\nleft join (\n              select distinct\n                  cid,\n                  customer_retention_date_division,\n                  last_email_open_date_division\n              from ${Database}.live.cid_division\n              where division_id = 2\n                  and first_date_division is not null\n          ) div on div.cid = cd.cid\nleft join (\n              select distinct\n                  cid\n              from ${Database}.live.cid_brand_question\n              where brand_id in (select brand_id from ${Database}.live.ref_brand where lower(division) = 'confectionery')\n                  and left(lower(question),25) = 'overall rating of product'\n                  and answer_data_date >= add_months(current_date,-6)\n          ) rr on rr.cid = cd.cid\nleft join (\n              select distinct\n                  cid\n              from ${Database}.live.adestra_events ae\n              left join ${Database}.db.comms_hist_lookup chl on lower(chl.campaign_id) = lower(ae.campaign_id)\n              where chl.data_controller_id = 1\n                  and ae.event_name ilike '%click%'\n                  and ae.link_label ilike '%Buy Now%'\n                  and split_part(lower(ae.link_label),'|',3) regexp '.*nescaf.*'\n                  and event_timestamp >= add_months(current_date,-6)\n          ) links on links.cid = cb.cid\nwhere cb.brand_id in (select brand_id from ${Database}.live.ref_brand where lower(division) = 'confectionery')\n    and ((cb.brand_preference = 1 or (cb.brand_engagement = 1 and cb.brand_preference <> 0)) or div.cid is not null)\n    and div.customer_retention_date_division > add_months(current_date,-24);\n\ndrop table if exists ${Database}.temp.nuk_confectionery_live_ramp_opted_in_flag;\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'nuk_confectionery_live_ramp_prep',\n    'total records',\n    cast((select count(*) from ${Database}.temp.nuk_confectionery_live_ramp_prep) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n/******************************************************************************************\n   UPDATE DB TABLE\n******************************************************************************************/\n\n--Daily comparison against db table to add newly eligible or changed record\n--Will then dedupe to most recent record per bbw_urn (customerID)\n\nmerge into ${Database}.db.nuk_confectionery_live_ramp db\nusing ${Database}.temp.nuk_confectionery_live_ramp_prep lr on lr.customerid = db.customerid\n                                                          and trim(lr.firstname) = trim(db.firstname)\n                                                          and trim(lr.lastname) = trim(db.lastname)\n                                                          and trim(lr.address1) = trim(db.address1)\n                                                          and trim(lr.address2) = trim(db.address2)\n                                                          and trim(lr.address3) = trim(db.address3)\n                                                          and trim(lr.town) = trim(db.town)\n                                                          and trim(lr.county) = trim(db.county)\n                                                          and trim(lr.postcode) = trim(db.postcode)\n                                                          and trim(lr.email1) = trim(db.email1)\n                                                          and trim(lr.opt_in) = trim(db.opt_in)\n                                                          and trim(lr.nestle_confectionery) = trim(db.nestle_confectionery)\n                                                          and trim(lr.aero) = trim(db.aero)\n                                                          and trim(lr.after_eight) = trim(db.after_eight)\n                                                          and trim(lr.kit_kat) = trim(db.kit_kat)\n                                                          and trim(lr.milky_bar) = trim(db.milky_bar)\n                                                          and trim(lr.quality_street) = trim(db.quality_street)\n                                                          and trim(lr.rowntrees) = trim(db.rowntrees)\n                                                          and trim(lr.smarties) = trim(db.smarties)\n                                                          and trim(lr.yorkie) = trim(db.yorkie)\n                                                          and trim(lr.yes_snacks) = trim(db.yes_snacks)\n                                                          and trim(lr.data_retention_recency) = trim(db.data_retention_recency)\n                                                          and trim(lr.engagement_score) = trim(db.engagement_score)\n                                                          and trim(lr.email_engagement_recency) = trim(db.email_engagement_recency)\n                                                          and trim(lr.buy_now) = trim(db.buy_now)\n                                                          and trim(lr.rating_review) = trim(db.rating_review)\n                                                          and trim(lr.purchase) = trim(db.purchase)\n                                                          and trim(lr.sku_pref) = trim(db.sku_pref)\n                                                          and trim(lr.range_pref) = trim(db.range_pref)\n                                                          and trim(lr.flavour_pref) = trim(db.flavour_pref)\n                                                          and trim(lr.occasion_pref) = trim(db.occasion_pref)\n                                                          and trim(lr.gender) = trim(db.gender)\n                                                          and trim(lr.age) = trim(db.age)\n                                                          --and trim(lr.dob) = trim(db.dob)        --requested removal by Liveramp 17/05/2021)\n                                                          --and trim(lr.city) = trim(db.city)       --requested removal by Liveramp 17/05/2021)\n                                                          and trim(lr.household) = trim(db.household)\nwhen not matched then insert\n(\n    customerid,\n    firstname,\n    lastname,\n    address1,\n    address2,\n    address3,\n    town,\n    county,\n    postcode,\n    email1,\n    opt_in,\n    nestle_confectionery,\n    aero,\n    after_eight,\n    kit_kat,\n    milky_bar,\n    quality_street,\n    rowntrees,\n    smarties,\n    yorkie,\n    yes_snacks,\n    data_retention_recency,\n    engagement_score,\n    email_engagement_recency,\n    buy_now,\n    rating_review,\n    purchase,\n    sku_pref,\n    range_pref,\n    flavour_pref,\n    occasion_pref,\n    gender,\n    age,\n    dob,\n    city,\n    household,\n    updated_date\n)\nvalues\n(\n    lr.customerid,\n    trim(lr.firstname),\n    trim(lr.lastname),\n    trim(lr.address1),\n    trim(lr.address2),\n    trim(lr.address3),\n    trim(lr.town),\n    trim(lr.county),\n    trim(lr.postcode),\n    trim(lr.email1),\n    trim(lr.opt_in),\n    trim(lr.nestle_confectionery),\n    trim(lr.aero),\n    trim(lr.after_eight),\n    trim(lr.kit_kat),\n    trim(lr.milky_bar),\n    trim(lr.quality_street),\n    trim(lr.rowntrees),\n    trim(lr.smarties),\n    trim(lr.yorkie),\n    trim(lr.yes_snacks),\n    trim(lr.data_retention_recency),\n    trim(lr.engagement_score),\n    trim(lr.email_engagement_recency),\n    trim(lr.buy_now),\n    trim(lr.rating_review),\n    trim(lr.purchase),\n    trim(lr.sku_pref),\n    trim(lr.range_pref),\n    trim(lr.flavour_pref),\n    trim(lr.occasion_pref),\n    trim(lr.gender),\n    trim(lr.age),\n    trim(lr.dob),\n    trim(lr.city),\n    trim(lr.household),\n    current_date\n);\n\n\n--remove older records for people who have been updated\ndelete from ${Database}.db.nuk_confectionery_live_ramp\nwhere customerid in (\n                        select distinct\n                            customerid\n                        from ${Database}.db.nuk_confectionery_live_ramp\n                        group by customerid\n                        having count(*) > 1\n                    )\nand updated_date <> current_date;\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'nuk_confectionery_live_ramp',\n    'insert merge',\n    cast((select count(*) from ${Database}.db.nuk_confectionery_live_ramp where updated_date = current_date) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n--blank out all records for people no longer picked up by cid_brand (i.e. RTBF or fallen out of data retention)\nupdate ${Database}.db.nuk_confectionery_live_ramp db\nset db.firstname                        = '',\n    db.lastname                         = '',\n    db.address1                         = '',\n    db.address2                         = '',\n    db.address3                         = '',\n    db.town                             = '',\n    db.county                           = '',\n    db.postcode                         = '',\n    db.email1                           = '',\n    db.opt_in                           = '',\n    db.nestle_confectionery             = '',\n    db.aero                             = '',\n    db.after_eight                      = '',\n    db.kit_kat                          = '',\n    db.milky_bar                        = '',\n    db.quality_street                   = '',\n    db.rowntrees                        = '',\n    db.smarties                         = '',\n    db.yorkie                           = '',\n    db.yes_snacks                       = '',\n    db.data_retention_recency           = '',\n    db.engagement_score                 = '',\n    db.email_engagement_recency         = '',\n    db.buy_now                          = '',\n    db.rating_review                    = '',\n    db.purchase                         = '',\n    db.sku_pref                         = '',\n    db.range_pref                       = '',\n    db.flavour_pref                     = '',\n    db.occasion_pref                    = '',\n    db.gender                           = '',\n    db.age                              = '',\n    db.dob                              = '',\n    db.city                             = '',\n    db.household                        = '',\n    db.updated_date                     = current_date\nwhere customerid not in (\n                            select distinct\n                                customerid\n                            from ${Database}.temp.nuk_confectionery_live_ramp_prep\n                        );\n\ndrop table if exists ${Database}.temp.nuk_confectionery_live_ramp_prep;\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'nuk_confectionery_live_ramp',\n    'blanking records merge',\n    cast((select count(*) from ${Database}.db.nuk_confectionery_live_ramp where updated_date = current_date and email_engagement_recency = '') as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n/******************************************************************************************\n   OUTPUT\n******************************************************************************************/\n\n--if merges run successfully but file export fails then below will need to be amended to mop up going back to date of last export\ncreate or replace table ${Database}.jobs.nuk_confectionery_live_ramp_final_output_opt_in\nas\nselect\n    customerid as customerid,\n    trim(firstname) as firstname,\n    trim(lastname) as lastname,\n    trim(address1) as address1,\n    trim(address2) as address2,\n    trim(address3) as address3,\n    trim(town) as town,\n    trim(county) as county,\n    trim(postcode) as postcode,\n    trim(email1) as email1,\n    trim(opt_in) as opt_in,\n    trim(nestle_confectionery) as nestle_confectionery,\n    trim(aero) as aero,\n    trim(after_eight) as after_eight,\n    trim(kit_kat) as kit_kat,\n    trim(milky_bar) as milky_bar,\n    trim(quality_street) as quality_street,\n    trim(rowntrees) as rowntrees,\n    trim(smarties) as smarties,\n    trim(yorkie) as yorkie,\n    trim(yes_snacks) as yes_snacks,\n    trim(data_retention_recency) as data_retention_recency,\n    trim(engagement_score) as engagement_score,\n    trim(email_engagement_recency) as email_engagement_recency,\n    trim(buy_now) as buy_now,\n    trim(rating_review) as rating_review,\n    trim(purchase) as purchase,\n    trim(sku_pref) as sku_pref,\n    trim(range_pref) as range_pref,\n    trim(flavour_pref) as flavour_pref,\n    trim(occasion_pref) as occasion_pref,\n    trim(gender) as gender,\n    trim(age) as age,\n    --trim(dob) as dob,           --requested removal by Liveramp 17/05/2021\n    --trim(city) as city,         --requested removal by Liveramp 17/05/2021\n    trim(household) as household\nfrom ${Database}.db.nuk_confectionery_live_ramp\nwhere updated_date = current_date\nand trim(opt_in) = 'Y';\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'nuk_confectionery_live_ramp_final_output_opt_in',\n    'total records',\n    cast((select count(*) from ${Database}.jobs.nuk_confectionery_live_ramp_final_output_opt_in) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\ncreate or replace table ${Database}.jobs.nuk_confectionery_live_ramp_final_output_opt_out\nas\nselect\n    customerid as customerid,\n    trim(firstname) as firstname,\n    trim(lastname) as lastname,\n    trim(address1) as address1,\n    trim(address2) as address2,\n    trim(address3) as address3,\n    trim(town) as town,\n    trim(county) as county,\n    trim(postcode) as postcode,\n    trim(email1) as email1,\n    trim(opt_in) as opt_in,\n    trim(nestle_confectionery) as nestle_confectionery,\n    trim(aero) as aero,\n    trim(after_eight) as after_eight,\n    trim(kit_kat) as kit_kat,\n    trim(milky_bar) as milky_bar,\n    trim(quality_street) as quality_street,\n    trim(rowntrees) as rowntrees,\n    trim(smarties) as smarties,\n    trim(yorkie) as yorkie,\n    trim(yes_snacks) as yes_snacks,\n    trim(data_retention_recency) as data_retention_recency,\n    trim(engagement_score) as engagement_score,\n    trim(email_engagement_recency) as email_engagement_recency,\n    trim(buy_now) as buy_now,\n    trim(rating_review) as rating_review,\n    trim(purchase) as purchase,\n    trim(sku_pref) as sku_pref,\n    trim(range_pref) as range_pref,\n    trim(flavour_pref) as flavour_pref,\n    trim(occasion_pref) as occasion_pref,\n    trim(gender) as gender,\n    trim(age) as age,\n    --trim(dob) as dob,           --requested removal by Liveramp 17/05/2021\n    --trim(city) as city,         --requested removal by Liveramp 17/05/2021\n    trim(household) as household\nfrom ${Database}.db.nuk_confectionery_live_ramp\nwhere updated_date = current_date\nand trim(opt_in) = 'N';\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'nuk_confectionery_live_ramp_final_output_opt_out',\n    'total records',\n    cast((select count(*) from ${Database}.jobs.nuk_confectionery_live_ramp_final_output_opt_out) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n-- ================================================================================================\n--                                             SMA\n-- ================================================================================================\n\n\n/******************************************************************************************\n   LOOKUPS\n******************************************************************************************/\n\ncreate or replace table ${Database}.temp.sma_live_ramp_welcome\nas\nselect distinct\n    cid\nfrom ${Database}.live.sma_comms_hist ch\ninner join ${Database}.live.sma_comms_hist_lookup chl on ch.pack_id = chl.pack_id\nwhere promotion_name in (\n                            'Baby Elegance Welcome Mailer',\n                            'Legacy Welcome Mailer MARSYS',\n                            'New ROI Welcome Mailer',\n                            'New UK Welcome Mailer',\n                            'Welcome Mailer',\n                            'Welcome Mailer Scoop Up'\n                        );\n\n\ncreate or replace table ${Database}.temp.sma_live_ramp_child_stage\nas\nselect\n    ch.*,\n    case \n        when child_stage_now = 'S7' then '36 months and older'\n        when dob > add_months(current_date, - 36) and dob < add_months(current_date, - 35) then '35 months'\n        when dob >= add_months(current_date, - 35) and dob < add_months(current_date, - 34) then '34 months'\n        when dob >= add_months(current_date, - 34) and dob < add_months(current_date, - 33) then '33 months'\n        when dob >= add_months(current_date, - 33) and dob < add_months(current_date, - 32) then '32 months'\n        when dob >= add_months(current_date, - 32) and dob < add_months(current_date, - 31) then '31 months'\n        when dob >= add_months(current_date, - 31) and dob < add_months(current_date, - 30) then '30 months'\n        when dob >= add_months(current_date, - 30) and dob < add_months(current_date, - 29) then '29 months'\n        when dob >= add_months(current_date, - 29) and dob < add_months(current_date, - 28) then '28 months'\n        when dob >= add_months(current_date, - 28) and dob < add_months(current_date, - 27) then '27 months'\n        when dob >= add_months(current_date, - 27) and dob < add_months(current_date, - 26) then '26 months'\n        when dob >= add_months(current_date, - 26) and dob < add_months(current_date, - 25) then '25 months'\n        when dob >= add_months(current_date, - 25) and dob < add_months(current_date, - 24) then '24 months'\n        when dob >= (current_date + 245) then 'Less than 5 weeks'\n        else st.child_stage\n    end as child_stage\nfrom (\n         select\n             *,\n             row_number() over(partition by name_urn order by dob desc, case when child_id = 'D' then 0 else try_to_number(child_id) end asc nulls last, child_id) as youngest_to_oldest_run\n         from ${Database}.live.dependant\n     ) ch\nleft join (\n              select distinct\n                  pcn.description,\n                  pcn2.description as child_stage\n              from ${Database}.db.sma_programme_control pcn\n              left join ${Database}.db.sma_programme_control pcn2 on (pcn.stepid - 1) = pcn2.stepid\n          ) st on trim(ch.comms_programme_description) = trim(st.description)\nwhere live_flag = 1\n    and youngest_to_oldest_run = 1;\n\n\ncreate or replace table ${Database}.temp.sma_live_ramp_multiple_children\nas\nselect\n    cid\nfrom ${Database}.live.dependant\nwhere live_flag = 1\ngroup by cid\nhaving count(*) > 1;\n\n\ncreate or replace table ${Database}.temp.sma_live_ramp_email_engagement\nas\nselect\n    cid,\n    case when last_open >= add_months(current_date,-3) then 'Y' else 'N' end as opened_email_last_3m,\n    case when last_click >= add_months(current_date,-3) then 'Y' else 'N' end as clicked_email_last_3m,\n    'Y' as opened_email_ever,\n    case when last_click is not null then 'Y' else 'N' end as clicked_email_ever\n--,   case when ae.last_product_click is not null then 'Y' else 'N' end as clicked_product_link\n--,   case when ae.last_loyalty_click is not null then 'Y' else 'N' end as clicked_loyalty\nfrom (\n         select distinct\n             xr.cid,\n             max(event_timestamp) as last_open,\n             max(case when lower(event_name) = 'click' then event_timestamp else cast(null as date) end) as last_click\n             --this will be needed for Product Link and Loyalty clicks once link labelling is in place\n             --max(case when link_label = '' then event_timestamp else cast(null as date) end) as last_product_click,\n             --max(case when link_label = '' then event_timestamp else cast(null as date) end) as last_loyalty_click\n         from ${Database}.db.adestra_events_sma ae\n         left join ${Database}.live.xref_email xr on lower(trim(xr.email)) = lower(trim(ae.email))\n         where lower(event_name) in ('read','click')\n         group by xr.cid\n     ) ae;\n\n\ncreate or replace table ${Database}.temp.sma_live_ramp_moac_registrants\nas\nselect distinct\n    cid\nfrom ${Database}.live.xref_name_urn\nwhere trim(source) = 'REG_MOAC';\n\n\ncreate or replace table ${Database}.temp.sma_live_ramp_rr\nas\nselect distinct\n    cid\nfrom ${Database}.live.cid_brand_question qu\ninner join ${Database}.db.ref_question rq on rq.question_id = qu.question_id\n                                    and rq.question ilike '%overall%'\nwhere qu.brand_id = (select distinct brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma');\n\n\ncreate or replace table ${Database}.temp.sma_live_ramp_loyalty\nas\nselect distinct\n    cid\nfrom ${Database}.live.sma_shopmium_rewards;\n\n\n/******************************************************************************************\n   BASE TABLE\n******************************************************************************************/\n\ncreate or replace table ${Database}.temp.sma_live_ramp_prep\nas\nselect distinct\n    cid.bbw_urn as customerid,\n    cd.cid,\n    trim(cd.firstname) as firstname,\n    trim(cd.lastname) as lastname,\n    trim(cd.add1) as address1,\n    trim(cd.add2) as address2,\n    trim(cd.add3) as address3,\n    trim(cd.town) as town,\n    trim(cd.county) as county,\n    trim(cd.postcode) as postcode,\n    trim(cd.email) as email,\n    cid.last_active_date,\n    case\n        when mps.cid is not null then 'N'\n        when cid.emailable = 1 then 'Y' else 'N'\n    end as opt_in,\n    case when trim(cid.pregnancy_status) = 'Yes' then 'Y' else 'N' end as pregnant,\n    case when w.cid is not null then 'Y' else 'N' end as welcome_pack_received,\n    case\n        when trim(st.child_stage) = 'Less than 5 weeks' then trim(st.child_stage)\n        when left(st.child_stage, 6) = 'Week A' then 'Week '||substring(child_stage,7,10)\n        else ''\n    end as antenatal_stage,\n    case\n        when left(st.child_stage, 6) = 'Week A' then ''\n        when trim(st.child_stage) = 'Less than 5 weeks' then ''\n        when left(st.child_stage, 6) = 'Week P' then 'Week '||substring(child_stage,7,10)\n        when left(st.child_stage, 7) = 'Month P' then trim(substring(child_stage,8,11))||' Months'\n        when st.child_stage is not null then trim(st.child_stage)\n        else ''\n    end as postnatal_stage,\n    case\n        when trim(cid.gender) = 'F' then 'Female'\n        when trim(cid.gender) = 'M' then 'Male'\n        else 'Unknown'\n    end as gender,\n    case when mc.cid is not null then 'Y' else 'N' end as multiple_children,\n    coalesce(eng.opened_email_last_3m,'N') as opened_email_last_3m,\n    coalesce(eng.clicked_email_last_3m,'N') as clicked_email_last_3m,\n    coalesce(eng.opened_email_ever,'N') as opened_email_ever,\n    coalesce(eng.clicked_email_ever,'N') as clicked_email_ever,\n    --coalesce(eng.clicked_product_link,'N') as clicked_product_link,\n    --coalesce(eng.clicked_loyalty,'N') as clicked_loyalty,\n    case when moac.cid is not null then 'Y' else 'N' end as registered_moac_app,\n    case when ces.cid is not null then 'Y' else 'N' end as ces_enquirer,\n    case when rr.cid is not null then 'Y' else 'N' end as left_RR,\n    case when loy.cid is not null then 'Y' else 'N' end as loyalty_participant\nfrom ${Database}.live.cid_details_sma cd\ninner join ${Database}.live.cid_sma cid on cid.cid = cd.cid\nleft join ${Database}.temp.sma_live_ramp_welcome w on w.cid = cd.cid\nleft join ${Database}.temp.sma_live_ramp_child_stage st on st.cid = cd.cid\nleft join ${Database}.temp.sma_live_ramp_multiple_children mc on mc.cid = cd.cid\nleft join ${Database}.temp.sma_live_ramp_email_engagement eng on eng.cid = cd.cid\nleft join ${Database}.live.cid_sma_careline ces on ces.cid = cd.cid\nleft join ${Database}.temp.sma_live_ramp_moac_registrants moac on moac.cid = cd.cid\nleft join ${Database}.temp.sma_live_ramp_rr rr on rr.cid = cd.cid\nleft join ${Database}.temp.sma_live_ramp_loyalty loy on loy.cid = cd.cid\nleft join ${Database}.temp.cid_bmps mps on mps.cid = cd.cid\nwhere cid.member = 1\n    and trim(cd.email) > '';\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'sma_live_ramp_prep',\n    'total records',\n    cast((select count(*) from ${Database}.temp.sma_live_ramp_prep) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\ndrop table if exists ${Database}.temp.sma_live_ramp_welcome;\ndrop table if exists ${Database}.temp.sma_live_ramp_child_stage;\ndrop table if exists ${Database}.temp.sma_live_ramp_multiple_children;\ndrop table if exists ${Database}.temp.sma_live_ramp_email_engagement;\ndrop table if exists ${Database}.temp.sma_live_ramp_moac_registrants;\ndrop table if exists ${Database}.temp.sma_live_ramp_rr;\ndrop table if exists ${Database}.temp.sma_live_ramp_loyalty;\ndrop table if exists ${Database}.temp.cid_bmps;\n\n\n/******************************************************************************************\n   DEDUPE TO DISTINCT EMAIL\n******************************************************************************************/\n\ncreate or replace table ${Database}.temp.sma_live_ramp_final\nas\nselect\n    *\nfrom (\n         select\n             *,\n             row_number() over (partition by email order by last_active_date desc) as row_num\n         from ${Database}.temp.sma_live_ramp_prep\n     ) a\nwhere row_num = 1;\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'sma_live_ramp_final',\n    'total records',\n    cast((select count(*) from ${Database}.temp.sma_live_ramp_final) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\ndrop table if exists ${Database}.temp.sma_live_ramp_prep;\n\n\n/******************************************************************************************\n   UPDATE DB TABLE\n******************************************************************************************/\n\n--Daily comparison against db table to add newly eligible or changed record\n--Will then dedupe to most recent record per bbw_urn (customerID)\nmerge into ${Database}.db.sma_live_ramp db\nusing ${Database}.temp.sma_live_ramp_final fi on fi.customerid = db.customerid\n                                        and trim(fi.firstname) = trim(db.firstname)\n                                        and trim(fi.lastname) = trim(db.lastname)\n                                        and trim(fi.address1) = trim(db.address1)\n                                        and trim(fi.address2) = trim(db.address2)\n                                        and trim(fi.address3) = trim(db.address3)\n                                        and trim(fi.town) = trim(db.town)\n                                        and trim(fi.county) = trim(db.county)\n                                        and trim(fi.postcode) = trim(db.postcode)\n                                        and trim(fi.email) = trim(db.email)\n                                        and trim(fi.opt_in) = trim(db.opt_in)\n                                        and trim(fi.pregnant) = trim(db.pregnant)\n                                        and trim(fi.welcome_pack_received) = trim(db.welcome_pack_received)\n                                        and trim(fi.antenatal_stage) = trim(db.antenatal_stage)\n                                        and trim(fi.postnatal_stage) = trim(db.postnatal_stage)\n                                        and trim(fi.gender) = trim(db.gender)\n                                        and trim(fi.multiple_children) = trim(db.multiple_children)\n                                        and trim(fi.opened_email_last_3m) = trim(db.opened_email_last_3m)\n                                        and trim(fi.clicked_email_last_3m) = trim(db.clicked_email_last_3m)\n                                        and trim(fi.opened_email_ever) = trim(db.opened_email_ever)\n                                        and trim(fi.clicked_email_ever) = trim(db.clicked_email_ever)\n                                        --and trim(fi.clicked_product_link) = trim(db.clicked_product_link)\n                                        --and trim(fi.clicked_loyalty) = trim(db.clicked_loyalty)\n                                        and trim(fi.registered_moac_app) = trim(db.registered_moac_app)\n                                        and trim(fi.ces_enquirer) = trim(db.ces_enquirer)\n                                        and trim(fi.left_rr) = trim(db.left_rr)\n                                        and trim(fi.loyalty_participant) = trim(db.loyalty_participant)\nwhen not matched then\ninsert\n    (\n        customerid,\n        firstname,\n        lastname,\n        address1,\n        address2,\n        address3,\n        town,\n        county,\n        postcode,\n        email,\n        opt_in,\n        pregnant,\n        welcome_pack_received,\n        antenatal_stage,\n        postnatal_stage,\n        gender,\n        multiple_children,\n        opened_email_last_3m,\n        clicked_email_last_3m,\n        opened_email_ever,\n        clicked_email_ever,\n        --clicked_product_link,\n        --clicked_loyalty,\n        registered_moac_app,\n        ces_enquirer,\n        left_rr,\n        loyalty_participant,\n        updated_date\n    )\nvalues\n    (\n        fi.customerid,\n        trim(fi.firstname),\n        trim(fi.lastname),\n        trim(fi.address1),\n        trim(fi.address2),\n        trim(fi.address3),\n        trim(fi.town),\n        trim(fi.county),\n        trim(fi.postcode),\n        trim(fi.email),\n        trim(fi.opt_in),\n        trim(fi.pregnant),\n        trim(fi.welcome_pack_received),\n        trim(fi.antenatal_stage),\n        trim(fi.postnatal_stage),\n        trim(fi.gender),\n        trim(fi.multiple_children),\n        trim(fi.opened_email_last_3m),\n        trim(fi.clicked_email_last_3m),\n        trim(fi.opened_email_ever),\n        trim(fi.clicked_email_ever),\n        --trim(fi.clicked_product_link),\n        --trim(fi.clicked_loyalty),\n        trim(fi.registered_moac_app),\n        trim(fi.ces_enquirer),\n        trim(fi.left_rr),\n        trim(fi.loyalty_participant),\n        current_date\n    );\n\n\n--remove older records for people who have been updated\ndelete from ${Database}.db.sma_live_ramp\nwhere customerid in (\n                        select distinct\n                            customerid\n                        from ${Database}.db.sma_live_ramp\n                        group by customerid\n                        having count(*) > 1\n                    )\n    and updated_date <> current_date;\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'sma_live_ramp',\n    'insert merge',\n    cast((select count(*) from ${Database}.db.sma_live_ramp where updated_date = current_date) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n--blank out all records for people no longer eligible\nupdate ${Database}.db.sma_live_ramp db\nset firstname = '',\n    lastname = '',\n    address1 = '',\n    address2 = '',\n    address3 = '',\n    town = '',\n    county = '',\n    postcode = '',\n    email = '',\n    opt_in = '',\n    pregnant = '',\n    welcome_pack_received = '',\n    antenatal_stage = '',\n    postnatal_stage = '',\n    gender = '',\n    multiple_children = '',\n    opened_email_last_3m = '',\n    clicked_email_last_3m = '',\n    opened_email_ever = '',\n    clicked_email_ever = '',\n    --clicked_product_link = '',\n    --clicked_loyalty = '',\n    registered_moac_app = '',\n    ces_enquirer = '',\n    left_rr = '',\n    loyalty_participant = '',\n    updated_date = current_date\nwhere customerid not in (\n                            select distinct\n                                customerid\n                            from ${Database}.temp.sma_live_ramp_final\n                        );\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'sma_live_ramp',\n    'blanking records merge',\n    cast((select count(*) from ${Database}.db.sma_live_ramp where updated_date = current_date and email = '') as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\ndrop table if exists ${Database}.temp.sma_live_ramp_final;\n\n\n/******************************************************************************************\n   OUTPUT\n******************************************************************************************/\n\n--if merges run successfully but file export fails then below will need to be amended to mop up going back to date of last export\ncreate or replace table ${Database}.jobs.sma_live_ramp_final_output_opt_in\nas\nselect\n    customerid,\n    trim(firstname) as firstname,\n    trim(lastname) as lastname,\n    trim(address1) as address1,\n    trim(address2) as address2,\n    trim(address3) as address3,\n    trim(town) as town,\n    trim(county) as county,\n    trim(postcode) as postcode,\n    trim(email) as email1,\n    trim(opt_in) as opt_in,\n    trim(pregnant) as pregnant,\n    trim(welcome_pack_received) as welcome_pack_received,\n    trim(antenatal_stage) as antenatal_stage,\n    trim(postnatal_stage) as postnatal_stage,\n    trim(gender) as gender,\n    trim(multiple_children) as multiple_children,\n    trim(opened_email_last_3m) as opened_email_last_3m,\n    trim(clicked_email_last_3m) as clicked_email_last_3m,\n    trim(opened_email_ever) as opened_email_ever,\n    trim(clicked_email_ever) as clicked_email_ever,\n    --trim(clicked_product_link) as clicked_product_link,\n    --trim(clicked_loyalty) as clicked_loyalty,\n    trim(registered_moac_app) as registered_moac_app,\n    trim(ces_enquirer) as ces_enquirer,\n    trim(left_rr) as left_rr,\n    trim(loyalty_participant) as loyalty_participant\nfrom ${Database}.db.sma_live_ramp\nwhere updated_date = current_date\n    and trim(opt_in) = 'Y';\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'sma_live_ramp_final_output_opt_in',\n    'total records',\n    cast((select count(*) from ${Database}.jobs.sma_live_ramp_final_output_opt_in) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\ncreate or replace table ${Database}.jobs.sma_live_ramp_final_output_opt_out\nas\nselect\n    customerid,\n    trim(firstname) as firstname,\n    trim(lastname) as lastname,\n    trim(address1) as address1,\n    trim(address2) as address2,\n    trim(address3) as address3,\n    trim(town) as town,\n    trim(county) as county,\n    trim(postcode) as postcode,\n    trim(email) as email1,\n    trim(opt_in) as opt_in,\n    trim(pregnant) as pregnant,\n    trim(welcome_pack_received) as welcome_pack_received,\n    trim(antenatal_stage) as antenatal_stage,\n    trim(postnatal_stage) as postnatal_stage,\n    trim(gender) as gender,\n    trim(multiple_children) as multiple_children,\n    trim(opened_email_last_3m) as opened_email_last_3m,\n    trim(clicked_email_last_3m) as clicked_email_last_3m,\n    trim(opened_email_ever) as opened_email_ever,\n    trim(clicked_email_ever) as clicked_email_ever,\n    --trim(clicked_product_link) as clicked_product_link,\n    --trim(clicked_loyalty) as clicked_loyalty,\n    trim(registered_moac_app) as registered_moac_app,\n    trim(ces_enquirer) as ces_enquirer,\n    trim(left_rr) as left_rr,\n    trim(loyalty_participant) as loyalty_participant\nfrom ${Database}.db.sma_live_ramp\nwhere updated_date = current_date\n    and trim(opt_in) = 'N';\n\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    'sma_live_ramp_final_output_opt_out',\n    'total records',\n    cast((select count(*) from ${Database}.jobs.sma_live_ramp_final_output_opt_out) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n/******************************************************************************************\n   TIDY UP\n******************************************************************************************/\n\ninsert into ${Database}.db.build_log\nselect\n    '${Database}_liveRamp_daily_extract',\n    '*************************',\n    '*************************',\n    'end of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\n\n--alter warehouse set warehouse_size = 'Xsmall';\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect\n    CURRENT_TIMESTAMP::timestamp_ntz,\n    '${Database}',\n    'BUILD',\n    'Proc 24 - LiveRamp Extract',\n    'SCRIPT',\n    'FINISHED';\n\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"195715":{"id":195715,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":224,"y":240,"width":32,"height":32,"inputConnectorIDs":[195737],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Automated Extracts"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Automated Extracts"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"195716":{"id":195716,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":224,"y":16,"width":32,"height":32,"inputConnectorIDs":[195734],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Carnation Welcome Email Report"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Carnation Welcome Email Report"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"195717":{"id":195717,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":-672,"y":16,"width":32,"height":32,"inputConnectorIDs":[195740],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Emmas diary monthly report"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Emmas_diary_monthy_report"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"195718":{"id":195718,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":80,"y":224,"width":32,"height":32,"inputConnectorIDs":[195743],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[195701],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"If 0"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Simple"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Database"},"2":{"slot":2,"type":"STRING","value":"Is"},"3":{"slot":3,"type":"STRING","value":"Equal to"},"4":{"slot":4,"type":"STRING","value":"NESTLE"}}}},"visible":true},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"195719":{"id":195719,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":224,"y":160,"width":32,"height":32,"inputConnectorIDs":[195749],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Daily Connected Packaging report Output"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Daily Connected Packaging report Output"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"195720":{"id":195720,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":32,"y":-80,"width":32,"height":32,"inputConnectorIDs":[195746],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"LiveRamp Outputs Extract"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"LiveRamp Outputs Extract"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"195721":{"id":195721,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":-320,"y":304,"width":32,"height":32,"inputConnectorIDs":[195745],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Email Outputs Extract"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Email Outputs Extract"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"195722":{"id":195722,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":224,"y":-128,"width":32,"height":32,"inputConnectorIDs":[195736],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Daily PDC Output"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Daily PDC Output"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"195723":{"id":195723,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":-576,"y":-80,"width":32,"height":32,"inputConnectorIDs":[195750],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"GP_BS_monthly_report"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"GP_BS_monthly_report"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"195724":{"id":195724,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":-288,"y":-80,"width":32,"height":32,"inputConnectorIDs":[195739],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Suppression Outputs Extract"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Suppression Outputs Extract"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"195725":{"id":195725,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-159239741,"x":-480,"y":16,"width":32,"height":32,"inputConnectorIDs":[195738],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"AiO Monthly Reports Refresh"}}}},"visible":true},"2":{"slot":2,"name":"Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"eu-west-1"}}}},"visible":true},"3":{"slot":3,"name":"Queue Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${SQSClient}_reporting.fifo"}}}},"visible":true},"4":{"slot":4,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${Database} REPORT AIO_Monthly_Report"}}}},"visible":true},"5":{"slot":5,"name":"Message Format","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Plain"}}}},"visible":true},"6":{"slot":6,"name":"Message Group Id","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${Database}_REPORTS"}}}},"visible":true},"7":{"slot":7,"name":"Message Deduplication Id","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${DateForQueue.now().format(\"yyyyMMddHHmmssSSS\")}"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"195726":{"id":195726,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":-208,"y":272,"width":32,"height":32,"inputConnectorIDs":[195742],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Untagged Campaigns Email"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Untagged Campaigns Email"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"195727":{"id":195727,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-48,"y":176,"width":32,"height":32,"inputConnectorIDs":[195741],"outputSuccessConnectorIDs":[195744],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc 22c SMA Qlik output"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nProgram           : Nestle daily SMA qlik reports outputs\nAuthor            : Luke Dudley\nClient Name       : Nestle\nJob Number        :\nStandard Machine  : Kognitio\nAmendment History : v01 - LD 20200709 - Created\n******************************************************************************************/\n\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect  current_timestamp::timestamp_ntz\n,       '${Database}'\n,       'BUILD'\n,       'Proc 22c SMA Qlik'\n,       'SCRIPT'\n,       'STARTED'\n;\n\n\ninsert into ${Database}.db.build_log\nselect\n    'sma_qliksense',\n    '*************************',\n    '*************************',\n    'start of script',\n    current_timestamp;\n\n\n/******************************************************************************************\n                                         QLIKSENSE\n******************************************************************************************/\n\n\ncreate or replace table ${Database}.jobs.sma_qliksense_careline\nas\nselect\n    ca.*,\n    ci.member,\n    ci.core,\n    ci.country\nfrom ${Database}.live.cid_sma_careline ca\nleft join ${Database}.live.cid_sma ci on ci.cid = ca.cid;\n\n\ncreate or replace table ${Database}.jobs.sma_qliksense_cid_child\nas\nselect\n    ch.cid,\n    ch.gender,\n    case when ch.auto_promoted = 1 then 'True' else 'False' end as autopromoted,\n    ch.child_stage_now,\n    trim(case\n             when lower(ch.child_stage_now) regexp '.*t.*' then 'Pregnancy'\n             when lower(ch.child_stage_now) regexp '(.*)(1|2)(.*)' then 'Newborn (0-6m)'\n             when lower(ch.child_stage_now) regexp '(.*)(3|4)(.*)' then 'Baby (6-12m)'\n             when lower(ch.child_stage_now) regexp '(.*)(5|6)(.*)' then 'Toddler (12-36m)'\n         end) as child_stage_group,\n    ch.child_stage_reg,\n    ((year(ch.dob)-1)*12) + month(ch.dob) as child_month_number,\n    ch.dob as dateofbirth,\n    case\n        when lower(ch.child_stage_now) regexp '.*t.*' then 'Pregnancy'\n        when floor((current_date - ch.dob)/7) between 0 and 4 then '0-4 weeks'\n        when floor((current_date - ch.dob)/7) between 5 and 6 then '5-6 weeks'\n        when floor((current_date - ch.dob)/7) between 6 and 8 then '7-8 weeks'\n        when ch.child_stage_now = 'S1' then '2-3m'\n        when ch.child_stage_now = 'S2' then '4-5m'\n        when ch.child_stage_now = 'S3' then '6-7m'\n        when ch.child_stage_now = 'S4' then '8-11m'\n        when ch.child_stage_now = 'S5' then '12-23m'\n        when ch.child_stage_now = 'S6' then '24-35m'\n        when ch.child_stage_now = 'S7' then '36m+'\n        else ch.child_stage_now\n    end as child_stage_age,\n    case\n        when lower(ch.child_stage_now) regexp '.*t.*' then 'Pregnancy ' || child_stage_now\n        when floor(months_between(current_date-7,ch.dob)) between 0 and 35 then cast(cast(round(floor(months_between(current_date-7,ch.dob)),0) as decimal(5,0)) as varchar) || ' months'\n        when floor(months_between(current_date,ch.dob)) >= 36 then '36 months+'\n        else 'no stage'\n    end as child_stage_detail,\n    first_value(case\n                    when lower(ch.child_stage_now) regexp '.*t.*' then 'Antenatal (>= -9m to < 0m)'\n                    when lower(ch.child_stage_now) regexp '(.*)(1|2)(.*)' then 'Newborn (>= 0m to < 6m)'\n                    when lower(ch.child_stage_now) regexp '(.*)(3|4)(.*)' then 'Baby (>= 6m to < 12m)'\n                    when lower(ch.child_stage_now) regexp '(.*)(5|6)(.*)' then 'Toddler (>= 12m to < 36m)'\n                    else 'No Stage'\n                end) over(partition by ch.cid order by ch.dob desc nulls last) as youngest_child_stage,\n    first_value(case\n                    when lower(ch.child_stage_now) regexp '.*t.*' then 'Antenatal '||child_stage_now\n                    when floor(months_between(current_date-7,ch.dob)) between 0 and 35 then cast(cast(round(floor(months_between(current_date-7,ch.dob)),0) as decimal(5,0)) as varchar)||' months'\n                    when floor(months_between(current_date,ch.dob)) >= 36 then '36 months+'\n                    else 'no stage'\n                end) over(partition by ch.cid order by ch.dob desc nulls last) as youngest_child_stage_detail\nfrom ${Database}.live.cid_sma c\ninner join ${Database}.live.dependant ch on c.cid = ch.cid\nwhere lower(ch.child_stage_now) regexp '(.*)(1|2|3|4|5|6)(.*)'\n    and ch.live_flag = 1;\n\n\nalter warehouse set warehouse_size = 'Small';\n\ncreate or replace table ${Database}.temp.sma_names_attributes_rollup\nas\nselect distinct\n    xr.cid,\n    na.*\nfrom (\n         select\n             name_urn,\n             joined_source as babyclubjoinedreference,\n             account_created as registrationdate,\n             source_date,\n             row_number() over\n                 (\n                     partition by name_urn\n                     order by\n                         source_date desc nulls last,\n                         source_urn desc nulls last\n                 ) as rn\n         from ${Database}.db.names_attributes\n     ) na\ninner join ${Database}.db.names nm on nm.name_urn = na.name_urn\n                                  and nm.source_brand_id = 32\ninner join ${Database}.live.xref_name_urn xr on xr.name_urn = nm.name_urn\nwhere na.rn = 1;\n\n\ncreate or replace table ${Database}.jobs.sma_qliksense_cid\nas\nselect\n    c.cid,\n        case when c.gender = 'M' then 'Male' when gender = 'F' then 'Female' else 'Unknown' end as registrant_gender,\n        mailable,\n        emailable,\n        cc.emailable_cerelac,\n        dp_optin_raw,\n        case\n            when live_joinedsource = 'PPC' then 'Pay-per-Click'\n            when live_joinedsource like 'ROI Promotion%' then 'Ireland Promo'\n            when coalesce(trim(live_joinedsource),'') = '' then 'Unknown'\n            when lower(live_joinedsource) regexp '.*facebook.*' then replace(live_joinedsource,' - Facebook','')\n            when lower(live_joinedsource) regexp '.*instagram.*' then replace(live_joinedsource,' - Instagram','')\n            when lower(live_joinedsource) regexp '.*organic.*|website.*' then 'Organic'\n            when lower(live_joinedsource) regexp 'her.*' and lower(live_joinedsource) regexp 'family' then 'HerFamily.ie'\n            when lower(live_joinedsource) regexp 'her.*' then 'Her.ie'\n            when lower(live_joinedsource) regexp '.*moments.*' then 'Mother''s Day 2017'\n            when lower(live_joinedsource) regexp '.*2017 fb-learn more.*' then '2017 FB-Newborn 1st Week'\n            when lower(live_joinedsource) regexp '.*mummypages.*' and live_regdate >= '2018-01-01' then 'MP Comp - Car Seat 2018'\n            when lower(live_joinedsource) regexp '.*mother''s day 2019.*' and lower(live_joinedsource) regexp '.*facebook.*|.*instagram.*' then 'Mother''s Day 2019'\n            else live_joinedsource\n        end as joinedsource,\n        case\n            when lower(live_joinedsource) regexp '(.*)(facebook|fb|moments|father''s day 2017)(.*)' then 'Facebook'\n            when lower(live_joinedsource) regexp '.*instagram.*' then 'Instagram'\n            when lower(live_joinedsource) regexp '.*mum and baby.*|.*fanfinders.*|.*mummypages.*|.*captain.*|.*mfm.*|her.*' then 'Co-Registration'\n            when lower(live_joinedsource) regexp '.*baby fair.*|babyfair.*' then 'Baby Fair'\n            when live_joinedsource ='PPC' then 'Pay-per-Click'\n            when live_joinedsource like 'ROI Promotion%' then 'Ireland Promo'\n            when coalesce(trim(live_joinedsource),'') = '' then 'Unknown'\n            when lower(live_joinedsource) regexp '.*facebook.*' then live_joinedsource\n            when lower(live_joinedsource) regexp '.*organic.*|website.*' then 'Organic'\n            else live_joinedsource\n        end as joinedsourcegp,\n        case\n            when live_joinedsource = 'Babyshow'\n                or live_joinedsource = 'Careline'\n                or live_joinedsource like 'ROI Promotion%' then 'Offline'\n            when coalesce(trim(live_joinedsource),'') = '' then 'Unknown'\n            else 'Online'\n        end as mediachannel,\n        case\n            when live_joinedsource = 'Careline'\n                or lower(live_joinedsource) regexp '.*organic.*|website.*'\n                or live_joinedsource like 'ROI Promotion%'\n                or live_joinedsource= 'PPC' then 'SMA'\n            when coalesce(trim(live_joinedsource),'') = '' then 'Unknown'\n            else 'Thirdparty'\n        end as mediasource,\n        live_regdate as registrationdate,\n        case\n            when lower(member_status) regexp '.*reactivated co-reg.*' then na.source_date\n            else coalesce(comms.source_date,na.registrationdate)\n        end as source_date,\n        member_status as memberstatus,\n        core_status as corestatus,\n        member,\n        core,\n        child_under_27W,\n        c.Email_Cluster_New,\n        c.email_cluster as email_cluster_all,\n        c.email_cluster,\n        case\n            when lower(email_cluster) regexp '(.*)(1|2)(.*)' then 'Inactive'\n            when lower(email_cluster) regexp '(.*)(3|4|5|6)(.*)' then 'Engaged'\n            else 'Not Contacting'\n        end as clustergroup,\n        case\n            when lower(live_joinedsource) regexp '(.*)(roi|mummypages|babyfairie)(.*)' then 'Ireland'\n            else coalesce(country,'')\n        end as country,\n        cast(upper(case when substring(lower(c.postcode),2,1) regexp '.*[a-z].*' then left(c.postcode,2) else left(c.postcode,1) end) as char(2)) as postal_area,\n        c.live_reg_cost as reg_cost,\n        cast(c.mothers_day_date as date) as mothers_day_date,\n        babyfair_date,\n        case when babyfair_ticket > '' then 1 else 0 end babyfair_ticket,\n        welcome_pack_date,\n        case when welcome_pack_date is not null or address_umbraco is not null then address_added_date else cast(null as date) end as address_added_date,\n        case when address_added_date is not null and welcome_pack_date is not null then 1 else 0 end as welcome_pack,\n        case when welcome_pack_date is not null or address_umbraco is not null then 1 else 0 end as address_pack,\n        last_active_date\nfrom ${Database}.live.cid_sma c\nleft join (\n              select\n                  cid,\n                  emailable as emailable_cerelac\n              from ${Database}.live.cid_cerelac\n          ) cc on cc.cid = c.cid\nleft join ${Database}.temp.sma_names_attributes_rollup na on na.name_urn = c.live_name_urn\nleft join (\n              select\n                  c.cid,\n                  na.babyclubjoinedreference,\n                  max(cast(comms.extract_date as date)) + 1 as extract_date,\n                  max(cast(na.source_date as date)) + 1 as source_date\n              from ${Database}.live.cid_sma c\n              inner join ${Database}.temp.sma_names_attributes_rollup na on na.cid = c.cid\n              inner join ${Database}.db.sma_thirdparty comms on comms.name_urn = na.name_urn\n              where cast(live_regdate as date) between cast(comms.extract_date as date) and cast(comms.extract_date as date) + 30\n              group by 1,2\n          ) comms on c.cid = comms.cid\n                 and comms.babyclubjoinedreference = c.live_joinedsource\nleft join (\n              select\n                  c.cid,\n                  min(cc.communication_date) as welcome_pack_date,\n                  min(address.min_date) as address_added_date,\n                  max(address_umbraco) as address_umbraco\n              from ${Database}.live.cid_sma c\n              left join (\n                            select\n                                cid,\n                                min(case when coalesce(trim(n.add1),'') <> '' or coalesce(trim(n.postcode),'') <> '' then n.source_date else cast(null as date) end) as min_date,\n                                min(case when (coalesce(trim(n.add1),'') <> '' or coalesce(trim(n.postcode),'') <> '') and lower(n.source) regexp '(.*)(reg_dnn|reg_umb|reg_gig)(.*)' then 1 else 0 end) as address_umbraco\n                            from ${Database}.db.names n\n                            inner join ${Database}.live.xref_name_urn x on n.name_urn = x.name_urn\n                            where n.source_brand_id = 32\n                            group by 1\n                            having min(case\n                                           when coalesce(trim(n.add1),'') <> ''\n                                               or coalesce(trim(n.postcode),'') <> '' then n.source_date\n                                           else cast(null as date)\n                                       end) is not null\n                        ) address on address.cid = c.cid\n              left join ${Database}.live.sma_comms_hist cc on cc.cid = c.cid\n                                                     and cc.pack_id in (834,831,832,833,1186,1184,1187,1185,343,345,344,222,940,942,939,941,12,11,17,341,16,342,1627,1628,1634,1635,1636,1637,2015,2017)\n              group by 1\n          ) welcome on welcome.cid = c.cid\nwhere member = 1\n    or core = 1\n    or babyfair_ticket > '';\n\n\nalter warehouse set warehouse_size = 'Medium';\n\ncreate or replace table ${Database}.jobs.sma_qliksense_engagement\nas\nselect\n    row_number() over(order by 1) as engagement_key,\n    e.cid,\n    case\n        when (lower(messagename) regexp '.*welcome 1.*' and lower(messagename) regexp '.*uk.*') or lower(messagename) regexp '.*welcome_pregnancy_uk.*' then 'WELCOME ANTENATAL UK'\n        when (lower(messagename) regexp '.*welcome 1.*' and lower(messagename) regexp '.*roi.*') or lower(messagename) regexp '.*welcome_pregnancy_roi.*' then 'WELCOME ANTENATAL ROI'\n        when (lower(messagename) regexp '.*welcome 2.*' and lower(messagename) regexp '.*uk.*') or lower(messagename) regexp '.*welcome_newborn_uk.*' then 'WELCOME POST NEWBORN UK'\n        when (lower(messagename) regexp '.*welcome 2.*' and lower(messagename) regexp '.*roi.*') or lower(messagename) regexp '.*welcome_newborn_roi.*' then 'WELCOME POST NEWBORN ROI'\n        when (lower(messagename) regexp '.*welcome 3.*' and lower(messagename) regexp '.*uk.*') or lower(messagename) regexp '.*welcome_baby_uk.*' then 'WELCOME POST BABY UK'\n        when (lower(messagename) regexp '.*welcome 3.*' and lower(messagename) regexp '.*roi.*') or lower(messagename) regexp '.*welcome_baby_roi.*' then 'WELCOME POST BABY ROI'\n        when (lower(messagename) regexp '.*welcome 4.*' and lower(messagename) regexp '.*uk.*') or lower(messagename) regexp '.*welcome_toddler_uk.*' then 'WELCOME TODDLER UK'\n        when (lower(messagename) regexp '.*welcome 4.*' and lower(messagename) regexp '.*roi.*') or lower(messagename) regexp '.*welcome_toddler_roi.*' then 'WELCOME TODDLER ROI'\n        else messagename\n    end as name,\n    master_category,\n    category,\n    subcategory as subcat,\n    c.gender,\n    e.country as country,\n    case\n        when trim(stage) = 'Pregnancy' then 'Antenatal'\n        when trim(stage) = 'New Born' then 'Post Newborn'\n        when trim(stage) = 'Baby' then 'Post Baby'\n        else trim(stage)\n    end as stage,\n    case\n        when trim(stage) = 'Pregnancy' then 1\n        when trim(stage) = 'New Born' then 2\n        when trim(stage) = 'Baby' then 3\n        when trim(stage) = 'Toddler' then 4\n        when trim(stage) = 'Generic' then 5\n        else 6\n    end as stage_order,\n    sent_flag as sentflag,\n    sent_date as sentdate,\n    suppress_flag as suppressionflag,\n    suppress_date as suppressdate,\n    bounce_flag as bounceflag,\n    bounce_reporting_flag as bounce_reporting_flag,\n    bounce_date as bouncedate,\n    case when sent_flag = 1 and bounce_reporting_flag = 0 and suppress_flag = 0 then 1 else 0 end as deliveredflag,\n    case when open_qty > 0 then 1 else 0 end as open_qty,\n    open_lastdate,\n    open_firstdate,\n    click_qty,\n    case when click_qty > 0 and optout_flag = 0 and close_flag = 0 then 1 else 0 end as clicked,\n    click_lastdate,\n    click_firstdate,\n    optout_flag as optoutflag,\n    optout_date as optoutdate,\n    close_flag as closeflag,\n    close_date as closedate,\n    case when optout_flag = 1 or close_flag = 1 then 1 else 0 end as anyoptout,\n    case\n        when lower(master_category) regexp '.*club.*' then 1\n        when lower(master_category) regexp '.*seasonal.*' then 2\n        when lower(master_category) regexp '.*tactical.*|.*other.*' then 3\n        else 4\n    end as mast_cat_order,\n    case\n        when lower(category) regexp '.*antenatal.*' then 1\n        when lower(category) regexp '.*post newborn.*' then 2\n        when lower(category) regexp '.*post baby.*' then 3\n        when lower(category) regexp '.*toddler.*' then 4\n        when lower(category) regexp '.*welcome.*' then 5\n        when lower(category) regexp '.*mother.*' then 6\n        when lower(category) regexp '.*father.*' then 7\n        when lower(category) regexp '.*christmas.*' then 8\n        when lower(category) regexp '.*rewards.*' then 9\n        when lower(category) regexp '.*survey.*' then 10\n        when lower(category) regexp '.*product.*' then 11\n        when lower(category) regexp '.*event.*' then 12\n        else 13\n    end as cat_order,\n    case\n        when lower(category) regexp '.*antenatal.*' and lower(subcategory) regexp '.*t1.*' then 1\n        when lower(category) regexp '.*antenatal.*' and lower(subcategory) regexp '.*t2.*' then 2\n        when lower(category) regexp '.*antenatal.*' and lower(subcategory) regexp '.*t3.*' then 3\n        when lower(category) regexp '.*rewards.*' and lower(subcategory) regexp '.*pilot.*' then 4\n        when lower(category) regexp '.*rewards.*' and lower(subcategory) regexp '.* launch.*' then 5\n        when lower(category) regexp '.*rewards.*' and lower(subcategory) regexp '.*relaunch.*' then 6\n        when lower(category) regexp '.*rewards.*' and lower(subcategory) regexp '.*milestone.*' then 7\n        when lower(category) regexp '.*survey.*' and lower(subcategory) regexp '.*welcome.*' then 8\n        when lower(category) regexp '.*survey.*' and lower(subcategory) regexp '.*stool.*' then 9\n        when lower(category) regexp '.*event.*' and lower(subcategory) regexp '.*christmas.*' then 10\n        when lower(category) regexp '.*event.*' and subcategory = 'Baby Fair' then 11\n        when lower(category) regexp '.*event.*' and lower(subcategory) regexp '.*asda.*' then 12\n        when lower(category) regexp '.*event.*' and lower(subcategory) regexp '.*flower wall.*' then 13\n        when lower(category) regexp '.*event.*' and lower(subcategory) regexp '.*breastfeeding.*' then 14\n        when lower(category) regexp '.*product.*' and lower(subcategory) regexp '.*insiders.*' then 15\n        else 16\n    end as subcat_order,\n    case\n        when lower(messagename) regexp '.*antenatal week.*' then cast(replace(replace(replace(messagename,'ANTENATAL WEEK ',''),' ROI',''),'ECRM ','') as int)\n        when lower(messagename) regexp '.*post month.*|.*postnatal month.*' then cast(replace(replace(replace(replace(messagename,'POST MONTH ',''),'POSTNATAL MONTH',''),' ROI',''),'ECRM ','') as int)\n        when lower(messagename) regexp '.*breastfeeding week.*' then 99\n        when lower(messagename) regexp '.*breastfeeding.*week.*' then cast(trim(replace(replace(replace(replace(replace(replace(messagename,'BREASTFEEDING',''),'ANTE',''),'WEEK',''),'POSTNATAL',''),'ROI',''),'POST','')) as int)\n        when lower(messagename) regexp '.*post week.*|.*postnatal week.*' then cast(trim(replace(replace(replace(replace(messagename,'POST WEEK ',''),'POSTNATAL WEEK',''),' ROI',''),'ECRM ','')) as int)\n        when lower(category) regexp '.*toddler.*' and subcategory = 'Toddler' then cast(trim(replace(replace(replace(replace(replace(replace(messagename,'TODDLER',''),'_',''),'UK',''),'MONTH',''),'M',''),'ROI','')) as int)\n        when lower(messagename) regexp '.*welcome.[0-9].*' then cast(left(trim(replace(messagename,'WELCOME ','')),1) as int)\n        when lower(messagename) regexp '.*sma25.*toddler.*' then cast(substring(messagename ,position('BATCH' in messagename )+6,2) as int)\n        when lower(messagename) regexp '.*sma25.*follow.*' then 20+cast(substring(messagename ,position('BATCH' in messagename )+6,2) as int)\n        when lower(messagename) regexp '.*mothers day.*follow up.*' then cast(trim(replace(replace(replace(replace(messagename,'MOTHERS DAY',''),'FOLLOW UP',''),'UK',''),'ROI','')) as integer)+1\n        when lower(category) regexp '.*mother.*' and lower(messagename) regexp '.*newborn.*' then 1\n        when lower(category) regexp '.*mother.*' and lower(messagename) regexp '.*baby.*' then 2\n        when lower(category) regexp '.*mother.*' and lower(messagename) regexp '.*toddler.*' then 3\n        when lower(category) regexp '.*christmas.*' and lower(messagename) regexp '.*antenatal.*' then 4\n        when lower(category) regexp '.*christmas.*' and lower(messagename) regexp '.*newborn.*' then 5\n        when lower(category) regexp '.*christmas.*' and lower(messagename) regexp '.*baby.*' then 6\n        when lower(category) regexp '.*christmas.*' and lower(messagename) regexp '.*toddler.*' then 7\n        when subcategory = 'Baby Fair' and lower(messagename) regexp '.*october.*' and lower(messagename) regexp '.*preg.*' then 8\n        when subcategory = 'Baby Fair' and lower(messagename) regexp '.*october.*' and lower(messagename) regexp '.*newborn.*' then 9\n        when subcategory = 'Baby Fair' and lower(messagename) regexp '.*october.*' and lower(messagename) regexp '.*baby.*' then 10\n        when subcategory = 'Baby Fair' and lower(messagename) regexp '.*october.*' and lower(messagename) regexp '.*toddler.*' then 11\n        when subcategory = 'Baby Fair' and lower(messagename) regexp '.*october.*' and lower(messagename) regexp '.*generic.*' then 12\n        when subcategory = 'Baby Fair' and lower(messagename) regexp '.*april.*' and lower(messagename) regexp '.*preg.*' then 13\n        when subcategory = 'Baby Fair' and lower(messagename) regexp '.*april.*' and lower(messagename) regexp '.*newborn.*' then 14\n        when subcategory = 'Baby Fair' and lower(messagename) regexp '.*april.*' and lower(messagename) regexp '.*baby.*' then 15\n        when subcategory = 'Baby Fair' and lower(messagename) regexp '.*april.*' and lower(messagename) regexp '.*toddler.*' then 16\n        when subcategory = 'Baby Fair' and lower(messagename) regexp '.*april.*' and lower(messagename) regexp '.*generic.*' then 17\n        when lower(subcategory) regexp '.*flower wall.*' and lower(messagename) regexp '.*2017.*' then 18\n        when lower(subcategory) regexp '.*flower wall.*' and lower(messagename) regexp '.*2018.*' then 19\n        when lower(subcategory) regexp '.*stool survey.*' and lower(messagename) regexp '.*test.*' then 20\n        when subcategory = 'Rewards Pilot Jan17-Jul17' and lower(messagename) regexp '.*launch.*' then 21\n        when subcategory = 'Rewards Pilot Jan17-Jul17' and lower(messagename) regexp '.*activation.*' then 22\n        when subcategory = 'Rewards Pilot Jan17-Jul17' and lower(messagename) regexp '.*toddler.*' then 23\n        when subcategory = 'Rewards Launch Jul17' and lower(messagename) regexp '.*one off.*' then 24\n        when subcategory = 'Rewards Launch Jul17' and lower(messagename) regexp '.*launch.*' then 25\n        when subcategory = 'Rewards Launch Jul17' and lower(messagename) regexp '.*activation.*' then 26\n        when subcategory = 'Rewards Launch Jul17' and lower(messagename) regexp '.*toddler.*' then 27\n        when subcategory = 'Rewards Milestone Launch Feb18' and lower(messagename) regexp '.*pilot.*' then 28\n        when subcategory = 'Rewards Milestone Launch Feb18' and lower(messagename) regexp '.*launch.*' then 29\n        else 99\n    end as name_order\nfrom ${Database}.live.sma_engagement_levels_messages e\nleft join ${Database}.live.cid_sma c on c.cid = e.cid\nwhere sent_date >= cast(to_char(year(current_date)-1)||'-01-01' as date)\n    and coalesce(master_category,'Test') not in ('Test','')\n    and trim(category) <> 'Acquisition'\n    and trim(messagename) not in ('HCP INVITATION','')\n    and trim(brand) = 'SMA'\norder by\n    mast_cat_order,\n    cat_order,\n    subcat_order,\n    name_order;\n\n\nupdate ${Database}.jobs.sma_qliksense_engagement\nset stage = 'Toddler',\n    stage_order = 4\nwhere lower(name) regexp '.*live chat.*toddler.*';\n\n\ncreate or replace table ${Database}.jobs.sma_qliksense_linklabel\nas\nselect\n    l.cid,\n    l.master_category,\n    l.category,\n    l.subcategory,\n    l.messagename,\n    l.country,\n    l.cell_stage,\n    l.link_category,\n    l.label_clicks,\n    l.content_category,\n    l.content_type,\n    l.utm_content,\n    l.utm_term,\n    c.engagement_key\nfrom (\n         select\n             x.cid,\n             a.master_category,\n             a.category,\n             a.subcategory,\n             case\n                 when (lower(a.messagename) regexp '.*welcome 1.*' and lower(a.messagename) regexp '.*uk.*') or lower(a.messagename) regexp '.*welcome_pregnancy_uk.*' then 'welcome antenatal uk'\n                 when (lower(a.messagename) regexp '.*welcome 1.*' and lower(a.messagename) regexp '.*roi.*') or lower(a.messagename) regexp '.*welcome_pregnancy_roi.*' then 'welcome antenatal roi'\n                 when (lower(a.messagename) regexp '.*welcome 2.*' and lower(a.messagename) regexp '.*uk.*') or lower(a.messagename) regexp '.*welcome_newborn_uk.*' then 'welcome post newborn uk'\n                 when (lower(a.messagename) regexp '.*welcome 2.*' and lower(a.messagename) regexp '.*roi.*') or lower(a.messagename) regexp '.*welcome_newborn_roi.*' then 'welcome post newborn roi'\n                 when (lower(a.messagename) regexp '.*welcome 3.*' and lower(a.messagename) regexp '.*uk.*') or lower(a.messagename) regexp '.*welcome_baby_uk.*' then 'welcome post baby uk'\n                 when (lower(a.messagename) regexp '.*welcome 3.*' and lower(a.messagename) regexp '.*roi.*') or lower(a.messagename) regexp '.*welcome_baby_roi.*' then 'welcome post baby roi'\n                 when (lower(a.messagename) regexp '.*welcome 4.*' and lower(a.messagename) regexp '.*uk.*') or lower(a.messagename) regexp '.*welcome_toddler_uk.*' then 'welcome toddler uk'\n                 when (lower(a.messagename) regexp '.*welcome 4.*' and lower(a.messagename) regexp '.*roi.*') or lower(a.messagename) regexp '.*welcome_toddler_roi.*' then 'welcome toddler roi'\n                 else a.messagename\n             end as messagename,\n             a.country,\n             case\n                 when trim(a.cell_stage) = 'Pregnancy' then 'Antenatal'\n                 when trim(a.cell_stage) = 'New Born' then 'Post Newborn'\n                 when trim(a.cell_stage) = 'Baby' then 'Post Baby'\n                 else trim(a.cell_stage)\n             end as cell_stage,\n             case\n                 when lower(link_url) regexp '.*www.smamums..*careline.*' then 'Careline'\n                 when lower(link_url) regexp '.*my-profile.*' then 'Update Details'\n                 when lower(link_url) regexp '.*unsubscribes.*|.*deregistration.*' then 'Unsubscribe'\n                 else 'Other'\n             end as link_category,\n             case when a.ecrm = 1 then trim(split_part(link_label,'|',1)) else '' end as content_category,\n             case when a.ecrm = 1 then trim(split_part(link_label,'|',2)) else '' end as content_type,\n             case\n                 when a.ecrm = 1 and position('utm_content',link_url) = 0 then 'No Module Position Tagging'\n                 when a.ecrm = 1 and position('utm_content',link_url) > 0 then replace(split_part(substring(link_url,position('utm_content',link_url)),'+',1),'utm_content=','')\n                 else ''\n             end as utm_content,\n             case\n                 when a.ecrm = 1 and position('utm_term',link_url) = 0 then 'No CTA Format Tagging'\n                 when a.ecrm = 1 and position('utm_term',link_url) > 0 then replace(split_part(substring(link_url,position('utm_term',link_url)),'&',1),'utm_term=','')\n                 else ''\n             end as utm_term,\n             count(*) as label_clicks\n         from ${Database}.temp.sma_adestra_base a\n         inner join ${Database}.live.xref_name_urn x on x.name_urn = a.name_urn\n         where coalesce(trim(link_url),'') <> ''\n             and lower(workspace_name) not regexp '.*cerelac.*'\n             and (\n                     a.ecrm = 0\n                  or position('utm_term',link_url) > 0\n                 )\n         group by 1,2,3,4,5,6,7,8,9,10,11,12\n     ) l\ninner join ${Database}.jobs.sma_qliksense_engagement c on c.cid = l.cid\n                                                 and trim(c.master_category) = trim(l.master_category)\n                                                 and trim(c.category) = trim(l.category)\n                                                 and trim(c.subcat) = trim(l.subcategory)\n                                                 and trim(c.name) = trim(upper(l.messagename))\n                                                 and trim(c.country) = trim(l.country)\n                                                 and trim(c.stage) = trim(l.cell_stage);\n\n\nalter warehouse set warehouse_size = 'Xsmall';\n\ncreate or replace table ${Database}.jobs.sma_qliksense_loyalty\nas\nselect\n    x.cid,\n    case\n        when shop.shopium_offer_id in (13653,13664) then 'Transition '||trim(shop.product_user)\n        when shop.shopium_offer_id in (13652,13662) then 'Activation '||trim(shop.product_user)\n        else shop.product_user\n    end as product_user,\n    count(distinct shop.sma_user_id) as user_count,\n    min(shop.baby_dob)  as baby_dob,\n    min(shop.joining_date) as joined_date,\n    max(shop.country) as country,\n    max(case when products.prod_count = 1 then shop.product_user else 'Both' end) as product_group,\n    min(shop.receipt_submitted) as receipt_earliest,\n    max(shop.receipt_submitted) as receipt_lastest,\n    sum(cast(case when trim(shop.fo_per_receipt) = '' then '0' else shop.fo_per_receipt end as tinyint)) as fo_total,\n    sum(cast(case when trim(shop.gum_per_receipt) = '' then '0' else shop.gum_per_receipt end as tinyint)) as gum_total,\n    count(*) as total_receipts,\n    count(case when shop.receipt_accepted_date is not null then shop.receipt_accepted_date else cast(null as date) end) as total_accepted_receipts,\n    sum(case when trim(shop.country) = 'ROI' then shop.offer_value*0.87 else shop.offer_value end) as total_reward_value,\n    min(shop.cashback_date) as cashback_earliest,\n    max(shop.cashback_date) as cashback_latest,\n    max(case when trim(shop.country) = 'ROI' then shop.total_cashback*0.87 else shop.total_cashback end) as total_cashback\nfrom ${Database}.db.sma_shopmium_rewards shop\ninner join (\n               select\n                   umbraco_userno,\n                   min(cid) as cid\n               from ${Database}.db.names_attributes na\n               inner join ${Database}.live.xref_name_urn xr on xr.name_urn = na.name_urn\n               group by 1\n           ) x on shop.sma_user_id = to_char(x.umbraco_userno)\ninner join (\n               select\n                   sma_user_id,\n                   count(distinct product_user) as prod_count\n               from ${Database}.db.sma_shopmium_rewards\n               group by 1\n           ) products on shop.sma_user_id = products.sma_user_id\nwhere receipt_accepted_date is not null\ngroup by 1,2;\n\n\ncreate or replace table ${Database}.jobs.sma_qliksense_loyalty_eligible\nas\nselect\n    c.cid,\n    max(case when trim(child.child_stage_now) in ('S3','S4') then 1 else 0 end) as FO,\n    max(case when trim(child.child_stage_now) in ('S5','S6') then 1 else 0 end) as GUM,\n    max(case when lower(msgs.messagename) regexp '.*rewards toddler transition.*' then 1 else 0 end) as transition,\n    max(case when lower(msgs.messagename) regexp '.*rewards launch.*' then 1 else 0 end) as launch\nfrom ${Database}.live.cid_sma c\ninner join (\n               select\n                   *,\n                   row_number() over(partition by name_urn order by dob desc) as youngest_to_oldest_run\n               from ${Database}.live.dependant\n           ) child on c.live_name_urn = child.name_urn\nleft join ${Database}.live.sma_engagement_levels_messages msgs on c.cid = msgs.cid\nwhere c.source_nestle = 1\nand child.youngest_to_oldest_run = 1\nand (\n        c.first_regdate <= '2017-01-25'\n     or c.first_regdate <= add_months(current_date,-2)\n    )\ngroup by 1;\n\n\n/******************************************************************************************\n                                          FINISH PROC\n******************************************************************************************/\n\ninsert into ${Database}.db.build_log\nselect\n    'sma_qliksense',\n    '*************************',\n    '*************************',\n    'end of script',\n    current_timestamp;\n\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect  current_timestamp::timestamp_ntz\n,       '${Database}'\n,       'BUILD'\n,       'Proc 22c SMA Qlik'\n,       'SCRIPT'\n,       'FINISHED'\n;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"195730":{"id":195730,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":224,"y":-64,"width":32,"height":32,"inputConnectorIDs":[195748],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Purina Missing Acquisition Types Email"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Purina Missing Acquisition Types Email"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"195731":{"id":195731,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":224,"y":96,"width":32,"height":32,"inputConnectorIDs":[195735],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Purina Verification Emails Report"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Purina Verification Emails Report"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"195728":{"id":195728,"sourceID":195693,"targetID":195698},"195729":{"id":195729,"sourceID":195695,"targetID":195693},"195732":{"id":195732,"sourceID":195694,"targetID":195699},"195733":{"id":195733,"sourceID":195692,"targetID":195700},"195734":{"id":195734,"sourceID":195714,"targetID":195716},"195735":{"id":195735,"sourceID":195714,"targetID":195731},"195736":{"id":195736,"sourceID":195714,"targetID":195722},"195737":{"id":195737,"sourceID":195714,"targetID":195715},"195738":{"id":195738,"sourceID":195694,"targetID":195725},"195739":{"id":195739,"sourceID":195695,"targetID":195724},"195740":{"id":195740,"sourceID":195694,"targetID":195717},"195741":{"id":195741,"sourceID":195698,"targetID":195727},"195742":{"id":195742,"sourceID":195693,"targetID":195726},"195743":{"id":195743,"sourceID":195714,"targetID":195718},"195744":{"id":195744,"sourceID":195727,"targetID":195714},"195745":{"id":195745,"sourceID":195712,"targetID":195721},"195746":{"id":195746,"sourceID":195714,"targetID":195720},"195747":{"id":195747,"sourceID":195712,"targetID":195695},"195748":{"id":195748,"sourceID":195714,"targetID":195730},"195749":{"id":195749,"sourceID":195714,"targetID":195719},"195750":{"id":195750,"sourceID":195694,"targetID":195723}},"failureConnectors":{},"unconditionalConnectors":{"195704":{"id":195704,"sourceID":195699,"targetID":195712},"195705":{"id":195705,"sourceID":195700,"targetID":195697},"195710":{"id":195710,"sourceID":195689,"targetID":195696}},"trueConnectors":{"195701":{"id":195701,"sourceID":195718,"targetID":195713},"195702":{"id":195702,"sourceID":195697,"targetID":195694},"195703":{"id":195703,"sourceID":195696,"targetID":195692}},"falseConnectors":{"195706":{"id":195706,"sourceID":195697,"targetID":195699},"195707":{"id":195707,"sourceID":195696,"targetID":195700}},"iterationConnectors":{},"noteConnectors":{},"notes":{"195688":{"id":195688,"x":442,"y":271,"width":374,"height":167,"text":"**In QC**","colour":"e6e63c"}},"variables":{"DateForQueue":{"definition":{"name":"DateForQueue","type":"DATETIME","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"2020-01-01"},"GA_Unique":{"definition":{"name":"GA_Unique","type":"DECIMAL","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"SkipCode":{"definition":{"name":"SkipCode","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"0"}},"grids":{}},"info":{"name":"Nestle Reports and Extracts","description":"","type":"ORCHESTRATION","tag":"970f2bc1-b59e-45c7-a677-40fda3e8ccc0"}}