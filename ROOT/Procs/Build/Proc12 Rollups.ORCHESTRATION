{"job":{"components":{"197152":{"id":197152,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-226,"y":93,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of Proc 12 Rollups"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nProgram           : Nestle Rollups\nAuthor            : Lindsay Timms\nClient Name       : Nestle\nJob Number        : \nStandard Machine  : Kognitio\nAmendment History : v01 - LT 20170207 - Created\n                    ... various undocumented changes\n                    v02 - LW 20210803 brand_preference change (NUK05862 rework)\n                    v03 - Shira 20220421 exclude RESP_ADE_RMI from acquistion type base creation as this is not an acquired source (it is a response source)\n******************************************************************************************/\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 12 Rollups'\n, \t\t'SCRIPT'\n, \t\t'STARTED'\n;\n\n/******************************************************************************************\n                                         ROLLUP\n******************************************************************************************/\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '*************************',\n    '*************************',\n    'start of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;  \n\n\n---------------------\n-- cid base\n\ndrop table if exists ${Database}.temp.build_rollups_cid_base;\n   \nalter warehouse set warehouse_size = 'Large';\n   \nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_base  \nas\nselect \n    cid,\n    max(case when name_urn = latest_name_urn then hid end) as hid,\n    min(bbw_urn) as bbw_urn,\n    max(latest_name_urn) as name_urn,    \n    min(reg_date) as created_date,\n    max(data_date) as updated_date, \n    max(case when name_urn = name_urn_to_mail_ignoring_dp then country_clean end) as country,        \n    min(case when gender = '' then 'X' else gender end) as gender, -- min works assuming 'm','f','x' (gender conflicts are fixed below)\n    max(case when name_urn = name_urn_to_mail_ignoring_dp then postcode end) as postcode,\n    max(case when name_urn = name_urn_to_mail_ignoring_dp then postcode_area_home end) as postcode_area_home,    \n    max(case when name_urn = name_urn_to_mail_ignoring_dp then postcode_district_home end) as postcode_district_home,   \n    max(case when name_urn = name_urn_to_dob then dob end) as dob,\n    --    contactable status     \n    max(mailable_ignoring_dp) as mailable_ignoring_dp,\n    max(emailable_ignoring_dp) as emailable_ignoring_dp,\n    max(phoneable_ignoring_dp) as phoneable_ignoring_dp,\n    max(smsable_ignoring_dp) as smsable_ignoring_dp,    \n    --    which record for that customer is best to contact for each channel   \n    max(name_urn_to_mail_ignoring_dp) as name_urn_to_mail_ignoring_dp,\n    max(name_urn_to_email_ignoring_dp) as name_urn_to_email_ignoring_dp,       \n    max(name_urn_to_phone_ignoring_dp) as name_urn_to_phone_ignoring_dp,   \n    max(name_urn_to_sms_ignoring_dp) as name_urn_to_sms_ignoring_dp\nfrom\n\t(\n\tselect \n\t\tnm.cid\n\t\t,nm.hid\n\t\t,nm.name_urn\n\t\t,nm.bbw_urn\n\t\t,nm.reg_date\n\t\t,nm.data_date\n\t\t,nm.country_clean\n\t\t,nm.gender\n\t\t,nm.postcode\n\t\t,cf.mailable_ignoring_dp\n\t\t,cf.emailable_ignoring_dp\n\t\t,cf.phoneable_ignoring_dp\n\t\t,cf.smsable_ignoring_dp\n\t\t,case\n\t\t\twhen lower(collate(nm.name_urn,'')) not regexp '.*work.*' and upper(nm.postcode) in ('IRELAND','EIRE')                     then 'RO'\n\t\t\twhen lower(collate(nm.name_urn,'')) not regexp '.*work.*' then  case\n\t\t\t\t\t\twhen lower(substring(collate(nm.postcode,''),2,1)) regexp '.*[a-z].*' then left(nm.postcode,2) \n\t\t\t\t\t\telse left(nm.postcode,1) \n\t\t\t\t\tend \n\t\t\telse ''\n\t\tend as postcode_area_home\n\t\t,case\n\t\t\twhen lower(collate(nm.name_urn,'')) not regexp '.*work.*' then case \n\t\t\t\twhen lower(nm.country)='united kingdom' then left(upper(split_part(nm.postcode,' ',1)),10) \n\t\t\t\telse '' \n\t\t\t\tend\n\t\t\telse ''\n\t\tend as postcode_district_home\n\t\t,case \n\t\t\twhen nm.dob = '2001-01-01' then cast(null as date) \n\t\t\twhen nm.dob >= current_date then cast(null as date) \n\t\t\twhen nm.dob <= '1901-01-01' then cast(null as date) \n\t\t\telse nm.dob \n\t\tend as dob\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc, nm.name_urn asc) as Latest_name_urn\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by nm.data_date asc nulls last, nm.reg_date asc nulls last, nm.source_date asc nulls last, nm.bbw_urn asc, nm.name_urn asc) as Earliest_name_urn\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by case when nm.dob is not null then 1 else 0 end desc nulls last, nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc,nm.name_urn asc) as name_urn_to_dob\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by cf.mailable_ignoring_dp desc nulls last, nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc,nm.name_urn asc) as name_urn_to_mail_ignoring_dp\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by cf.emailable_ignoring_dp desc nulls last, nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc,nm.name_urn asc) as name_urn_to_email_ignoring_dp\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by cf.phoneable_ignoring_dp desc nulls last, nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc,nm.name_urn asc) as name_urn_to_phone_ignoring_dp\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by cf.smsable_ignoring_dp desc nulls last, nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc,nm.name_urn asc) as name_urn_to_sms_ignoring_dp\n\tfrom ${Database}.live.names nm \n\tinner join ${Database}.temp.build_names_contact_flags cf on nm.name_urn = cf.name_urn\n\t) t\ngroup by 1\n;\n\nalter warehouse set warehouse_size = 'Xsmall';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_base',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_base;   \n\n---------------------\n--  gender fix\n\ndrop table if exists ${Database}.temp.build_rollups_cid_gender_fix;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_gender_fix \nas\nselect   \n    cid,\n    max(case when lower(gender) = 'm' then 1 else 0 end) as male,\n    max(case when lower(gender) = 'f' then 1 else 0 end) as female\nfrom ${Database}.live.names\ngroup by cid\nhaving  max(case when lower(gender) = 'm' then 1 else 0 end) = 1\n    and max(case when lower(gender) = 'f' then 1 else 0 end) = 1;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_gender_fix',\n    'fixed gender',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_gender_fix;\n\n---------------------\n--cid pets\n\n--Create list of \"DECEASED\" names\ndrop table if exists ${Database}.temp.deceased_name;\nCREATE OR REPLACE TABLE ${Database}.temp.deceased_name as\nselect \n    distinct trim(pet_name) as pet_name\nfrom ${Database}.db.pet\nwhere lower(trim(pet_name)) regexp '(.*)(dcsd|decd|deceased|r\\.i\\.p|dec\\.)(.*)'\nor (lower(trim(pet_name)) regexp '.*died.*' and lower(trim(pet_name)) not regexp '(.*)(diedre|diedu|ndied)(.*)')\nor (lower(trim(pet_name)) regexp '.*rip.*' and lower(trim(pet_name)) not regexp '(.*)(ripl|ripe|strip|ripp|trip|crip|rips|grip|ripu|ript|frip|ripo|ripa|prip|riph|ripk)(.*)' and lower(trim(pet_name)) not in ('rip','little rip'))\nor (lower(trim(pet_name)) regexp '.*dead.*' and lower(trim(pet_name)) not regexp '(.*)(deads|dead p|deadr|deadl|deadm|p dead)(.*)')\n;\n\n-- Create list of all pet names for cleaning\ndrop table if exists ${Database}.temp.pet_name_lookup_1;\nCREATE OR REPLACE TABLE ${Database}.temp.pet_name_lookup_1 as\nselect \n    distinct upper(trim(pet_name)) as pet_name\nfrom ${Database}.db.pet\n;\n\n--Split names to try and get multiple valid names\ndrop table if exists ${Database}.temp.pet_names_split;\nCREATE OR REPLACE TABLE ${Database}.temp.pet_names_split as\nselect \n        pet_name\n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 1) as pet_name_1   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 2) as pet_name_2   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 3) as pet_name_3   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 4) as pet_name_4   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 5) as pet_name_5   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 6) as pet_name_6   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 7) as pet_name_7   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 8) as pet_name_8   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 9) as pet_name_9\n    from ${Database}.temp.pet_name_lookup_1\n    ;\n    \ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.pet_names_split',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.pet_names_split;\n\ndrop table if exists ${Database}.temp.pet_name_lookup_1;\n\n--Create thin table for mapping pet names to all cleaned pet names\ndrop table if exists ${Database}.temp.all_pet_names_1;\nCREATE OR REPLACE TABLE ${Database}.temp.all_pet_names_1 as   \n--REMOVE UNWANTED CHARACTERS\nselect distinct\n    split.pet_name\n    ,trim(initcap(translate(upper(regexp_replace(split.pet_name_split,'[\\x00-\\x1F|\\x7F]','')), 'ÀÁÂÃÄÅÇÐÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜÝŸŽL©¶³¤¢§º¼½¦®ª«¡¨¯¹»›‰¾†¬±˜~\\|`!\"£$%^*_-=:;@~#<>?', 'aaaaaacdeeeeiiiinoooooosuuuuyyzl'))) as pet_name_split\nfrom\n    (\n    select pet_name, initcap(replace(replace(replace(trim(pet_name_1),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_1 > ''\n    union all   \n    select pet_name, initcap(replace(replace(replace(trim(pet_name_2),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_2 > ''\n    union all  \n    select pet_name, initcap(replace(replace(replace(trim(pet_name_3),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_3 > '' \n    union all\n    select pet_name, initcap(replace(replace(replace(trim(pet_name_4),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_4 > '' \n    union all  \n    select pet_name, initcap(replace(replace(replace(trim(pet_name_5),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_5 > '' \n    union all\n    select pet_name, initcap(replace(replace(replace(trim(pet_name_6),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_6 > '' \n    union all  \n    select pet_name, initcap(replace(replace(replace(trim(pet_name_7),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_7 > '' \n    union all\n    select pet_name, initcap(replace(replace(replace(trim(pet_name_8),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_8 > '' \n    union all  \n    select pet_name, initcap(replace(replace(replace(trim(pet_name_9),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_9 > '' \n    ) split\nwhere trim(initcap(translate(upper(regexp_replace(split.pet_name_split,'[\\x00-\\x1F|\\x7F]','')), 'ÀÁÂÃÄÅÇÐÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜÝŸŽL©¶³¤¢§º¼½¦®ª«¡¨¯¹»›‰¾†¬±˜~\\|`!\"£$%^*_-=:;@~#<>?', 'aaaaaacdeeeeiiiinoooooosuuuuyyzl'))) > ''\n;\n\ndrop table if exists ${Database}.temp.pet_name_split;\n\n--Remove everything brackets\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'('||tbw.db.suckchars(pet_name_split,'(',')')||')','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'('||tbw.db.suckchars(pet_name_split,'(',')')||')','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'('||tbw.db.suckchars(pet_name_split,'(',')')||')','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'('||tbw.db.suckchars(pet_name_split,'(',')')||')','');\n\n--Remove everything in square brackets\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'['||tbw.db.suckchars(pet_name_split,'[',']')||']','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'['||tbw.db.suckchars(pet_name_split,'[',']')||']','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'['||tbw.db.suckchars(pet_name_split,'[',']')||']','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'['||tbw.db.suckchars(pet_name_split,'[',']')||']','');\n\n--Remove everything in curly brackets\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'{'||tbw.db.suckchars(pet_name_split,'{','}')||'}','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'{'||tbw.db.suckchars(pet_name_split,'{','}')||'}','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'{'||tbw.db.suckchars(pet_name_split,'{','}')||'}','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'{'||tbw.db.suckchars(pet_name_split,'{','}')||'}','');\n\n--Remove everything following unclosed brackets\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,substr(pet_name_split,CHARINDEX('(',pet_name_split,-1)),'')\nwhere CHARINDEX('(',pet_name_split,-1) > CHARINDEX(')',pet_name_split,-1)\n;\n\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,substr(pet_name_split,CHARINDEX('[',pet_name_split,-1)),'')\nwhere CHARINDEX('[',pet_name_split,-1) > CHARINDEX(']',pet_name_split,-1)\n;\n\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,substr(pet_name_split,CHARINDEX('{',pet_name_split,-1)),'')\nwhere CHARINDEX('{',pet_name_split,-1) > CHARINDEX('}',pet_name_split,-1)\n;\n\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = trim(right(pet_name_split,length(pet_name_split) - 1))\nwhere left(pet_name_split,1) = '.'\n;\n\n--Create cleaned pet name lookup\ndrop table if exists ${Database}.temp.all_pet_names;\nCREATE OR REPLACE TABLE ${Database}.temp.all_pet_names as\nselect \n    pet_name\n    ,case \n        when left(pet_name_split,1) = '-' then trim(replace(pet_name_split,'-','')) \n        else trim(pet_name_split) \n    end as pet_name_split\nfrom ${Database}.temp.all_pet_names_1\n;\n\ndrop table if exists ${Database}.temp.all_pet_names_1;\n\n--Create lookup table with flags for reference\ndrop table if exists ${Database}.live.pet_name_lookup;\nCREATE OR REPLACE TABLE ${Database}.live.pet_name_lookup as\nwith flags \nas\n(\n    select \n        pet_name\n        ,case\n             when left(upper(pet_name_split),4) = 'AGE ' then ''\n             when charindex(' AGE ',upper(pet_name_split)) > 1 then left(pet_name_split,charindex(' AGE ',upper(pet_name_split)) - 1)\n             else pet_name_split\n         end as pet_name_split\n        ,case \n            when  replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') in ('gook','spick','spik','prat','stupid')\n                 or       lower(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'CANAL','')) regexp '.*anal.*'           and lower(pet_name_split) not in ('analoui','analts','analuwa','aspanall','banal','branall','bwanali','campanale','canal','canale','canalella','canale-parola','canales','canali','canals','chanal','courbanally','cuanalo','danaldson','ganalon','gnanalingam','gnanalingham','hajyzamanali','hassanali','hassanally','janal','janali','kanal','kanala','kanalas','kanalos','kanalosova','kankanala','khanal','macanally','manalac','manalan','manalang','manalansan','manalastas','manalaysay','manaley','manalili','manally','manalo','manaloto','mcanallen','mcanally','mcdanald','mcdoanald','panal','panaligan','rabanal','rajanala','ramjanali','ramjanally','ramzanali','ranaldi','ranaldo','ranall','ranalli','ranallo','roshanali','sanalitro')\n                 or       replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'URANUS','') in ('ANUS','SMELLMYANUS','HUGHJANUS')           --and lower(pet_name_split) not in ('anush','anusha','anusic','anusiewicz','anusionwu','anuszkiewicz','banushi','banuso','bhanushali','blanusa','deanus','emanus','emmanus','ganuszko','hanus','hanusch','hanusiak','hanusova','hanuszewicz','hermanus','iloanusi','iwanuschak','jaanus','janus','janusaitis','janusas','janusauskaite','janusauskas','janusauskiene','janusevicius','januska','januskaite','januskeviciene','januskevicius','januskeviciute','janusonis','janusz','januszczak','januszczyk','januszek','januszewska','januszewski','januszkiewicz','januszko','mac manus','macmanus','mamanus','manus','manuschka','manuszewski','mc manus','mchanus','mcmanus','mcnanus','ndanusa','ohanusi','ranus','romanus','sanusi','silvanus','stanuszek','tanushi','zanussi')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*arse.*'           and lower(pet_name_split) not in ('arseen','arsenault','arsene','arseneault','arsenio','arsenis','arseniuk','banarse','barseghian','barsellotti','barsey','carse','carsell','carsen','carser','carsewell','carsey','darsey','farser','garsed','gerard-pearse','harse','harsent','hearse','hearsey','karsenbarg','karsera','karseras','kearse','kearsey','larsen','lund-larsen','marse','marseden','marseglia','marseille','marseilles','marsek','marsel','marsell','marsella','marsello','marsen','marsenic','marsey','narse','parse','parsell','parselle','parsells','parsely','parsens','parsey','pearse','pearsey','posarsek','sarsero','scarse','scarsebrook','scarsella','summarsell','swearse','tarsey','tearse')\n            --     or       replace(replace(replace(replace(collate(pet_name_split,''),'''',''),' ',''),'-',''),'&','') regexp 'ass'            and lower(pet_name_split) not in ('abass','abassah','abassi','abbass','abbassi','abbassian','abbassy','abdelmassih','abecassis','abu hassan','abuhassan','admassu','afrassiabi','agass','agassiz','aghassi','aghdassi','akass','akhrass','al hassan','alassad','al-assadi','alassaf','albassam','al-bassam','aldabass','alhassan','al-hassan','alhassani','al-hassani','alhasso','al-hasso','alihassan','ali-hassan','aljassar','alkass','alkassim','allass','allassani','allpass','almassi','alnassar','alnasser','al-nasser','alqassab','al-qassab','alqassimi','altass','altwasser','al-yassin','amass','amasse','amassoul','amirghassemi','anastassi','anastassiades','anastassiou','andrassy','andreassen','andreasson','appassamy','asparassa','assa','assaad','assab','assad','assadi','assadian','assadourian','assadullah','assaed','assael','assaf','assah','assakarah','assal','assali','assall','assalone','assam','assamoi','assamoua','assan','assanah','assanand','assani','assante','assar','assareh','assari','assaritti','assas','assassa','assassi','assayag','assaye','asscher','assefa','assefaw','assefuah','asseily','asselin','assell','assem','assemakis','assemian','assen','assender','assenheim','assenjee','assenso','assenti','asser','asserati','assersohn','asset','asseter','assey','assheton','assheton-smith','assi','assia','assiamah','assibey','assid','assif','assifuah','assig','assili','assim','assimakopoulos','assin','assinder','assing','assini','assiotes','assirati','assiratti','assis','assiter','assitt','asslanian','assmann','asso','associates','assock','assoku','assomull','asson','assor','assou','assouad','assoufi','assoul','assouline','assour','assra','assrafally','assucena','assumpcao','assuncao','assur','atanassov','atanassova','atassi','athanassiou','athanassopoulos','ayadassen','ayassamy','babassana','balassa','baldassari','baldassarra','baldassarre','baldassarri','barass','barkass','barlass','barrass','barrasso','bass','bassa','bassadone','bassage','bassah','bassaid','bassakaropoulos','bassal','bassalian','bassam','bassan','bassani','bassano','bassant','bassaragh','bassas','bassatt','basse','bassell','bassen','bassendale','bassendine','bassenger','bassent','basser','basset','bassett','bassett-cross','bassett-jones','bassett-smith','bassettt','bassey','bassford','bassham','bassi','bassie','bassier','bassil','bassilious','bassill','bassily','bassin','bassindale','bassinder','bassingdale','bassinger','bassingham','bassingthwaighte','bassingthwaite','bassington','bassiony','bassiouni','bassir','bassiri','bassit','bassitt','bassman','bassnett','basso','bassoli','bassom','basson','bassot','bassou','bassous','bassr','bassra','bassral','basstoe','bassue','bass-woodcock','bassy','baylass','bedassie','beedassee','beedassy','belassie','bellass','benassi','benhassine','benriassa','blass','blasse','blennerhasset','blennerhassett','bonass','bonassera','bordass','boumerdassi','bourassa','bownass','brass','brassart','brasse','brasseaux','brassel','brassell','brasser','brassett','brasseur','brassey','brassfield','brassil','brassill','brassington','brassinton','brassley','buglass','bullass','bumpass','burdass','burgass','burglass','byass','cabassi','cafasso','calamassi','camrass','canassa','capasso','carass','carassale','carasso','carcass','carmassi','casamassa','cass','cassa','cassady','cassagne','cassam','cassama','cassambai','cassamo','cassamobai','cassan','cassandra','cassandro','cassanell','cassani','cassano','cassanova','cassap','cassapi','cassar','cassaretto','cassata','casse','cassedy','cassee','cassel','casselden','casseldine','cassell','cassella','casselle','casselles','cassells','casselman','cassels','casselton','cassely','cassem','cassemis','cassen','casser','cassera','cassere','casserley','casserly','cassese','cassettare','cassettari','cassey','cassford','cassi','cassia','cassiano','cassiday','cassiddy','cassidey','cassidi','cassidy','cassie','cassiey','cassillis','cassily','cassim','cassimatis','cassin','cassinelli','cassing','cassingena','cassingham','cassini','cassinos','cassis','cassisa','cassisi','cassisy','cassity','cassius','cassles','cassley','cassling','cassman','cassom','cassomini','casson','cassone','cassoni','casson-smith','cassop','casssidy','casstles','cassule','casswell','cassy','chandradass','chassagnette','chassar','chasseaud','chassebi','chassels','chasser','chassin','chavasse','cherkassky','chevassut','chiassaro','chiasson','christtmass','claassen','claassens','class','classen','classens','classey','classic','classick','classon','colliass','compass','corlass','corrass','cortopassi','crass','crasswell','crassweller','creasser','croudass','crudass','currass','dalmasso','dass','dassa','dassama','dassanaike','dassanayake','dassani','dassaur','dasseville','dassler','dasso','dasson','dassonville','dassow','dassu','dassut','dassy','d''brass','de assis','de grasse','de pass','degrasse','degrassi','del basso','depass','depasse','devassy','devassykutty','diarrassouba','diassona','dilasser','djelassi','d''lasselle','dos passos','douglass','dowglass','dracass','du casse','ducasse','dugasse','duglass','dundass','eassie','eassom','easson','el fassi','el hassan','el-assaad','elassal','elfassi','elfassy','elhassan','el-hassan','elhassani','eliassen','eliasson','el-kassir','elmhassani','elyassi','espinasse','faassen','fairbass','fairbrass','falwasser','fass','fassam','fassan','fassbender','fasseau','fassenfeld','fassenfelt','fasser','fassett','fassihi','fassinger','fassio','fassioms','fassis','fassler','fassnidge','fassom','fassoms','fasson','fassum','fassy','fewlass','fieldgrass','finglass','fracassi','fracasso','frasson','frassoni','furnass','gabbitass','gaddass','galassi','galasso','gass','gassama','gassan','gassar','gasse','gasser','gassick','gasside','gassis','gassman','gassmann','gassner','gasson','gassor','gasston','gassy','gebreselassie','gebreslassie','ghassan','ghassemi','ghassemian','ghiassi','gilgrass','gillgrass','glass','glassar','glassberg','glassborow','glassbrook','glassby','glassco','glasscock','glasscoe','glasscoo','glasse','glassell','glassenbury','glasser','glassett','glassey','glassfield','glassford','glassgow','glassington','glassman','glassock','glasson','glassonbury','glasspell','glasspole','glasspool','glasspoole','glasstone','glassup','glassup-smith','glasswell','goldwasser','goodlass','grass','grassa','grassam','grassby','grasse','grasset','grassham','grassi','grassick','grassie','grassing','grassington','grassini','grasske','grasso','grassom','grasson','grassroots','greenglass','greengrass','grossnass','habassi','habteselassie','hadassi','haileselassie','hajivassiliou','halpass','hass','hassa','hassaan','hassaballa','hassabu','hassack','hassad','hassain','hassaine','hassal','hassall','hassalls','hassam','hassan','hassan ali','hassanali','hassan-ali','hassanally','hassane','hassanein','hassani','hassania','hassanian','hassanien','hassanin','hassaniyeh','hassanjee','hassanpour','hassany','hassanyeh','hassanzada','hassanzadeh','hassard','hassay','hassbani','hasse','hassea','hassein','hassel','hasselbach','hasselby','hasselder','hasseldine','hasseler','hasselgren','hassell','hassells','hasselman','hasselmann','hasselt','hassen','hassent','hasser','hasset','hassett','hassey','hassi','hassiakos','hassian','hassib','hassid','hassie','hassim','hassin','hassine','hassing','hassini','hassion','hassiotis','hasslacher','hassle','hassler','hasslett','hassman','hassn','hasso','hassock','hasson','hassoon','hassoun','hassouna','hassouni','hassy','hawkings-byass','hochstrasser','hoodlass','hudlass','hudlass-galley','hvass','ingrassia','jackson-bass','jamnadass','jarass','jass','jassad','jassal','jassam','jassan','jassar','jassat','jasse','jasseh','jassel','jassell','jasser','jassey','jassi','jassie','jassim','jassin','jasso','jasson','jassop','jassy','jelassi','jhass','jonassen','jonasson','kalbassi','kaltwasser','karahassan','karassek','karassellos','karbassi','karrass','kass','kassa','kassab','kassabian','kassah','kassahun','kassai','kassam','kassama','kassamali','kassan','kassanga','kassanis','kassapian','kassar','kassardjian','kassas','kassay','kassaye','kasse','kasseean','kassel','kassell','kasselman','kassem','kassen','kasser','kassey','kassi','kassidy','kassie','kassier','kassim','kassimatis','kassimi','kassin','kassir','kassiram','kassiras','kassiri','kassis','kassler','kassman','kassner','kasson','kassongo','kassouf','kassous','kassrai','kasstan','kassulke','kassy','khamassi','khass','khassal','klaassen','klass','klassa','klassen','klassnik','klasson','knass','kouassi','kounasso','koylass','krass','krasser','krassnitzer','krassos','krassowska','krassowski','kutassy','labassi','labassiere','lachasseigne','larrassey','lass','lassa','lassak','lassalle','lassam','lassan','lasse','lassen','lasser','lasserre','lasserson','lasseter','lassetter','lassey','lassiter','lasslett','lassman','lassmans','lassnig','lasso','lasson','lassoued','lassu','lassus','lawlass','laxton-bass','le gassick','le gassicke','lebrasse','lecrass','legassick','lemass','lemasson','levasseur','lhassani','liassi','liassides','lomass','losasso','lovelass','lowmass','lucass','lucassi','lynass','maass','maassen','macassey','magassa','mallpass','malpass','manasse','manasseh','manassian','manassie','mandon-gassman','mass','massa','massaccesi','massad','massah','massaio','massalay','massall','massally','massam','massamba','massan','massanet','massaquoi','massar','massara','massarano','massard','massarella','massarelli','massari','massaro','massart','massawe','massay','massbery','masscy','masse','massee','massei','massel','masselis','massell','massen','massender','massengo','massenhove','masser','masserella','masseri','masseroli','masset','massett','massetti','massey','massey-chase','masshar','masshedar','massheder','massi','massia','massiah','massias','massicks','massicott','massicotte','massidda','massie','massie-taylor','massih','massimi','massimiliano','massimino','massimo','massin','massing','massingale','massingberd','massingberd-mundy','massingham','massinghan','massini','massink','massion','massironi','massiter','massmann','masso','massocchi','massod','massom','masson','massone','massood','massop','massos','massot','massotti','massoud','massoudi','massoudinia','massouh','massoumi','massoumian','massoura','massouras','massow','massri','masssey','massudi','massum','massumi','massy','massy-collier','massyn','matassa','matassi','matthiasson','mattrass','mayassi','mcassey','mcglasson','mcnasser','menassa','middlemass','minassian','moass','mobasser','mobasseri','modasser','mohades-kassai','montasser','morhtassi','motavassel','mouqtassid','mouyiassi','movassagh','movassaghi','mudassar','mudasser','mudassir','mullasseril','munasser','muntasser','nambi-lasseko','nass','nassa','nassab','nassali','nassan','nassanga','nassar','nassari','nassaris','nassau','nasse','nasseem','nassef','nassehi','nassem','nasser','nasseraldeen','nassereddine','nasseri','nassery','nasseur','nassey','nassi','nassib','nassie','nassif','nassim','nassir','nassiri','nassir-pour','nassiry','nasskau','nasso','nassolo','nasson','nassor','nassour','nassr','nassralla','nassrat','nassuna','nassuphis','nassur','natrass','nattrass','negassi','neiass','nekrassov','ngassa','nicholass','nicklasson','niklasson','nyass','nyassi','onassis','osei-assibey','ouassine','overmass','pallagrass','pallass','papavassiliou','pass','passa','passafonti','passalacqua','passam','passan','passano','passant','passantino','passap','passaportis','passard','passarelli','passarello','passariello','passaris','passaro','passas','passat','passaway','passby','passchier','passco','passe','passee','passell','passells','passenger','passer','passera','passerello','passeri','passerini','passes','passet','passett','passey','passfield','passhore','passi','passiatore','passingham','passinghan','passley','passman','passmoor','passmoore','passmore','passon','passoni','passons','passos','passow','passwala','passway','passy','pawass','payassis','pendegrass','petrassi','petrasso','peyrasse','picasso','pintassilgo','pitassi','plass','plassard','plasse','plassing','pleass','polglass','poonwassie','portass','pragassen','prassas','prassede','prasser','purgass','qassem','qassemi','qassim','qassin','quassim','quatermass','rabassa','rabasse','ramadass','ramasso','ramdass','rashbass','rass','rassa','rassad','rassam','rassan','rassekh','rassel','rassell','rasser','rassi','rassid','rassim','rassiter','rasson','rassool','rassouli','rassul','regassa','rohrbasser','rouass','rungassamy','salmassian','sanassee','sanassy','sancassani','sant-cassia','sass','sassa','sassano','sassarini','sasse','sassella','sassen','sasserath','sassi','sassienie','sasso','sasson','sassone','sassone-corsi','sassons','sassoon','sassu','schmassmann','scott-masson','seeneevassen','selassie','sepassi','shallcrass','shanassy','shankardass','shaughnassy','shere-massey','simonassi','slassor','smargiassi','snodgrass','spassov','spassova','stallabrass','stallebrass','stallibrass','stallybrass','stass','stassen','stassi','stassiouk','strass','strassacappa','strassen','strasser','strassheim','strasshine','sunassee','sunnassee','syass','tabassam','tabassum','tabassun','tahmassebi','tamassy','targrass','tass','tassa','tassabehji','tassadaq','tassaker','tassan','tassano','tassara','tassart','tassawar','tasse','tassel','tassell','tasselli','tassi','tassie','tassier','tassiker','tassinari','tasso','tassone','tassou','tavassoli','tesfaselassie','thassim','thomass','thomassen','thomasset','thomassin','thomasson','thoulass','tirabasso','titmass','tobiassen','tomass','tomassen','tomassi','tomassini','tomasso','tomasson','toplass','trapasso','travasso','travassos','treppass','trippass','trivass','ul hassan','ulhassan','ul-hassan','valassis','van assen','van hasselt','vanassche','vangasse','vass','vassa','vassal','vassall','vassalli','vassallo','vassalos','vassan','vassantlal','vassar','vassaramo','vassay','vasse','vasseghi','vassel','vasselin','vassell','vassello','vassen','vasser','vasseur','vassey','vassi','vassib','vassie','vassil','vassila','vassilakis','vassilas','vassileiou','vassilev','vassileva','vassili','vassiliades','vassiliadis','vassiliev','vassilieva','vassiliou','vassilis','vassiljev','vassiljeva','vassilopoulos','vassiloulis','vasso','vasson','vassoodaven','vassos','vassou','vettasseri','vigrass','vincatassin','vlassis','vlassov','wanlass','wass','wassal','wassall','wassan','wasse','wassef','wassel','wassell','wassem','wassenaar','wasser','wasserberg','wasserman','wassermann','wasserstein','wassi','wassie','wassiee','wassif','wassili','wassim','wassing','wassink','wassmer','wasson','wasswa','wattass','willgrass','windass','windgassen','windrass','wiseglass','woldeselassie','woodmass','woolass','wrong assistant','xassan','yass','yassa','yassar','yasseen','yassen','yasser','yassi','yassien','yassim','yassin','yassine','yassini','yassir','yassrebi','zachariassen')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') in ('ass','asshole')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*ballsack.*'       and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bastard.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bitch.*'          and lower(pet_name_split) not in ('babitcheva','bitcha','bitchakdjian','bitcham','bitchanka','bitchard','bitchass','bitchburn','bitchel','bitchell','bitchen','bitchener','bitchenkova','bitcheno','bitchenor','bitcher','bitcherla','bitchers','bitchfield','bitchford','dembitchi','subitcha')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*biatch.*'         and lower(pet_name_split) not in ('biatchoe','biatchon','mbiatchou','mbiatchou-nya')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bloody.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*blowjob.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bollock.*'        and lower(lower(pet_name_split)) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bollok.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bollox.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*boner.*'          and lower(pet_name_split) not in ('amboner','bonera','bonera-callan','boner-cambell','bonere','boneret','bonerhygena','boneri','bonerjea','bonerpairet','bonerr','carboner','carbonera','carboneras','carbonere','carboneri','carbonero','eboner','kabonero','ortiz carboneres','osboner','rabonerabone','rathboner','rathboners')\n                 or       lower(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'BOOBEAR',''),'BOOBOO','')) regexp '.*boob.*'           and lower(pet_name_split) not in ('aboobacker','aboobakar','aboobaker','aboobucker','boobbyer','boobis','mahboob','mahboobani','mehboob','mohoboob')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bugger.*'         and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'BUMBLE',''),'BINGBUM','')) regexp '.*bum.*'            and lower(pet_name_split) not in ('album','babumba','bumatay','bumba','bumbra','bumble','bumby','bumford','bumfrey','bumpas','bumpstead','bumpsteed','bumpus','bumrah','mbumba')\n                 or       lower(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'BUTTON',''),'BUTTER','')) regexp '.*butt.*'           and lower(pet_name_split) not in ('albutt','allbutt','archbutt','baybutt','bhabutta','butt','buttaci','buttall','buttar','buttarazzi','buttarelli','buttars','buttel','buttell','butten','buttenshaw','butter','buttercase','butterell','butterfeild','butterfield','butterfiled','butterfill','butterfly','butterick','butterill','butteris','butteriss','butterley','butterly','butters','buttersworth','butterton','butterwick','butterwith','butterwood','butterworth','butterwoth','buttery','buttfield','butti','buttice','buttifant','buttifint','buttigieg','buttimer','buttimore','buttiner','butting','buttinger','buttivant','buttle','buttleman','buttler','buttley','buttling','buttner','buttolph','button','buttons','button-stephens','buttress','buttrey','buttrick','buttrill','buttriss','buttrum','butts','buttwell','buttworth','callbutt','carbutt','ebbutt','gabbutt','garbutt','gorbutt','gurbutt','harbutt','holbutt','hurlbutt','lebutt','mabbutt','ollenbuttel','parbutt','sarbutt','sarbutts','sbuttoni','sobutta','sowerbutts','stuart-buttle','talbutt','tarbutt','tebbutt','tebutt','tibbutt','tobutt','turbutt','wallbutton','warbutton')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*clitoris.*'       and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'PEACOCK',''),'COCKAPOO',''),'HITCHCOCK',''),'COCKER','')) regexp '.*cock.*'           and lower(pet_name_split) not in ('cockram','adcock','adcocks','addcock','alcock','alecock','allcock','allicock','ancock','aucock','awcock','aycock','babcock','barcock','batcock','battcock','baycock','beacock','beercock','bilcock','bocock','boocock','bowcock','bulcock','bullcock','cockain','cockar','cockarill','cockayne','cockbain','cockbaine','cockbill','cockborn','cockburn','cockcroft','cocke','cockel','cockell','cocken','cocker','cockerall','cockeram','cockeran','cockerell','cockerham','cockerhan','cockerhill','cockeril','cockerill','cockerline','cockersell','cockersole','cockerton','cockett','cockette','cockfield','cockford','cockhill','cockill','cockin','cockland','cockle','cocklin','cockling','cockran','cockrane','cockrel','cockrell','cockrem','cockren','cockrill','cockrin','cockroft','cocksedge','cocksey','cockshull','cockshutt','cockson','cocksworth','cockton','cockwell','cockwill','crocock','dancock','dancocks','deacock','decock','didcock','dilcock','eacock','ecock','edgecock','elcock','elcocks','ellcock','ellicock','filcock','grewcock','grocock','groocock','growcock','hacock','hadcock','haincock','hallcock','hamcock','hancock','hancocke','hancocks','handcock','hankcock','hanncock','harcock','hawcock','haycock','haycocks','heacock','heathcock','hedgcock','hedgecock','heircock','hencock','hercock','heycock','hichcock','highcock','hillcock','hircock','hiscock','hiscocks','hitchcock','hitchcocks','hitcock','hithcock','hudson-peacock','jeacock','jeacocke','jeycock','johncock','lacock','lawcock','laycock','leacock','lewcock','leycock','locock','lowcock','luccock','luckcock','lucock','lurcock','maycock','meacock','milcock','miscock','mocock','moorcock','morecock','mulcock','mycock','nancock','ocock','paecock','peacock','peacocke','peacocks','peakcock','pecock','peecock','philcock','pidcock','pitcock','pocock','purcocks','pycock','radford-hancock','raincock','sandercock','saundercock','shellcock','shilcock','shillcock','silcock','silcocks','sillcock','simcock','simcocks','sincock','slocock','slucock','symcock','tancock','tilcock','tillcock','tocock','trebilcock','trebillcock','twocock','veacock','wadcock','walcock','wallcock','westcock','whadcock','wilcock','wilcocks','wilcockson','willcock','willcocks','willcockson','woocock','woodcock','wookcock','woolcock','woolcocks')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*coon.*'           and lower(pet_name_split) not in ('coonagh','coonan','coonar','coonber','coonbes','coonbs','coone','cooner','coonerty','coones','cooney','coong','coonick','coonie','coonor','ocooner','ocoonor','scoon','scoones','scoons')\n                 or       lower(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'SCRAP','')) regexp '.*crap.*'           and lower(pet_name_split) not in ('scrap')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*cunt.*'           and lower(pet_name_split) not in ('scunthorpe')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*damn.*'           and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'DICKSON',''),'DICKENS','')) regexp '.*dick.*'           and lower(pet_name_split) not in ('benedick','benedickter','biddick','boldick','braddick','bradick','briddick','brodick','bundick','burdick','caddick','chiddick','chiddicks','cobbledick','condick','craddick','cradick','cundick','dickason','dickaty','dicke','dickel','dicken','dickens','dickenson','dicker','dickers','dickerson','dickes','dickeson','dicketts','dickey','dickham','dickie','dickin','dickings','dickingson','dickins','dickinson','dickinson-smith','dickison','dickle','dickon','dickons','dickonson','dickov','dicksee','dickson','dicksons','dicky','fendick','forsdick','forsdicke','fosdick','fredick','frosdick','grimsdick','haddick','haedicke','hedicker','hildick','hildick-smith','kaddick','kendick','landick','ludick','luedicke','maddick','maddicks','mccordick','mcdicken','mcdickson','meddick','meddicks','paddick','pundick','reddick','rhodick','riddick','riddicks','roddick','rodick','ruddick','rudick','sadick','sandick','shaddick','shadick','siddick','suddick','thorndick','vodicka','waddicker','weadick','wedick','widdick','widdicks','zserdicky')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*dildo.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&','') = 'DYKE'           --and lower(pet_name_split) not in ('dyker','fendyke','forsdyke','thorndyke','van dyke','vandyke')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*erect.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&','') in ('FAG','FAGGOT','FAGOT','FAGGOTS','FAGGOTCAT')            --and lower(pet_name_split) not in ('alfageme','fagade','fagaly','fagan','fagandini','fagbemi','fagbenle','fagbenro','fagbohun','fagbohungbe','fagbola','fagboyegun','fagbure','fage','fagelman','fagelson','fagen','fagence','fagents','fager','fagerlund','fages','faggetter','faggin','faghany','faghihi','faghirzadeh','faghy','fagin','fagioli','fagnani','fagon','fagundes','fagunwa','fagura','graffagnino','mcfagan','tesfagaber','zolfaghari')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*fatass.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*feck.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*fellate.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*fellatio.*'       and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*felching.*'       and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*fuck.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*fudgepack.*'      and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*flange.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*goddamn.*'        and lower(pet_name_split) not in ('')\n            --     --or       replace(replace(replace(replace(pet_name_split,'''',''),' ',''),'-',''),'&','') regexp 'hell'           and lower(pet_name_split) not in ('abethell','archell','bachell','barichello','backshell','batcheller','batchellor','battershell','beachell','bearchell','bechelli','beckhelling','bethell','bexhell','bhella','birchell','bishell','bithell','boshell','boshelle','bowshell','bratchell','buchell','bulheller','burchell','bushell','bythell','cashell','chell','chella','chelladurai','chellam','chellamuthu','chellappah','chellappan','chellar','chelle','chellen','chellew','chelley','chelliah','chellingsworth','chellingworth','chellis','chellum','coshell','critchell','cuthell','dichello','etchell','etchells','ethell','formichella','getchell','ghelle','hanschell','hatchell','hella','hellaby','hellal','hellam','hellan','helland','hellard','hellary','hellas','hellawell','hellberg','helle','hellebrand','hellel','hellen','hellend','hellens','heller','hellerman','hellery','hellett','helleur','hellewell','helley','hellgren','helliar','hellicar','hellier','helliker','hellin','helling','hellinger','hellings','hellingsworth','hellis','hellish','helliwell','hellman','hellmann','hellmers','hellmich','hellmuth','hellon','hellor','hellors','hellowell','hellsten','hellstrom','hellwell','hellwig','hellwing','helly','hellyar','hellyer','hellyn','hellywell','hempshell','henshell','herschell','hitchell','houchell','ithell','kearney-mitchell','kemshell','ketchell','khella','kinchella','kitchell','larochelle','licchelli','llewhellin','llewhellyn','lythell','machell','maitchell','marchell','marshell','matchell','maychell','mcmitchell','mechell','michell','michelle','michelli','mictchell','micthell','mighell','mihell','minchell','minchella','minghella','minshell','mirchell','mitchell','mitchell-davis','mitchell-dawson','mitchelle','mitchell-gears','mitchell-harris','mitchell-innes','mitchelll','mitchellmore','mitchells','mitchell-smith','mitchellson','mithchell','mithell','mittchell','monachello','mtchell','mutchell','neachell','nethell','nichells','nihell','nitchell','ochello','page-mitchell','patchell','peachell','pechell','petchell','phellas','phellps','pitchell','purchell','rachell','rachelle','renshell','richell','rochell','rochelle','rotchell','rothell','satchell','satchelle','schell','schellekens','schellenberg','scheller','senchell','setchell','seychell','shell','shellabear','shellam','shellan','shellard','shellbourne','shellcock','shellcross','shelldon','shelldrake','shellem','shellens','sheller','shelley','shellhorn','shellie','shellien','shelliker','shellim','shelling','shellis','shellito','shellock','shells','shellshear','shellswell','shellton','shellum','shelly','smithells','stitchell','tatchell','tempest-mitchell','thellman','thellmann','thellusson','titchell','tortoishell','trewhella','trushell','twitchell','vachell','vencatachellum','weighell','whell','whellam','whellams','whellan','whellans','wheller','whelligan','whichello','whitchell','witchell','withell','zucchelli')     \n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') = 'hell'       \n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*homo.*'           and lower(pet_name_split) not in ('homoki','homoky','homola','homolka','homoncik','mojakhomo','odhomor','sohomow','thomond','thomopson','thomos','thomoson')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*illegal.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*immigrant.*'      and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*jerk.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*jizz.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*labia.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*lardass.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*lmao.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*lmfao.*'          and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'MUFFIN','')) regexp '.*muff.*'           and lower(pet_name_split) not in ('muffat','muffet','muffett','muffin','muffitt','mufford')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*nigga.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*nigger.*'         and lower(pet_name_split) not in ('')\n            --     or       replace(replace(replace(replace(pet_name_split,'''',''),' ',''),'-',''),'&','') regexp 'nob'            and lower(pet_name_split) not in ('agwunobi','akzo nobel','annobil','anunobi','asinobi','conoboy','czarnobaj','danobrega','de nobrega','de nobriga','denobrega','denobriga','dinobi','dodd-noble','donoban','enobakhare','igbinoba','knobb','knobbs','knobel','knoblauch','knoble','knobloch','nobakht','nobari','nobb','nobble','nobbs','nobe','nobeebaccus','nobeen','nobel','noberts','nobertson','nobes','nobi','nobile','nobin','nobinson','noble','noble-nesbitt','nobles','noblet','noblett','noblin','nobo','noboa','nobody','nobre','nobrega','nobson','nwadinobi','obanobi','onobrauche','pronobis','sinobad','snober','stride-noble','sznober')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') = 'nob'      \n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*penis.*'          and lower(pet_name_split) not in ('penistan','peniston','penistone','')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*piss.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*poof.*'           and lower(pet_name_split) not in ('')\n                 --POOP not in use for pet name swear words\n                 --or       replace(replace(replace(replace(pet_name_split,'''',''),' ',''),'-',''),'&','') regexp 'poop'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*prick.*'          and lower(pet_name_split) not in ('prickett')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*pube.*'           and lower(pet_name_split) not in ('')\n                 --PUFF not in use for pet name swear words\n                 --or       replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'LOVEPUFF',''),'HUFFLEPUFF','') regexp 'puff'           and lower(pet_name_split) not in ('puffer','puffett','puffitt','spuffard')                \n                 or       replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&','') in ('PUSSYFLAP','PUSSYFLAPS','YOURPUSSY','PERVERTEDPUSSYCAT','PUSSYDESTROYER')          --and lower(pet_name_split) not in ('') and pet_name_split not regexp 'pussycat'\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*scrotum.*'        and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'ESSEX',''),'SUSSEX','')) regexp '.*sex.*'            and lower(pet_name_split) not in ('bessex','bissex','essex','essex-crosby','sexby','sexon','sexstone','sexton','sussex','wessex')\n                --SHAG not in use for pet name swear words\n                --or       replace(replace(replace(replace(pet_name_split,'''',''),' ',''),'-',''),'&','') regexp 'shag'           and lower(pet_name_split) not in ('ashagbe','eshag','shagari','shagaya','shaghaghi')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*shit.*'           and lower(pet_name_split) not in ('ashitey','feshitan','kinoshita','mashiter','matsushita','miyashita','morishita','mwashita','oshitola','rakshit','rashit','rushiti','shith','shitta-bey','shittabey','shittu','shitu','yamashita')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*slag.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*slut.*'           and lower(pet_name_split) not in ('sluter')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*smegma.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*spunk.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*smelly.*'         and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'HONEYSUCKLE','')) regexp '.*suck.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*suicide.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*terrorist.*'      and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*testical.*'       and lower(pet_name_split) not in ('')\n            --     or          replace(replace(replace(replace(pet_name_split,'''',''),' ',''),'-',''),'&','') regexp 'tit'            and lower(pet_name_split) not in ('footitt','titcombe','bultitude','daintith','dentith','footit','foottit','futtit','grittith','grittiths','laetitia','le petit','lepetit','le-petit','lostitch','loutit','louttit','mititelu','mutiti','muttitt','otite','otitoju','pentith','petit','petite','petitjean','petitpierre','petitt','pettit','pettite','pettitt','ptitchard','satite','stitch','stitchell','stitcher','stitchman','stitfall','stitkovac','stitou','stitson','stitt','stittle','tita','titan','titchard','titchell','titchen','titchener','titchin','titchiner','titchmarsh','titchner','tite','titera','titerickx','titford','tithecott','tither','titheradge','titheridge','titherington','titherley','titherly','titi','titilayo','titiloye','titjen','title','titler','titley','titlow','titmarsh','titmas','titmass','titmus','titmuss','tito','titorenko','titov','titova','titre','titshall','titt','tittensor','titterington','titterrell','tittershill','titterton','tittle','tittley','titton','tittonis','tituana','titus','titus-glover','titze','whittit')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') = 'tit'            \n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*tosser.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*turd.*'           and lower(pet_name_split) not in ('sturdee','sturdey','sturdgess','sturdivant','sturdy')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*twat.*'           and lower(pet_name_split) not in ('attwater','attwaters','atwater','westwater')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*vagina.*'         and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'TWANKEY','')) regexp '.*wank.*'           and lower(pet_name_split) not in ('mufwankolo','nwankpa','nwankwo','nwankwor','nwankwu','schwank','swankie','wanklyn','wankowicz')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*whore.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bottomlicker.*'   and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*spannerpants.*'   and lower(pet_name_split) not in ('')\n                then 1 else 0\n        end as swear_flag\n        ,case when length(pet_name_split) > 100 then 1 else 0 end as max_length_flag\n        ,case \n            when length(replace(replace(replace(lower(pet_name_split),' ',''),'-',''),'&','')) = 1 then 1 \n            else 0 \n        end as min_length_flag\n        ,case \n            when lower(pet_name_split) not regexp '.*[a-zA-Z].*' or lower(pet_name) not regexp '.*[a-zA-Z].*' then 1 \n            else 0 \n        end no_alphabetic_flag\n        ,case \n            when lower(pet_name_split) regexp '(.*)(no name|unknown|not known|new cat|not named yet|see below|unamed|unnamed|not decided|not yet named|to be named|decided|not chosen)(.*)' then 1 --List of clearly bad names\n            when lower(pet_name_split) regexp '(.*)(sister|white|cat|dog|yes|brother)(.*)' and  pet_name_split regexp '.*\\\\).*' then 1 --List from searching for close brackets left over\n            when pet_name_split regexp '.*[0-9].*' and pet_name_split regexp '.*\\\\).*' then 1 --Identifies names that contain a number and a close bracket\n            when lower(pet_name_split) regexp '(.*)( years old|years old|0atis|0liver|0lly|0pel|0scar|0z|1 max. 2 pippa|1 poppy 2 dottie|1. vasska 2. sherman|10 years|12 cats|14 others|15 boy|1sheba|2 cats  barry|2 cats  demi|2 catsbrahma|2 dogs|2 dogs  coco|2 dogs coco|2 honey|2 kerry|2 s|2 siamese cats jasmin|2 x dogs star|3 cats|3 cats eve|3 cats oldest garfield|3 jack|3 moggie|3 others|3 s|34c25|3d|3hree|4 cats|4 cats bingo|5 cats|5 kittens|6 cats  lucy|7even|8 cats owned|9yrs|''bea''|''bertha simmering light|cant name them yet|cat 1|cat 2|cat 3|cat 4|cat a|cat name|cat1|cat1 tom|cat12|cat13|cat1bentley|cat2|cat3|''cea|''cooper'' magic pulse|do not have one|dog 1|dog 2|dog 3|dog 4|dog 5|dog1|dog11|dog2|dog3|dont have any|dont have names yet|dont have one|don''t know|dont know yet|don''t know yet|''dre|dunno|dunno yet|éva|gaylord|have 5 cats|have 6 cats|have not named them|havent chosen yet|havent named them|havent named yet|i have 11|i have 2 maisie|i have 2 micky|i have 3 cats|i have 3 twinkle|i have 4 cats|i have 5|i have 5 cats|i have 5 cat''s|i have lots|i have six molly|i havent got one|ive got 24 cats|i''ve got 4 cats|ive got 6 mia|just born|just born2|''kc''|no cat|no idea|no kittens|no more|no.1|no.2|no1 no2 no3 no|not given yet|not got adult|not keeping|not named|not named as yet|not named her yet|not picked on yet|not sure|not sure new kitten|not sure yet|not yet|not yet chose one|not yey named|nothing yet|''olly|only 1 dog|out door cat|pup1|pup2|pup3|puppies 10|puppies x 10|puppy 1|puppy 2|puppy 3|puss 1|puss 2|still thinking of name|still to name them|\uD83C\uDF40 clover|used to this)(.*)' \n                      and NOT(lower(pet_name_split) ilike any ('%dunnock%','%snowcat amber%','%kenynten say no more%','%kentixen no more drama%','%worry no more%','%dream no more%')) then 1 --bad names requested by CS to be blanked\n            else 0 end as invalid_name_flag\n        ,case\n            when length(pet_name_split) > 15 and (length(pet_name_split) - length(replace(replace(pet_name_split,' ',''),'-',''))) = 0 then 1\n            when length(split_part(replace(pet_name_split,'-',' '),' ',1)) > 15 then 1\n            when length(split_part(replace(pet_name_split,'-',' '),' ',2)) > 15 then 1\n            when length(split_part(replace(pet_name_split,'-',' '),' ',3)) > 15 then 1\n            when length(split_part(replace(pet_name_split,'-',' '),' ',4)) > 15 then 1\n            when length(split_part(replace(pet_name_split,'-',' '),' ',5)) > 15 then 1\n        else 0 end as long_name_flag\n        ,case when length(pet_name_split) - length(replace(pet_name_split,' ','')) > 3 then 1 else 0 end as multi_word_flag\n    from ${Database}.temp.all_pet_names\n)\nselect  \n    pet_name\n    ,case \n        when swear_flag = 1 or max_length_flag = 1 or min_length_flag = 1 or no_alphabetic_flag = 1 or invalid_name_flag = 1 or long_name_flag = 1 then '' \n        else replace(pet_name_split,')','') \n    end as pet_name_cleaned\n    ,swear_flag\n    ,max_length_flag\n    ,min_length_flag\n    ,no_alphabetic_flag\n    ,invalid_name_flag\n    ,long_name_flag\n    ,multi_word_flag\n    ,cast(0 as tinyint) as deceased_flag\nfrom flags\n;\n\ndrop table if exists ${Database}.temp.all_pet_names;\n\n--Add deceased marker to pet suppression markers\nupdate ${Database}.live.pet_name_lookup\nset deceased_flag = 1\nwhere upper(pet_name) in\n(\nselect upper(pet_name)\nfrom ${Database}.temp.deceased_name\n)\n;\n\n\nalter warehouse set warehouse_size = 'Small';\n\n--Work out suppressions from supps_pet table\ndrop table if exists ${Database}.temp.supps_pets;\ncreate or replace table ${Database}.temp.supps_pets\nas\nselect distinct\n    deceased_urn\nfrom (\n         select distinct\n              upper(x2.name_urn||'|'||trim(sp.pet_name)) as deceased_urn\n         from ${Database}.db.supps_pet sp\n         inner join ${Database}.live.xref_name_urn x1 on lower(x1.email) = lower(trim(sp.email))\n         inner join ${Database}.live.xref_name_urn x2 on x2.cid = x1.cid\n         where trim(sp.email) > ''\n         union all\n         select distinct\n              upper(x2.name_urn||'|'||trim(sp.pet_name)) as deceased_urn\n         from ${Database}.db.supps_pet sp\n         inner join ${Database}.live.xref_name_urn x1 on x1.name_urn = trim(sp.source_urn)\n         inner join ${Database}.live.xref_name_urn x2 on x2.cid = x1.cid\n     ) s;\n\n\n--Create full version of pet information (will be deduped later)\ndrop table if exists ${Database}.temp.cid_pet_temp;\nCREATE OR REPLACE TABLE ${Database}.temp.cid_pet_temp as\nselect\n    cid\n    ,name_urn\n    ,pet_type\n    ,pet_breed\n    ,nvl(pet_gender,'') as pet_gender\n    ,upper(nvl(pet_size,'')) as pet_size\n    ,pet_indoor_outdoor\n    ,pet_colour\n    ,nvl(pet_name_cleaned,'') as pet_name_cleaned\n    ,case\n        when pet_dob is not null then pet_dob --CIAM actual DOB\n        when pet_age_years is not null and pet_age_months is not null then add_months(pet_dob_first_data_date, -((pet_age_years*12)+pet_age_months)) --CIAM pet age years or months\n        when pet_birth_month is not null and pet_birth_year is not null\n            then case\n                     when try_to_date(cast(pet_birth_year as varchar)||'-'||pet_birth_month||'-'||to_char(pet_dob_first_data_date,'DD')) is not null\n                         then cast(cast(pet_birth_year as varchar)||'-'||pet_birth_month||'-'||to_char(pet_dob_first_data_date,'DD') as date)\n                     else last_day(cast(cast(pet_birth_year as varchar)||'-'||pet_birth_month||'-'||'01' as date))\n                 end --Birthday email \n        when pet_age_years is not null and pet_birth_month is not null\n            then case\n                     when try_to_date(cast(cast(to_char(pet_dob_first_data_date,'YYYY') as int) - cast(pet_age_years as int) - case when pet_birth_month_int <= month(pet_dob_first_data_date) then 0 else 1 end as varchar)||'-'||pet_birth_month||'-'||to_char(pet_dob_first_data_date,'DD')) is not null\n                         then cast(cast(cast(to_char(pet_dob_first_data_date,'YYYY') as int) - cast(pet_age_years as int) - case when pet_birth_month_int <= month(pet_dob_first_data_date) then 0 else 1 end as varchar)||'-'||pet_birth_month||'-'||to_char(pet_dob_first_data_date,'DD') as date)\n                     else last_day(cast(cast(cast(to_char(pet_dob_first_data_date,'YYYY') as int) - cast(pet_age_years as int) - case when pet_birth_month_int <= month(pet_dob_first_data_date) then 0 else 1 end as varchar)||'-'||pet_birth_month||'-'||'01' as date))\n                 end --Winalot campaign and eCRM 'sorry' email\n        when pet_age_weeks is not null then (pet_dob_first_data_date - (pet_age_weeks*7)) --Purina GP signup (age given in weeks)\n        when pet_age_months is not null then add_months(pet_dob_first_data_date, -pet_age_months) --Purina GP signup (age given in months)\n    end as derived_pet_dob\n    ,case\n        when pet_dob is not null then 'Actual pet DOB'\n        when pet_age_years is not null and pet_age_months is not null then 'Pet age years and months'\n        when pet_birth_month is not null and pet_birth_year is not null then 'Pet birth month and year'\n        when pet_age_years is not null and pet_birth_month is not null then 'Pet age years and pet birth month'\n        when pet_age_weeks is not null then 'Pet age weeks'\n        when pet_age_months is not null then 'Pet age months'  \n        else 'No DOB details'\n    end as dob_type\n    ,pet_life_stage\n    ,source\n    ,pet_dob_last_data_date\n    ,data_date\nfrom\n    (\n    select distinct\n        cid\n        ,x.name_urn\n        ,case \n        when lower(p.pet_type) regexp '.*cat.*' then 'Cat'\n        when lower(p.pet_type) regexp '.*dog.*' then 'Dog'\n        else initcap(trim(p.pet_type)) end as pet_type\n        ,trim(coalesce(pbc.clean_breed_name,'')) as pet_breed\n        ,trim(pet_gender) as pet_gender\n        ,trim(pet_size) as pet_size\n        ,trim(pet_indoor_outdoor) as pet_indoor_outdoor\n        ,coalesce(trim(cl.purina_colour),trim(p.pet_colour)) as pet_colour\n        ,case when l.multi_word_flag = 1 and left(upper(x.name_urn),6) <> 'REG_KC' then '' else pet_name_cleaned end as pet_name_cleaned\n        ,pet_dob\n        ,lpad(to_char(pet_birth_month),2,'0') as pet_birth_month\n        ,pet_birth_month as pet_birth_month_int\n        ,pet_birth_year\n        ,pet_age_years\n        ,pet_age_months\n        ,pet_age_weeks\n      \t,pet_life_stage\n        ,trim(p.source) as source\n        ,least(p.data_date,source_date) as data_date\n        ,first_value(least(p.data_date,source_date)) over (partition by cid,case when lower(p.pet_type) regexp '.*cat.*' then 'Cat' when lower(collate(p.pet_type,'')) regexp 'dog' then 'Dog' else initcap(p.pet_type) end,pet_name_cleaned,pet_dob,pet_birth_month,pet_age_years,pet_age_months,pet_age_weeks order by least(p.data_date,source_date) asc) as pet_dob_first_data_date\n        ,first_value(least(p.data_date,source_date)) over (partition by cid,case when lower(p.pet_type) regexp '.*cat.*' then 'Cat' when lower(collate(p.pet_type,'')) regexp 'dog' then 'Dog' else initcap(p.pet_type) end,pet_name_cleaned,pet_dob,pet_birth_month,pet_age_years,pet_age_months,pet_age_weeks order by least(p.data_date,source_date) desc) as pet_dob_last_data_date\n    from ${Database}.live.xref_name_urn x\n    inner join ${Database}.db.pet p on x.name_urn = p.name_urn\n    left join ${Database}.live.pet_name_lookup l on upper(trim(p.pet_name)) = upper(l.pet_name)\n    left join ${Database}.db.ref_pet_breeds_clean pbc on lower(trim(pbc.breed_name)) = lower(trim(p.pet_breed))\n                                                and lower(trim(pbc.pet_type)) = lower(trim(p.pet_type))\nleft join ${Database}.db.pet_avatar_colour_lookup cl on upper(trim(p.pet_breed)) = upper(trim(cl.breed))\n                                                    and upper(trim(p.pet_colour)) = upper(trim(cl.passed_colour))\n    where nvl(l.deceased_flag,0) = 0\n    and upper(x.name_urn||'|'||trim(p.pet_name)) not in\n    (\n        select \n            deceased_urn\n        from ${Database}.temp.supps_pets\n    )\n    ) t\n;\n\ndrop table if exists ${Database}.temp.supps_pets;\n\n--Create deduped table of pet names with information\ndrop table if exists ${Database}.live.cid_pet;\nCREATE OR REPLACE TABLE ${Database}.live.cid_pet as\nselect \n    row_number() over (partition by cid order by case when nvl(pet_name,'') > '' then 1 else 0 end desc,pet_dob asc,case when nvl(pet_breed,'') > '' then 1 else 0 end desc,case when nvl(pet_gender,'') > '' then 1 else 0 end desc,name_urn desc,pet_name asc) as pet_number\n    ,* \nfrom\n(\nselect *\n       ,  case when pet_name > '' then pet_name\n               when pet_name = '' and lead(pet_name, 1) over(partition by cid, pet_type order by pet_name asc) > '' \n                                  and pet_data_date < lead(pet_data_date, 1) over(partition by cid, pet_type order by pet_data_date asc) then 'new name added' \n            else pet_name end as new_pets\nfrom\n(\nselect \n    cid\n    ,name_urn\n  \t,cast('' as varchar(50)) as pet_id\n    ,pet_type\n    ,pet_name_cleaned as pet_name\n    ,pet_breed\n    ,pet_gender\n    ,first_value(derived_pet_dob) over (partition by cid,pet_type,pet_name_cleaned order by case when derived_pet_dob is null then 0 else 1 end desc,pet_dob_last_data_date desc,derived_pet_dob desc) as pet_dob\n    ,first_value(dob_type) over (partition by cid,pet_type,pet_name_cleaned order by case when derived_pet_dob is null then 0 else 1 end desc,pet_dob_last_data_date desc,derived_pet_dob desc,dob_type desc) as pet_dob_type\n    ,coalesce(trim(lk.size),pt.pet_size) as pet_size\n    ,pet_indoor_outdoor\n    ,trim(pt.pet_colour) as pet_colour\n    ,pet_dob_last_data_date as pet_data_date\n    ,case\n  \t\twhen pet_life_stage > '' then pet_life_stage\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-12)  and coalesce(lk.size,pt.pet_size) in ('T','S')          then 'Puppy'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-24)  and coalesce(lk.size,pt.pet_size) in ('L','XL')         then 'Puppy'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-120) and coalesce(lk.size,pt.pet_size) in ('T','S')          then 'Adult'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-60)  and coalesce(lk.size,pt.pet_size) in ('L','XL')         then 'Adult'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-156) and coalesce(lk.size,pt.pet_size) in ('T','S','L','XL') then 'Senior'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-12)                                                          then 'Puppy'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-84)                                                          then 'Adult'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-156)                                                         then 'Senior'\n        when pet_type = 'Dog' and derived_pet_dob <= add_months(current_date,-156)                                                         then 'Older'\n        when pet_type = 'Cat' and derived_pet_dob >  add_months(current_date,-12)                                                          then 'Kitten'\n        when pet_type = 'Cat' and derived_pet_dob >  add_months(current_date,-84)                                                          then 'Adult'\n        when pet_type = 'Cat' and derived_pet_dob >  add_months(current_date,-192)                                                         then 'Senior'\n        when pet_type = 'Cat' and derived_pet_dob <= add_months(current_date,-192)                                                         then 'Older'\n        else 'Unknown'\n    end as pet_life_stage\n    ,cast(0 as int) as pdc_gender_link_update\n    ,cast(0 as int) as pdc_breed_link_update\n    ,cast(0 as int) as pdc_colour_link_update\n    ,cast(0 as int) as pdc_outdoor_link_update\n    ,source\n    ,row_number() over (partition by cid,pet_type,pet_name_cleaned order by data_date desc,pet_dob_last_data_date desc,derived_pet_dob desc,pet_size desc,pet_indoor_outdoor desc,pet_gender desc,pet_breed desc) as rownum\nfrom ${Database}.temp.cid_pet_temp pt\nleft join ${Database}.db.dog_breed_size_lookup lk on upper(pt.pet_breed) =  upper(trim(lk.breed))\nwhere pet_type in ('Cat','Dog')\n) t\nwhere rownum = 1\nand\n    (\n        (\n            pet_type = 'Dog' \n            and pet_dob > add_months(current_date, -240) --Dogs must be under 20\n        )\n        or \n        (\n            pet_type = 'Cat' \n            and pet_dob > add_months(current_date, -360) --Cats must be under 30\n        )\n        or\n        (\n            pet_type in ('Dog', 'Cat') --remove anything other than cat/dog\n            and pet_data_date >= add_months(current_date, -12) --everything captured in the last 12 months is valid\n        )\n    )\nand name_urn not in (\n                    select distinct c.name_urn\n                    from ${Database}.temp.cid_pet_temp c\n                    inner join ${Database}.temp.cid_pet_temp c2 on c.cid = c2.cid \n                                                          and c.pet_type = c2.pet_type \n                                                          and c2.source = 'RESP_REV_DAILY'\n                    where c.pet_name_cleaned = ''\n                    ) \n) np \nwhere new_pets <> 'new name added'\n;\n\nalter warehouse set warehouse_size = 'Xsmall';\n                         \ndrop table if exists ${Database}.temp.cid_pet_temp ;  \n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid_pet',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_pet;\n\n--merge pdc ages\nmerge into ${Database}.live.cid_pet pt\nusing (\n          select\n              xr.cid,\n              ae.npp_ecrm_pdc_age as pet_name,\n              case when lower(link_url) ilike '%utm_content=twoyears%' then cast(add_months(event_timestamp, -24) as date)\n                   when lower(link_url) ilike '%utm_content=fiveyears%' then cast(add_months(event_timestamp, -60) as date)\n                   when lower(link_url) ilike '%utm_content=eightyears%' then cast(add_months(event_timestamp, -96) as date)\n                   when lower(link_url) ilike '%utm_content=tenyears%' then cast(add_months(event_timestamp, -120) as date)\n                   end as pet_dob,\n              cast(event_timestamp as date) as data_date,\n              row_number() over(partition by xr.cid, ae.npp_ecrm_pdc_age order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ae.name_urn\n          where lower(event_name) regexp '.*click.*'\n          and link_label = 'PDC | Service | PDC' --check\n          and link_url ilike any  (\n                                  '%utm_content=twoyears%',\n                                  '%utm_content=fiveyears%',\n                                  '%utm_content=eightyears%',\n                                  '%utm_content=tenyears%'\n                                 )\n          and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population))\n      ) ax on ax.cid = pt.cid\n          and lower(ax.pet_name) = lower(pt.pet_name)\n          and ax.rn = 1\nwhen matched and ax.data_date > pt.pet_data_date then update\nset pt.pet_dob = ax.pet_dob,\n    pt.PET_DOB_TYPE = 'PDC click';\n\n\n--merge pdc breeds\nmerge into ${Database}.live.cid_pet pt\nusing (\n          select\n              xr.cid,\n              ae.npp_ecrm_pdc_breed as pet_name,\n              case when lower(link_url) ilike '%utm_content=crossbreed%' then 'Cross Breed'\n                   when lower(link_url) ilike '%utm_content=labrador%' then 'Retriever (Labrador)'\n                   when lower(link_url) ilike '%utm_content=collie%' then 'Border Collie'\n                   when lower(link_url) ilike '%utm_ content=cocker%' then 'Spaniel (Cocker)'\n                   when lower(link_url) ilike '%utm_content=french%' then 'French Bulldog'\n                   end as pet_breed,\n              cast(event_timestamp as date) as data_date,\n              row_number() over(partition by xr.cid, ae.npp_ecrm_pdc_breed order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ae.name_urn\n          where lower(event_name) regexp '.*click.*'\n          and link_label = 'PDC | Service | PDC' --check\n          and link_url ilike any  (\n                                  '%utm_content=crossbreed%', \n                                  '%utm_content=labrador%',\n                                  '%utm_content=collie%',\n                                  '%utm_content=cocker%',\n                                  '%utm_content=french%'\n                                 )\n          and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population))\n      ) ax on ax.cid = pt.cid\n          and lower(ax.pet_name) = lower(pt.pet_name)\n          and ax.rn = 1\nwhen matched and ax.data_date > pt.pet_data_date and pet_type = 'Dog' then update\nset pt.pet_breed = ax.pet_breed,\n    pt.pdc_breed_link_update = 1;\n\n--merge pdc colours\nmerge into ${Database}.live.cid_pet pt\nusing (\n          select\n              xr.cid,\n              ae.npp_ecrm_pdc_colour as pet_name,\n              case when lower(link_url) ilike '%utm_content=white%' then 'White'\n                   when lower(link_url) ilike '%utm_content=blackwhite%'  then 'Black & White'\n                   when lower(link_url) ilike '%utm_content=black%'  then 'Black'\n                   when lower(link_url) ilike '%utm_content=tabby%' then 'Tabby'\n                   when lower(link_url) ilike '%utm_content=ginger%' then 'Ginger'\n                   when lower(link_url) ilike '%utm_content=multi%' then 'Multi'\n                   when lower(link_url) ilike '%utm_content=brown%' then 'Brown'\n                   when lower(link_url) ilike '%utm_content=grey%' then 'Grey'\n                   when lower(link_url) ilike '%utm_content=hairless%' then 'Hairless'\n                   end as pet_colour,\n              cast(event_timestamp as date) as data_date,\n              row_number() over(partition by xr.cid, ae.npp_ecrm_pdc_colour order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ae.name_urn\n          where lower(event_name) regexp '.*click.*'\n          and link_label = 'PDC | Service | PDC' --check\n          and link_url ilike any  (\n                                  '%utm_content=white%',\n                                  '%utm_content=blackwhite%',\n                                  '%utm_content=black%' ,\n                                  '%utm_content=tabby%',\n                                  '%utm_content=ginger%',\n                                  '%utm_content=multi%',\n                                  '%utm_content=brown%',\n                                  '%utm_content=grey%',\n                                  '%utm_content=hairless%'\n                                 )\n          and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population))\n      ) ax on ax.cid = pt.cid\n          and lower(ax.pet_name) = lower(pt.pet_name)\n          and ax.rn = 1\nwhen matched and ax.data_date > pt.pet_data_date and pet_type = 'Cat' then update\nset pt.pet_colour = ax.pet_colour,\n    pt.pdc_colour_link_update = 1;\n    \n--merge pdc npp_ecrm_pdc_outdoor\nmerge into ${Database}.live.cid_pet pt\nusing (\n          select\n              xr.cid,\n              ae.npp_ecrm_pdc_outdoor as pet_name,\n              case when lower(link_url) ilike '%utm_content=indoor%' then 'I'\n                   when lower(link_url) ilike '%utm_content=outdoor%'  then 'O'\n                   end as PET_INDOOR_OUTDOOR,\n              cast(event_timestamp as date) as data_date,\n              row_number() over(partition by xr.cid, ae.npp_ecrm_pdc_outdoor order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ae.name_urn\n          where lower(event_name) regexp '.*click.*'\n          and link_label = 'PDC | Service | PDC' --check\n          and link_url ilike any  (\n                                  '%utm_content=indoor%',\n                                  '%utm_content=outdoor%'\n                                 )\n          and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population))\n      ) ax on ax.cid = pt.cid\n          and lower(ax.pet_name) = lower(pt.pet_name)\n          and ax.rn = 1\nwhen matched and ax.data_date > pt.pet_data_date and pet_type = 'Cat' then update\nset pt.PET_INDOOR_OUTDOOR = ax.PET_INDOOR_OUTDOOR,\n    pt.pdc_outdoor_link_update = 1;\n\n\n--merge pdc genders\n--gender merged directly from adestra event to live cid pet, some links were missing (purina-pdc.tbw-apps.net)\n--merge pdc genders\nmerge into ${Database}.live.cid_pet pt\nusing (\n          select\n              xr.cid,\n              ae.npp_ecrm_pdc_gender as pet_name,\n              case when lower(link_url) regexp '.*=female.*' then 'Female'\n                   when lower(link_url) regexp '.*=male.*' then 'Male' \n                   end as pet_gender,\n              cast(event_timestamp as date) as data_date,\n              row_number() over(partition by xr.cid, ae.npp_ecrm_pdc_gender order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ae.name_urn\n          where lower(event_name) regexp '.*click.*'\n          and link_label = 'PDC | Service | PDC'\n          and link_url ilike any  (\n                            '%utm_content=female%',\n                            '%utm_content=male%'\n                          )\n          and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population))\n      ) ax on ax.cid = pt.cid\n          and lower(ax.pet_name) = lower(pt.pet_name)\n          and ax.rn = 1\nwhen matched and ax.data_date > pt.pet_data_date then update\nset pt.pet_gender = ax.pet_gender,\n    pt.pdc_gender_link_update = 1;\n\n\n-- Insert new pets into pet id table\nmerge into ${Database}.db.ref_pet_id rp\nusing (\n          select\n              bbw_urn,\n              pet_type,\n              pet_name,\n              date_code||'-'||unique_code||'-'||pet_type_code||'-'||bbw_urn_code as pet_id\n          from (\n                   select\n                       xr.bbw_urn,\n                       pt.pet_type,\n                       lower(pt.pet_name) as pet_name,\n\t\t\t\t\t   --Note that the bit below will only work as long as the length of hte Hex string doesn't exceed 8 characters\n                       replace(to_char(to_char(current_date(),'YYYYMMDD')::integer,'XXXXXXXX'),' ','0') as date_code,\n                       replace(to_char(row_number() over (order by 1),'XXXXXX'),' ','0') as unique_code,\n\t\t\t\t\t   --Not totally sure why the hex isn't hard coded here?\n                       replace(to_char(case when pet_type = 'Cat' then 3120 else 4157 end,'XXXX'),' ','0') as pet_type_code,\n                       replace(to_char(xr.bbw_urn,'XXXXXXXXXXXX'),' ','0') as bbw_urn_code\n                   from ${Database}.live.cid_pet pt\n                   inner join (\n                                  select\n                                      cid,\n                                      min(bbw_urn) as bbw_urn\n                                  from ${Database}.live.xref_name_urn\n                                  group by 1\n                              ) xr on xr.cid = pt.cid\n               ) p\n      ) id on id.bbw_urn = rp.bbw_urn\n          and id.pet_type = rp.pet_type\n          and id.pet_name = rp.pet_name\nwhen not matched then insert\n(\n    bbw_urn,\n    pet_type,\n    pet_name,\n    pet_id,\n    data_date\n)\nvalues\n(\n    id.bbw_urn,\n    id.pet_type,\n    id.pet_name,\n    id.pet_id,\n    current_date\n);\n\ninsert into ${Database}.db.build_log \nselect\n    '${Database}_rollups',\n    '${Database}.db.ref_pet_id',\n    'new records',\n    cast(count(*) as varchar),\n    current_timestamp \nfrom ${Database}.db.ref_pet_id\nwhere data_date = current_date;\n\n\n-- Set pet_id in live pet table\nmerge into ${Database}.live.cid_pet pt\nusing (\n          select\n              xr.cid,\n              rp.pet_id,\n              rp.pet_type,\n              rp.pet_name,\n              row_number() over(partition by xr.cid, rp.pet_type, rp.pet_name order by rp.bbw_urn) as rn\n          from ${Database}.db.ref_pet_id rp\n          inner join ${Database}.live.xref_name_urn xr on xr.bbw_urn = rp.bbw_urn\n      ) rp on rp.cid = pt.cid\n          and rp.pet_type = pt.pet_type\n          and lower(rp.pet_name) = lower(pt.pet_name)\n          and rp.rn = 1\nwhen matched then update\nset pt.pet_id = rp.pet_id;\n\n---------------------\n--have cat/have dog\n\ndrop table if exists ${Database}.temp.build_rollups_cid_have_cat ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_have_cat \nas\nselect cid, count(*) as number_of_cats \nfrom ${Database}.live.cid_pet\nwhere lower(pet_type) regexp '.*cat.*'\ngroup by cid;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_have_cat',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_have_cat;\n\n\ndrop table if exists ${Database}.temp.build_rollups_cid_have_dog ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_have_dog \nas\nselect cid, count(*) as number_of_dogs \nfrom ${Database}.live.cid_pet\nwhere lower(pet_type) regexp '.*dog.*'\ngroup by cid;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_have_dog',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_have_dog;\n\ndrop table if exists ${Database}.temp.build_rollups_cid_pdc_pet ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_pdc_pet \nas\nselect cid,\n       case when pet_segment > '' then activity_date end as activity_date,\n       pet_segment\nfrom ( select        \n              xr.cid,\n              case when lower(link_url) regexp '.*=neither.*' then 'Neither'\n                   when lower(link_url) regexp '.*=both.*' and hc.cid is null and hd.cid is null then 'Both'\n                   when lower(link_url) regexp '.*=dog.*' and hd.cid is null then 'Dog'\n                   when lower(link_url) regexp '.*=cat.*' and hc.cid is null then 'Cat' \n                    else ''\n                   end as pet_segment,\n              cast(event_timestamp as date) as activity_date,\n              row_number() over(partition by xr.cid order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ae.name_urn\n          left join ${Database}.temp.build_rollups_cid_have_cat hc on hc.cid = xr.cid\n          left join ${Database}.temp.build_rollups_cid_have_dog hd on hd.cid = xr.cid\n          where lower(event_name) regexp '.*click.*'\n            and campaign_name ilike '%Better_Together%'\n            and link_label = 'PDC | Service | PDC'\n            and link_url ilike '%/purina-pdc.tbw-apps.net%'\n            and link_url ilike any ('%=dog%','%=cat%','%=both%','%=neither%')\n                           \n            and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population)) --not sure if this should be included, copied from gender\n       )\nwhere rn = 1\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_pdc_pet',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_pdc_pet;\t\t\t\t\t\t\t\t\t\t\t\t\n---------------------\n--inferred cat/inferred dog\n\ndrop table if exists ${Database}.temp.build_rollups_cid_inferred_cat;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_inferred_cat\nas\nselect\n    cid,\n    max(ic.data_date) as data_date\nfrom ${Database}.live.xref_name_urn xr\ninner join (\n               --coupons\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.quotient_coupons qc\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = qc.brand_id\n               where trim(brand_pet_type) = 'Cat'\n               union all\n               --coupons/samples\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.names_attributes\n               where (\n                            (trim(source) = 'REG_WUN' and trim(registration_campaign) in ('Gourmet Coupon','gourmet_coupon','Felix Try Now','Go-CAT Free Sample','Go-Cat Free Sample'))\n                         or\n                            (trim(source) = 'REG_KE' and lower(source_file) regexp '(.*)(purinaone|uk-3wc-freesample|uk-gocat)(.*)' and last_login is not null)\n                         or\n                            (trim(source) = 'SAMP_GOU_1')\n                     )\n               union all\n               --registrations\n               select distinct\n                   trim(nm.name_urn) as name_urn,\n                   reg_date as data_date\n               from ${Database}.db.names nm\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = nm.source_brand_id\n               where trim(brand_pet_type) = 'Cat'\n               union all\n               --preferences\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.names_preference np\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = np.brand_id\n               where lower(source_file) not regexp '.*json.*'\n                   and (pref_emailable = 1 or pref_mailable = 1)\n                   and trim(brand_pet_type) = 'Cat'\n           ) ic on ic.name_urn = xr.name_urn\ngroup by xr.cid;\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_inferred_cat',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_rollups_cid_inferred_cat;\n\n\ndrop table if exists ${Database}.temp.build_rollups_cid_inferred_dog;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_inferred_dog\nas\nselect\n    cid,\n    max(id.data_date) as data_date\nfrom ${Database}.live.xref_name_urn xr\ninner join (\n               --coupons\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.quotient_coupons qc\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = qc.brand_id\n               where trim(brand_pet_type) = 'Dog'\n               union all\n               --samples\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.names_attributes\n               where (\n                            (trim(source) = 'REG_WUN' and trim(registration_campaign) in ('Try For Free','Dentalife Dog Free Sample'))\n                         or\n                            (trim(source) = 'REG_KE' and lower(source_file) regexp '.*uk-dentalife.*' and last_login is not null)\n                     )\n               union all\n               --registrations\n               select distinct\n                   trim(name_urn) as name_urn,\n                   reg_date as data_date\n               from ${Database}.db.names nm\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = nm.source_brand_id\n               where trim(brand_pet_type) = 'Dog'\n               union all\n               --preferences\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.names_preference np\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = np.brand_id\n               where lower(source_file) not regexp '.*json.*'\n                   and (pref_emailable = 1 or pref_mailable = 1)\n                   and trim(brand_pet_type) = 'Dog'\n           ) id on id.name_urn = xr.name_urn\ngroup by xr.cid;\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_inferred_dog',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_rollups_cid_inferred_dog;\n\n\n---------------------\n--used to have cat/have dog (we 'expired' the pet)\n\ndrop table if exists ${Database}.temp.build_rollups_cid_used_to_have_cat ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_used_to_have_cat \nas\nselect cid\nfrom ${Database}.live.cid_pet\nwhere lower(pet_type) regexp '.*cat.*'\ngroup by cid;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_used_to_have_cat',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_used_to_have_cat;\n\n\ndrop table if exists ${Database}.temp.build_rollups_cid_used_to_have_dog ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_used_to_have_dog \nas\nselect cid\nfrom ${Database}.live.cid_pet\nwhere lower(pet_type) regexp '.*dog.*'\ngroup by cid;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_used_to_have_dog',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_used_to_have_dog;\n\n\ndrop table if exists ${Database}.temp.build_rollups_cid_deceased_pets ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_deceased_pets \nas\nselect cid, \n    sum\n    (\n        case \n            when \n                (\n                    pet_data_date >= add_months(current_date, -1) --data in the last month\n                    and pet_type = 'Dog' \n                    and pet_dob <= add_months(current_date, -240) --dog is over 20\n                )\n                or\n                (\n                    pet_data_date >= add_months(current_date, -1) --data in the last month\n                    and pet_type = 'Cat' \n                    and pet_dob <= add_months(current_date, -360) --cat is over 30\n                ) \n                or\n                (\n                    pet_dob is null \n                    and pet_data_date < add_months(current_date, -12) --just gone over 12 months old data\n                    and pet_data_date >= add_months(current_date, -13) \n                ) then 1 \n            else 0 \n        end\n    ) as num_pets_deceased_this_month\nfrom ${Database}.live.cid_pet\ngroup by cid;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_deceased_pets',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_deceased_pets;\n\n\n--CREATE cid_LitterTable\n\ndrop table if exists ${Database}.live.cid_litter;\n\nCREATE OR REPLACE TABLE ${Database}.live.cid_litter\nas\nselect\n    cid,\n    coalesce(sire_name,'') as sire_name,\n    coalesce(dam_name,'') as dam_name,\n    litter_type,\n    litter_dob,\n    case when litter_size = 'T' then 'S'\n               when litter_size = '' then Size\n               else litter_size end as litter_size,\n    litter_breed,\n    litter_puppies_kittens,\n    litter_kennel,\n    data_date,\n    source,\n    source_file,\n    source_urn,\n    source_date\nfrom (\n         select\n             xr.cid,\n  \t\t\ttrim(lt.name_urn) as NAME_URN,\n\t\t\ttrim(lt.sire_name) as SIRE_NAME,\n\t\t\ttrim(lt.dam_name) as DAM_NAME,\n\t\t\ttrim(lt.litter_type) as LITTER_TYPE,\n\t\t\tlt.litter_dob,\n\t\t\ttrim(lt.litter_size) as LITTER_SIZE,\n\t\t\ttrim(lt.litter_breed) as LITTER_BREED,\n\t\t\tlitter_puppies_kittens,\n\t\t\ttrim(litter_kennel) as LITTER_KENNEL,\n\t\t\tlt.data_date,\n\t\t\ttrim(lt.source) as SOURCE,\n\t\t\ttrim(lt.source_file) as SOURCE_FILE,\n\t\t\ttrim(lt.source_urn) as SOURCE_URN,\n\t\t\tlt.source_date,\n             row_number() over\n             (\n                 partition by \n                     xr.cid,\n                     trim(lt.sire_name),\n                     trim(lt.dam_name),\n                     trim(lt.litter_type),\n                     lt.litter_dob,\n                     trim(lt.litter_size),\n                     trim(lt.litter_breed),\n                     lt.litter_puppies_kittens,\n                     trim(lt.litter_kennel)\n                 order by \n                     lt.data_date desc nulls last,\n                     lt.source_date desc nulls last\n             ) as row_num\n         from ${Database}.live.xref_name_urn xr\n         inner join ${Database}.db.litter lt on trim(lt.name_urn) = xr.name_urn\n     ) dlt\n     left outer join ${Database}.db.DOG_BREED_SIZE_LOOKUP sl on lower(left(dlt.Litter_breed,15)) = lower(left(trim(sl.breed),15))\nwhere row_num = 1;\n\n---------------------\n--cid questions\n\ndrop table if exists ${Database}.live.cid_question ;  \n\nCREATE OR REPLACE TABLE ${Database}.live.cid_question \nas\nselect distinct\n    nm.cid,\n    qu.question_id,\n    trim(rqu.question) as question,\n    first_value(lower(trim(qu.answer))) over \n        (\n            partition by nm.cid, qu.question_id\n            order by \n                qu.data_date desc nulls last,\n                qu.source_date desc nulls last\n        ) as answer,\n    first_value(qu.data_date) over \n        (\n            partition by nm.cid, qu.question_id\n            order by \n                qu.data_date desc nulls last,\n                qu.source_date desc nulls last\n        ) as answer_data_date       \nfrom ${Database}.live.names nm    \ninner join ${Database}.db.question qu on nm.name_urn = trim(qu.name_urn)\ninner join ${Database}.db.ref_question rqu on qu.question_id = rqu.question_id\nwhere qu.data_date > add_months(current_date, -60) --now only using data from the last 5 years for questions\n    and qu.brand_id is null;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid_question',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_question;\n\n---------------------\n--brand questions\n\ndrop table if exists ${Database}.live.cid_brand_question ;  \n\nCREATE OR REPLACE TABLE ${Database}.live.cid_brand_question \nas\nselect distinct\n    nm.cid,\n    qu.brand_id,\n    qu.question_id,\n    trim(rqu.question) as question, \n    first_value(lower(trim(qu.answer))) over \n        (\n            partition by nm.cid, qu.brand_id, qu.question_id\n            order by \n                qu.data_date desc nulls last,\n                qu.source_date desc nulls last\n        ) as answer,\n    first_value(qu.data_date) over \n        (\n            partition by nm.cid, qu.brand_id, qu.question_id\n            order by \n                qu.data_date desc nulls last,\n                qu.source_date desc nulls last\n        ) as answer_data_date    \nfrom ${Database}.live.names nm    \ninner join ${Database}.db.question qu on nm.name_urn = trim(qu.name_urn)\ninner join ${Database}.db.ref_question rqu on qu.question_id = rqu.question_id\nwhere qu.data_date > add_months(current_date, -60) --now only using data from the last 5 years for questions\n    and qu.brand_id is not null;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid_brand_question',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_brand_question;\n\n---------------------\n--preferred brand questions\n\ndrop table if exists ${Database}.temp.build_rollups_cid_brand_preferred ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_brand_preferred \nas\nselect distinct\n    cid,\n    brand_id\nfrom ${Database}.live.cid_brand_question\nwhere answer_data_date > add_months(current_date, -60) --now only using data from the last 5 years to determine preference for brand\n    and brand_id is not null\n    and\n    (\n        question = 'Brand of pet food fed to pet'\n        or question = 'What type of food does your pet eat (Brand)'\n        or question = 'Brand of dry cat food fed to pet'\n        or \n        (\n            question = 'How often do you feed your pet (Brand)'\n            and answer in ('a couple of times per month', 'a couple of times per week', 'a couple of times per year','every day')\n        )\n        or \n        (\n            lower(question) regexp '.*consumption - coffee brand.*' \n            and lower(answer) not regexp '.*none.*'\n        )\n        or \n        (\n            lower(question) regexp '.*consumption - coffee product.*' \n            and lower(answer) not regexp '.*none.*'\n        )\n        or lower(question) regexp '.*drinking location - coffee product.*'\n        or lower(question) regexp '.*drinking time - coffee brand.*'\n        --dont use 'Brand of Pet Food you are interested in' - is bollox\n    );\n    \n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_brand_preferred',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_brand_preferred;\n\n---------------------\n--purina engagement scoring\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_rate_review;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_rate_review \nas\nselect    \n    cid,\n    answer_data_date as activity_date,\n    case when answer in ('3','4','5') then 'Left Positive Rate & Review'\n         when answer in ('1','2') then 'Left Negative Rate & Review'\n         end as activity,\n    qu.brand_id as activity_brand_id\nfrom ${Database}.live.cid_brand_question qu\ninner join ${Database}.live.ref_brand br on qu.brand_id = br.brand_id \n                                   and br.division_id = 12\nwhere question ilike '%overall%';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_rate_review',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_rate_review;\n\n---------------------\n--first/last source date by brand\n\ndrop table if exists ${Database}.temp.build_rollups_cid_brand_base ;  \n\nalter warehouse set warehouse_size = 'Large';\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_brand_base \nas\nselect distinct\n    nm.cid,\n    dbnm.source_brand_id as brand_id,\n    0 as assigned_master_brand,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by dbnm.data_date nulls last\n        )                                            as first_date_brand,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by dbnm.data_date desc nulls last\n        )                                            as last_date_brand,\n    first_value(nat.last_login) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by \n                nat.last_login desc, \n                dbnm.data_date nulls last, \n                nm.reg_date nulls last,\n                nm.source_date nulls last\n        )                                            as last_login_brand,      \n    first_value(trim(nat.channel)) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by \n                case when nat.channel > '' then 1 else 0 end desc, --only want populated channels\n                dbnm.data_date nulls last, \n                nm.reg_date nulls last,\n                nm.source_date nulls last\n        )                                            as first_channel_brand,    \n    first_value(trim(nat.channel)) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by \n                case when nat.channel > '' then 1 else 0 end desc, --only want populated channels\n                dbnm.data_date desc nulls last, \n                dbnm.reg_date desc nulls last,\n                dbnm.source_date desc nulls last\n        )                                            as last_channel_brand\nfrom ${Database}.live.names nm\ninner join ${Database}.db.names dbnm on trim(dbnm.name_urn) = nm.name_urn\nleft join ${Database}.db.names_attributes nat on trim(nat.name_urn) = trim(dbnm.name_urn)\n                                     and trim(nat.source) = trim(dbnm.source)\n                                     and nat.source_date = dbnm.source_date\n                                     and nat.source_urn = dbnm.source_urn\nwhere dbnm.source_brand_id is not null;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_brand_base',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_brand_base;\n\n---------------------\n--first/last source date by bu\n\ndrop table if exists ${Database}.temp.build_rollups_cid_bu_base ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_bu_base \nas\nselect distinct\n    nm.cid,\n    dbnm.source_data_controller_id as business_unit_id,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_data_controller_id \n            order by dbnm.data_date nulls last\n        )                                            as first_date_business_unit,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_data_controller_id \n            order by dbnm.data_date desc nulls last\n        )                                            as last_date_business_unit\nfrom ${Database}.live.names nm\ninner join ${Database}.db.names dbnm on trim(dbnm.name_urn) = nm.name_urn;\n\n--insert the brands that are actually business units \nmerge into ${Database}.temp.build_rollups_cid_bu_base bu\nusing \n(\n    select distinct \n        cbb.cid,\n        rbu.business_unit_id,\n        first_value(cbb.first_date_brand) over \n            (\n                partition by cbb.cid, rbu.business_unit_id\n                order by cbb.first_date_brand nulls last\n            ) as first_date_business_unit,\n        first_value(cbb.last_date_brand) over \n            (\n                partition by cbb.cid, rbu.business_unit_id\n                order by cbb.last_date_brand desc nulls last\n            ) as last_date_business_unit\n    from ${Database}.temp.build_rollups_cid_brand_base cbb\n    inner join ${Database}.live.ref_business_unit_brand rbu on cbb.brand_id = rbu.brand_id\n) mg on mg.cid = bu.cid \n    and mg.business_unit_id = bu.business_unit_id\nwhen not matched then insert\n(\n    cid,\n    business_unit_id,\n    first_date_business_unit,\n    last_date_business_unit\n)\nvalues \n(\n    mg.cid,\n    mg.business_unit_id,\n    mg.first_date_business_unit,\n    mg.last_date_business_unit\n);   \n\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_bu_base',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_bu_base;\n\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_npp_no_brand_base \nas\nselect distinct\n    nm.cid,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by dbnm.data_date nulls last\n        )                                            as first_date_brand,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by dbnm.data_date desc nulls last\n        )                                            as last_date_brand\nfrom ${Database}.live.names nm\ninner join ${Database}.db.names dbnm on dbnm.name_urn = nm.name_urn\nwhere dbnm.source_data_controller_id = (select data_controller_id from ${Database}.live.ref_data_controller where data_controller like 'Nestl_ Purina Petcare (UK) Ltd')\n    and dbnm.source_brand_id is null;\n\n---------------------\n--fix up for purina master brand - eveyone purina should be now flagged as master brand source \n\nmerge into ${Database}.temp.build_rollups_cid_brand_base cbb\nusing (\n          select distinct\n              cid,\n              (select brand_id from ${Database}.live.ref_brand where brand = 'Purina Masterbrand') as brand_id,\n              first_value(first_date_brand) over\n                  (\n                      partition by cid\n                      order by first_date_brand desc nulls last\n                  ) as first_date_brand,\n              first_value(last_date_brand) over\n                  (\n                      partition by cid\n                      order by last_date_brand desc nulls last\n                  ) as last_date_brand\n          from (\n                   select\n                       cbb.cid,\n                       cbb.first_date_brand,\n                       cbb.last_date_brand\n                   from ${Database}.temp.build_rollups_cid_brand_base cbb\n                   inner join ${Database}.live.ref_brand rb on rb.brand_id = cbb.brand_id\n                   left join (\n                                 select distinct\n                                     xr.cid,\n                                     'Growing Pup' as brand\n                                 from ${Database}.db.comms_hist ch\n                                 inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ch.name_urn\n                                 where ch.promotion_id = 'NPP07290'\n                                     and ch.cell_id = '1'\n                                 union all\n                                 select distinct\n                                     xr.cid,\n                                     'Growing Pup' as brand\n                                 from ${Database}.db.names nm\n                                 inner join ${Database}.live.xref_name_urn xr on xr.name_urn = nm.name_urn\n                                 left join ${Database}.live.cid_pet pt on pt.name_urn = nm.name_urn\n                                 where nm.source_brand_id = (select brand_id from ${Database}.live.ref_brand where brand = 'Growing Pup')\n                                     and (\n                                             pt.pet_dob < (add_months(current_date,-12)-12)\n                                          or\n                                             (nm.source = 'REG_THG' and pt.pet_dob is null and lower(pt.pet_life_stage) = 'puppy' and pt.pet_data_date < (add_months((current_date+56),-12))-12)\n                                         )\n                             ) gp on gp.cid = cbb.cid\n                                 and gp.brand = rb.brand\n                   left join (\n                                 select distinct\n                                     xr.cid,\n                                     'Breed Selector' as brand\n                                 from ${Database}.db.comms_hist ch\n                                 inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ch.name_urn\n                                 left join (\n                                             select\n                                                 xr.cid,\n                                                 drop_date\n                                             from ${Database}.db.comms_hist ch\n                                             inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ch.name_urn\n                                             where ch.promotion_id = 'NPP04398_C' and ch.cell_id = '1'\n                                             \n                                            ) gp on gp.cid = xr.cid\n                                 where ch.promotion_id = 'NPP06155'\n                                     and (\n                                             (ch.cell_id = '8' and ch.drop_date < dateadd(day,-14,current_date()) and gp.drop_date is null)\n                                          or      \n                                             (ch.cell_id = '8' and ch.drop_date < dateadd(day,-14,current_date()) and (gp.drop_date < ch.drop_date or gp.drop_date > dateadd(day,14,ch.drop_date))) \n                                          or ch.name_urn in (\n                                                                select\n                                                                    distinct urn as name_urn\n                                                                from ${Database}.db.npp_breed_selector_pdc_responses rs\n                                                                where lower(rs.bs_still_getting_puppy) = 'no'\n                                                            )\n                                         )\n                             ) bs on bs.cid = cbb.cid\n                                 and bs.brand = rb.brand\n                   where (rb.division = 'Petcare' and rb.brand not in  ('Beta Breeder','Pro Plan Breeder','Pro Plan Vet','Kitten Code','Growing Pup', 'Breed Selector'))\n                       or (rb.brand = 'Growing Pup' and gp.cid is not null)\n                       or (rb.brand = 'Breed Selector' and bs.cid is not null)\n                   union all\n                   select\n                       cid,\n                       first_date_brand,\n                       last_date_brand\n                   from ${Database}.temp.build_rollups_cid_npp_no_brand_base\n               ) mb\n      ) mb on mb.cid = cbb.cid\n          and mb.brand_id = cbb.brand_id\nwhen not matched then insert\n(\n    cid,\n    brand_id,\n    assigned_master_brand,\n    first_date_brand,\n    last_date_brand,\n    last_login_brand,\n    first_channel_brand,\n    last_channel_brand\n)\nvalues\n(\n    mb.cid,\n    mb.brand_id,\n    1,\n    mb.first_date_brand,\n    mb.last_date_brand,\n    cast(null as date),\n    cast(null as varchar(10)),\n    cast(null as varchar(10))\n);\n\n---------------------\n--set up Kitten Code brand for anyone who has a kitten from other brands\nmerge into ${Database}.temp.build_rollups_cid_brand_base cbb\nusing (\n          select distinct\n              cbb.cid,\n              (select brand_id from ${Database}.live.ref_brand where brand = 'Kitten Code') as brand_id,\n              first_value(first_date_brand) over\n                  (\n                      partition by cbb.cid\n                      order by first_date_brand nulls last\n                  ) as first_date_brand,\n              first_value(last_date_brand) over\n                  (\n                      partition by cbb.cid\n                      order by last_date_brand desc nulls last\n                  ) as last_date_brand\n          from (\n                   select\n                       cid,\n                       first_date_brand,\n                       last_date_brand\n                   from ${Database}.temp.build_rollups_cid_brand_base cbb\n                   inner join ${Database}.live.ref_brand rb on rb.brand_id = cbb.brand_id\n                   where (rb.division = 'Petcare' and rb.brand not in  ('Beta Breeder','Pro Plan Breeder','Pro Plan Vet'))\n                   union all\n                   select\n                       cid,\n                       first_date_brand,\n                       last_date_brand\n                   from ${Database}.temp.build_rollups_cid_npp_no_brand_base\n               ) cbb\n          inner join (\n                         select distinct\n                             cid\n                         from ${Database}.live.cid_pet\n                         where lower(pet_life_stage) = 'kitten'\n                     ) pt on pt.cid = cbb.cid\n      ) kc on kc.cid = cbb.cid\n          and kc.brand_id = cbb.brand_id\nwhen not matched then insert\n(\n    cid,\n    brand_id,\n    assigned_master_brand,\n    first_date_brand,\n    last_date_brand,\n    last_login_brand,\n    first_channel_brand,    \n    last_channel_brand\n)\nvalues \n(\n    kc.cid,\n    kc.brand_id,\n    0,\n    kc.first_date_brand,\n    kc.last_date_brand,\n    cast(null as date),\n    cast(null as varchar(10)),\n    cast(null as varchar(10))\n);\n\n---------------------\n--set up Growing Pup brand for anyone who has a Puppy from other brands\nmerge into ${Database}.temp.build_rollups_cid_brand_base cbb\nusing (\n          select distinct\n              cbb.cid,\n              (select brand_id from ${Database}.live.ref_brand where brand = 'Growing Pup') as brand_id,\n              first_value(first_date_brand) over\n                  (\n                      partition by cbb.cid\n                      order by first_date_brand nulls last\n                  ) as first_date_brand,\n              first_value(last_date_brand) over\n                  (\n                      partition by cbb.cid\n                      order by last_date_brand desc nulls last\n                  ) as last_date_brand\n          from (\n                   select\n                       cid,\n                       first_date_brand,\n                       last_date_brand\n                   from ${Database}.temp.build_rollups_cid_brand_base cbb\n                   inner join ${Database}.live.ref_brand rb on rb.brand_id = cbb.brand_id\n                   where (rb.division = 'Petcare' and rb.brand not in  ('Beta Breeder','Pro Plan Breeder','Pro Plan Vet'))\n                   union all\n                   select\n                       cid,\n                       first_date_brand,\n                       last_date_brand\n                   from ${Database}.temp.build_rollups_cid_npp_no_brand_base\n               ) cbb\n          inner join (\n                         select distinct\n                             cid\n                         from ${Database}.live.cid_pet\n                         where lower(pet_life_stage) = 'puppy'\n                     ) pt on pt.cid = cbb.cid\n      ) gp on gp.cid = cbb.cid\n          and gp.brand_id = cbb.brand_id\nwhen not matched then insert\n(\n    cid,\n    brand_id,\n    assigned_master_brand,\n    first_date_brand,\n    last_date_brand,\n    last_login_brand,\n    first_channel_brand,    \n    last_channel_brand\n)\nvalues \n(\n    gp.cid,\n    gp.brand_id,\n    0,\n    gp.first_date_brand,\n    gp.last_date_brand,\n    cast(null as date),\n    cast(null as varchar(10)),\n    cast(null as varchar(10))\n);\n\nalter warehouse set warehouse_size = 'Medium';\n\n---------------------\n--have no printer\n\ndrop table if exists ${Database}.temp.build_rollups_cid_no_printer ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_no_printer \nas\nselect distinct nm.cid\nfrom ${Database}.live.names nm\ninner join ${Database}.db.names_attributes nat on trim(nat.name_urn) = nm.name_urn\n                                         and nat.no_printer = 1;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_no_printer',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_no_printer;\n\n---------------------\n--purina engagement scoring\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_samples;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_samples\nas \nselect distinct   \n    cid,\n    first_value(activity_date) over (partition by cid, activity_brand_id order by activity_date desc) as activity_date,\n    'Requested free product sample' as activity,\n    activity_brand_id\nfrom (\n        select distinct \n            xr.cid,\n            case\n                when trim(ch.campaign_id) = 'NPP04825_1' then (select brand_id from ${Database}.live.ref_brand where brand = 'Go Cat')\n                when trim(ch.campaign_id) in ('NPP05588_1','NPP02921_3','NPP04571') then (select brand_id from ${Database}.live.ref_brand where brand = 'Dentalife')\n            end as activity_brand_id,\n            drop_date as activity_date\n        from ${Database}.db.comms_hist ch\n        inner join ${Database}.live.xref_name_urn xr on trim(ch.name_urn) = trim(xr.name_urn)\n        where trim(programme_id) = 'M' \n        and \n            (\n            trim(campaign_id) = 'NPP04825_1' --Go Cat\n            or trim(campaign_id) = 'NPP05588_1' -- Dentalife\n            or trim(campaign_id) = 'NPP02921_3' --old dentalife\n            or trim(campaign_id) = 'NPP04571' --old dentalife\n            )\n        union all\n        select distinct\n            xr.cid,\n            sm.source_brand_id as activity_brand_id,\n            coalesce(sm.request_date,sm.processing_date) as activity_date\n        from ${Database}.db.npp_sample_requests sm\n        inner join ${Database}.live.xref_name_urn xr on trim(xr.name_urn) = trim(sm.name_urn)\n    ) a\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_samples',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_samples;\n\n---------------------\n--all sources by brand\n\nalter warehouse set warehouse_size = 'Large';\n\ndrop table if exists ${Database}.live.cid_brand_source ;  \n\nCREATE OR REPLACE TABLE ${Database}.live.cid_brand_source\nas\nselect distinct\n    nm.cid,\n    dbnm.source_brand_id as brand_id,\n    trim(dbnm.source) as source,\n    trim(dbnm.source_file) as source_file,  \n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id, trim(dbnm.source), trim(dbnm.source_file)\n            order by dbnm.data_date nulls last\n        )                                            as first_date_brand_source,    \n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id, trim(dbnm.source), trim(dbnm.source_file)\n            order by dbnm.data_date desc nulls last\n        )                                            as last_date_brand_source\nfrom ${Database}.live.names nm\ninner join ${Database}.db.names dbnm on trim(dbnm.name_urn) = nm.name_urn\nwhere dbnm.source_brand_id is not null;\n\nalter warehouse set warehouse_size = 'Medium';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid_brand_source',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_brand_source;\n\n\n---------------------\n--preferrences (gigya)\ndrop table if exists ${Database}.temp.build_rollups_cid_brand_preference ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_brand_preference \nas\nselect distinct\n    nm.cid,\n    np.brand_id,\n    first_value(np.pref_emailable) over \n        (\n            partition by nm.cid, np.brand_id\n            order by \n                np.data_date desc nulls last,\n                case when lower(np.source_file) regexp '.*json.*' then 1 else 0 end --migration is json files\n        )  as pref_emailable,\n    first_value(case when lower(np.source_file) regexp '.*json.*' then 1 else 0 end) over \n        (\n            partition by nm.cid, np.brand_id\n            order by \n                np.data_date desc nulls last,\n                case when lower(np.source_file) regexp '.*json.*' then 1 else 0 end --migration is json files\n        )  as pref_mig,\n    first_value(np.data_date) over \n        (\n            partition by nm.cid, np.brand_id\n            order by \n                np.data_date desc nulls last,\n                case when lower(np.source_file) regexp '.*json.*' then 1 else 0 end --migration is json files\n        )  as pref_date,\n    first_value(np.data_date) over \n        (\n            partition by nm.cid, np.brand_id\n            order by \n                np.data_date asc nulls last,\n                case when lower(np.source_file) regexp '.*json.*' then 1 else 0 end --migration is json files\n        )  as first_pref_date\nfrom ${Database}.live.names nm\ninner join ${Database}.db.names_preference np on trim(np.name_urn) = nm.name_urn;\n                                     \ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_brand_preference',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_brand_preference;\n\n\n---------------------\n--all products (affiliations) by brand\n\n\ndrop table if exists ${Database}.live.cid_brand_product ;  \n\nCREATE OR REPLACE TABLE ${Database}.live.cid_brand_product\nas\nselect distinct\n    nm.cid,\n    rp.brand_id,\n    rp.product_id,\n    first_value(pr.data_date) over \n        (\n            partition by nm.cid, rp.brand_id, rp.product_id\n            order by pr.data_date desc nulls last\n        )  as last_date_brand_product\nfrom ${Database}.live.names nm\ninner join ${Database}.db.product pr on trim(pr.name_urn) = nm.name_urn\ninner join ${Database}.db.ref_product rp on pr.product_id = rp.product_id\nwhere rp.brand_id is not null;\n\nalter warehouse set warehouse_size = 'Small';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid_brand_product',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_brand_product;\n\ndrop table if exists ${Database}.live.ref_product;\n   \nCREATE OR REPLACE TABLE ${Database}.live.ref_product  \nas\nselect \n    product_id,\n    trim(product_name) as product_name\nfrom ${Database}.db.ref_product;\n\n\ndrop table if exists ${Database}.temp.build_rollups_cid_brand_product ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_brand_product\nas\nselect distinct\n    cid,\n    brand_id\nfrom ${Database}.live.cid_brand_product\nwhere last_date_brand_product > add_months(current_date, -60); --now only using data from the last 5 years to determine preference for brand\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_brand_product',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_brand_product;\n\n--purina engagement scoring\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_loyalty_scheme;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_loyalty_scheme\nas \nselect \n    distinct cid,\n    first_value(activity_date) over (partition by cid, trim(brand) order by activity_date desc) as activity_date,\n    'Joined Loyalty Scheme' as activity,\n    brand_id as activity_brand_id\nfrom (\n        select distinct    \n            xr.cid,\n            first_value(l.source_date) over (partition by xr.cid order by l.source_date desc) as activity_date,\n            'BETA' as brand,\n            (select brand_id from ${Database}.live.ref_brand where brand = 'Beta') as brand_id\n        from     ${Database}.db.npp_beta_pro_plan_loyalty l\n        join         ${Database}.live.xref_name_urn xr on xr.name_urn = 'REG_NPP_LYLTY|'||cast(l.urn as varchar)\n        where     trim(l.source) = 'BETA Loyalty'\n        \n        union all\n        \n        select distinct    \n            xr.cid,\n            first_value(l.source_date) over (partition by xr.cid order by l.source_date desc) as activity_date,\n            'Pro Plan' as brand,\n            (select brand_id from ${Database}.live.ref_brand where brand = 'Pro Plan') as brand_id\n        from     ${Database}.db.npp_beta_pro_plan_loyalty l\n        join         ${Database}.live.xref_name_urn xr on xr.name_urn = 'REG_NPP_LYLTY|'||cast(l.urn as varchar)\n        where     trim(l.source) = 'PRO PLAN Loyalty'\n        \n        union all\n        \n        select    \n            cid,\n            last_date_brand_product as activity_date,\n            case when product_id in (970,1611,1612,1613) then 'Pro Plan'\n                 when product_id = 1631 then 'Felix'\n                 when product_id = 1632 then 'Gourmet'\n                 else 'error' end as brand,\n            case when product_id in (970,1611,1612,1613) then (select brand_id from ${Database}.live.ref_brand where brand = 'Pro Plan')\n                 when product_id = 1631 then (select brand_id from ${Database}.live.ref_brand where brand = 'Felix')\n                 when product_id = 1632 then (select brand_id from ${Database}.live.ref_brand where brand = 'Gourmet')\n                 else cast(null as int) end as brand_id\n        from ${Database}.live.cid_brand_product\n        where product_id in (970,1611,1612,1613,1631,1632)\n        union all\n        select distinct\n            cid,\n            answer_data_date as activity_date,\n            'Your Purina' as brand,\n            (select brand_id from ${Database}.live.ref_brand where brand = 'Your Purina') as brand_id\n        from ${Database}.live.cid_question cq\n        inner join ${Database}.db.ref_question rq on rq.question_id = cq.question_id\n        where rq.question = 'Where do you buy food for your pets?'\n        ) a\n;\n\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_loyalty_scheme',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_loyalty_scheme;\n\ndrop table if exists ${Database}.temp.build_comms_history ;  \n\nalter warehouse set warehouse_size = 'Medium';\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_comms_history\nas \nselect \n    nm.cid,\n    ch.control_cell,\n    trim(ch.name_urn) as name_urn,\n    ch.drop_date,\n    ch.response_date,\n    ch.data_brand_id,\n    lower(trim(ch.email)) as email,\n    ch.brand_preference,\n    ch.brand_engagement,\n    trim(ch.programme_id)||'|'||trim(ch.campaign_id)||'|'||trim(ch.promotion_id)||'|'||trim(ch.cell_id)||'|'||trim(ch.pack_id) as packid\nfrom ${Database}.db.comms_hist ch\ninner join ${Database}.live.names nm on trim(ch.name_urn) = nm.name_urn;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_comms_history',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_comms_history;\n\n\ndrop table if exists ${Database}.temp.build_comms_history_lookup ;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_comms_history_lookup\nas\nselect *,\n    trim(programme_id)||'|'||trim(campaign_id)||'|'||trim(promotion_id)||'|'||trim(cell_id)||'|'||trim(pack_id) as packid\nfrom ${Database}.db.comms_hist_lookup;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_comms_history_lookup',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_comms_history_lookup;\n\n\n---------------------\n--responses\n\n\ndrop table if exists ${Database}.temp.adestra_events_in_xref;\n\n--create version of adestra table with all campaigns that are in the xref\nCREATE OR REPLACE TABLE ${Database}.temp.adestra_events_in_xref\nas\nselect\n    trim(ae.email) as EMAIL,\n\ttrim(ae.name_urn) as NAME_URN,\n\ttrim(ae.amf_id) as AMF_ID,\n\ttrim(ae.campaign_id) as CAMPAIGN_ID,\n\ttrim(ae.campaign_name) as CAMPAIGN_NAME,\n\ttrim(ae.event_name) as EVENT_NAME,\n\tae.event_timestamp,\n\ttrim(ae.link_label) as LINK_LABEL,\n\ttrim(ae.link_url) as LINK_URL,\n\ttrim(ae.form_builder_id) as FORM_BUILDER_ID,\n    trim(ae.email_client) as email_client,\n    trim(ae.email_client_type) as email_client_type,\n    trim(ae.browser) as browser,\n\ttrim(ae.kog_pack) as KOG_PACK,\n\ttrim(ae.source_file) as SOURCE_FILE,\n\tae.source_date,\n    trim(xr.ch_campaign_id) as ch_campaign_id\nfrom ${Database}.db.adestra_events ae\ninner join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(trim(ae.campaign_name)) = lower(trim(xr.adestra_campaign_name))\n                                                           and trim(xr.adestra_campaign_name) <> ''\nwhere ae.name_urn <> '999999';\n\ndrop table if exists ${Database}.temp.adestra_events_no_xref;\n\n--create version of adestra table with all campaign that are not in the xref\nCREATE OR REPLACE TABLE ${Database}.temp.adestra_events_no_xref\nas\nselect\n    trim(ae.email) as EMAIL,\n\ttrim(ae.name_urn) as NAME_URN,\n\ttrim(ae.amf_id) as AMF_ID,\n\ttrim(ae.campaign_id) as CAMPAIGN_ID,\n\ttrim(ae.campaign_name) as CAMPAIGN_NAME,\n\ttrim(ae.event_name) as EVENT_NAME,\n\tae.event_timestamp,\n\ttrim(ae.link_label) as LINK_LABEL,\n\ttrim(ae.link_url) as LINK_URL,\n\ttrim(ae.form_builder_id) as FORM_BUILDER_ID,\n    trim(ae.email_client) as email_client,\n    trim(ae.email_client_type) as email_client_type,\n    trim(ae.browser) as browser,\n\ttrim(ae.kog_pack) as KOG_PACK,\n\ttrim(ae.source_file) as SOURCE_FILE,\n\tae.source_date\nfrom ${Database}.db.adestra_events ae\nleft join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(trim(ae.campaign_name)) = lower(trim(xr.adestra_campaign_name))\n                                                          and trim(xr.adestra_campaign_name) <> ''\nwhere xr.adestra_campaign_name is null\n    and ae.name_urn <> '999999';\n\n\n\ndrop table if exists ${Database}.live.adestra_events ;  \n\nalter warehouse set warehouse_size = 'Xlarge';\n\n--insert the ones that are in the lookup and have a name_urn\ncreate or replace table ${Database}.live.adestra_events \nas \nselect distinct\n    'Adestra' as platform,\n    nm.cid,\n    ch.campaign_id,\n    lower(ae.email) as email,\n    ae.amf_id,\n    ae.campaign_id as adestra_campaign_id,\n    ae.campaign_name as adestra_campaign_name,\n    ae.event_name,\n    ae.event_timestamp,\n    case when ae.event_name ilike '%form_builder_click%' then 'DC | Service | Web Form'\n\t\t\t when ae.event_name ilike '%form_click%' then 'DC | Service | Web Form'\n             when ae.event_name ilike '%webversion_click%' then 'O | Generic | View in Browser'\n             else  coalesce(rll.link_label, ae.link_label)\n    end as link_label,\n    ae.link_url,\n    ae.form_builder_id,\n    ae.email_client,\n    ae.email_client_type,\n    ae.browser,\n\tcoalesce(ae.kog_pack,'') as kog_pack,\n    ae.source_file,\n    ae.source_date\nfrom ${Database}.temp.adestra_events_in_xref ae --the name_urn on here is only historic - assume only email now supplied\ninner join ${Database}.live.xref_name_urn nm on ae.name_urn = nm.name_urn --get all the old ones\ninner join ${Database}.temp.build_comms_history_lookup ch on lower(ch.campaign_id) = lower(ae.ch_campaign_id)\nleft join ${Database}.db.ref_link_label rll on trim(ae.link_url) = trim(rll.link_url)\n                                      and trim(lower(ae.campaign_name)) = trim(lower(rll.campaign_name)) \nwhere ae.name_urn > '';\n\n\n--insert the ones that are in the lookup with no name_urn\ninsert into ${Database}.live.adestra_events \nselect distinct\n    'Adestra' as platform,\n    nm.cid,\n    ch.campaign_id,\n    lower(ae.email) as email,\n    ae.amf_id,\n    ae.campaign_id as adestra_campaign_id,\n    ae.campaign_name,\n    ae.event_name,\n    ae.event_timestamp,\n    case when ae.event_name ilike '%form_builder_click%' then 'DC | Service | Web Form'\n\t\t\t when ae.event_name ilike '%form_click%' then 'DC | Service | Web Form'\n             when ae.event_name ilike '%webversion_click%' then 'O | Generic | View in Browser'\n             else  coalesce(rll.link_label, ae.link_label)\n    end as link_label,\n    ae.link_url,\n    ae.form_builder_id,\n    ae.email_client,\n    ae.email_client_type,\n    ae.browser,\n\tcoalesce(ae.kog_pack,'') as kog_pack,\n    ae.source_file,\n    ae.source_date\nfrom ${Database}.temp.adestra_events_in_xref ae --the name_urn on here is only historic - assume only email now supplied\ninner join ${Database}.live.xref_email nm on lower(ae.email) = nm.email --use this as it is all email addresses on the db\ninner join ${Database}.temp.build_comms_history_lookup ch on lower(ch.campaign_id) = lower(ae.ch_campaign_id)\ninner join ${Database}.temp.build_comms_history chb on chb.packid = ch.packid \n                                        and chb.cid = nm.cid\nleft join ${Database}.db.ref_link_label rll on trim(ae.link_url) = trim(rll.link_url)\n                                      and trim(lower(ae.campaign_name)) = trim(lower(rll.campaign_name))                                         \n\nwhere ae.name_urn = '';\n\n\ndrop table if exists ${Database}.temp.adestra_events_in_xref;\n\n\n--insert the ones that are not in the lookup but with name_urn\ninsert into ${Database}.live.adestra_events \nselect distinct\n    'Adestra' as platform,\n    nm.cid,\n    ch.campaign_id,\n    lower(ae.email) as email,\n    ae.amf_id,\n    ae.campaign_id as adestra_campaign_id,\n    ae.campaign_name,\n    ae.event_name,\n    ae.event_timestamp,\n    case when ae.event_name ilike '%form_builder_click%' then 'DC | Service | Web Form'\n\t\t\t when ae.event_name ilike '%form_click%' then 'DC | Service | Web Form'\n             when ae.event_name ilike '%webversion_click%' then 'O | Generic | View in Browser'\n             else  coalesce(rll.link_label, ae.link_label)\n    end as link_label,\n    ae.link_url,\n    ae.form_builder_id,\n    ae.email_client,\n    ae.email_client_type,\n    ae.browser,\n\tcoalesce(ae.kog_pack,'') as kog_pack,\n    ae.source_file,\n    ae.source_date\nfrom ${Database}.temp.adestra_events_no_xref ae --the name_urn on here is only historic - assume only email now supplied\ninner join ${Database}.live.xref_name_urn nm on ae.name_urn = nm.name_urn\ninner join ${Database}.temp.build_comms_history_lookup ch on ch.programme_id = 'E' \n                                              and lower(ch.campaign_id) = lower(case when ae.campaign_name ilike '%_MTE_%' then tbw.db.strchop(ae.campaign_name,'_',1,3) else tbw.db.strchop(ae.campaign_name,'_',1,1) end)\nleft join ${Database}.db.ref_link_label rll on trim(ae.link_url) = trim(rll.link_url)\n                                      and trim(lower(ae.campaign_name)) = trim(lower(rll.campaign_name))                                              \nwhere ae.name_urn > '';\n\n\n--insert the ones that are not in the lookup with no name_urn\ninsert into ${Database}.live.adestra_events \nselect distinct\n    'Adestra' as platform, \n    nm.cid,\n    ch.campaign_id,\n    lower(ae.email) as email,\n    ae.amf_id,\n    ae.campaign_id as adestra_campaign_id,\n    ae.campaign_name,\n    ae.event_name,\n    ae.event_timestamp,\n    case when ae.event_name ilike '%form_builder_click%' then 'DC | Service | Web Form'\n\t\t\t when ae.event_name ilike '%form_click%' then 'DC | Service | Web Form'\n             when ae.event_name ilike '%webversion_click%' then 'O | Generic | View in Browser'\n             else  coalesce(rll.link_label, ae.link_label)\n    end as link_label,\n    ae.link_url,\n    ae.form_builder_id,\n    ae.email_client,\n    ae.email_client_type,\n    ae.browser,\n\tcoalesce(ae.kog_pack,'') as kog_pack,\n    ae.source_file,\n    ae.source_date\nfrom ${Database}.temp.adestra_events_no_xref ae --the name_urn on here is only historic - assume only email now supplied\ninner join ${Database}.live.xref_email nm on lower(ae.email) = nm.email --use this as it is all email addresses on the db\ninner join ${Database}.temp.build_comms_history_lookup ch on ch.programme_id = 'E' \n                                              and lower(ch.campaign_id) = lower(case when ae.campaign_name ilike '%_MTE_%' then tbw.db.strchop(ae.campaign_name,'_',1,3) else tbw.db.strchop(ae.campaign_name,'_',1,1) end)\ninner join ${Database}.temp.build_comms_history chb on chb.packid = ch.packid \n\n                                        and chb.cid = nm.cid \n\nleft join ${Database}.db.ref_link_label rll on trim(ae.link_url) = trim(rll.link_url)\n                                      and trim(lower(ae.campaign_name)) = trim(lower(rll.campaign_name))\nwhere ae.name_urn = '';\n\ndrop table ${Database}.temp.adestra_events_no_xref;\n\n\nalter warehouse set warehouse_size = 'Medium';\n\ndrop table if exists ${Database}.temp.mapp_events_in_xref;\n\n--create version of adestra table with all campaigns that are in the xref\nCREATE OR REPLACE TABLE ${Database}.temp.mapp_events_in_xref\nas\nselect\n    mp.senttomta_timestamp,\n\ttrim(mp.senttomta_externaltransactionid) as senttomta_externaltransactionid,\n\ttrim(mp.senttomta_sendoutchannel) as senttomta_sendoutchannel,\n\tmp.skip_timestamp,\n\ttrim(mp.skip_category) as skip_category,\n\ttrim(mp.skip_externaltransactionid) as skip_externaltransactionid,\n\tmp.bounce_timestamp,\n\ttrim(mp.bounce_category) as bounce_category,\n\ttrim(mp.bounce_text) as bounce_text,\n\tmp.feedback_timestamp,\n\ttrim(mp.feedback_category) as feedback_category,\n\tmp.render_timestamp,\n\ttrim(mp.render_geolocation_isocountrycode) as render_geolocation_isocountrycode,\n\ttrim(mp.render_geolocation_regioncode) as render_geolocation_regioncode,\n\ttrim(mp.render_geolocation_city) as render_geolocation_city,\n\ttrim(mp.render_geolocation_latitude) as render_geolocation_latitude,\n\ttrim(mp.render_geolocation_longitude) as render_geolocation_longitude,\n\ttrim(mp.render_useragent_platform) as render_useragent_platform,\n\ttrim(mp.render_useragent_operatingsystemname) as render_useragent_operatingsystemname,\n\ttrim(mp.render_useragent_operatingsystemversion) as render_useragent_operatingsystemversion,\n\ttrim(mp.render_useragent_clientname) as render_useragent_clientname,\n\ttrim(mp.render_useragent_clientversion) as render_useragent_clientversion,\n\ttrim(mp.render_useragent_rawstring) as render_useragent_rawstring,\n\tmp.click_timestamp,\n\ttrim(mp.click_link_id) as click_link_id,\n\ttrim(mp.click_link_category_id) as click_link_category_id,\n\ttrim(mp.click_link_category_name) as click_link_category_name,\n\ttrim(mp.click_link_url) as click_link_url,\n\ttrim(mp.click_link_systemlinktype) as click_link_systemlinktype,\n\ttrim(mp.click_link_type) as click_link_type,\n\ttrim(mp.click_geolocation_isocountrycode) as click_geolocation_isocountrycode,\n\ttrim(mp.click_geolocation_regioncode) as click_geolocation_regioncode,\n\ttrim(mp.click_geolocation_city) as click_geolocation_city,\n\ttrim(mp.click_geolocation_latitude) as click_geolocation_latitude,\n\ttrim(mp.click_geolocation_longitude) as click_geolocation_longitude,\n\ttrim(mp.click_useragent_platform) as click_useragent_platform,\n\ttrim(mp.click_useragent_operatingsystem) as click_useragent_operatingsystem,\n\ttrim(mp.click_useragent_operatingsystemversion) as click_useragent_operatingsystemversion,\n\ttrim(mp.click_useragent_clientname) as click_useragent_clientname,\n\ttrim(mp.click_useragent_clientversion) as click_useragent_clientversion,\n\ttrim(mp.click_useragent_rawstring) as click_useragent_rawstring,\n\tmp.unsubscribe_timestamp,\n\tmp.forward_timestamp,\n\tmp.conversion_cp_timestamp,\n\ttrim(mp.conversion_cp_id) as conversion_cp_id,\n\ttrim(mp.conversion_cp_name) as conversion_cp_name,\n\ttrim(mp.conversion_cp_orderid) as conversion_cp_orderid,\n\ttrim(mp.conversion_cp_itemcount) as conversion_cp_itemcount,\n\ttrim(mp.conversion_cp_amount) as conversion_cp_amount,\n\ttrim(mp.conversion_cp_requestparameters) as conversion_cp_requestparameters,\n\ttrim(mp.group_id) as group_id,\n\ttrim(mp.group_name) as group_name,\n\ttrim(mp.group_email) as group_email,\n\ttrim(mp.group_category_id) as group_category_id,\n\ttrim(mp.group_category_name) as group_category_name,\n\ttrim(mp.message_id) as message_id,\n\ttrim(mp.message_name) as message_name,\n\ttrim(mp.message_category_id) as message_category_id,\n\ttrim(mp.message_category_name) as message_category_name,\n\ttrim(mp.message_subject_unresolved) as message_subject_unresolved,\n\ttrim(mp.message_externalid) as message_externalid,\n\ttrim(mp.message_type) as message_type,\n\ttrim(mp.message_variation_id) as message_variation_id,\n\ttrim(mp.selection_id) as selection_id,\n\ttrim(mp.selection_name) as selection_name,\n\tmp.record_timestamp,\n\ttrim(mp.record_type) as record_type,\n\tmp.record_senttomta_timestamp,\n\ttrim(mp.record_externaltransactionid) as record_externaltransactionid,\n\ttrim(mp.sendout_type) as sendout_type,\n\ttrim(mp.sendout_addresseerole) as sendout_addresseerole,\n\ttrim(mp.sendout_recipienttype) as sendout_recipienttype,\n\ttrim(mp.user_id) as user_id,\n\ttrim(mp.user_email) as user_email,\n\ttrim(mp.user_mobilenumber) as user_mobilenumber,\n\ttrim(mp.user_faxnumber) as user_faxnumber,\n\ttrim(mp.user_identifier) as user_identifier,\n\ttrim(mp.user_custom_attribute_batch) as user_custom_attribute_batch,\n\ttrim(mp.user_custom_attribute_cell) as user_custom_attribute_cell,\n\ttrim(mp.user_custom_attribute_name_urn) as user_custom_attribute_name_urn,\n\ttrim(mp.source_file) as source_file,\n\tmp.source_date,\n    xr.ch_campaign_id\nfrom ${Database}.db.mapp_events mp\ninner join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(trim(mp.message_name)) = lower(trim(xr.mapp_message_name))\n                                                           and trim(xr.mapp_message_name) <> '';\n\n\ndrop table if exists ${Database}.temp.mapp_events_no_xref;\n\n--create version of adestra table with all campaigns that are in the xref\nCREATE OR REPLACE TABLE ${Database}.temp.mapp_events_no_xref\nas\nselect\n    mp.senttomta_timestamp,\n\ttrim(mp.senttomta_externaltransactionid) as senttomta_externaltransactionid,\n\ttrim(mp.senttomta_sendoutchannel) as senttomta_sendoutchannel,\n\tmp.skip_timestamp,\n\ttrim(mp.skip_category) as skip_category,\n\ttrim(mp.skip_externaltransactionid) as skip_externaltransactionid,\n\tmp.bounce_timestamp,\n\ttrim(mp.bounce_category) as bounce_category,\n\ttrim(mp.bounce_text) as bounce_text,\n\tmp.feedback_timestamp,\n\ttrim(mp.feedback_category) as feedback_category,\n\tmp.render_timestamp,\n\ttrim(mp.render_geolocation_isocountrycode) as render_geolocation_isocountrycode,\n\ttrim(mp.render_geolocation_regioncode) as render_geolocation_regioncode,\n\ttrim(mp.render_geolocation_city) as render_geolocation_city,\n\ttrim(mp.render_geolocation_latitude) as render_geolocation_latitude,\n\ttrim(mp.render_geolocation_longitude) as render_geolocation_longitude,\n\ttrim(mp.render_useragent_platform) as render_useragent_platform,\n\ttrim(mp.render_useragent_operatingsystemname) as render_useragent_operatingsystemname,\n\ttrim(mp.render_useragent_operatingsystemversion) as render_useragent_operatingsystemversion,\n\ttrim(mp.render_useragent_clientname) as render_useragent_clientname,\n\ttrim(mp.render_useragent_clientversion) as render_useragent_clientversion,\n\ttrim(mp.render_useragent_rawstring) as render_useragent_rawstring,\n\tmp.click_timestamp,\n\ttrim(mp.click_link_id) as click_link_id,\n\ttrim(mp.click_link_category_id) as click_link_category_id,\n\ttrim(mp.click_link_category_name) as click_link_category_name,\n\ttrim(mp.click_link_url) as click_link_url,\n\ttrim(mp.click_link_systemlinktype) as click_link_systemlinktype,\n\ttrim(mp.click_link_type) as click_link_type,\n\ttrim(mp.click_geolocation_isocountrycode) as click_geolocation_isocountrycode,\n\ttrim(mp.click_geolocation_regioncode) as click_geolocation_regioncode,\n\ttrim(mp.click_geolocation_city) as click_geolocation_city,\n\ttrim(mp.click_geolocation_latitude) as click_geolocation_latitude,\n\ttrim(mp.click_geolocation_longitude) as click_geolocation_longitude,\n\ttrim(mp.click_useragent_platform) as click_useragent_platform,\n\ttrim(mp.click_useragent_operatingsystem) as click_useragent_operatingsystem,\n\ttrim(mp.click_useragent_operatingsystemversion) as click_useragent_operatingsystemversion,\n\ttrim(mp.click_useragent_clientname) as click_useragent_clientname,\n\ttrim(mp.click_useragent_clientversion) as click_useragent_clientversion,\n\ttrim(mp.click_useragent_rawstring) as click_useragent_rawstring,\n\tmp.unsubscribe_timestamp,\n\tmp.forward_timestamp,\n\tmp.conversion_cp_timestamp,\n\ttrim(mp.conversion_cp_id) as conversion_cp_id,\n\ttrim(mp.conversion_cp_name) as conversion_cp_name,\n\ttrim(mp.conversion_cp_orderid) as conversion_cp_orderid,\n\ttrim(mp.conversion_cp_itemcount) as conversion_cp_itemcount,\n\ttrim(mp.conversion_cp_amount) as conversion_cp_amount,\n\ttrim(mp.conversion_cp_requestparameters) as conversion_cp_requestparameters,\n\ttrim(mp.group_id) as group_id,\n\ttrim(mp.group_name) as group_name,\n\ttrim(mp.group_email) as group_email,\n\ttrim(mp.group_category_id) as group_category_id,\n\ttrim(mp.group_category_name) as group_category_name,\n\ttrim(mp.message_id) as message_id,\n\ttrim(mp.message_name) as message_name,\n\ttrim(mp.message_category_id) as message_category_id,\n\ttrim(mp.message_category_name) as message_category_name,\n\ttrim(mp.message_subject_unresolved) as message_subject_unresolved,\n\ttrim(mp.message_externalid) as message_externalid,\n\ttrim(mp.message_type) as message_type,\n\ttrim(mp.message_variation_id) as message_variation_id,\n\ttrim(mp.selection_id) as selection_id,\n\ttrim(mp.selection_name) as selection_name,\n\tmp.record_timestamp,\n\ttrim(mp.record_type) as record_type,\n\tmp.record_senttomta_timestamp,\n\ttrim(mp.record_externaltransactionid) as record_externaltransactionid,\n\ttrim(mp.sendout_type) as sendout_type,\n\ttrim(mp.sendout_addresseerole) as sendout_addresseerole,\n\ttrim(mp.sendout_recipienttype) as sendout_recipienttype,\n\ttrim(mp.user_id) as user_id,\n\ttrim(mp.user_email) as user_email,\n\ttrim(mp.user_mobilenumber) as user_mobilenumber,\n\ttrim(mp.user_faxnumber) as user_faxnumber,\n\ttrim(mp.user_identifier) as user_identifier,\n\ttrim(mp.user_custom_attribute_batch) as user_custom_attribute_batch,\n\ttrim(mp.user_custom_attribute_cell) as user_custom_attribute_cell,\n\ttrim(mp.user_custom_attribute_name_urn) as user_custom_attribute_name_urn,\n\ttrim(mp.source_file) as source_file,\n\tmp.source_date,\n    xr.ch_campaign_id\nfrom ${Database}.db.mapp_events mp\nleft join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(trim(mp.message_name)) = lower(trim(xr.mapp_message_name))\n                                                           and trim(xr.mapp_message_name) <> ''\nwhere xr.mapp_message_name is null;\n\n\n\n--insert the ones that are in the lookup and have a name_urn\ninsert into ${Database}.live.adestra_events\nselect distinct\n    'Mapp' as platform,\n    xr.cid,\n    chl.campaign_id,\n    lower(mp.user_email) as email,\n    '' as amf_id,\n    mp.message_id as adestra_campaign_id,\n    mp.message_name as adestra_campaign_name,\n    case\n        when mp.record_type = 'SentToMTA' then 'sent_campaign'\n        when mp.record_type = 'Render' then 'read'\n        when mp.record_type = 'Click' then 'click'\n        when mp.record_type = 'Bounce' then 'inbound_bounce'\n        when mp.record_type = 'Feedback' then 'feedback'\n        when mp.record_type = 'Skip' then 'skip'\n        else lower(mp.record_type)\n    end as event_name,\n    mp.record_timestamp as event_timestamp,\n    coalesce(trim(rll.link_label), mp.click_link_category_name) as link_label,\n    mp.click_link_url as link_url,\n    '' as form_builder_id,\n    '' as email_client,\n    '' as email_client_type,\n    '' as browser,\n    '' as kog_pack,\n    mp.source_file,\n    mp.source_date\nfrom ${Database}.temp.mapp_events_in_xref mp\ninner join ${Database}.live.xref_name_urn xr on mp.user_custom_attribute_name_urn = xr.name_urn\ninner join ${Database}.temp.build_comms_history_lookup chl on lower(chl.campaign_id) = lower(mp.ch_campaign_id)\nleft join ${Database}.db.ref_link_label rll on trim(mp.click_link_url) = trim(rll.link_url)\n                                      and trim(lower(mp.message_name)) = trim(lower(rll.campaign_name))                                        \nwhere mp.user_custom_attribute_name_urn > '';\n    \n\n--insert the ones that are in the lookup with no name_urn\ninsert into ${Database}.live.adestra_events\nselect distinct\n    'Mapp' as platform,\n    xr.cid,\n    chl.campaign_id,\n    lower(mp.user_email) as email,\n    '' as amf_id,\n    mp.message_id as adestra_campaign_id,\n    mp.message_name as adestra_campaign_name,\n    case\n        when mp.record_type = 'SentToMTA' then 'sent_campaign'\n        when mp.record_type = 'Render' then 'read'\n        when mp.record_type = 'Click' then 'click'\n        when mp.record_type = 'Bounce' then 'inbound_bounce'\n        when mp.record_type = 'Feedback' then 'feedback'\n        when mp.record_type = 'Skip' then 'skip'\n        else lower(mp.record_type)\n    end as event_name,\n    mp.record_timestamp as event_timestamp,\n    coalesce(trim(rll.link_label), mp.click_link_category_name) as link_label,\n    mp.click_link_url as link_url,\n    '' as form_builder_id,\n    '' as email_client,\n    '' as email_client_type,\n    '' as browser,\n    '' as kog_pack,\n    mp.source_file,\n    mp.source_date\nfrom ${Database}.temp.mapp_events_in_xref mp\ninner join ${Database}.live.xref_email xr on lower(mp.user_email) = lower(xr.email)\ninner join ${Database}.temp.build_comms_history_lookup chl on lower(chl.campaign_id) = lower(mp.ch_campaign_id)\ninner join ${Database}.temp.build_comms_history ch on ch.packid = chl.packid\n                                             and ch.cid = xr.cid\nleft join ${Database}.db.ref_link_label rll on trim(mp.click_link_url) = trim(rll.link_url)\n                                      and trim(lower(mp.message_name)) = trim(lower(rll.campaign_name))\nwhere mp.user_custom_attribute_name_urn = '';\n\n\ndrop table if exists ${Database}.temp.mapp_events_in_xref;\n\n\n--insert the ones that are not in the lookup but with name_urn\ninsert into ${Database}.live.adestra_events\nselect distinct\n    'Mapp' as platform,\n    xr.cid,\n    chl.campaign_id,\n    lower(mp.user_email) as email,\n    '' as amf_id,\n    mp.message_id as adestra_campaign_id,\n    mp.message_name as adestra_campaign_name,\n    case\n        when mp.record_type = 'SentToMTA' then 'sent_campaign'\n        when mp.record_type = 'Render' then 'read'\n        when mp.record_type = 'Click' then 'click'\n        when mp.record_type = 'Bounce' then 'inbound_bounce'\n        when mp.record_type = 'Feedback' then 'feedback'\n        when mp.record_type = 'Skip' then 'skip'\n        else lower(mp.record_type)\n    end as event_name,\n    mp.record_timestamp as event_timestamp,\n    coalesce(trim(rll.link_label), mp.click_link_category_name) as link_label,\n    mp.click_link_url as link_url,\n    '' as form_builder_id,\n    '' as email_client,\n    '' as email_client_type,\n    '' as browser,\n    '' as kog_pack,\n    mp.source_file,\n    mp.source_date\nfrom ${Database}.temp.mapp_events_no_xref mp\ninner join ${Database}.live.xref_name_urn xr on mp.user_custom_attribute_name_urn = xr.name_urn\ninner join ${Database}.temp.build_comms_history_lookup chl on chl.programme_id = 'E'\n                                                     and lower(chl.campaign_id) = lower(case when collate(mp.message_name,'') ilike '%_MTE_%' then tbw.db.strchop(mp.message_name,'_',1,3) else split_part(mp.message_name,'_',1) end)\nleft join ${Database}.db.ref_link_label rll on trim(mp.click_link_url) = trim(rll.link_url)\n                                      and trim(lower(mp.message_name)) = trim(lower(rll.campaign_name))\nwhere mp.user_custom_attribute_name_urn > '';\n\n\n--insert the ones that are not in the lookup with no name_urn\ninsert into ${Database}.live.adestra_events\nselect distinct\n    'Mapp' as platform,\n    xr.cid,\n    chl.campaign_id,\n    lower(mp.user_email) as email,\n    '' as amf_id,\n    mp.message_id as adestra_campaign_id,\n    mp.message_name as adestra_campaign_name,\n    case\n        when mp.record_type = 'SentToMTA' then 'sent_campaign'\n        when mp.record_type = 'Render' then 'read'\n        when mp.record_type = 'Click' then 'click'\n        when mp.record_type = 'Bounce' then 'inbound_bounce'\n        when mp.record_type = 'Feedback' then 'feedback'\n        when mp.record_type = 'Skip' then 'skip'\n        else lower(mp.record_type)\n    end as event_name,\n    mp.record_timestamp as event_timestamp,\n    coalesce(trim(rll.link_label), mp.click_link_category_name) as link_label,\n    mp.click_link_url as link_url,\n    '' as form_builder_id,\n    '' as email_client,\n    '' as email_client_type,\n    '' as browser,\n    '' as kog_pack,\n    mp.source_file,\n    mp.source_date\nfrom ${Database}.temp.mapp_events_no_xref mp\ninner join ${Database}.live.xref_email xr on lower(mp.user_email) = lower(xr.email)\ninner join ${Database}.temp.build_comms_history_lookup chl on chl.programme_id = 'E'\n                                                     and lower(chl.campaign_id) = lower(case when collate(mp.message_name,'') ilike '%_MTE_%' then tbw.db.strchop(mp.message_name,'_',1,3) else split_part(mp.message_name,'_',1) end)\ninner join ${Database}.temp.build_comms_history ch on ch.packid = chl.packid\n                                             and ch.cid = xr.cid\nleft join ${Database}.db.ref_link_label rll on trim(mp.click_link_url) = trim(rll.link_url)\n                                      and trim(lower(mp.message_name)) = trim(lower(rll.campaign_name))                                              \nwhere mp.user_custom_attribute_name_urn = '';\n\nalter warehouse set warehouse_size = 'Small';\n\ndrop table ${Database}.temp.mapp_events_no_xref;\n\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.adestra_events',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.adestra_events;\n\n--select count(*) from ${Database}.live.adestra_events; --20,747,040\n--select count(*) from ${Database}.db.adestra_events; --63,857,827\n--select * from ${Database}.live.adestra_events;\n\n---------------------\n--all those who have opened an email by brand\n\ndrop table if exists ${Database}.temp.build_rollups_cid_brand_emails ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_brand_emails\nas\nselect \n    ae.email,\n    ch.brand_id,\n    max(cast(ae.event_timestamp as date)) as event_date\nfrom ${Database}.live.adestra_events ae\ninner join ${Database}.temp.build_comms_history_lookup ch on ch.campaign_id = ae.campaign_id\nwhere ch.brand_id is not null\n    and lower(collate(ae.event_name,'')) regexp '.*click.*|.*open.*|.*read.*|.*shared.*|.*submit.*'\n    and lower(collate(ae.event_name,'')) not regexp '.*unsubscribe.*'\n    and ae.event_timestamp > add_months(current_date, -60) --now only using data from the last 5 years to determine preference for brand\ngroup by \n    ae.email,\n    ch.brand_id; \n\n--insert SMA emails\ninsert into ${Database}.temp.build_rollups_cid_brand_emails\nselect\n    ae.email,\n    rb.brand_id,\n    max(cast(ae.event_timestamp as date)) as event_date\nfrom ${Database}.db.adestra_events_sma ae\ninner join ${Database}.db.ref_brand rb on lower(trim(rb.brand)) = 'sma'\nwhere lower(ae.event_name) regexp '.*click.*|.*open.*|.*read.*|.*shared.*|.*submit.*'\n    and lower(ae.event_name) not regexp '.*unsubscribe.*'\n    and ae.event_timestamp > add_months(current_date, -60) --now only using data from the last 5 years to determine preference for brand\n    and trim(ae.workspace_name) = 'SMA'\ngroup by \n    ae.email,\n    rb.brand_id; \n\n--insert Cerelac emails\ninsert into ${Database}.temp.build_rollups_cid_brand_emails\nselect\n    ae.email,\n    rb.brand_id,\n    max(cast(ae.event_timestamp as date)) as event_date\nfrom ${Database}.db.adestra_events_sma ae\ninner join ${Database}.db.ref_brand rb on lower(trim(rb.brand)) = 'cerelac'\nwhere lower(ae.event_name) regexp '.*click.*|.*open.*|.*read.*|.*shared.*|.*submit.*'\n    and lower(ae.event_name) not regexp '.*unsubscribe.*'\n    and ae.event_timestamp > add_months(current_date, -60) --now only using data from the last 5 years to determine preference for brand\n    and lower(ae.workspace_name) regexp '.*cerelac.*'\ngroup by \n    ae.email,\n    rb.brand_id; \n\n--insert HCP emails\ninsert into ${Database}.temp.build_rollups_cid_brand_emails\nselect\n    ae.email,\n    rb.brand_id,\n    max(cast(ae.event_timestamp as date)) as event_date\nfrom ${Database}.db.adestra_events_hcp ae\ninner join ${Database}.db.ref_brand rb on lower(trim(rb.brand)) = 'hcp'\nwhere lower(ae.event_name) regexp '.*click.*|.*open.*|.*read.*|.*shared.*|.*submit.*'\n    and lower(ae.event_name) not regexp '.*unsubscribe.*'\n    and ae.event_timestamp > add_months(current_date, -60) --now only using data from the last 5 years to determine preference for brand\ngroup by \n    ae.email,\n    rb.brand_id; \n\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_brand_emails',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_brand_emails;\n\n\n---------------------\n--purina engagement scoring\n\n--Contact CES\n\n\nalter warehouse set warehouse_size = 'Xsmall';\n\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_careline;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_careline\nas \nselect    \n    cid, \n    activity_date,\n    min(activity) as activity,\n    cast(null as int) as activity_brand_id\nfrom      \n(\n    select    \n        trim(name_urn) as name_urn,\n        cast(contact_date as date) as activity_date,\n        'Contacted CES (without completing survey)' as activity\n    from ${Database}.db.npp_ces_contacts\n    union all \n    select    \n        trim(name_urn) as name_urn,\n        cast(contact_date as date) as activity_date,\n        'Completed CES Survey'\n    from ${Database}.db.npp_ces_contacts_and_surveys\n) cs\ninner join ${Database}.live.xref_name_urn xr on xr.name_urn = cs.name_urn\ngroup by 1, 2;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_careline',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_careline;\n\n\n--Coupons\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_coupons;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_coupons\nas \nselect    \n    cid,\n    print_date as activity_date,\n    case \n        when max(trim(redeemed)) = 'Y' then 'Redeemed Coupon'\n        else 'Downloaded Coupon (but did not redeem)'\n    end as activity,\n    qc.brand_id as activity_brand_id\nfrom ${Database}.db.quotient_coupons qc\ninner join ${Database}.live.xref_name_urn xr on trim(qc.name_urn) = xr.name_urn\nwhere trim(qc.name_urn) > ''\ngroup by 1,2,4\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_coupons',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_coupons;\n\n--THG Purchases\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_thg_purchases;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_thg_purchases\nas\nselect distinct\n    n.cid,\n    order_created as activity_date,\n    'Purchased Product' as activity,\n    n.source_brand_id as activity_brand_id\nfrom (\n        select distinct\n                customer_id,\n                order_created,\n                sum(quantity_ordered * transaction_charge_price_per_unit) as order_total_value\n        from ${Database}.db.npp_thg_trans\n        where lower(trim(order_line_status)) = 'despatched'\n        group by customer_id, order_created\n        ) thg\nleft join ${Database}.live.names n on n.name_urn = 'REG_THG|'||cast(thg.customer_id as varchar)\nwhere order_total_value > 0 --1 or more items were not free packs\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_thg_purchases',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_thg_purchases;\n\n--Competition entry/draw\ndrop table if exists ${Database}.temp.build_rollups_npp_competition_entry;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_competition_entry\nas\nselect    \n    cid,\n    max(drop_date) as activity_date,\n    'Competition entry' activity,\n    (select brand_id from ${Database}.live.ref_brand where brand ilike '%masterbrand%') as activity_brand_id\nfrom ${Database}.db.comms_hist cmp\ninner join ${Database}.live.xref_name_urn xr on trim(cmp.name_urn) = xr.name_urn\nwhere trim(cmp.name_urn) > ''\nand cmp.promotion_id = 'NPP07753_2'\ngroup by 1,3,4\nunion all\nselect\n    cid,\n    max(q.data_date) as activity_date,\n    'Competition entry' activity,\n    (select brand_id from ${Database}.live.ref_brand where brand ilike '%masterbrand%') as activity_brand_id\nfrom ${Database}.db.question q\ninner join ${Database}.live.xref_name_urn x on x.name_urn = q.name_urn\nwhere question_id = (select question_id from ${Database}.db.ref_question where question = 'Pet Photo Uploader')\ngroup by 1,3,4\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_competition_entry',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_competition_entry;\n\n\n--Pet Photo Upload\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_photo_upload;\ncreate or replace table ${Database}.temp.build_rollups_npp_engagement_photo_upload\nas\nselect\n    cid,\n    max(q.data_date) as activity_date,\n    'User Generated Content' activity,\n    (select brand_id from ${Database}.live.ref_brand where brand ilike '%masterbrand%') as activity_brand_id\nfrom ${Database}.db.question q\ninner join ${Database}.live.xref_name_urn x on x.name_urn = q.name_urn\nwhere question_id = (select question_id from ${Database}.db.ref_question where question = 'Pet Photo Uploader')\ngroup by 1,3,4\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_photo_upload',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_photo_upload;\n\n\n--Casting a vote\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_voters;\ncreate or replace table ${Database}.temp.build_rollups_npp_engagement_voters\nas\nselect\n    cid,\n    max(q.data_date) as activity_date,\n    'Cast a Vote' activity,\n    (select brand_id from ${Database}.live.ref_brand where brand ilike '%masterbrand%') as activity_brand_id\nfrom ${Database}.db.question q\ninner join ${Database}.live.xref_name_urn x on x.name_urn = q.name_urn\nwhere question_id = (select question_id from ${Database}.db.ref_question where question = 'Pet Photo Voter')\ngroup by 1,3,4\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_voters',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_voters;\n\n\n--Reconsent\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_reconsent;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_reconsent\nas \nselect    \n    xr.cid,\n    dp.data_date as activity_date,\n    'Reconsent' as activity,\n    cast(null as int) as activity_brand_id\nfrom ${Database}.db.names_dp dp\nleft join ${Database}.live.xref_name_urn xr on xr.name_urn = trim(dp.name_urn)\nwhere trim(dp.source) in ('RESP_ADE_10|232','RESP_ADE_10|234','RESP_ADE_10|253','RESP_ADE_10|259','RESP_ADE_10|274','RESP_ADE_10|275','RESP_ADE_10|317')\nand dp_emailable = 1\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_reconsent',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_reconsent;\n\n\n--registered CIAM account\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_CIAM_accounts;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_CIAM_accounts\nas\nselect distinct\ncid\n,data_date as activity_date\n,case when rownum = 1 then 'Registered New CIAM Account' \n         when rownum > 1 then 'Updated CIAM Account'\n         end as activity\n         ,source_brand_id\nfrom\n(\nselect\n    cid\n    ,nm.data_date\n    ,nm.source_brand_id\n    ,row_number() over (partition by cid,nm.data_date order by nm.data_date asc,nm.source_brand_id asc) as rownum\nfrom ${Database}.live.names nm\ninner join ${Database}.db.names_preference np on trim(np.name_urn) = nm.name_urn\nwhere nm.source = 'REG_GIG' --have a gigya account\nand data_controller_id = 5 --gigya account is for a Purina brand\nand lower(nm.source_file) not regexp '.*json.*' --account was not migrated\nand lower(np.source_file) not regexp '.*json.*'\n) t\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_CIAM_accounts',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_CIAM_accounts;\n\n--Registered to Growing Pup\n--drop table if exists ${Database}.temp.build_rollups_npp_engagement_GP_registrants;\n--CREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_GP_registrants\n--as\n--select distinct\n --   xr.cid,\n--    first_value(p.data_date) over (partition by xr.cid order by p.data_date asc) as activity_date,\n--    'Joined Growing Pup' as activity,\n--    first_value(n.source_brand_id) over (partition by xr.cid order by p.data_date asc) as activity_brand_id\n--from     ${Database}.db.pet p\n--left join ${Database}.live.xref_name_urn xr on xr.name_urn = p.name_urn\n--left join ${Database}.live.names n on n.name_urn = p.name_urn\n--where trim(p.source) in ('REG_KC','REG_THG') or (trim(p.source) = 'REG_GIG' and lower(p.name_urn) regexp '.*growing pup.*')\n--;\n--Registered to Growing Pup\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_GP_registrants;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_GP_registrants\nas\n\t\tselect distinct cid, first_date_brand as activity_date,'Joined Growing Pup' as activity,'138' as activity_brand_id  from ${Database}.live.cid_brand \n\t\t\t\t\t  where brand_id = 138 and activity_date is not NULL and brand_preference = 1  \n\t\t\t\t\t  group by 1,2\n\t\t\t\t\t  ;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_GP_registrants',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_GP_registrants;\n\n--Registered to Kitten Code\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_KC_registrants;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_KC_registrants\nas\n    select distinct cid, first_date_brand as activity_date,'Joined Kitten Code' as activity,'143' as activity_brand_id  from ${Database}.live.cid_brand \n                  where brand_id = 143 and activity_date is not NULL and brand_preference = 1  \n                  group by 1,2\n\t\t\t\t  ;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_KC_registrants',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_KC_registrants;\n\n--Cashback\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_cashback;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_cashback\nas\n    select distinct cid, data_date as activity_date,'Cashback' as activity,source_brand_id as activity_brand_id  from ${Database}.live.names \n                   where (NAME_URN ilike '%reg_hashting%' or NAME_URN ilike '%reg_shopm%')  \n                   group by 1,2,3,4\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_cashback',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_cashback;\n\n--Your Purina\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_your_purina;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_your_purina\nas\n  select distinct cid, answer_data_date as ACTIVITY_DATE,'Joined Your Purina' as activity,\n  (select brand_id from ${Database}.live.ref_brand where brand ilike '%masterbrand%') as activity_brand_id\n                        from ${Database}.live.cid_question cq\n                        inner join ${Database}.db.ref_question rq on rq.question_id = cq.question_id\n                        where rq.question = 'Where do you buy food for your pets?' \n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_your_purina',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_your_purina;\n\n\n--Your Purina Survey clicks\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_your_purina_survey;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_your_purina_survey\nas\n  select cid, cast(max(event_timestamp) as date) as ACTIVITY_DATE,'Completed Survey' as activity,\n\t\t(select brand_id from ${Database}.live.ref_brand where brand ilike '%your purina%') as activity_brand_id\n    from ${Database}.live.adestra_events ae\n\tjoin ${Database}.db.ref_your_purina_survey_lookup ref on  ae.adestra_campaign_id = ref.campaign_id and ae.link_url = ref.link_url \n    where  event_name ilike '%click%'\ngroup by 1;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_your_purina_survey',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_your_purina_survey;\n\n\n--Updated Pet Details\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_updated_pet_details;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_updated_pet_details\nas\nselect cid, pet_data_date as ACTIVITY_DATE,'Updated Pet Details' as activity,\n(select brand_id from ${Database}.live.ref_brand where brand ilike '%masterbrand%') as activity_brand_id\nfrom ${Database}.live.cid_pet   group by 1,2\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_updated_pet_details',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_updated_pet_details;\n\n\n--Completed Survey\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_survey;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_survey\nas \nselect distinct \n    cid,\n    data_date as activity_date,\n    'Completed Survey' as activity,\n    source_brand_id as activity_brand_id\nfrom ${Database}.live.names\nwhere collate(name_urn,'') ilike 'RESP_GP%'\nunion all\nselect distinct \n    cid,\n    cast(event_timestamp as date) as activity_date,\n    'Completed Survey' as activity,\n    (select brand_id from ${Database}.db.ref_brand where brand ilike '%masterbrand') as activity_brand_id\nfrom ${Database}.live.adestra_events\nwhere event_name = 'GA Survey';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_survey',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_survey;\n\n-- Registration Opt In\n\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_optin;\ncreate table ${Database}.temp.build_rollups_npp_engagement_optin\nas\nselect \ncid,\ndp_date as activity_date,cast(null as int) as activity_brand_id,'Opt In' as activity\nfrom nestle.db.names_dp nd\njoin nestle.live.names nm\non nd.name_urn = nm.name_urn\nwhere data_controller_id = 5 and dp_emailable = 1 group by 1,2;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_optin',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_optin;\n\n--Registration\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_registered_to_purina;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_registered_to_purina\nas \nselect distinct\n    cbb.cid,\n    first_value(cbb.first_date_brand) over (partition by cbb.cid order by cbb.first_date_brand asc) as activity_date,\n    'Registration' as activity,\n    first_value(cbb.brand_id) over (partition by cbb.cid order by cbb.first_date_brand asc) as activity_brand_id\nfrom ${Database}.temp.build_rollups_cid_brand_base cbb\ninner join ${Database}.live.ref_business_unit_brand rbu on cbb.brand_id = rbu.brand_id\nwhere rbu.business_unit_id in (select business_unit_id from ${Database}.live.ref_business_unit where collate(business_unit,'') ilike 'Nestl_ Purina Petcare (UK) Ltd')\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_registered_to_purina',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_registered_to_purina;\n\n\nalter warehouse set warehouse_size = 'Small';\n\n--Email engagement\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_adestra_prep;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_adestra_prep\nas\nselect     cid,\n    adestra_campaign_id,\n    activity_date,\n    event_name,\n    case when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'A' then 'Clicked for Advice'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'Buy_now' then 'Clicked Buy Now'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'C' then 'Clicked Coupon'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'DC' and updated_ciam = 0 then 'Clicked Update Details'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'I' then 'Clicked for Info'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'P' then 'Clicked Product'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'PDC' then 'Clicked PDC'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'R' then 'Clicked Reconsent'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'S' then 'Clicked Social'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'O' then 'Clicked Other'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is not null then link_type\n         when lower(collate(event_name,'')) regexp '.*read.*' then 'Opened email (no click)'\n         else 'Clicked Other' end as link_type ,\n    brand_id\nfrom (\n        select distinct     \n            ae.cid, \n            ae.adestra_campaign_id,\n            cast(ae.event_timestamp as date) as activity_date,\n            ae.event_name,\n            ae.link_label,\n            trim(lt.link_type) as link_type,\n            case when c.cid is not null \n                 and lower(ae.event_name) regexp '.*click.*' \n                 and (trim(lt.link_type) = 'Update Details' or (lt.link_type is null and split_part(ae.link_label, '|', 1) = 'DC'))\n                 then 1 else 0 end as updated_ciam, --only get points for clicking if they didn't register or update CIAM details\n            case when atl.adestra_campaign_id is null then cast(null as int) else rb.brand_id end as brand_id\n        from ${Database}.live.adestra_events ae \n        left join ${Database}.db.ref_link_label_type lt on lower(ae.link_url) = lower(trim(lt.link_url))\n        left join ${Database}.temp.build_rollups_npp_engagement_CIAM_accounts c on c.cid = ae.cid \n                                                                                   and c.activity_date = cast(ae.event_timestamp as date)\n        left join ${Database}.db.adestra_tag_lookup atl on trim(atl.adestra_campaign_id) = ae.adestra_campaign_id\n        left join ${Database}.live.ref_brand rb on rb.brand = atl.brand\n        where ae.campaign_id ilike 'npp%'\n            and lower(ae.event_name) regexp '.*click.*|.*open.*|.*read.*|.*shared.*|.*submit.*'\n            and lower(ae.link_url) not regexp '.*unsub.*'\n    ) a\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_adestra_prep',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_adestra_prep;\n\n\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_adestra;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_adestra\nas\nselect distinct \n    adestra_campaign_id,  \n    cid, \n    activity_date,\n    first_value\n        (\n            case\n                when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Buy Now' then 'Clicked Buy Now'\n                when lower(event_name) regexp '.*click.*' and link_type = 'Clicked PDC' then 'Clicked PDC'\n                when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Product' then 'Clicked Product'\n                when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Reconsent' then 'Clicked Reconsent'  \n                when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Coupon' then 'Clicked Coupon'  \n\t\t\t\twhen lower(event_name) regexp '.*click.*' and link_type in ('Clicked for Info','Clicked Social','Clicked for Advice','Clicked Update Details','Clicked Other') then 'Clicked Generic'\n                when lower(event_name) regexp '.*click.*|.*submit.*' then 'Clicked Other'\n                when lower(event_name) regexp '.*read.*' then 'Opened email (no click)'\n            end\n        ) over\n        (\n            partition by cid, adestra_campaign_id\n            order by \n                case\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked PDC' then 1\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Buy Now' then 2\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Product' then 3\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Coupon' then 4\n\t\t\t\t\twhen lower(event_name) regexp '.*click.*' and link_type in ('Clicked for Info','Clicked Social','Clicked for Advice','Clicked Update Details','Clicked Other') then 5\n                    when lower(event_name) regexp '.*click.*|.*submit.*' and link_type = 'Clicked Other' then 6\n                    when lower(event_name) regexp '.*read.*' then 7\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Reconsent' then 8\n                end\n        ) as activity,\n    first_value(brand_id)\n          over(\n             partition by cid, adestra_campaign_id\n             order by \n                case\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked PDC' then 1\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Buy Now' then 2\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Product' then 3\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Coupon' then 4\n\t\t\t\t\twhen lower(event_name) regexp '.*click.*' and link_type in ('Clicked for Info','Clicked Social','Clicked for Advice','Clicked Update Details','Clicked Other') then 5\n                    when lower(event_name) regexp '.*click.*|.*submit.*' and link_type = 'Clicked Other' then 6\n                    when lower(event_name) regexp '.*read.*' then 7\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Reconsent' then 8\n                end\n        ) as activity_brand_id  \nfrom ${Database}.temp.build_rollups_npp_engagement_adestra_prep\n;\n\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_adestra',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_adestra;\n\n-- Create tables for Generic clicks/open, one per month per campaign\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_adestra_generic_clicks;\ncreate or replace table ${Database}.temp.build_rollups_npp_engagement_adestra_generic_clicks as\nselect adestra_campaign_id, concat(year(activity_date),month(activity_date)) as year_month,cid,activity,activity_brand_id,max(activity_date) as activity_date\nfrom ${Database}.temp.build_rollups_npp_engagement_adestra\nwhere activity in \n('Clicked Generic','Opened email (no click)')\ngroup by 1,2,3,4,5;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_adestra_generic_clicks',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_adestra_generic_clicks;\n\n-- Create table for non generic clicks to allow more points\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_adestra_nongeneric_clicks;\ncreate or replace table ${Database}.temp.build_rollups_npp_engagement_adestra_nongeneric_clicks as\nselect adestra_campaign_id, activity,cid,activity_brand_id,activity_date\nfrom ${Database}.temp.build_rollups_npp_engagement_adestra\nwhere activity not in \n('Clicked Generic','Opened email (no click)');\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_adestra_nongeneric_clicks',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_adestra_nongeneric_clicks;\n\n  --purina qualifio kitten code campaign\n--drop table if exists ${Database}.temp.build_rollups_npp_Qualifio_participation;\n--create table ${Database}.temp.build_rollups_npp_Qualifio_participation\n--as\n--select distinct   \n--    cid,\n--    first_value(na.data_date) over(partition by cid, REGISTRATION_CAMPAIGN order by na.data_date asc) as activity_date,\n--    'Qualifio participation' as activity,\n--   n.source_brand_id as activity_brand_id\n--from ${Database}.db.names_attributes na\n--inner join ${Database}.db.names n on n.name_urn = na.name_urn and n.data_date = na.data_date\n--inner join ${Database}.live.xref_name_urn xr on trim(n.name_urn) = trim(xr.name_urn)\n--where na.source = 'REG_QUALIFIO'\n--and n.SOURCE_DATA_CONTROLLER_ID = (select data_controller_id from ${Database}.db.ref_data_controller where data_controller like 'Nestl_ Purina Petcare (UK) Ltd')  \n--;\n\n\n--insert into ${Database}.db.build_log \n--select \n--    'nestle_rollups',\n--    '${Database}.temp.build_rollups_npp_Qualifio_participation',\n--    'total records',\n--    cast(count(*) as varchar),\n--    CURRENT_TIMESTAMP\n--from ${Database}.temp.build_rollups_npp_Qualifio_participation;\n\n--purina pet avatar creation\ndrop table if exists ${Database}.temp.build_rollups_npp_pet_avatar_creation;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_pet_avatar_creation\nas\nselect    \n    cid,\n    max(to_date(left(user_date_created,10),'YYYY-MM-DD')) as activity_date,\n    'Pet Avatar Creation' activity,\n    (select brand_id from ${Database}.live.ref_brand where brand ilike '%masterbrand%') as activity_brand_id\nfrom ${Database}.db.npp_pet_avatar_details ppa\ninner join ${Database}.live.xref_name_urn xr on trim(ppa.name_urn) = trim(xr.name_urn)\nwhere trim(ppa.name_urn) > ''\ngroup by 1,3,4\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_pet_avatar_creation',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_pet_avatar_creation;\n\n\n--score rollup\ndrop table if exists ${Database}.live.npp_engagement_scoring_activities;\n\nCREATE OR REPLACE TABLE ${Database}.live.npp_engagement_scoring_activities\nas\nselect    \n    cid,\n    activity_date,\n    activity,\n    activity_brand_id,\n  (((1 / sqrt((datediff(day,activity_date,current_date())/60)+1) * 15 ) + 1)) as   recency_multiplier,\n    case\n        when activity = 'Purchased Product' then 40\n\t\twhen activity = 'Left Positive Rate & Review' then 40\n\t\twhen activity = 'Left Negative Rate & Review' then 40\n\t\twhen activity = 'Joined Your Purina' then 40\n        when activity = 'Pet Avatar Creation' then 40\n        when activity = 'Completed Survey' then 30\n        when activity = 'Clicked PDC' then 30\n\t\twhen activity = 'Clicked Update Details' then 30\n        when activity = 'User Generated Content' then 30\n\t\twhen activity = 'Contacted CES (without completing survey)' then 12\n        when activity = 'Joined Growing Pup' then 12\n\t\twhen activity = 'Joined Kitten Code' then 12\n        when activity = 'Clicked Buy Now' then 12\n\t\twhen activity = 'Updated Pet Details' then 12\n\t\twhen activity = 'Redeemed Coupon' then 12\n\t\twhen activity = 'Cashback' then 12\n\t\twhen activity = 'Requested free product sample' then 12\n\t\twhen activity = 'Joined Loyalty Scheme' then 12\n\t\twhen activity = 'Registered New CIAM Account' then 12\n\t\twhen activity = 'Updated CIAM Account' then 12\n        when activity = 'Completed CES Survey' then 12\n\t\twhen activity = 'Downloaded Coupon (but did not redeem)' then 12\n\t\twhen activity = 'Reconsent' then 12\n\t\twhen activity = 'Clicked Reconsent' then 12\n\t\twhen activity = 'Registration' then 6\n\t\twhen activity = 'Opt In' then 6\n\t\twhen activity = 'Clicked Generic' then 6\n        when activity = 'Cast a Vote' then 6\t\t\t\t\t\t\t\t\t\t\t\n        when activity = 'Competition entry' then 2\n        when activity = 'Opened email (no click)' then 1\n    end as base_score\nfrom      \n(   select cid, activity_date, activity, source_brand_id as activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_CIAM_accounts\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_thg_purchases\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_rate_review\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_loyalty_scheme\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_careline\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_samples\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_coupons\n \tunion all\n\tselect cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_competition_entry\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_adestra_nongeneric_clicks\n\tunion all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_adestra_generic_clicks\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_GP_registrants\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_reconsent\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_survey\n\tunion all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_pet_avatar_creation\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_photo_upload\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_voters \n\tunion all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_KC_registrants\n\tunion all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_cashback\n\tunion all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_your_purina\n\tunion all\n\tselect cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_your_purina_survey\n\tunion all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_updated_pet_details\n\tunion all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_optin\n) activities\n;\n\ndrop table if exists ${Database}.temp.build_npp_engagement_scoring_occurrence_pre;\ncreate or replace table ${Database}.temp.build_npp_engagement_scoring_occurrence_pre as \nselect cid,activity,activity_brand_id,activity_date,recency_multiplier,base_score,\ndatediff(month,diff_date,activity_date) as count_month\nfrom (\nselect cid,activity,activity_brand_id,activity_date,recency_multiplier,base_score,\nlead(activity_date) over (partition by activity   order by cid,activity,activity_date desc) \nas diff_date\nfrom ${Database}.live.npp_engagement_scoring_activities\n) new;\n\n-- Add in occurrence_multiplier\ndrop table if exists ${Database}.temp.build_npp_engagement_scoring_occurrence;\n\ncreate or replace table ${Database}.temp.build_npp_engagement_scoring_occurrence as\nselect\ncid,\nactivity,\nactivity_brand_id,\nactivity_date,\nrecency_multiplier,\nbase_score,\ncase\nwhen row_number() over(partition by cid, activity, rn order by activity_date) < 4 then 1\nwhen row_number() over(partition by cid, activity, rn order by activity_date) = 4 then 0.8\nwhen row_number() over(partition by cid, activity, rn order by activity_date) = 5 then 0.6\nwhen row_number() over(partition by cid, activity, rn order by activity_date) >= 6 then 0.5\nend as occurrence_multiplier\nfrom (select distinct\na.*,\nfirst_value(coalesce(b.rn,9999)) over(partition by a.cid, a.activity, a.activity_date order by b.rn) as rn\nfrom ${Database}.temp.build_npp_engagement_scoring_occurrence_pre a\nleft join (select *, row_number() over(partition by cid, activity order by activity_date) as rn from ${Database}.temp.build_npp_engagement_scoring_occurrence_pre where count_month >= 6) b on a.cid = b.cid\nand a.activity = b.activity\nand a.activity_date < b.activity_date) a\norder by activity, activity_date;\n\nalter warehouse set warehouse_size = 'Xsmall';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_npp_engagement_scoring_occurrence',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_npp_engagement_scoring_occurrence;\n\n-- New Distinct Activity setup for Engagement Score\ncreate or replace table ${Database}.temp.build_rollups_npp_engagement_distinct_activity as\nselect\n cid,activity\nfrom ${Database}.live.npp_engagement_scoring_activities\nwhere activity_date < current_date()\ngroup by 1,2;\n\n-- Summarise the above table to CID level\n\ncreate or replace table ${Database}.temp.build_rollups_npp_engagement_distinct_activity_cid_level\nas \nselect\ncid,count(*) as distinct_activity\nfrom ${Database}.temp.build_rollups_npp_engagement_distinct_activity\ngroup by 1;\n\n\n\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_CIAM_accounts;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_thg_purchases;\ndrop table if exists ${Database}.temp.build_rollups_npp_competition_entry;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_rate_review;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_loyalty_scheme;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_careline;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_samples;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_coupons;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_adestra;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_GP_registrants;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_reconsent;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_registered_to_purina;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_survey;\t \ndrop table if exists ${Database}.temp.build_rollups_npp_pet_avatar_creation;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_adestra_nongeneric_clicks;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_adestra_generic_clicks;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_photo_upload;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_voters;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_KC_registrants;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_cashback;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_your_purina;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_updated_pet_details;\ndrop table if exists ${Database}.temp.build_rollups_npp_test_engagement_optin;\ndrop table if exists ${Database}.temp.build_npp_engagement_scoring_occurrence_pre;\n\n--final engagement table\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_score;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_score \nas\nselect    \n    npsa.cid,\n  sum(coalesce(base_score,0) * coalesce(recency_multiplier,0) * \n  coalesce(occurrence_multiplier,0)\n  * coalesce(case when  npda.distinct_activity <= 3 then 1 when npda.distinct_activity <= 5 then 1.25 else 1.5 end, 0)) as engagement_score\nfrom ${Database}.temp.build_npp_engagement_scoring_occurrence npsa\njoin ${Database}.temp.build_rollups_npp_engagement_distinct_activity_cid_level npda\non npsa.cid = npda.cid\ngroup by 1;\n\ndrop table if exists ${Database}.temp.build_npp_engagement_scoring_occurrence;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_score',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_score;\n\n--lapse risk segment table\ncreate or replace table ${Database}.temp.build_rollups_npp_lapse_risk_segment\nas\nselect\n    ev.cid,\n    case\n        when ev.last_open < add_months(current_date,-10)\n            or ((ev.first_date_business_unit < add_months(current_date,-6) or ev.first_date_business_unit is null) and ev.last_open is null) then 'Very High Risk'\n        when (ev.last_open >= add_months(current_date,-10) and ev.last_open < add_months(current_date,-6))\n            or ((ev.first_date_business_unit < add_months(current_date,-12) or ev.first_date_business_unit is null)\n                and ev.last_click is null\n                and ev.last_open >= add_months(current_date, -6)\n                and ev.last_open < add_months(current_date, -3))\n            or ((ev.first_date_business_unit >= add_months(current_date,-6) and ev.first_date_business_unit < add_months(current_date,-3)) and ev.last_open is null) then 'High Risk'\n        when (ev.last_open >= add_months(current_date, -6) and ev.last_open < add_months(current_date, -3) and (ev.last_click is not null or ev.first_date_business_unit >= add_months(current_date,-12)))\n              or (ev.last_open is null and ev.first_date_business_unit >= add_months(current_date, -3)) then 'Medium Risk'\n        when ev.last_open >= add_months (current_date, -3) then 'Low Risk'\n    end as purina_lapse_risk_segment\nfrom (\n         select\n             cbb.cid,\n             min(cbb.first_date_business_unit) as first_date_business_unit,\n             max(case when lower(ae.event_name) rlike '.*read.*|.*click.*' then cast(ae.event_timestamp as date) end) as last_open,\n             max(case when lower(ae.event_name) rlike '.*click.*' then cast(ae.event_timestamp as date) end) as last_click\n         from ${Database}.temp.build_rollups_cid_bu_base cbb\n         left join ${Database}.live.adestra_events ae on ae.cid = cbb.cid\n                                                     and lower(ae.campaign_id) rlike '^npp.*'\n         where cbb.business_unit_id = 5\n         group by 1\n         union all\n         select\n             ae.cid,\n             cast(null as date) as first_date_business_unit,\n             max(case when lower(ae.event_name) rlike '.*read.*|.*click.*' then cast(ae.event_timestamp as date) end) as last_open,\n             max(case when lower(ae.event_name) rlike '.*click.*' then cast(ae.event_timestamp as date) end) as last_click\n         from ${Database}.live.adestra_events ae\n         left join ${Database}.temp.build_rollups_cid_bu_base cbb on cbb.cid = ae.cid\n                                                     and cbb.business_unit_id = 5\n         where lower(ae.campaign_id) rlike '^npp.*'\n             and cbb.cid is null\n         group by 1\n  ) ev;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_lapse_risk_segment',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_lapse_risk_segment;\n\n---------------------\n---------------------\n-- cid\n\ndrop table if exists ${Database}.live.cid ;  \n\nalter warehouse set warehouse_size = 'Large';\n\nCREATE OR REPLACE TABLE ${Database}.live.cid \nas \nselect \n    cb.cid,\n    cb.hid,\n    cb.bbw_urn,\n    cb.name_urn,\n    cb.created_date,\n    cb.updated_date,\n    case when gf.cid is null then cb.gender else 'X' end                                        as gender,\n    cast(left(upper(cb.postcode),20) as varchar(20))                                            as postcode,\n    postcode_area_home,\n    postcode_district_home,\n    cast\n    (\n        case \n            when lower(cb.country)='united kingdom' then left(upper(split_part(cb.postcode,' ',1)||' '||left(split_part(cb.postcode,' ',-1),1)),10) \n            else '' \n        end as varchar(10)\n    )                                                                                           as postal_sector,\n    cast\n    (\n        case \n            when lower(cb.country)='united kingdom' then left(upper(split_part(cb.postcode,' ',1)),10) \n            else '' \n        end as varchar(10)\n    )                                                                                           as postal_district,\n    cast\n    (\n        upper\n        (\n            case \n                when lower(cb.country)='united kingdom' then \n                    case\n                        when lower(substring(collate(cb.postcode,''),2,1)) regexp '.*[a-z].*' then left(cb.postcode,2) \n                        else left(cb.postcode,1) \n                    end \n                else '' \n            end\n        ) as char(2)\n    )                                                                                           as postal_area,\n    cb.country,   \n    cb.dob,\n    case when cb.mailable_ignoring_dp          = 1 then cb.name_urn_to_mail_ignoring_dp          else cast(null as varchar) end as name_urn_to_mail_ignoring_dp,\n    case when cb.emailable_ignoring_dp         = 1 then cb.name_urn_to_email_ignoring_dp         else cast(null as varchar) end as name_urn_to_email_ignoring_dp,\n    case when cb.phoneable_ignoring_dp         = 1 then cb.name_urn_to_phone_ignoring_dp         else cast(null as varchar) end as name_urn_to_phone_ignoring_dp,\n    case when cb.smsable_ignoring_dp           = 1 then cb.name_urn_to_sms_ignoring_dp           else cast(null as varchar) end as name_urn_to_sms_ignoring_dp,\n    case when np.cid is not null then 1 else cast(null as tinyint) end                          as no_printer, \n    case \n        when hc.cid is not null then 'Y'\n        when ncat.cid is not null then 'Y'  \n        when pcat.cid is not null then 'Y'\n        when cat.cid is not null and lower(cat.answer) = 'y' then 'Y'\n        when cat.cid is not null and lower(cat.answer) = 'n' then 'N'\n        when ic.data_date >= add_months(current_date,-60) then 'IN'\n        when ic.data_date < add_months(current_date,-60) then 'IO'\n        else 'N' \n    end as have_cat,\n    case \n        when hd.cid is not null then 'Y'\n        when ndog.cid is not null then 'Y'  \n        when pdog.cid is not null then 'Y'\n        when dog.cid is not null and lower(dog.answer) = 'y' then 'Y'\n        when dog.cid is not null and lower(dog.answer) = 'n' then 'N'\n        when id.data_date >= add_months(current_date,-60) then 'IN'\n        when id.data_date < add_months(current_date,-60) then 'IO'\n        else 'N' \n    end as have_dog,\n    case \n        when hc.cid is not null then hc.number_of_cats\n        when ncat.cid is not null then cast(ncat.answer as int)          \n        when cat.cid is not null and lower(cat.answer) = 'y' then 1\n        when pcat.cid is not null then 1\n        else 0\n    end as number_of_cats,\n    case \n        when hd.cid is not null then hd.number_of_dogs\n        when ndog.cid is not null then cast(ndog.answer as int)          \n        when dog.cid is not null and lower(dog.answer) = 'y' then 1\n        when pdog.cid is not null then 1\n        else 0\n    end as number_of_dogs,\n    pdc.pet_segment as pdc_click_pet_seg,\n    pdc.activity_date as pdc_click_pet_seg_updated,\n    case \n        when hc.cid is null \n            and ncat.cid is null \n            and cat.cid is null \n            and uhc.cid is not null then 'Y'\n        else '' \n    end as used_to_have_cat,\n    case \n        when hd.cid is null\n            and ndog.cid is null\n            and dog.cid is null\n            and uhd.cid is not null then 'Y'\n        else '' \n    end as used_to_have_dog,\n\tcase \n        when hc.cid is not null\n             and ncat.cid is not null  \n             and pcat.cid is not null\n\t\t\tand pdc.cid is not null and pdc.pet_segment in ('Both','Cat') then 'Y'\n\t\telse 'N' \n    end as pdc_cat_link_update,\n\tcase \n        when hd.cid is not null\n             and ndog.cid is not null  \n             and pdog.cid is not null\n\t\t\tand pdc.cid is not null and pdc.pet_segment in ('Both','Dog') then 'Y'\n\t\telse 'N' \n    end as pdc_dog_link_update,\t\t\t\t\t\t   \n    dp.num_pets_deceased_this_month,\n    es.engagement_score as purina_engagement_score,\n\tlrs.purina_lapse_risk_segment\nfrom ${Database}.temp.build_rollups_cid_base                     cb\nleft join ${Database}.temp.build_rollups_cid_gender_fix          gf   on cb.cid = gf.cid\nleft join ${Database}.temp.build_rollups_cid_have_cat            hc   on cb.cid = hc.cid\nleft join ${Database}.temp.build_rollups_cid_have_dog            hd   on cb.cid = hd.cid\nleft join ${Database}.temp.build_rollups_cid_inferred_cat        ic   on cb.cid = ic.cid\nleft join ${Database}.temp.build_rollups_cid_inferred_dog        id   on cb.cid = id.cid\nleft join ${Database}.temp.build_rollups_cid_used_to_have_cat    uhc  on cb.cid = uhc.cid\nleft join ${Database}.temp.build_rollups_cid_used_to_have_dog    uhd  on cb.cid = uhd.cid\nleft join ${Database}.temp.build_rollups_cid_deceased_pets       dp   on cb.cid = dp.cid\nleft join ${Database}.temp.build_rollups_cid_no_printer          np   on cb.cid = np.cid\nleft join ${Database}.temp.build_rollups_npp_engagement_score    es   on cb.cid = es.cid\nleft join ${Database}.temp.build_rollups_npp_lapse_risk_segment  lrs  on cb.cid = lrs.cid\nleft join ${Database}.live.cid_question                          cat  on cat.cid = cb.cid \n                                                                     and cat.question = 'Have cat'\nleft join ${Database}.live.cid_question                          dog  on dog.cid = cb.cid \n                                                                     and dog.question = 'Have dog'\nleft join ${Database}.live.cid_question                          ncat on ncat.cid = cb.cid \n                                                                     and ncat.question = 'Number of cats'\nleft join ${Database}.live.cid_question                          ndog on ndog.cid = cb.cid \n                                                                     and ndog.question = 'Number of dogs'\nleft join ${Database}.live.cid_question                          pcat on pcat.cid = cb.cid \n                                                                     and lower(collate(pcat.question,'')) regexp '.*which pets do you have.*'\n                                                                     and lower(collate(pcat.answer,'')) regexp '.*cat.*'\nleft join ${Database}.live.cid_question                          pdog on pdog.cid = cb.cid \n                                                                     and lower(collate(pdog.question,'')) regexp '.*which pets do you have.*'\n                                                                     and lower(collate(pdog.answer,'')) regexp '.*dog.*'\nleft join ${Database}.temp.build_rollups_cid_pdc_pet            pdc on pdc.cid = cb.cid \n;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n \n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid;   \n  \ndrop table ${Database}.temp.build_rollups_cid_gender_fix;\ndrop table ${Database}.temp.build_rollups_cid_have_cat;\ndrop table ${Database}.temp.build_rollups_cid_have_dog;\ndrop table ${Database}.temp.build_rollups_cid_inferred_cat;\ndrop table ${Database}.temp.build_rollups_cid_inferred_dog;\ndrop table ${Database}.temp.build_rollups_cid_no_printer;\ndrop table ${Database}.temp.build_rollups_cid_used_to_have_cat;\ndrop table ${Database}.temp.build_rollups_cid_used_to_have_dog;\ndrop table ${Database}.temp.build_rollups_cid_deceased_pets;\ndrop table ${Database}.temp.build_rollups_npp_engagement_score;\n\n---------------------\n-- cid details\n\ndrop table if exists ${Database}.live.cid_details ;  \n\nCREATE OR REPLACE TABLE ${Database}.live.cid_details \nas\nselect distinct\n    ci.cid,\n    ci.hid,\n    coalesce(utm.name_urn, ute.name_urn, utp.name_urn, uts.name_urn, ci.name_urn)                                       as name_urn,\n    cast(regexp_replace(coalesce(utm.title, ute.title, ma.title),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))                                           as title,\n    cast(regexp_replace(coalesce(utm.firstname, ute.firstname, ma.firstname),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))                               as firstname, \n    cast(regexp_replace(coalesce(utm.lastname, ute.lastname, ma.lastname),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))                                  as lastname,\n    --blank address if not mailable\n    cast(regexp_replace(coalesce(utm.add1, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                                            as add1,\n    cast(regexp_replace(coalesce(utm.add2, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                                            as add2,\n    cast(regexp_replace(coalesce(utm.add3, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                                            as add3,\n    cast(regexp_replace(coalesce(utm.add4, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                                            as add4,\n    cast(regexp_replace(coalesce(utm.add5, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                                            as add5,\n    cast(regexp_replace(coalesce(utm.city, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                                            as town,\n    cast(regexp_replace(coalesce(utm.state, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                                           as county,\n    cast(regexp_replace(coalesce(utm.country_clean, ci.country),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                           as country,\n    cast(regexp_replace(upper(coalesce(utm.postcode, ci.postcode)),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))                                         as postcode,\n    cast(regexp_replace(coalesce(utp.phone_home, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))                                                       as phone_home,\n    cast(regexp_replace(coalesce(utp.phone_work, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))                                                       as phone_work,\n    cast(regexp_replace(coalesce(\n        case \n            when uts.phone_mobile like '+44 %' then replace(replace(uts.phone_mobile , '+' , '') , ' ' , '') \n            else uts.phone_mobile\n        end,''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))                                                                                       as phone_mobile,\n    cast(regexp_replace(coalesce(utm.formal_salutation, ute.formal_salutation, ma.formal_salutation),'[\\x00-\\x1F|\\x7F]','')as nvarchar(100))       as salutation, \n    cast(regexp_replace(coalesce(utm.informal_salutation, ute.informal_salutation, ma.informal_salutation),'[\\x00-\\x1F|\\x7F]','')as nvarchar(100)) as salutation_informal\nfrom ${Database}.live.cid ci \nleft join ${Database}.live.names utm   on ci.name_urn_to_mail_ignoring_dp          = utm.name_urn\nleft join ${Database}.live.names ute   on ci.name_urn_to_email_ignoring_dp         = ute.name_urn\nleft join ${Database}.live.names utp   on ci.name_urn_to_phone_ignoring_dp         = utp.name_urn\nleft join ${Database}.live.names uts   on ci.name_urn_to_sms_ignoring_dp           = uts.name_urn\nleft join ${Database}.live.names ma    on ci.name_urn                              = ma.name_urn\n; \n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid_details',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_details;\n\n---------------------\n-- cid brand\n\ndrop table if exists ${Database}.temp.names_supps_dp_brand;\n\nalter warehouse set warehouse_size = 'Medium';\n\nCREATE OR REPLACE TABLE ${Database}.temp.names_supps_dp_brand\nas\nselect distinct\n    cid,\n    business_unit_id,\n    division_id,\n    brand_id,\n    max(first_email) as email,\n    max(dp_last_date)  as dp_last_date,\n    max(last_open_date) as last_open_date,\n    max(last_open_date_ios15) as last_open_date_ios15,\n    max(customer_retention_group_date) as customer_retention_group_date,\n    max(customer_retention_group_date_ios15) as customer_retention_group_date_ios15,\n    max(customer_retention_group_expiry_date_calculated) as customer_retention_group_expiry_date,\n    max(customer_retention_group_expiry_date_ios15_calculated) as customer_retention_group_expiry_date_ios15,\n    min(customer_retention_group_base) as customer_retention_group_base,\n    min(customer_retention_group_base_ios15) as customer_retention_group_base_ios15,\n    min(customer_suppression_group_base) as customer_suppression_group_base,\n    max(mailable) as mailable,\n    max(emailable)  as emailable,\n    max(emailable_newsletter) as emailable_newsletter,\n    max(mailable_ignoring_dp)  as mailable_ignoring_dp,\n    max(emailable_ignoring_dp) as emailable_ignoring_dp\nfrom (\n         select\n             *,\n             case\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where brand = 'SMA') then add_months(customer_retention_group_date,36)\n                 else add_months(customer_retention_group_date,24)\n             end as customer_retention_group_expiry_date_calculated,\n             case\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where brand = 'SMA') then add_months(customer_retention_group_date_ios15,36)\n                 else add_months(customer_retention_group_date_ios15,24)\n             end as customer_retention_group_expiry_date_ios15_calculated\n\t\t\t ,first_value(email) over (partition by cid, business_unit_id, division_id, brand_id order by emailable desc nulls last, emailable_newsletter desc nulls last, dp_last_date desc nulls last, last_open_date desc nulls last,email asc nulls last) as first_email\n         from ${Database}.temp.build_email_brand_contact_flags\n     ) cf\ngroup by 1,2,3,4\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.names_supps_dp_brand',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.names_supps_dp_brand;\n\n\ndrop table if exists ${Database}.temp.xref_cid_email; \n\nCREATE OR REPLACE TABLE ${Database}.temp.xref_cid_email as\nselect *\nfrom ${Database}.live.xref_email\n;\n    \ninsert into ${Database}.temp.xref_cid_email \nselect \n    cid,\n    '' as email,\n    min(bbw_urn) as bbw_urn\nfrom ${Database}.live.xref_name_urn\ngroup by \n    cid;    \n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.xref_cid_email',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.xref_cid_email;\n\n--brand preference & base combine\ndrop table if exists ${Database}.temp.build_rollups_cid_brand_pref_base; \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_brand_pref_base as\nselect distinct\n\tcid,\n\tbrand_id,\n\tfirst_value(pref_emailable) over (partition by cid, brand_id order by pref_date desc, pref_source) as pref_emailable\nfrom\n(\t\n\t\tselect cid,\n\t\t\tbrand_id,\n\t\t\tpref_emailable, \t\t--Ticked/unticked a box on Gigya to confirm they want to/don't want to hear from the brand – i.e. done it themselves\n\t\t\tpref_date,\n\t\t\tcast(1 as int) as pref_source\n\t\tfrom ${Database}.temp.build_rollups_cid_brand_preference\n\t\twhere pref_mig = 0\t\t\t--don't consider preferences from before migration\n\t\tunion all\n\t\tselect cid,\n\t\t\tbrand_id,\n\t\t\t1 as pref_emailable,\t--any positive brand registration action in the last 5 years\n\t\t\tlast_date_brand as pref_date,\n\t\t\tcast(2 as int) as pref_source \n\t\tfrom ${Database}.temp.build_rollups_cid_brand_base\n)\n;\n  \n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_brand_pref_base',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_brand_pref_base;\n\n\ndrop table if exists ${Database}.live.cid_brand ;  \n\nCREATE OR REPLACE TABLE ${Database}.live.cid_brand\nas\nselect\n    to_char(xr.bbw_urn)||'-'||to_char(dp.brand_id) as cid_brand_urn,\n    ci.cid,\n    dp.business_unit_id,\n    dp.division_id,\n    dp.brand_id,\n   case\n        when dp.customer_retention_group_base = 1 then 'Safe'\n        when dp.customer_retention_group_base = 2 then 'Re-consent'\n        when dp.customer_retention_group_base = 3 then 'New'\n        when dp.customer_retention_group_base = 4 then 'At Risk'\n        when dp.customer_retention_group_base = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base = 6 then 'Gone this month'\n        when dp.customer_retention_group_base = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_brand,\n   case\n        when dp.customer_retention_group_base_ios15 = 1 then 'Safe'\n        when dp.customer_retention_group_base_ios15 = 2 then 'Re-consent'\n        when dp.customer_retention_group_base_ios15 = 3 then 'New'\n        when dp.customer_retention_group_base_ios15 = 4 then 'At Risk'\n        when dp.customer_retention_group_base_ios15 = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base_ios15 = 6 then 'Gone this month'\n        when dp.customer_retention_group_base_ios15 = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_brand_ios15,\n    dp.customer_retention_group_date as customer_retention_date_brand,\n    dp.customer_retention_group_date_ios15 as customer_retention_date_brand_ios15,\n    dp.customer_retention_group_expiry_date as customer_retention_expiry_date_brand,\n    dp.customer_retention_group_expiry_date_ios15 as customer_retention_expiry_date_brand_ios15,\n    dp.dp_last_date as last_subscription_date_brand,\n    em.event_date as last_email_open_date_brand,\n    case\n        when pgi.first_pref_date is null then cbb.first_date_brand\n        when cbb.first_date_brand is null then pgi.first_pref_date\n        else least(cbb.first_date_brand, pgi.first_pref_date)\n    end as first_date_brand, --least data date from existing pref_date or first_date_brand\n    cbb.last_date_brand,\n    cbb.first_channel_brand,\n    cbb.last_channel_brand,\n\tcase\n        when bpb.pref_emailable is not null then bpb.pref_emailable \n        else -1 end as brand_preference, \n    case\n        when dp.brand_id = (select brand_id from ${Database}.live.ref_brand where contains(lower(brand),'your purina')) then 0\n        when pro.brand_id is not null then 1 --Has had a product from the brand in the L5Y (sample, coupon, loyalty scheme, left an R&R of 3 and above)\n        when cbb.last_login_brand >= add_months(current_date, -60) then 1 --Has logged into their account on a brand website in last 5 years (Pets Welcome or Gigya)\n        when pref.brand_id is not null then 1 --Has answered a brand question (old golden questions) in the last 5 years\n        when em.brand_id is not null then 1 --Opened or clicked an email from the brand in the last 5 years\n        else 0\n    end as brand_engagement,\n\tcase\n        when bpb.pref_emailable is not null then bpb.pref_emailable \n        when dp.brand_id = (select brand_id from ${Database}.live.ref_brand where contains(lower(brand),'your purina')) then 0\n        when pro.brand_id is not null then 1 --Has had a product from the brand in the L5Y (sample, coupon, loyalty scheme, left an R&R of 3 and above)\n        when cbb.last_login_brand >= add_months(current_date, -60) then 1 --Has logged into their account on a brand website in last 5 years (Pets Welcome or Gigya)\n        when pref.brand_id is not null then 1 --Has answered a brand question (old golden questions) in the last 5 years\n        when em.brand_id is not null then 1 --Opened or clicked an email from the brand in the last 5 years\n        else 0\n    end as brand_campaignable,\n    case\n        when pgi.pref_emailable = 1 and pgi.pref_mig = 0 then 1\n        when pgi.pref_emailable = 1 and pgi.pref_mig = 1 then -1\n        else 0\n    end as preferred_brand_gigya,\n    case\n        when dp.emailable = 1 or dp.emailable_newsletter = 1 then ''\n        when customer_suppression_group_base = 1 then 'Deceased TM'\n        when customer_suppression_group_base = 2 then 'Deceased'\n        when customer_suppression_group_base = 3 then 'Manual TM'\n        when customer_suppression_group_base = 4 then 'Manual'\n        when customer_suppression_group_base = 5 then 'Bounce TM'\n        when customer_suppression_group_base = 6 then 'Bounce'\n        when customer_suppression_group_base = 7 then 'Unsub TM'\n        when customer_suppression_group_base = 8 then 'Unsub'\n        when customer_suppression_group_base = 9 then 'Opt-Out TM'\n        when customer_suppression_group_base = 10 then 'Opt-Out'\n        when customer_suppression_group_base = 11 then 'Engagement'\n        else 'Misc'\n    end as customer_suppression_group_brand,\n    --    contactable status\n    case when dp.mailable = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable,\n    case when dp.emailable = 1 then 1 else 0 end as emailable,\n    case when dp.emailable_newsletter = 1 then 1 else 0 end as emailable_newsletter,\n    case when dp.mailable_ignoring_dp = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable_ignoring_dp,\n    case when dp.emailable_ignoring_dp = 1 then 1 else 0 end as emailable_ignoring_dp,\n    cast(regexp_replace(coalesce(\n        case\n            when dp.emailable = 1\n            or dp.emailable_newsletter = 1 then collate(dp.email,'')\n            else ''\n        end, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100)) as email_brand\nfrom ${Database}.temp.build_rollups_cid_base                 ci\ninner join ${Database}.temp.names_supps_dp_brand             dp   on ci.cid = dp.cid\ninner join ${Database}.temp.xref_cid_email                   xr   on dp.cid = xr.cid\n                                                            and dp.email = xr.email\nleft join ${Database}.temp.build_rollups_cid_brand_base      cbb  on dp.cid = cbb.cid\n                                                            and dp.brand_id = cbb.brand_id\nleft join ${Database}.temp.build_rollups_cid_brand_preferred pref on dp.cid = pref.cid\n                                                            and dp.brand_id = pref.brand_id\nleft join ${Database}.temp.build_rollups_cid_brand_preference pgi on dp.cid = pgi.cid --gigya prefereces\n                                                            and dp.brand_id = pgi.brand_id\nleft join ${Database}.temp.build_rollups_cid_brand_emails    em   on dp.email = em.email\n                                                            and dp.brand_id = em.brand_id\nleft join ${Database}.temp.build_rollups_cid_brand_product   pro  on dp.cid = pro.cid\n                                                            and dp.brand_id = pro.brand_id\nleft join ${Database}.temp.build_rollups_cid_brand_pref_base bpb  on dp.cid = bpb.cid\n                                                            and dp.brand_id = bpb.brand_id;\n \n \ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid_brand',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_brand;   \n\n--drop table ${Database}.temp.build_rollups_cid_brand_preferred;\n--drop table ${Database}.temp.build_rollups_cid_brand_preference;\n--drop table ${Database}.temp.build_rollups_cid_brand_emails;\n--drop table ${Database}.temp.build_rollups_cid_brand_product;\n--drop table ${Database}.temp.build_rollups_cid_brand_pref_base; \n\n---------------------\n-- cid division\n\ndrop table if exists ${Database}.temp.names_supps_dp_division;\n\nCREATE OR REPLACE TABLE ${Database}.temp.names_supps_dp_division\nas\nselect distinct\n    cid,\n    business_unit_id,\n    division_id,\n    max(first_email) as email,\n    max(dp_last_date) as dp_last_date,\n    max(last_open_date) as last_open_date,\n    max(last_open_date_ios15) as last_open_date_ios15,\n    max(customer_retention_group_date) as customer_retention_group_date,\n    max(customer_retention_group_date_ios15) as customer_retention_group_date_ios15,\n    max(customer_retention_group_expiry_date) as customer_retention_group_expiry_date,\n    max(customer_retention_group_expiry_date_ios15) as customer_retention_group_expiry_date_ios15,\n    min(customer_retention_group_base) as customer_retention_group_base,\n    min(customer_retention_group_base_ios15) as customer_retention_group_base_ios15,\n    min(customer_suppression_group_base) as customer_suppression_group_base,\n    max(mailable) as mailable,\n    max(emailable) as emailable,\n    max(emailable_newsletter) as emailable_newsletter,\n    max(mailable_ignoring_dp) as mailable_ignoring_dp,\n    max(emailable_ignoring_dp) as emailable_ignoring_dp\nfrom \n\t(\n\tselect \n\t\t*\n\t\t,first_value(email) over (partition by cid, business_unit_id, division_id order by emailable desc nulls last, emailable_newsletter desc nulls last, dp_last_date desc nulls last,last_open_date desc nulls last,email asc nulls last) as first_email\n\tfrom ${Database}.temp.names_supps_dp_brand\n\t) t\ngroup by 1,2,3\n;\n\nalter warehouse set warehouse_size = 'Small';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.names_supps_dp_division',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.names_supps_dp_division;\n\ndrop table if exists ${Database}.temp.build_rollups_cid_division_base ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_division_base \nas\nselect \n    cbb.cid,\n    rb.division_id,\n    min(cbb.first_date_brand) as first_date_division,\n    max(cbb.last_date_brand) as last_date_division\nfrom ${Database}.temp.build_rollups_cid_brand_base cbb\ninner join ${Database}.live.ref_brand rb on cbb.brand_id = rb.brand_id\ngroup by \n    cbb.cid,\n    rb.division_id;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_division_base',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_division_base;    \n\ndrop table if exists ${Database}.temp.group_division_new_check;\n\n--If grouping New then check if other brands exist with New/At Risk as these will be classed as safe\nCREATE OR REPLACE TABLE ${Database}.temp.group_division_new_check\nas\nselect distinct \n    cbbo.cid,\n    cbbo.division_id\nfrom ${Database}.temp.names_supps_dp_brand cbbo\ninner join ${Database}.temp.names_supps_dp_brand cbbt on cbbo.cid = cbbt.cid\n                                                and cbbo.division_id = cbbt.division_id\nwhere cbbo.customer_retention_group_base = 3 --New\n    and cbbt.customer_retention_group_base in (4,5);  --At Risk/Data Orphan\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.group_division_new_check',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.group_division_new_check;    \n\n\ncreate or replace table ${Database}.temp.group_division_new_check_ios15\nas\nselect distinct\n    cbbo.cid,\n    cbbo.division_id\nfrom ${Database}.temp.names_supps_dp_brand cbbo\ninner join ${Database}.temp.names_supps_dp_brand cbbt on cbbo.cid = cbbt.cid\n                                                     and cbbo.division_id = cbbt.division_id\nwhere cbbo.customer_retention_group_base_ios15 = 3 --New\n    and cbbt.customer_retention_group_base_ios15 in (4,5); --At Risk/Data Orphan\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_rollups',\n    '${Database}.temp.group_division_new_check_ios15',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.group_division_new_check_ios15;\n\n\n--drop table ${Database}.temp.names_supps_dp_brand;\n--drop table ${Database}.temp.build_rollups_cid_brand_base;\n\ndrop table if exists ${Database}.live.cid_division ;  \n\nCREATE OR REPLACE TABLE ${Database}.live.cid_division \nas\nselect \n    to_char(xr.bbw_urn)||'-'||to_char(dp.division_id) as cid_division_urn,\n    ci.cid,\n    dp.business_unit_id,\n    dp.division_id,\n   case \n        when dp.customer_retention_group_base = 1 then 'Safe'\n        when dp.customer_retention_group_base = 2 then 'Re-consent'\n        when gnd.cid is not null then 'Safe'\n        when dp.customer_retention_group_base = 3 then 'New'\n        when dp.customer_retention_group_base = 4 then 'At Risk'\n        when dp.customer_retention_group_base = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base = 6 then 'Gone this month'\n        when dp.customer_retention_group_base = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_division,\n   case \n        when dp.customer_retention_group_base_ios15 = 1 then 'Safe'\n        when dp.customer_retention_group_base_ios15 = 2 then 'Re-consent'\n        when gnd15.cid is not null then 'Safe'\n        when dp.customer_retention_group_base_ios15 = 3 then 'New'\n        when dp.customer_retention_group_base_ios15 = 4 then 'At Risk'\n        when dp.customer_retention_group_base_ios15 = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base_ios15 = 6 then 'Gone this month'\n        when dp.customer_retention_group_base_ios15 = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_division_ios15,\n    dp.customer_retention_group_date as customer_retention_date_division,\n    dp.customer_retention_group_date_ios15 as customer_retention_date_division_ios15,\n    dp.customer_retention_group_expiry_date as customer_retention_expiry_date_division,\n    dp.customer_retention_group_expiry_date_ios15 as customer_retention_expiry_date_division_ios15,\n    dp.dp_last_date as last_subscription_date_division,\n    dp.last_open_date as last_email_open_date_division, \n    dp.last_open_date_ios15 as last_email_open_date_division_ios15, \n    cdb.first_date_division,\n    cdb.last_date_division,\n    case \n        when dp.emailable = 1 or dp.emailable_newsletter = 1 then ''\n        when customer_suppression_group_base = 1 then 'Deceased TM'\n        when customer_suppression_group_base = 2 then 'Deceased'\n        when customer_suppression_group_base = 3 then 'Manual TM'\n        when customer_suppression_group_base = 4 then 'Manual'\n        when customer_suppression_group_base = 5 then 'Bounce TM'\n        when customer_suppression_group_base = 6 then 'Bounce'\n        when customer_suppression_group_base = 7 then 'Unsub TM'\n        when customer_suppression_group_base = 8 then 'Unsub'\n        when customer_suppression_group_base = 9 then 'Opt-Out TM'\n        when customer_suppression_group_base = 10 then 'Opt-Out'\n        when customer_suppression_group_base = 11 then 'Engagement'\n        else 'Misc'\n    end as customer_suppression_group_division,    \n    --    contactable status \n    case when dp.mailable = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable,\n    case when dp.emailable = 1 then 1 else 0 end as emailable,\n    case when dp.emailable_newsletter = 1 then 1 else 0 end as emailable_newsletter,\n    case when dp.mailable_ignoring_dp = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable_ignoring_dp,\n    case when dp.emailable_ignoring_dp = 1 then 1 else 0 end as emailable_ignoring_dp,\n    cast(regexp_replace(coalesce(\n        case \n            when dp.emailable = 1 or dp.emailable_newsletter = 1 then collate(dp.email,'')\n            else '' \n        end, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100)) as email_division\nfrom ${Database}.temp.build_rollups_cid_base ci\ninner join ${Database}.temp.names_supps_dp_division dp on ci.cid = dp.cid\ninner join ${Database}.temp.xref_cid_email                   xr   on dp.cid = xr.cid\n                                                            and dp.email = xr.email\nleft join ${Database}.temp.build_rollups_cid_division_base cdb on dp.cid = cdb.cid \n                                                         and dp.division_id = cdb.division_id\nleft join ${Database}.temp.group_division_new_check gnd on dp.cid = gnd.cid\n                                                  and dp.division_id = gnd.division_id\nleft join ${Database}.temp.group_division_new_check_ios15 gnd15 on dp.cid = gnd15.cid\n                                                             and dp.division_id = gnd15.division_id;\n    \ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid_division',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_division;   \n\n--drop table ${Database}.temp.build_rollups_cid_division_base;\n-----------------\n-- cid business unit \n\ndrop table if exists ${Database}.temp.names_supps_dp_business_unit;\n\nCREATE OR REPLACE TABLE ${Database}.temp.names_supps_dp_business_unit\nas\nselect distinct\n    cid,\n    business_unit_id,\n    max(first_email) as email,\n    max(dp_last_date) as dp_last_date,\n    max(last_open_date) as last_open_date,\n    max(last_open_date_ios15) as last_open_date_ios15,\n    max(customer_retention_group_date) as customer_retention_group_date,\n    max(customer_retention_group_date_ios15) as customer_retention_group_date_ios15,\n    max(customer_retention_group_expiry_date) as customer_retention_group_expiry_date,\n    max(customer_retention_group_expiry_date_ios15) as customer_retention_group_expiry_date_ios15,\n    max(customer_retention_group_expiry_date) as dp_processing_expiry_date,\n    max(customer_retention_group_expiry_date_ios15) as dp_processing_expiry_date_ios15,\n    min(customer_retention_group_base) as customer_retention_group_base,\n    min(customer_retention_group_base_ios15) as customer_retention_group_base_ios15,\n    min(customer_suppression_group_base) as customer_suppression_group_base,\n    max(mailable) as mailable,\n    max(emailable) as emailable,\n    max(emailable_newsletter) as emailable_newsletter,\n    max(mailable_ignoring_dp) as mailable_ignoring_dp,\n    max(emailable_ignoring_dp) as emailable_ignoring_dp\nfrom \n\t(\n\tselect\n\t\t*\n\t\t,first_value(email) over (partition by cid, business_unit_id, division_id order by emailable desc nulls last, emailable_newsletter desc nulls last, dp_last_date desc nulls last,last_open_date desc nulls last,email asc nulls last) as first_email\n\tfrom ${Database}.temp.names_supps_dp_division\n\t) t\ngroup by 1,2\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'db_names_suppressions',\n    '${Database}.temp.names_supps_dp_business_unit',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.names_supps_dp_business_unit;\n\ndrop table if exists ${Database}.temp.group_business_new_check;\n\n--If grouping New then check if other divisions exist with New/At Risk as these will be classed as safe - also check if check was needed before\nCREATE OR REPLACE TABLE ${Database}.temp.group_business_new_check\nas\nselect distinct \n    cbbo.cid,\n    cbbo.business_unit_id\nfrom ${Database}.temp.names_supps_dp_division cbbo\nleft join ${Database}.temp.names_supps_dp_division cbbt on cbbo.cid = cbbt.cid\n                                                  and cbbo.business_unit_id = cbbt.business_unit_id\n                                                  and cbbt.customer_retention_group_base in (4,5)  --At Risk/Data Orphan\nleft join ${Database}.temp.group_division_new_check gdc on cbbo.cid = gdc.cid\n                                                  and cbbo.division_id = gdc.division_id\nwhere cbbo.customer_retention_group_base = 3 --New\n    and (gdc.cid is not null or cbbt.cid is not null); --Either already Safe due to previous checking or new grouping filter needed\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.group_business_new_check',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.group_business_new_check;    \n\n\nCREATE OR REPLACE TABLE ${Database}.temp.group_business_new_check_ios15\nas\nselect distinct\n    cbbo.cid,\n    cbbo.business_unit_id\nfrom ${Database}.temp.names_supps_dp_division cbbo\nleft join ${Database}.temp.names_supps_dp_division cbbt on cbbo.cid = cbbt.cid\n                                                  and cbbo.business_unit_id = cbbt.business_unit_id\n                                                  and cbbt.customer_retention_group_base_ios15 in (4,5)  --At Risk/Data Orphan\nleft join ${Database}.temp.group_division_new_check_ios15 gdc on cbbo.cid = gdc.cid\n                                                             and cbbo.division_id = gdc.division_id\nwhere cbbo.customer_retention_group_base_ios15 = 3 --New\n    and (gdc.cid is not null or cbbt.cid is not null); --Either already Safe due to previous checking or new grouping filter needed\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_rollups',\n    '${Database}.temp.group_business_new_check_ios15',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.group_business_new_check_ios15;\n\n--drop table ${Database}.temp.group_division_new_check;\n--drop table ${Database}.temp.group_division_new_check_ios15;\n--drop table ${Database}.temp.names_supps_dp_division;\n\n\nalter warehouse set warehouse_size = 'Medium';\n\n--acquisition types\nCREATE OR REPLACE TABLE ${Database}.temp.npp_acquisition_type_base\nas\nselect distinct\n    acq.cid,\n    acq.acquisition_name_urn,\n    trim(acq.acquisition_source) as acquisition_source,\n    acq.acquisition_source_brand_id,\n    acq.acquisition_source_file,\n    first_value(trim(na.registration_campaign)) over\n        (\n            partition by cid \n            order by \n                na.data_date nulls last,\n                na.source_date nulls last\n        ) as acquisition_registration_campaign\nfrom (\n         select distinct\n             xr.cid,\n             first_value(n.name_urn) over\n                 (\n                     partition by xr.cid\n                     order by\n                         n.data_date nulls last,\n                         n.reg_date nulls last,\n                         n.source_date nulls last\n                 ) as acquisition_name_urn,\n             first_value(n.source) over\n                 (\n                     partition by xr.cid\n                     order by\n                         n.data_date nulls last,\n                         n.reg_date nulls last,\n                         n.source_date nulls last\n                 ) as acquisition_source,\n             first_value(n.source_brand_id) over\n                 (\n                     partition by xr.cid\n                     order by\n                         n.data_date nulls last,\n                         n.reg_date nulls last,\n                         n.source_date nulls last\n                 ) as acquisition_source_brand_id,\n             first_value(n.source_file) over\n                 (\n                     partition by xr.cid\n                     order by\n                         n.data_date nulls last,\n                         n.reg_date nulls last,\n                         n.source_date nulls last\n                 ) as acquisition_source_file\n         from ${Database}.db.names n\n         left join ${Database}.live.xref_name_urn xr on xr.name_urn = n.name_urn\n         where source_data_controller_id = (select data_controller_id from ${Database}.live.ref_data_controller where data_controller like 'Nestl_ Purina Petcare (UK) Ltd')\n\t\t and n.source <> 'RESP_ADE_RMI'\n) acq\nleft join ${Database}.db.names_attributes na on na.name_urn = acq.acquisition_name_urn \n                                       and (source <> 'REG_GIG' or (na.source = 'REG_GIG' and na.registration_campaign not in  (\n\n                                                                                                                                'GBCERELACWEB_MIG',\n                                                                                                                                'UKAEROCHOCOLATEWEB',\n                                                                                                                                'UKBUXTONWATERWEB',\n                                                                                                                                'UKCARNATIONWEB',\n                                                                                                                                'UKCERELACWEB',\n                                                                                                                                'UKCERELACWEB_MIG',\n                                                                                                                                'UKKITKATWEB',\n                                                                                                                                'UKMAGGIWEB',\n                                                                                                                                'UKMERITENEWEB',\n                                                                                                                                'UKMERITENEWEB_MIG',\n                                                                                                                                'UKMILKYBARWEB',\n                                                                                                                                'UKNESCAFEWEB',\n                                                                                                                                'UKROWNTREESWEB',\n                                                                                                                                'UKYESSNACKSWEB',\n                                                                                                                                'UKNESTLEPURELIFEWEB'))); --CIAM name_urns can join to ${Database} reg_campaigns from names_attibutes\n\nalter warehouse set warehouse_size = 'Small';\n\ninsert into ${Database}.db.build_log \nselect \n    '${Database}_rollups',\n    '${Database}.temp.npp_acquisition_type_base',\n    'total records',\n    cast(count(*) as varchar),\n    current_timestamp \nfrom ${Database}.temp.npp_acquisition_type_base;\n\n--cid level table with acquisition types attributed\ndrop table if exists ${Database}.temp.ref_acquisition_type_joined;\n\nCREATE OR REPLACE TABLE ${Database}.temp.ref_acquisition_type_joined\nas\n--new source - has populated registration_campaign and brand_id\n--join on source, reg_campaign and brand\nselect     distinct \n    b.cid,\n    b.acquisition_source,\n    '' as acquisition_source_file,\n    b.acquisition_source_brand_id,\n    b.acquisition_registration_campaign,\n    case when b.acquisition_source = 'REG_GIG' then 'Website Registrations' else tc.acquisition_type end as acquisition_type, --Issue with reg_campaign when joining CIAM records to names_attributes, but they're all website reg\n    tc.acquisition_channel,\n    '1 - source, reg_campaign and brand' as join_type\nfrom ${Database}.temp.npp_acquisition_type_base b\nleft join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                           and b.acquisition_registration_campaign = tc.registration_campaign\n                                           and b.acquisition_source_brand_id = tc.acquisition_source_brand_id\nwhere (b.acquisition_registration_campaign > '')\n    and b.acquisition_source_brand_id is not null\n    and contains(lower(tc.source_old_new),'new')\nunion all\n--new source - has null or blank registration_campaign and populated brand_id\n--join on source and brand_id\nselect     distinct\n    b.cid,\n    b.acquisition_source,\n    '' as acquisition_source_file,\n    b.acquisition_source_brand_id,\n    b.acquisition_registration_campaign,\n    case when b.acquisition_source = 'REG_GIG' then 'Website Registrations' else tc.acquisition_type end as acquisition_type, --Issue with reg_campaign when joining CIAM records to names_attributes, but they're all website reg\n    tc.acquisition_channel,\n    '2 - source and brand' as join_type\nfrom ${Database}.temp.npp_acquisition_type_base b\nleft join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                           and b.acquisition_source_brand_id = tc.acquisition_source_brand_id\nwhere (b.acquisition_registration_campaign is null or b.acquisition_registration_campaign = '')\n    and tc.registration_campaign is null\n    and b.acquisition_source_brand_id is not null\n    and contains(lower(tc.source_old_new),'new')\nunion all\n--new source - has populated registration_campaign and null brand_id\n--join on source and reg_campaign\nselect     distinct\n    b.cid,\n    b.acquisition_source,\n    '' as acquisition_source_file,\n    b.acquisition_source_brand_id,\n    b.acquisition_registration_campaign,\n    case when b.acquisition_source = 'REG_GIG' then 'Website Registrations' else tc.acquisition_type end as acquisition_type, --Issue with reg_campaign when joining CIAM records to names_attributes, but they're all website reg\n    tc.acquisition_channel,\n    '3 - source and reg_campaign' as join_type\nfrom ${Database}.temp.npp_acquisition_type_base b\nleft join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                           and b.acquisition_registration_campaign = tc.registration_campaign\nwhere (b.acquisition_registration_campaign > '')\n    and b.acquisition_source_brand_id is null\n    and tc.acquisition_source_brand_id is null\n    and contains(lower(tc.source_old_new),'new')\nunion all\n--new source - has null registration_campaign and null brand_id\n--hard coding as Website Registrations\nselect     distinct\n    b.cid,\n    b.acquisition_source,\n    '' as acquisition_source_file,\n    b.acquisition_source_brand_id,\n    b.acquisition_registration_campaign,\n    'Website Registrations' as acquisition_type,\n    tc.acquisition_channel,\n    '4 - all null' as join_type\nfrom ${Database}.temp.npp_acquisition_type_base b\ninner join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                            and tc.acquisition_source_brand_id is null\n                                            and (tc.registration_campaign = '' or tc.registration_campaign is null)\nwhere (b.acquisition_registration_campaign is null or b.acquisition_registration_campaign = '')\n    and b.acquisition_source_brand_id is null\n    and not contains(upper(b.acquisition_source),'NPP')\nunion all\n--old source - non-null acquisition_source_brand_id\nselect     distinct \n    b.cid,\n    b.acquisition_source,\n    b.acquisition_source_file,\n    b.acquisition_source_brand_id,\n    '' as acquisition_registration_campaign,\n    tc.acquisition_type,\n    tc.acquisition_channel,\n    '5 - populated acquisition_source_brand_id ' as join_type\nfrom ${Database}.temp.npp_acquisition_type_base b\nleft join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                           and b.acquisition_source_file = tc.acquisition_source_file\n                                           and b.acquisition_source_brand_id = tc.acquisition_source_brand_id\nwhere contains(lower(tc.source_old_new),'old')\n    and b.acquisition_source_brand_id is not null\nunion all\n--old source - has null acquisition_source_brand_id\nselect     distinct \n    b.cid,\n    b.acquisition_source,\n    b.acquisition_source_file,\n    b.acquisition_source_brand_id,\n    '' as acquisition_registration_campaign,\n    tc.acquisition_type,\n    tc.acquisition_channel,\n    '6 - null acquisition_source_brand_id ' as join_type\nfrom ${Database}.temp.npp_acquisition_type_base b\nleft join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                           and b.acquisition_source_file = tc.acquisition_source_file\nwhere contains(lower(tc.source_old_new),'old')\n    and b.acquisition_source_brand_id is null;\n\ninsert into ${Database}.db.build_log \nselect \n    '${Database}_rollups',\n    '${Database}.temp.ref_acquisition_type_joined',\n    'total records',\n    cast(count(*) as varchar),\n    current_timestamp \nfrom ${Database}.temp.ref_acquisition_type_joined;\n\n--to output email with any missing ones that need actioning\ndrop table if exists ${Database}.jobs.npp_acquisition_types_missing;\ncreate table ${Database}.jobs.npp_acquisition_types_missing\nas\nselect\n    b.acquisition_source, \n    rb.brand,\n    b.acquisition_registration_campaign,\n    count(b.cid) as volume\nfrom ${Database}.temp.npp_acquisition_type_base b\nleft join ${Database}.live.ref_brand rb on b.acquisition_source_brand_id = rb.brand_id\nwhere cid not in (select cid from ${Database}.temp.ref_acquisition_type_joined)\ngroup by 1,2,3\n;\n\ndrop table if exists ${Database}.live.cid_business_unit ;  \n\nCREATE OR REPLACE TABLE ${Database}.live.cid_business_unit \nas\nselect \n    to_char(xr.bbw_urn)||'-'||to_char(dp.business_unit_id) as cid_business_unit_urn,\n    ci.cid,\n    dp.business_unit_id,\n   case \n        when dp.customer_retention_group_base = 1 then 'Safe'\n        when dp.customer_retention_group_base = 2 then 'Re-consent'\n        when gnc.cid is not null then 'Safe'\n        when dp.customer_retention_group_base = 3 then 'New'\n        when dp.customer_retention_group_base = 4 then 'At Risk'\n        when dp.customer_retention_group_base = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base = 6 then 'Gone this month'\n        when dp.customer_retention_group_base = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_business_unit,\n   case \n        when dp.customer_retention_group_base_ios15 = 1 then 'Safe'\n        when dp.customer_retention_group_base_ios15 = 2 then 'Re-consent'\n        when gnc15.cid is not null then 'Safe'\n        when dp.customer_retention_group_base_ios15 = 3 then 'New'\n        when dp.customer_retention_group_base_ios15 = 4 then 'At Risk'\n        when dp.customer_retention_group_base_ios15 = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base_ios15 = 6 then 'Gone this month'\n        when dp.customer_retention_group_base_ios15 = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_business_unit_ios15,\n    dp.customer_retention_group_date as customer_retention_date_business_unit,\n    dp.customer_retention_group_date_ios15 as customer_retention_date_business_unit_ios15,\n    dp.customer_retention_group_expiry_date as customer_retention_expiry_date_business_unit,\n    dp.customer_retention_group_expiry_date_ios15 as customer_retention_expiry_date_business_unit_ios15,\n    dp.dp_processing_expiry_date,\n    dp.dp_processing_expiry_date_ios15,\n    dp.dp_last_date as last_subscription_date_business_unit,\n    dp.last_open_date as last_email_open_date_business_unit,\n    dp.last_open_date_ios15 as last_email_open_date_business_unit_ios15,\n    cdb.first_date_business_unit,\n    cdb.last_date_business_unit,  \n    case \n        when dp.emailable = 1 or dp.emailable_newsletter = 1 then ''\n        when customer_suppression_group_base = 1 then 'Deceased TM'\n        when customer_suppression_group_base = 2 then 'Deceased'\n        when customer_suppression_group_base = 3 then 'Manual TM'\n        when customer_suppression_group_base = 4 then 'Manual'\n        when customer_suppression_group_base = 5 then 'Bounce TM'\n        when customer_suppression_group_base = 6 then 'Bounce'\n        when customer_suppression_group_base = 7 then 'Unsub TM'\n        when customer_suppression_group_base = 8 then 'Unsub'\n        when customer_suppression_group_base = 9 then 'Opt-Out TM'\n        when customer_suppression_group_base = 10 then 'Opt-Out'\n        when customer_suppression_group_base = 11 then 'Engagement'\n        else 'Misc'\n    end as customer_suppression_group_business_unit,     \n    --    contactable status  \n    case when dp.mailable = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable,\n    case when dp.emailable = 1 then 1 else 0 end as emailable,\n    case when dp.emailable_newsletter = 1 then 1 else 0 end as emailable_newsletter,\n    case when dp.mailable_ignoring_dp = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable_ignoring_dp,\n    case when dp.emailable_ignoring_dp = 1 then 1 else 0 end as emailable_ignoring_dp,\n    cast(regexp_replace(coalesce(\n        case \n            when dp.emailable = 1 or dp.emailable_newsletter = 1 then collate(dp.email,'')\n            else '' \n        end, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100)) as email_business_unit,\n        coalesce(acq.acquisition_type, '') as acquisition_type,\n    coalesce(acq.acquisition_channel,'') as acquisition_channel\nfrom ${Database}.temp.build_rollups_cid_base ci\ninner join ${Database}.temp.names_supps_dp_business_unit dp on ci.cid = dp.cid\ninner join ${Database}.temp.xref_cid_email                   xr   on dp.cid = xr.cid\n                                                            and dp.email = xr.email\nleft join ${Database}.temp.build_rollups_cid_bu_base cdb on dp.cid = cdb.cid \n                                                   and dp.business_unit_id = cdb.business_unit_id\nleft join ${Database}.temp.group_business_new_check gnc on dp.cid = gnc.cid\n                                                  and dp.business_unit_id = gnc.business_unit_id\nleft join ${Database}.temp.group_business_new_check_ios15 gnc15 on dp.cid = gnc15.cid\n                                                  and dp.business_unit_id = gnc15.business_unit_id\nleft join ${Database}.temp.ref_acquisition_type_joined acq on acq.cid = ci.cid\n                                                     and dp.business_unit_id = 5\n                                                     and cdb.first_date_business_unit is not null;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid_business_unit',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_business_unit;   \n\n--drop table ${Database}.temp.names_supps_dp_business_unit;\n--drop table ${Database}.temp.build_rollups_cid_bu_base;\n--drop table ${Database}.temp.group_business_new_check;\n--drop table ${Database}.temp.xref_cid_email;\n\n\n--update risk segment of non-anonymised lapsed customer when customer_retention_group_business_unit='new'\nmerge into ${Database}.live.cid c\nusing (\n          select distinct\n              cid\n          from ${Database}.live.cid_business_unit\n          where business_unit_id = 5\n              and customer_retention_group_business_unit='New'\n      ) cbu on c.cid = cbu.cid\nwhen matched and c.purina_lapse_risk_segment in ('Very High Risk','High Risk') then update\nset c.purina_lapse_risk_segment = 'Medium Risk';\n\n\n---------------------  \n---------------------\n-- hid\n\ndrop table if exists ${Database}.live.hid ;  \n\nCREATE OR REPLACE TABLE ${Database}.live.hid \nas \nselect \n    hid\nfrom ${Database}.temp.build_rollups_cid_base\ngroup by hid;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.hid',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.hid;   \n  \n--drop table ${Database}.temp.build_rollups_cid_base;\n\n--Create ${Database}.live.npp_thg_trans table\n\n\ndrop table if exists ${Database}.live.npp_thg_trans;\n\ncreate table ${Database}.live.npp_thg_trans \nas\nselect nt.*\nfrom ${Database}.db.npp_thg_trans nt\ninner join  --this will give me the set of order detail lines for just the latest dated file for the order\n    (\n        select distinct\n            trim(order_number) as order_number,\n            --just incase 2 files are loaded in the same day and so have the same source date (tried to use datadate but it's a time stamp so different for each detail line...)\n            first_value(trim(source_file)) \n            over\n            (\n                partition by trim(order_number)\n                order by \n                    source_date desc nulls last,  \n                    trim(source_file) desc\n            ) as source_file \n        from ${Database}.db.npp_thg_trans\n    ) sq on trim(nt.order_number) = sq.order_number\n        and trim(nt.source_file) = sq.source_file; --this will give me the 1 latest dated file for the order\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.npp_thg_trans',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.npp_thg_trans;  \n\n---------------------\n--coid - not required\n\n---------------------\n--insert seeds for faststats\n\n---------------------\n--fs views\n\n\n---------------------\n--sars views\n\n--collect recent new SARs\ncreate or replace table ${Database}.temp.build_todays_sars\nas\nselect distinct\n    nm.cid,\n    first_value(nm.name_urn) over(partition by nm.cid, s.email order by nm.data_date nulls last) as urn,\n    s.supp_urn,\n    s.email,\n    s.sar_source_date\nfrom (\n         select\n             supp_urn,\n             email1 as email,\n             source_date as sar_source_date\n         from ${Database}.db.supps_sar\n         where supp_urn not in (select supp_urn from ${Database}.db.sar_hist_contact)\n             and source_date >= current_date-3 --it's a rolling record of current SARs\n             and trim(email1) > ''\n         union all\n         select\n             supp_urn,\n             email2 as email,\n             source_date as SAR_source_date\n         from ${Database}.db.supps_sar\n         where supp_urn not in (select supp_urn from ${Database}.db.sar_hist_contact)\n             and source_date >= current_date-3 --it's a rolling record of current SARs\n             and trim(email2) > ''\n     ) s\nleft join ${Database}.live.names nm on lower(trim(s.email)) = lower(trim(nm.email));\n\n\ndelete\nfrom ${Database}.db.sar_hist_contact\nwhere sar_source_date < current_date - 7;\n\n\ninsert into ${Database}.db.sar_hist_contact\n(\n    supp_urn,\n    urn,\n    name_urn,\n    date_of_receipt,\n    title,\n    firstname,\n    lastname,\n    job_title,\n    company,\n    address_line_1,\n    address_line_2,\n    address_line_3,\n    address_line_4,\n    city,\n    county,\n    post_code,\n    country,\n    date_of_birth,\n    gender,\n    work_phone,\n    home_phone,\n    mobile_phone,\n    email,\n    source,\n    data_controller,\n    source_brand,\n    sar_source_date\n)\nselect distinct\n    s.supp_urn,\n    s.urn,\n    nm.name_urn,\n    nm.data_date,\n    nm.title,\n    nm.firstname,\n    nm.lastname,\n    nm.job_title,\n    nm.company,\n    nm.add1,\n    nm.add2,\n    nm.add3,\n    nm.add4,\n    nm.city,\n    nm.state,\n    nm.postcode,\n    nm.country,\n    nm.dob,\n    nm.gender,\n    nm.phone_work,\n    nm.phone_home,\n    nm.phone_mobile,\n    nm.email,\n    nm.source,\n    dc.data_controller,\n    br.brand,\n    s.sar_source_date\nfrom ${Database}.temp.build_todays_sars s\ninner join ${Database}.live.xref_name_urn xref on s.cid = xref.cid\ninner join ${Database}.live.names nm on trim(xref.name_urn) = trim(nm.name_urn)\ninner join ${Database}.live.ref_data_controller dc on nm.source_data_controller_id = dc.data_controller_id\nleft join ${Database}.live.ref_brand br on nm.source_brand_id = br.brand_id;\n\n\ndelete\nfrom ${Database}.db.sar_hist_dp\nwhere sar_source_date < current_date - 7;\n\n\ninsert into ${Database}.db.sar_hist_dp\n(\n    supp_urn,\n    urn,\n    name_urn,\n    opt_in_mail_comms,\n    opt_in_email_comms,\n    opt_in_newsletter,\n    opt_in_date,\n    opt_in_business_unit,\n    opt_in_brand,\n    source,\n    opt_in_statement,\n    sar_source_date\n)\nselect\n    s.supp_urn,\n    s.urn,\n    dp.name_urn,\n    case when dp.dp_mailable = 1 then 'Yes' when dp.dp_mailable = 0 then 'No' else '' end,\n    case when dp.dp_emailable = 1 then 'Yes' when dp.dp_emailable = 0 then 'No' else '' end,\n    case when dp.dp_newsletter = 1 then 'Yes' when dp.dp_newsletter = 0 then 'No' else '' end,\n    dp.dp_date,\n    dc.data_controller,\n    br.brand,\n    dp.source,\n    rdp.dp_statement,\n    s.sar_source_date\nfrom ${Database}.temp.build_todays_sars s\ninner join ${Database}.live.xref_name_urn xref on s.cid = xref.cid\ninner join ${Database}.db.names_dp dp on trim(xref.name_urn) = trim(dp.name_urn)\ninner join ${Database}.live.ref_data_controller dc on dp.data_controller_id = dc.data_controller_id\nleft join ${Database}.live.ref_brand br on dp.brand_id = br.brand_id\nleft join ${Database}.db.ref_dp rdp on trim(dp.source) = trim(rdp.source)\n                              and dp.data_controller_id = rdp.data_controller_id\n                              and coalesce(dp.brand_id,0) = coalesce(rdp.brand_id,0)\n                              and (dp.data_date >= rdp.start_date or rdp.start_date is null)\n                              and (dp.data_date <= rdp.end_date or rdp.end_date is null);\n\n\ndelete\nfrom ${Database}.db.sar_hist_comms\nwhere sar_source_date < current_date - 7;\n\n\ninsert into ${Database}.db.sar_hist_comms\n(\n    supp_urn,\n    urn,\n    name_urn,\n    email,\n    send_date,\n    brand_opted_in_to,\n    campaign_business_unit,\n    campaign_brand,\n    programme_description,\n    campaign_description,\n    promotion_description,\n    cell_description,\n    pack_description,\n    destination,\n    sar_source_date\n)\nselect\n    s.supp_urn,\n    s.urn,\n    ch.name_urn,\n    ch.email,\n    ch.drop_date,\n    br.brand,\n    dc.data_controller,\n    br1.brand,\n    chl.programme_description,\n    chl.campaign_id||' '||chl.campaign_description,\n    chl.promotion_id||' '||chl.promotion_description,\n    chl.cell_id||' '||chl.cell_description,\n    chl.pack_id||' '||chl.pack_description,\n    chl.final_destination,\n    s.sar_source_date\nfrom ${Database}.temp.build_todays_sars s\ninner join ${Database}.live.xref_name_urn xref on s.cid = xref.cid\ninner join ${Database}.db.comms_hist ch on trim(xref.name_urn) = trim(ch.name_urn)\ninner join ${Database}.db.comms_hist_lookup chl on trim(ch.programme_id) = trim(chl.programme_id)\n                                          and trim(ch.campaign_id) = trim(chl.campaign_id)\n                                          and trim(ch.promotion_id) = trim(chl.promotion_id)\n                                          and trim(ch.cell_id) = trim(chl.cell_id)\n                                          and trim(ch.pack_id) = trim(chl.pack_id)\nleft join ${Database}.live.ref_brand br on ch.data_brand_id = br.brand_id\nleft join ${Database}.live.ref_data_controller dc on chl.data_controller_id = dc.data_controller_id\nleft join ${Database}.live.ref_brand br1 on chl.brand_id = br1.brand_id;\n\n\ninsert into ${Database}.db.sar_hist_comms --sma and nestle comms all go into the same tab in the report\n(\n    supp_urn,\n    urn,\n    name_urn,\n    email,\n    send_date,\n    brand_opted_in_to,\n    campaign_business_unit,\n    campaign_brand,\n    programme_description,\n    campaign_description,\n    promotion_description,\n    cell_description,\n    pack_description,\n    destination,\n    sar_source_date\n)\nselect\n    s.supp_urn,\n    s.urn,\n    s.urn,\n    s.email,\n    ch.communication_date,\n    'SMA',\n    'Nestlé UK Ltd',\n    'SMA',\n    chl.programme_name,\n    cast(chl.campaign_id as varchar)||' '||chl.campaign_name,\n    cast(chl.promotion_id as varchar)||' '||chl.promotion_name,\n    cast(chl.cell_id as varchar)||' '||chl.cell_name,\n    cast(chl.pack_id as varchar)||' '||chl.pack_name,\n    'Adestra/Pragmatica',\n    s.sar_source_date\nfrom ${Database}.temp.build_todays_sars s\ninner join ${Database}.live.sma_comms_hist ch on s.cid = ch.cid\nleft join ${Database}.live.sma_comms_hist_lookup chl on trim(ch.pack_id) = trim(chl.pack_id);\n\n\ndelete\nfrom ${Database}.db.sar_hist_pets\nwhere sar_source_date < current_date - 7;\n\n\ninsert into ${Database}.db.sar_hist_pets\n(\n    supp_urn,\n    name_urn,\n    pet_name,\n    pet_type,\n    pet_age_years,\n    pet_age_months,\n    pet_dob,\n    pet_birth_month,\n    pet_birth_year,\n    pet_age_weeks,\n    pet_indoor_outdoor,\n    pet_size,\n    pet_breed,\n    pet_colour,\n    pet_weight,\n    pet_gender,\n    pet_life_stage,\n    pet_bodyshape,\n    pet_lifestyle,\n    pet_deceased,\n    pet_kennel,\n    source,\n    source_date,\n    sar_source_date\n)\nselect\n    s.supp_urn,\n    p.name_urn,\n    p.pet_name,\n    p.pet_type,\n    p.pet_age_years,\n    p.pet_age_months,\n    p.pet_dob,\n    p.pet_birth_month,\n    p.pet_birth_year,\n    p.pet_age_weeks,\n    p.pet_indoor_outdoor,\n    p.pet_size,\n    p.pet_breed,\n    p.pet_colour,\n    p.pet_weight,\n    p.pet_gender,\n    p.pet_life_stage,\n    p.pet_bodyshape,\n    p.pet_lifestyle,\n    p.pet_deceased,\n    p.pet_kennel,\n    p.source,\n    p.source_date,\n    s.sar_source_date\nfrom ${Database}.temp.build_todays_sars s\ninner join ${Database}.live.xref_name_urn xr on s.cid = xr.cid\ninner join ${Database}.db.pet p on trim(xr.name_urn) = trim(p.name_urn);\n\n\ndelete\nfrom ${Database}.db.sar_hist_children\nwhere sar_source_date < current_date - 7;\n\n\ninsert into ${Database}.db.sar_hist_children\n(\n    supp_urn,\n    urn,\n    name_urn,\n    firstname,\n    lastname,\n    gender,\n    yearofbirth,\n    dateofbirth,\n    create_date,\n    source,\n    source_date,\n    sar_source_date\n)\nselect\n    s.supp_urn,\n    s.urn,\n    name_urn,\n    case when firstname = 'Baby' then '' else firstname end,\n    lastname,\n    gender,\n    left(cast(dob as varchar),4),\n    dob,\n    cast(created_date as date),\n    source,\n    cast(created_date as date),\n    s.sar_source_date\nfrom ${Database}.temp.build_todays_sars s\ninner join ${Database}.live.dependant ch on s.cid = ch.cid;\n\n\n--lookup for SARs to output today\ncreate or replace table ${Database}.jobs.build_sars_lookup\nas\nselect distinct\n    first_value(supp_urn) over(order by sar_source_date) as supp_urn,\n    row_number() over(partition by supp_urn order by 1) as rn --order doesn't matter\nfrom (\n         select distinct\n             supp_urn,\n             sar_source_date\n         from ${Database}.db.sar_hist_contact\n         where processed_date is null\n     ) a;\n\n\n/******************************************************************************************\n                                       FINISH PROC\n******************************************************************************************/\n\nupdate ${Database}.db.build_dates\nset nestle_rollups = CURRENT_TIMESTAMP::timestamp_ntz\nwhere build_flag    = 'C';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '*************************',\n    '*************************',\n    'end of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;  \n  \n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 12 Rollups'\n, \t\t'SCRIPT'\n, \t\t'FINISHED'\n;\n\nalter warehouse set warehouse_size = 'Xsmall';"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"197158":{"id":197158,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-301,"y":-65,"width":32,"height":32,"inputConnectorIDs":[197157],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc12 Rollups"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nProgram           : Nestle Rollups\nAuthor            : Lindsay Timms\nClient Name       : Nestle\nJob Number        : \nStandard Machine  : Snowflake\nAmendment History : v01 - LT 20170207 - Created\n                    ... various undocumented changes\n                    v02 - LW 20210803 brand_preference change (NUK05862 rework)\n\t\t\t\t\tv03 - Shira 20220421 exclude RESP_ADE_RMI from acquistion type base creation as this is not an acquired source (it is a response source)\n\t\t\t\t\tv04 - Shira 20220712 NPP09393 Addition of NPP09393_BT_SS_QUALIFIO_EXIST as a competition entry for purina engagement scoring\n\t\t\t\t\tv05 - Shira 20220725 exclude NPP09393_BT_SS_QUALIFIO_EXIST from acquistion type base creation as this is not an acquired source (it is a feed from existing customers)\n******************************************************************************************/\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 12 Rollups'\n, \t\t'SCRIPT'\n, \t\t'STARTED'\n;\n\n/******************************************************************************************\n                                         ROLLUP\n******************************************************************************************/\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '*************************',\n    '*************************',\n    'start of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;  \n\n\n---------------------\n-- cid base\n\ndrop table if exists ${Database}.temp.build_rollups_cid_base;\n   \nalter warehouse set warehouse_size = 'Large';\n   \nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_base  \nas\nselect \n    cid,\n    max(case when name_urn = latest_name_urn then hid end) as hid,\n    min(bbw_urn) as bbw_urn,\n    max(latest_name_urn) as name_urn,    \n    min(reg_date) as created_date,\n    max(data_date) as updated_date, \n    max(case when name_urn = name_urn_to_mail_ignoring_dp then country_clean end) as country,        \n    min(case when gender = '' then 'X' else gender end) as gender, -- min works assuming 'm','f','x' (gender conflicts are fixed below)\n    max(case when name_urn = name_urn_to_mail_ignoring_dp then postcode end) as postcode,\n    max(case when name_urn = name_urn_to_mail_ignoring_dp then postcode_area_home end) as postcode_area_home,    \n    max(case when name_urn = name_urn_to_mail_ignoring_dp then postcode_district_home end) as postcode_district_home,   \n    max(case when name_urn = name_urn_to_dob then dob end) as dob,\n    --    contactable status     \n    max(mailable_ignoring_dp) as mailable_ignoring_dp,\n    max(emailable_ignoring_dp) as emailable_ignoring_dp,\n    max(phoneable_ignoring_dp) as phoneable_ignoring_dp,\n    max(smsable_ignoring_dp) as smsable_ignoring_dp,    \n    --    which record for that customer is best to contact for each channel   \n    max(name_urn_to_mail_ignoring_dp) as name_urn_to_mail_ignoring_dp,\n    max(name_urn_to_email_ignoring_dp) as name_urn_to_email_ignoring_dp,       \n    max(name_urn_to_phone_ignoring_dp) as name_urn_to_phone_ignoring_dp,   \n    max(name_urn_to_sms_ignoring_dp) as name_urn_to_sms_ignoring_dp\nfrom\n\t(\n\tselect \n\t\tnm.cid\n\t\t,nm.hid\n\t\t,nm.name_urn\n\t\t,nm.bbw_urn\n\t\t,nm.reg_date\n\t\t,nm.data_date\n\t\t,nm.country_clean\n\t\t,nm.gender\n\t\t,nm.postcode\n\t\t,cf.mailable_ignoring_dp\n\t\t,cf.emailable_ignoring_dp\n\t\t,cf.phoneable_ignoring_dp\n\t\t,cf.smsable_ignoring_dp\n\t\t,case\n\t\t\twhen lower(collate(nm.name_urn,'')) not regexp '.*work.*' and upper(nm.postcode) in ('IRELAND','EIRE')                     then 'RO'\n\t\t\twhen lower(collate(nm.name_urn,'')) not regexp '.*work.*' then  case\n\t\t\t\t\t\twhen lower(substring(collate(nm.postcode,''),2,1)) regexp '.*[a-z].*' then left(nm.postcode,2) \n\t\t\t\t\t\telse left(nm.postcode,1) \n\t\t\t\t\tend \n\t\t\telse ''\n\t\tend as postcode_area_home\n\t\t,case\n\t\t\twhen lower(collate(nm.name_urn,'')) not regexp '.*work.*' then case \n\t\t\t\twhen lower(nm.country)='united kingdom' then left(upper(split_part(nm.postcode,' ',1)),10) \n\t\t\t\telse '' \n\t\t\t\tend\n\t\t\telse ''\n\t\tend as postcode_district_home\n\t\t,case \n\t\t\twhen nm.dob = '2001-01-01' then cast(null as date) \n\t\t\twhen nm.dob >= current_date then cast(null as date) \n\t\t\twhen nm.dob <= '1901-01-01' then cast(null as date) \n\t\t\telse nm.dob \n\t\tend as dob\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc, nm.name_urn asc) as Latest_name_urn\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by nm.data_date asc nulls last, nm.reg_date asc nulls last, nm.source_date asc nulls last, nm.bbw_urn asc, nm.name_urn asc) as Earliest_name_urn\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by case when nm.dob is not null then 1 else 0 end desc nulls last, nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc,nm.name_urn asc) as name_urn_to_dob\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by cf.mailable_ignoring_dp desc nulls last, nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc,nm.name_urn asc) as name_urn_to_mail_ignoring_dp\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by cf.emailable_ignoring_dp desc nulls last, nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc,nm.name_urn asc) as name_urn_to_email_ignoring_dp\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by cf.phoneable_ignoring_dp desc nulls last, nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc,nm.name_urn asc) as name_urn_to_phone_ignoring_dp\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by cf.smsable_ignoring_dp desc nulls last, nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc,nm.name_urn asc) as name_urn_to_sms_ignoring_dp\n\tfrom ${Database}.live.names nm \n\tinner join ${Database}.temp.build_names_contact_flags cf on nm.name_urn = cf.name_urn\n\t) t\ngroup by 1\n;\n\nalter warehouse set warehouse_size = 'Xsmall';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_base',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_base;   \n\n---------------------\n--  gender fix\n\ndrop table if exists ${Database}.temp.build_rollups_cid_gender_fix;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_gender_fix \nas\nselect   \n    cid,\n    max(case when lower(gender) = 'm' then 1 else 0 end) as male,\n    max(case when lower(gender) = 'f' then 1 else 0 end) as female\nfrom ${Database}.live.names\ngroup by cid\nhaving  max(case when lower(gender) = 'm' then 1 else 0 end) = 1\n    and max(case when lower(gender) = 'f' then 1 else 0 end) = 1;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_gender_fix',\n    'fixed gender',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_gender_fix;\n\n---------------------\n--cid pets\n\n--Create list of \"DECEASED\" names\ndrop table if exists ${Database}.temp.deceased_name;\nCREATE OR REPLACE TABLE ${Database}.temp.deceased_name as\nselect \n    distinct trim(pet_name) as pet_name\nfrom ${Database}.db.pet\nwhere lower(trim(pet_name)) regexp '(.*)(dcsd|decd|deceased|r\\.i\\.p|dec\\.)(.*)'\nor (lower(trim(pet_name)) regexp '.*died.*' and lower(trim(pet_name)) not regexp '(.*)(diedre|diedu|ndied)(.*)')\nor (lower(trim(pet_name)) regexp '.*rip.*' and lower(trim(pet_name)) not regexp '(.*)(ripl|ripe|strip|ripp|trip|crip|rips|grip|ripu|ript|frip|ripo|ripa|prip|riph|ripk)(.*)' and lower(trim(pet_name)) not in ('rip','little rip'))\nor (lower(trim(pet_name)) regexp '.*dead.*' and lower(trim(pet_name)) not regexp '(.*)(deads|dead p|deadr|deadl|deadm|p dead)(.*)')\n;\n\n-- Create list of all pet names for cleaning\ndrop table if exists ${Database}.temp.pet_name_lookup_1;\nCREATE OR REPLACE TABLE ${Database}.temp.pet_name_lookup_1 as\nselect \n    distinct upper(trim(pet_name)) as pet_name\nfrom ${Database}.db.pet\n;\n\n--Split names to try and get multiple valid names\ndrop table if exists ${Database}.temp.pet_names_split;\nCREATE OR REPLACE TABLE ${Database}.temp.pet_names_split as\nselect \n        pet_name\n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 1) as pet_name_1   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 2) as pet_name_2   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 3) as pet_name_3   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 4) as pet_name_4   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 5) as pet_name_5   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 6) as pet_name_6   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 7) as pet_name_7   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 8) as pet_name_8   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 9) as pet_name_9\n    from ${Database}.temp.pet_name_lookup_1\n    ;\n    \ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.pet_names_split',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.pet_names_split;\n\ndrop table if exists ${Database}.temp.pet_name_lookup_1;\n\n--Create thin table for mapping pet names to all cleaned pet names\ndrop table if exists ${Database}.temp.all_pet_names_1;\nCREATE OR REPLACE TABLE ${Database}.temp.all_pet_names_1 as   \n--REMOVE UNWANTED CHARACTERS\nselect distinct\n    split.pet_name\n    ,trim(initcap(translate(upper(regexp_replace(split.pet_name_split,'[\\x00-\\x1F|\\x7F]','')), 'ÀÁÂÃÄÅÇÐÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜÝŸŽL©¶³¤¢§º¼½¦®ª«¡¨¯¹»›‰¾†¬±˜~\\|`!\"£$%^*_-=:;@~#<>?', 'aaaaaacdeeeeiiiinoooooosuuuuyyzl'))) as pet_name_split\nfrom\n    (\n    select pet_name, initcap(replace(replace(replace(trim(pet_name_1),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_1 > ''\n    union all   \n    select pet_name, initcap(replace(replace(replace(trim(pet_name_2),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_2 > ''\n    union all  \n    select pet_name, initcap(replace(replace(replace(trim(pet_name_3),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_3 > '' \n    union all\n    select pet_name, initcap(replace(replace(replace(trim(pet_name_4),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_4 > '' \n    union all  \n    select pet_name, initcap(replace(replace(replace(trim(pet_name_5),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_5 > '' \n    union all\n    select pet_name, initcap(replace(replace(replace(trim(pet_name_6),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_6 > '' \n    union all  \n    select pet_name, initcap(replace(replace(replace(trim(pet_name_7),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_7 > '' \n    union all\n    select pet_name, initcap(replace(replace(replace(trim(pet_name_8),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_8 > '' \n    union all  \n    select pet_name, initcap(replace(replace(replace(trim(pet_name_9),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_9 > '' \n    ) split\nwhere trim(initcap(translate(upper(regexp_replace(split.pet_name_split,'[\\x00-\\x1F|\\x7F]','')), 'ÀÁÂÃÄÅÇÐÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜÝŸŽL©¶³¤¢§º¼½¦®ª«¡¨¯¹»›‰¾†¬±˜~\\|`!\"£$%^*_-=:;@~#<>?', 'aaaaaacdeeeeiiiinoooooosuuuuyyzl'))) > ''\n;\n\ndrop table if exists ${Database}.temp.pet_name_split;\n\n--Remove everything brackets\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'('||tbw.db.suckchars(pet_name_split,'(',')')||')','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'('||tbw.db.suckchars(pet_name_split,'(',')')||')','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'('||tbw.db.suckchars(pet_name_split,'(',')')||')','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'('||tbw.db.suckchars(pet_name_split,'(',')')||')','');\n\n--Remove everything in square brackets\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'['||tbw.db.suckchars(pet_name_split,'[',']')||']','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'['||tbw.db.suckchars(pet_name_split,'[',']')||']','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'['||tbw.db.suckchars(pet_name_split,'[',']')||']','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'['||tbw.db.suckchars(pet_name_split,'[',']')||']','');\n\n--Remove everything in curly brackets\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'{'||tbw.db.suckchars(pet_name_split,'{','}')||'}','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'{'||tbw.db.suckchars(pet_name_split,'{','}')||'}','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'{'||tbw.db.suckchars(pet_name_split,'{','}')||'}','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'{'||tbw.db.suckchars(pet_name_split,'{','}')||'}','');\n\n--Remove everything following unclosed brackets\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,substr(pet_name_split,CHARINDEX('(',pet_name_split,-1)),'')\nwhere CHARINDEX('(',pet_name_split,-1) > CHARINDEX(')',pet_name_split,-1)\n;\n\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,substr(pet_name_split,CHARINDEX('[',pet_name_split,-1)),'')\nwhere CHARINDEX('[',pet_name_split,-1) > CHARINDEX(']',pet_name_split,-1)\n;\n\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,substr(pet_name_split,CHARINDEX('{',pet_name_split,-1)),'')\nwhere CHARINDEX('{',pet_name_split,-1) > CHARINDEX('}',pet_name_split,-1)\n;\n\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = trim(right(pet_name_split,length(pet_name_split) - 1))\nwhere left(pet_name_split,1) = '.'\n;\n\n--Create cleaned pet name lookup\ndrop table if exists ${Database}.temp.all_pet_names;\nCREATE OR REPLACE TABLE ${Database}.temp.all_pet_names as\nselect \n    pet_name\n    ,case \n        when left(pet_name_split,1) = '-' then trim(replace(pet_name_split,'-','')) \n        else trim(pet_name_split) \n    end as pet_name_split\nfrom ${Database}.temp.all_pet_names_1\n;\n\ndrop table if exists ${Database}.temp.all_pet_names_1;\n\n--Create lookup table with flags for reference\ndrop table if exists ${Database}.live.pet_name_lookup;\nCREATE OR REPLACE TABLE ${Database}.live.pet_name_lookup as\nwith flags \nas\n(\n    select \n        pet_name\n        ,case\n             when left(upper(pet_name_split),4) = 'AGE ' then ''\n             when charindex(' AGE ',upper(pet_name_split)) > 1 then left(pet_name_split,charindex(' AGE ',upper(pet_name_split)) - 1)\n             else pet_name_split\n         end as pet_name_split\n        ,case \n            when  replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') in ('gook','spick','spik','prat','stupid')\n                 or       lower(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'CANAL','')) regexp '.*anal.*'           and lower(pet_name_split) not in ('analoui','analts','analuwa','aspanall','banal','branall','bwanali','campanale','canal','canale','canalella','canale-parola','canales','canali','canals','chanal','courbanally','cuanalo','danaldson','ganalon','gnanalingam','gnanalingham','hajyzamanali','hassanali','hassanally','janal','janali','kanal','kanala','kanalas','kanalos','kanalosova','kankanala','khanal','macanally','manalac','manalan','manalang','manalansan','manalastas','manalaysay','manaley','manalili','manally','manalo','manaloto','mcanallen','mcanally','mcdanald','mcdoanald','panal','panaligan','rabanal','rajanala','ramjanali','ramjanally','ramzanali','ranaldi','ranaldo','ranall','ranalli','ranallo','roshanali','sanalitro')\n                 or       replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'URANUS','') in ('ANUS','SMELLMYANUS','HUGHJANUS')           --and lower(pet_name_split) not in ('anush','anusha','anusic','anusiewicz','anusionwu','anuszkiewicz','banushi','banuso','bhanushali','blanusa','deanus','emanus','emmanus','ganuszko','hanus','hanusch','hanusiak','hanusova','hanuszewicz','hermanus','iloanusi','iwanuschak','jaanus','janus','janusaitis','janusas','janusauskaite','janusauskas','janusauskiene','janusevicius','januska','januskaite','januskeviciene','januskevicius','januskeviciute','janusonis','janusz','januszczak','januszczyk','januszek','januszewska','januszewski','januszkiewicz','januszko','mac manus','macmanus','mamanus','manus','manuschka','manuszewski','mc manus','mchanus','mcmanus','mcnanus','ndanusa','ohanusi','ranus','romanus','sanusi','silvanus','stanuszek','tanushi','zanussi')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*arse.*'           and lower(pet_name_split) not in ('arseen','arsenault','arsene','arseneault','arsenio','arsenis','arseniuk','banarse','barseghian','barsellotti','barsey','carse','carsell','carsen','carser','carsewell','carsey','darsey','farser','garsed','gerard-pearse','harse','harsent','hearse','hearsey','karsenbarg','karsera','karseras','kearse','kearsey','larsen','lund-larsen','marse','marseden','marseglia','marseille','marseilles','marsek','marsel','marsell','marsella','marsello','marsen','marsenic','marsey','narse','parse','parsell','parselle','parsells','parsely','parsens','parsey','pearse','pearsey','posarsek','sarsero','scarse','scarsebrook','scarsella','summarsell','swearse','tarsey','tearse')\n            --     or       replace(replace(replace(replace(collate(pet_name_split,''),'''',''),' ',''),'-',''),'&','') regexp 'ass'            and lower(pet_name_split) not in ('abass','abassah','abassi','abbass','abbassi','abbassian','abbassy','abdelmassih','abecassis','abu hassan','abuhassan','admassu','afrassiabi','agass','agassiz','aghassi','aghdassi','akass','akhrass','al hassan','alassad','al-assadi','alassaf','albassam','al-bassam','aldabass','alhassan','al-hassan','alhassani','al-hassani','alhasso','al-hasso','alihassan','ali-hassan','aljassar','alkass','alkassim','allass','allassani','allpass','almassi','alnassar','alnasser','al-nasser','alqassab','al-qassab','alqassimi','altass','altwasser','al-yassin','amass','amasse','amassoul','amirghassemi','anastassi','anastassiades','anastassiou','andrassy','andreassen','andreasson','appassamy','asparassa','assa','assaad','assab','assad','assadi','assadian','assadourian','assadullah','assaed','assael','assaf','assah','assakarah','assal','assali','assall','assalone','assam','assamoi','assamoua','assan','assanah','assanand','assani','assante','assar','assareh','assari','assaritti','assas','assassa','assassi','assayag','assaye','asscher','assefa','assefaw','assefuah','asseily','asselin','assell','assem','assemakis','assemian','assen','assender','assenheim','assenjee','assenso','assenti','asser','asserati','assersohn','asset','asseter','assey','assheton','assheton-smith','assi','assia','assiamah','assibey','assid','assif','assifuah','assig','assili','assim','assimakopoulos','assin','assinder','assing','assini','assiotes','assirati','assiratti','assis','assiter','assitt','asslanian','assmann','asso','associates','assock','assoku','assomull','asson','assor','assou','assouad','assoufi','assoul','assouline','assour','assra','assrafally','assucena','assumpcao','assuncao','assur','atanassov','atanassova','atassi','athanassiou','athanassopoulos','ayadassen','ayassamy','babassana','balassa','baldassari','baldassarra','baldassarre','baldassarri','barass','barkass','barlass','barrass','barrasso','bass','bassa','bassadone','bassage','bassah','bassaid','bassakaropoulos','bassal','bassalian','bassam','bassan','bassani','bassano','bassant','bassaragh','bassas','bassatt','basse','bassell','bassen','bassendale','bassendine','bassenger','bassent','basser','basset','bassett','bassett-cross','bassett-jones','bassett-smith','bassettt','bassey','bassford','bassham','bassi','bassie','bassier','bassil','bassilious','bassill','bassily','bassin','bassindale','bassinder','bassingdale','bassinger','bassingham','bassingthwaighte','bassingthwaite','bassington','bassiony','bassiouni','bassir','bassiri','bassit','bassitt','bassman','bassnett','basso','bassoli','bassom','basson','bassot','bassou','bassous','bassr','bassra','bassral','basstoe','bassue','bass-woodcock','bassy','baylass','bedassie','beedassee','beedassy','belassie','bellass','benassi','benhassine','benriassa','blass','blasse','blennerhasset','blennerhassett','bonass','bonassera','bordass','boumerdassi','bourassa','bownass','brass','brassart','brasse','brasseaux','brassel','brassell','brasser','brassett','brasseur','brassey','brassfield','brassil','brassill','brassington','brassinton','brassley','buglass','bullass','bumpass','burdass','burgass','burglass','byass','cabassi','cafasso','calamassi','camrass','canassa','capasso','carass','carassale','carasso','carcass','carmassi','casamassa','cass','cassa','cassady','cassagne','cassam','cassama','cassambai','cassamo','cassamobai','cassan','cassandra','cassandro','cassanell','cassani','cassano','cassanova','cassap','cassapi','cassar','cassaretto','cassata','casse','cassedy','cassee','cassel','casselden','casseldine','cassell','cassella','casselle','casselles','cassells','casselman','cassels','casselton','cassely','cassem','cassemis','cassen','casser','cassera','cassere','casserley','casserly','cassese','cassettare','cassettari','cassey','cassford','cassi','cassia','cassiano','cassiday','cassiddy','cassidey','cassidi','cassidy','cassie','cassiey','cassillis','cassily','cassim','cassimatis','cassin','cassinelli','cassing','cassingena','cassingham','cassini','cassinos','cassis','cassisa','cassisi','cassisy','cassity','cassius','cassles','cassley','cassling','cassman','cassom','cassomini','casson','cassone','cassoni','casson-smith','cassop','casssidy','casstles','cassule','casswell','cassy','chandradass','chassagnette','chassar','chasseaud','chassebi','chassels','chasser','chassin','chavasse','cherkassky','chevassut','chiassaro','chiasson','christtmass','claassen','claassens','class','classen','classens','classey','classic','classick','classon','colliass','compass','corlass','corrass','cortopassi','crass','crasswell','crassweller','creasser','croudass','crudass','currass','dalmasso','dass','dassa','dassama','dassanaike','dassanayake','dassani','dassaur','dasseville','dassler','dasso','dasson','dassonville','dassow','dassu','dassut','dassy','d''brass','de assis','de grasse','de pass','degrasse','degrassi','del basso','depass','depasse','devassy','devassykutty','diarrassouba','diassona','dilasser','djelassi','d''lasselle','dos passos','douglass','dowglass','dracass','du casse','ducasse','dugasse','duglass','dundass','eassie','eassom','easson','el fassi','el hassan','el-assaad','elassal','elfassi','elfassy','elhassan','el-hassan','elhassani','eliassen','eliasson','el-kassir','elmhassani','elyassi','espinasse','faassen','fairbass','fairbrass','falwasser','fass','fassam','fassan','fassbender','fasseau','fassenfeld','fassenfelt','fasser','fassett','fassihi','fassinger','fassio','fassioms','fassis','fassler','fassnidge','fassom','fassoms','fasson','fassum','fassy','fewlass','fieldgrass','finglass','fracassi','fracasso','frasson','frassoni','furnass','gabbitass','gaddass','galassi','galasso','gass','gassama','gassan','gassar','gasse','gasser','gassick','gasside','gassis','gassman','gassmann','gassner','gasson','gassor','gasston','gassy','gebreselassie','gebreslassie','ghassan','ghassemi','ghassemian','ghiassi','gilgrass','gillgrass','glass','glassar','glassberg','glassborow','glassbrook','glassby','glassco','glasscock','glasscoe','glasscoo','glasse','glassell','glassenbury','glasser','glassett','glassey','glassfield','glassford','glassgow','glassington','glassman','glassock','glasson','glassonbury','glasspell','glasspole','glasspool','glasspoole','glasstone','glassup','glassup-smith','glasswell','goldwasser','goodlass','grass','grassa','grassam','grassby','grasse','grasset','grassham','grassi','grassick','grassie','grassing','grassington','grassini','grasske','grasso','grassom','grasson','grassroots','greenglass','greengrass','grossnass','habassi','habteselassie','hadassi','haileselassie','hajivassiliou','halpass','hass','hassa','hassaan','hassaballa','hassabu','hassack','hassad','hassain','hassaine','hassal','hassall','hassalls','hassam','hassan','hassan ali','hassanali','hassan-ali','hassanally','hassane','hassanein','hassani','hassania','hassanian','hassanien','hassanin','hassaniyeh','hassanjee','hassanpour','hassany','hassanyeh','hassanzada','hassanzadeh','hassard','hassay','hassbani','hasse','hassea','hassein','hassel','hasselbach','hasselby','hasselder','hasseldine','hasseler','hasselgren','hassell','hassells','hasselman','hasselmann','hasselt','hassen','hassent','hasser','hasset','hassett','hassey','hassi','hassiakos','hassian','hassib','hassid','hassie','hassim','hassin','hassine','hassing','hassini','hassion','hassiotis','hasslacher','hassle','hassler','hasslett','hassman','hassn','hasso','hassock','hasson','hassoon','hassoun','hassouna','hassouni','hassy','hawkings-byass','hochstrasser','hoodlass','hudlass','hudlass-galley','hvass','ingrassia','jackson-bass','jamnadass','jarass','jass','jassad','jassal','jassam','jassan','jassar','jassat','jasse','jasseh','jassel','jassell','jasser','jassey','jassi','jassie','jassim','jassin','jasso','jasson','jassop','jassy','jelassi','jhass','jonassen','jonasson','kalbassi','kaltwasser','karahassan','karassek','karassellos','karbassi','karrass','kass','kassa','kassab','kassabian','kassah','kassahun','kassai','kassam','kassama','kassamali','kassan','kassanga','kassanis','kassapian','kassar','kassardjian','kassas','kassay','kassaye','kasse','kasseean','kassel','kassell','kasselman','kassem','kassen','kasser','kassey','kassi','kassidy','kassie','kassier','kassim','kassimatis','kassimi','kassin','kassir','kassiram','kassiras','kassiri','kassis','kassler','kassman','kassner','kasson','kassongo','kassouf','kassous','kassrai','kasstan','kassulke','kassy','khamassi','khass','khassal','klaassen','klass','klassa','klassen','klassnik','klasson','knass','kouassi','kounasso','koylass','krass','krasser','krassnitzer','krassos','krassowska','krassowski','kutassy','labassi','labassiere','lachasseigne','larrassey','lass','lassa','lassak','lassalle','lassam','lassan','lasse','lassen','lasser','lasserre','lasserson','lasseter','lassetter','lassey','lassiter','lasslett','lassman','lassmans','lassnig','lasso','lasson','lassoued','lassu','lassus','lawlass','laxton-bass','le gassick','le gassicke','lebrasse','lecrass','legassick','lemass','lemasson','levasseur','lhassani','liassi','liassides','lomass','losasso','lovelass','lowmass','lucass','lucassi','lynass','maass','maassen','macassey','magassa','mallpass','malpass','manasse','manasseh','manassian','manassie','mandon-gassman','mass','massa','massaccesi','massad','massah','massaio','massalay','massall','massally','massam','massamba','massan','massanet','massaquoi','massar','massara','massarano','massard','massarella','massarelli','massari','massaro','massart','massawe','massay','massbery','masscy','masse','massee','massei','massel','masselis','massell','massen','massender','massengo','massenhove','masser','masserella','masseri','masseroli','masset','massett','massetti','massey','massey-chase','masshar','masshedar','massheder','massi','massia','massiah','massias','massicks','massicott','massicotte','massidda','massie','massie-taylor','massih','massimi','massimiliano','massimino','massimo','massin','massing','massingale','massingberd','massingberd-mundy','massingham','massinghan','massini','massink','massion','massironi','massiter','massmann','masso','massocchi','massod','massom','masson','massone','massood','massop','massos','massot','massotti','massoud','massoudi','massoudinia','massouh','massoumi','massoumian','massoura','massouras','massow','massri','masssey','massudi','massum','massumi','massy','massy-collier','massyn','matassa','matassi','matthiasson','mattrass','mayassi','mcassey','mcglasson','mcnasser','menassa','middlemass','minassian','moass','mobasser','mobasseri','modasser','mohades-kassai','montasser','morhtassi','motavassel','mouqtassid','mouyiassi','movassagh','movassaghi','mudassar','mudasser','mudassir','mullasseril','munasser','muntasser','nambi-lasseko','nass','nassa','nassab','nassali','nassan','nassanga','nassar','nassari','nassaris','nassau','nasse','nasseem','nassef','nassehi','nassem','nasser','nasseraldeen','nassereddine','nasseri','nassery','nasseur','nassey','nassi','nassib','nassie','nassif','nassim','nassir','nassiri','nassir-pour','nassiry','nasskau','nasso','nassolo','nasson','nassor','nassour','nassr','nassralla','nassrat','nassuna','nassuphis','nassur','natrass','nattrass','negassi','neiass','nekrassov','ngassa','nicholass','nicklasson','niklasson','nyass','nyassi','onassis','osei-assibey','ouassine','overmass','pallagrass','pallass','papavassiliou','pass','passa','passafonti','passalacqua','passam','passan','passano','passant','passantino','passap','passaportis','passard','passarelli','passarello','passariello','passaris','passaro','passas','passat','passaway','passby','passchier','passco','passe','passee','passell','passells','passenger','passer','passera','passerello','passeri','passerini','passes','passet','passett','passey','passfield','passhore','passi','passiatore','passingham','passinghan','passley','passman','passmoor','passmoore','passmore','passon','passoni','passons','passos','passow','passwala','passway','passy','pawass','payassis','pendegrass','petrassi','petrasso','peyrasse','picasso','pintassilgo','pitassi','plass','plassard','plasse','plassing','pleass','polglass','poonwassie','portass','pragassen','prassas','prassede','prasser','purgass','qassem','qassemi','qassim','qassin','quassim','quatermass','rabassa','rabasse','ramadass','ramasso','ramdass','rashbass','rass','rassa','rassad','rassam','rassan','rassekh','rassel','rassell','rasser','rassi','rassid','rassim','rassiter','rasson','rassool','rassouli','rassul','regassa','rohrbasser','rouass','rungassamy','salmassian','sanassee','sanassy','sancassani','sant-cassia','sass','sassa','sassano','sassarini','sasse','sassella','sassen','sasserath','sassi','sassienie','sasso','sasson','sassone','sassone-corsi','sassons','sassoon','sassu','schmassmann','scott-masson','seeneevassen','selassie','sepassi','shallcrass','shanassy','shankardass','shaughnassy','shere-massey','simonassi','slassor','smargiassi','snodgrass','spassov','spassova','stallabrass','stallebrass','stallibrass','stallybrass','stass','stassen','stassi','stassiouk','strass','strassacappa','strassen','strasser','strassheim','strasshine','sunassee','sunnassee','syass','tabassam','tabassum','tabassun','tahmassebi','tamassy','targrass','tass','tassa','tassabehji','tassadaq','tassaker','tassan','tassano','tassara','tassart','tassawar','tasse','tassel','tassell','tasselli','tassi','tassie','tassier','tassiker','tassinari','tasso','tassone','tassou','tavassoli','tesfaselassie','thassim','thomass','thomassen','thomasset','thomassin','thomasson','thoulass','tirabasso','titmass','tobiassen','tomass','tomassen','tomassi','tomassini','tomasso','tomasson','toplass','trapasso','travasso','travassos','treppass','trippass','trivass','ul hassan','ulhassan','ul-hassan','valassis','van assen','van hasselt','vanassche','vangasse','vass','vassa','vassal','vassall','vassalli','vassallo','vassalos','vassan','vassantlal','vassar','vassaramo','vassay','vasse','vasseghi','vassel','vasselin','vassell','vassello','vassen','vasser','vasseur','vassey','vassi','vassib','vassie','vassil','vassila','vassilakis','vassilas','vassileiou','vassilev','vassileva','vassili','vassiliades','vassiliadis','vassiliev','vassilieva','vassiliou','vassilis','vassiljev','vassiljeva','vassilopoulos','vassiloulis','vasso','vasson','vassoodaven','vassos','vassou','vettasseri','vigrass','vincatassin','vlassis','vlassov','wanlass','wass','wassal','wassall','wassan','wasse','wassef','wassel','wassell','wassem','wassenaar','wasser','wasserberg','wasserman','wassermann','wasserstein','wassi','wassie','wassiee','wassif','wassili','wassim','wassing','wassink','wassmer','wasson','wasswa','wattass','willgrass','windass','windgassen','windrass','wiseglass','woldeselassie','woodmass','woolass','wrong assistant','xassan','yass','yassa','yassar','yasseen','yassen','yasser','yassi','yassien','yassim','yassin','yassine','yassini','yassir','yassrebi','zachariassen')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') in ('ass','asshole')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*ballsack.*'       and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bastard.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bitch.*'          and lower(pet_name_split) not in ('babitcheva','bitcha','bitchakdjian','bitcham','bitchanka','bitchard','bitchass','bitchburn','bitchel','bitchell','bitchen','bitchener','bitchenkova','bitcheno','bitchenor','bitcher','bitcherla','bitchers','bitchfield','bitchford','dembitchi','subitcha')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*biatch.*'         and lower(pet_name_split) not in ('biatchoe','biatchon','mbiatchou','mbiatchou-nya')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bloody.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*blowjob.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bollock.*'        and lower(lower(pet_name_split)) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bollok.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bollox.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*boner.*'          and lower(pet_name_split) not in ('amboner','bonera','bonera-callan','boner-cambell','bonere','boneret','bonerhygena','boneri','bonerjea','bonerpairet','bonerr','carboner','carbonera','carboneras','carbonere','carboneri','carbonero','eboner','kabonero','ortiz carboneres','osboner','rabonerabone','rathboner','rathboners')\n                 or       lower(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'BOOBEAR',''),'BOOBOO','')) regexp '.*boob.*'           and lower(pet_name_split) not in ('aboobacker','aboobakar','aboobaker','aboobucker','boobbyer','boobis','mahboob','mahboobani','mehboob','mohoboob')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bugger.*'         and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'BUMBLE',''),'BINGBUM','')) regexp '.*bum.*'            and lower(pet_name_split) not in ('album','babumba','bumatay','bumba','bumbra','bumble','bumby','bumford','bumfrey','bumpas','bumpstead','bumpsteed','bumpus','bumrah','mbumba')\n                 or       lower(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'BUTTON',''),'BUTTER','')) regexp '.*butt.*'           and lower(pet_name_split) not in ('albutt','allbutt','archbutt','baybutt','bhabutta','butt','buttaci','buttall','buttar','buttarazzi','buttarelli','buttars','buttel','buttell','butten','buttenshaw','butter','buttercase','butterell','butterfeild','butterfield','butterfiled','butterfill','butterfly','butterick','butterill','butteris','butteriss','butterley','butterly','butters','buttersworth','butterton','butterwick','butterwith','butterwood','butterworth','butterwoth','buttery','buttfield','butti','buttice','buttifant','buttifint','buttigieg','buttimer','buttimore','buttiner','butting','buttinger','buttivant','buttle','buttleman','buttler','buttley','buttling','buttner','buttolph','button','buttons','button-stephens','buttress','buttrey','buttrick','buttrill','buttriss','buttrum','butts','buttwell','buttworth','callbutt','carbutt','ebbutt','gabbutt','garbutt','gorbutt','gurbutt','harbutt','holbutt','hurlbutt','lebutt','mabbutt','ollenbuttel','parbutt','sarbutt','sarbutts','sbuttoni','sobutta','sowerbutts','stuart-buttle','talbutt','tarbutt','tebbutt','tebutt','tibbutt','tobutt','turbutt','wallbutton','warbutton')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*clitoris.*'       and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'PEACOCK',''),'COCKAPOO',''),'HITCHCOCK',''),'COCKER','')) regexp '.*cock.*'           and lower(pet_name_split) not in ('cockram','adcock','adcocks','addcock','alcock','alecock','allcock','allicock','ancock','aucock','awcock','aycock','babcock','barcock','batcock','battcock','baycock','beacock','beercock','bilcock','bocock','boocock','bowcock','bulcock','bullcock','cockain','cockar','cockarill','cockayne','cockbain','cockbaine','cockbill','cockborn','cockburn','cockcroft','cocke','cockel','cockell','cocken','cocker','cockerall','cockeram','cockeran','cockerell','cockerham','cockerhan','cockerhill','cockeril','cockerill','cockerline','cockersell','cockersole','cockerton','cockett','cockette','cockfield','cockford','cockhill','cockill','cockin','cockland','cockle','cocklin','cockling','cockran','cockrane','cockrel','cockrell','cockrem','cockren','cockrill','cockrin','cockroft','cocksedge','cocksey','cockshull','cockshutt','cockson','cocksworth','cockton','cockwell','cockwill','crocock','dancock','dancocks','deacock','decock','didcock','dilcock','eacock','ecock','edgecock','elcock','elcocks','ellcock','ellicock','filcock','grewcock','grocock','groocock','growcock','hacock','hadcock','haincock','hallcock','hamcock','hancock','hancocke','hancocks','handcock','hankcock','hanncock','harcock','hawcock','haycock','haycocks','heacock','heathcock','hedgcock','hedgecock','heircock','hencock','hercock','heycock','hichcock','highcock','hillcock','hircock','hiscock','hiscocks','hitchcock','hitchcocks','hitcock','hithcock','hudson-peacock','jeacock','jeacocke','jeycock','johncock','lacock','lawcock','laycock','leacock','lewcock','leycock','locock','lowcock','luccock','luckcock','lucock','lurcock','maycock','meacock','milcock','miscock','mocock','moorcock','morecock','mulcock','mycock','nancock','ocock','paecock','peacock','peacocke','peacocks','peakcock','pecock','peecock','philcock','pidcock','pitcock','pocock','purcocks','pycock','radford-hancock','raincock','sandercock','saundercock','shellcock','shilcock','shillcock','silcock','silcocks','sillcock','simcock','simcocks','sincock','slocock','slucock','symcock','tancock','tilcock','tillcock','tocock','trebilcock','trebillcock','twocock','veacock','wadcock','walcock','wallcock','westcock','whadcock','wilcock','wilcocks','wilcockson','willcock','willcocks','willcockson','woocock','woodcock','wookcock','woolcock','woolcocks')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*coon.*'           and lower(pet_name_split) not in ('coonagh','coonan','coonar','coonber','coonbes','coonbs','coone','cooner','coonerty','coones','cooney','coong','coonick','coonie','coonor','ocooner','ocoonor','scoon','scoones','scoons')\n                 or       lower(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'SCRAP','')) regexp '.*crap.*'           and lower(pet_name_split) not in ('scrap')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*cunt.*'           and lower(pet_name_split) not in ('scunthorpe')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*damn.*'           and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'DICKSON',''),'DICKENS','')) regexp '.*dick.*'           and lower(pet_name_split) not in ('benedick','benedickter','biddick','boldick','braddick','bradick','briddick','brodick','bundick','burdick','caddick','chiddick','chiddicks','cobbledick','condick','craddick','cradick','cundick','dickason','dickaty','dicke','dickel','dicken','dickens','dickenson','dicker','dickers','dickerson','dickes','dickeson','dicketts','dickey','dickham','dickie','dickin','dickings','dickingson','dickins','dickinson','dickinson-smith','dickison','dickle','dickon','dickons','dickonson','dickov','dicksee','dickson','dicksons','dicky','fendick','forsdick','forsdicke','fosdick','fredick','frosdick','grimsdick','haddick','haedicke','hedicker','hildick','hildick-smith','kaddick','kendick','landick','ludick','luedicke','maddick','maddicks','mccordick','mcdicken','mcdickson','meddick','meddicks','paddick','pundick','reddick','rhodick','riddick','riddicks','roddick','rodick','ruddick','rudick','sadick','sandick','shaddick','shadick','siddick','suddick','thorndick','vodicka','waddicker','weadick','wedick','widdick','widdicks','zserdicky')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*dildo.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&','') = 'DYKE'           --and lower(pet_name_split) not in ('dyker','fendyke','forsdyke','thorndyke','van dyke','vandyke')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*erect.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&','') in ('FAG','FAGGOT','FAGOT','FAGGOTS','FAGGOTCAT')            --and lower(pet_name_split) not in ('alfageme','fagade','fagaly','fagan','fagandini','fagbemi','fagbenle','fagbenro','fagbohun','fagbohungbe','fagbola','fagboyegun','fagbure','fage','fagelman','fagelson','fagen','fagence','fagents','fager','fagerlund','fages','faggetter','faggin','faghany','faghihi','faghirzadeh','faghy','fagin','fagioli','fagnani','fagon','fagundes','fagunwa','fagura','graffagnino','mcfagan','tesfagaber','zolfaghari')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*fatass.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*feck.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*fellate.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*fellatio.*'       and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*felching.*'       and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*fuck.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*fudgepack.*'      and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*flange.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*goddamn.*'        and lower(pet_name_split) not in ('')\n            --     --or       replace(replace(replace(replace(pet_name_split,'''',''),' ',''),'-',''),'&','') regexp 'hell'           and lower(pet_name_split) not in ('abethell','archell','bachell','barichello','backshell','batcheller','batchellor','battershell','beachell','bearchell','bechelli','beckhelling','bethell','bexhell','bhella','birchell','bishell','bithell','boshell','boshelle','bowshell','bratchell','buchell','bulheller','burchell','bushell','bythell','cashell','chell','chella','chelladurai','chellam','chellamuthu','chellappah','chellappan','chellar','chelle','chellen','chellew','chelley','chelliah','chellingsworth','chellingworth','chellis','chellum','coshell','critchell','cuthell','dichello','etchell','etchells','ethell','formichella','getchell','ghelle','hanschell','hatchell','hella','hellaby','hellal','hellam','hellan','helland','hellard','hellary','hellas','hellawell','hellberg','helle','hellebrand','hellel','hellen','hellend','hellens','heller','hellerman','hellery','hellett','helleur','hellewell','helley','hellgren','helliar','hellicar','hellier','helliker','hellin','helling','hellinger','hellings','hellingsworth','hellis','hellish','helliwell','hellman','hellmann','hellmers','hellmich','hellmuth','hellon','hellor','hellors','hellowell','hellsten','hellstrom','hellwell','hellwig','hellwing','helly','hellyar','hellyer','hellyn','hellywell','hempshell','henshell','herschell','hitchell','houchell','ithell','kearney-mitchell','kemshell','ketchell','khella','kinchella','kitchell','larochelle','licchelli','llewhellin','llewhellyn','lythell','machell','maitchell','marchell','marshell','matchell','maychell','mcmitchell','mechell','michell','michelle','michelli','mictchell','micthell','mighell','mihell','minchell','minchella','minghella','minshell','mirchell','mitchell','mitchell-davis','mitchell-dawson','mitchelle','mitchell-gears','mitchell-harris','mitchell-innes','mitchelll','mitchellmore','mitchells','mitchell-smith','mitchellson','mithchell','mithell','mittchell','monachello','mtchell','mutchell','neachell','nethell','nichells','nihell','nitchell','ochello','page-mitchell','patchell','peachell','pechell','petchell','phellas','phellps','pitchell','purchell','rachell','rachelle','renshell','richell','rochell','rochelle','rotchell','rothell','satchell','satchelle','schell','schellekens','schellenberg','scheller','senchell','setchell','seychell','shell','shellabear','shellam','shellan','shellard','shellbourne','shellcock','shellcross','shelldon','shelldrake','shellem','shellens','sheller','shelley','shellhorn','shellie','shellien','shelliker','shellim','shelling','shellis','shellito','shellock','shells','shellshear','shellswell','shellton','shellum','shelly','smithells','stitchell','tatchell','tempest-mitchell','thellman','thellmann','thellusson','titchell','tortoishell','trewhella','trushell','twitchell','vachell','vencatachellum','weighell','whell','whellam','whellams','whellan','whellans','wheller','whelligan','whichello','whitchell','witchell','withell','zucchelli')     \n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') = 'hell'       \n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*homo.*'           and lower(pet_name_split) not in ('homoki','homoky','homola','homolka','homoncik','mojakhomo','odhomor','sohomow','thomond','thomopson','thomos','thomoson')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*illegal.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*immigrant.*'      and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*jerk.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*jizz.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*labia.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*lardass.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*lmao.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*lmfao.*'          and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'MUFFIN','')) regexp '.*muff.*'           and lower(pet_name_split) not in ('muffat','muffet','muffett','muffin','muffitt','mufford')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*nigga.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*nigger.*'         and lower(pet_name_split) not in ('')\n            --     or       replace(replace(replace(replace(pet_name_split,'''',''),' ',''),'-',''),'&','') regexp 'nob'            and lower(pet_name_split) not in ('agwunobi','akzo nobel','annobil','anunobi','asinobi','conoboy','czarnobaj','danobrega','de nobrega','de nobriga','denobrega','denobriga','dinobi','dodd-noble','donoban','enobakhare','igbinoba','knobb','knobbs','knobel','knoblauch','knoble','knobloch','nobakht','nobari','nobb','nobble','nobbs','nobe','nobeebaccus','nobeen','nobel','noberts','nobertson','nobes','nobi','nobile','nobin','nobinson','noble','noble-nesbitt','nobles','noblet','noblett','noblin','nobo','noboa','nobody','nobre','nobrega','nobson','nwadinobi','obanobi','onobrauche','pronobis','sinobad','snober','stride-noble','sznober')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') = 'nob'      \n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*penis.*'          and lower(pet_name_split) not in ('penistan','peniston','penistone','')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*piss.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*poof.*'           and lower(pet_name_split) not in ('')\n                 --POOP not in use for pet name swear words\n                 --or       replace(replace(replace(replace(pet_name_split,'''',''),' ',''),'-',''),'&','') regexp 'poop'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*prick.*'          and lower(pet_name_split) not in ('prickett')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*pube.*'           and lower(pet_name_split) not in ('')\n                 --PUFF not in use for pet name swear words\n                 --or       replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'LOVEPUFF',''),'HUFFLEPUFF','') regexp 'puff'           and lower(pet_name_split) not in ('puffer','puffett','puffitt','spuffard')                \n                 or       replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&','') in ('PUSSYFLAP','PUSSYFLAPS','YOURPUSSY','PERVERTEDPUSSYCAT','PUSSYDESTROYER')          --and lower(pet_name_split) not in ('') and pet_name_split not regexp 'pussycat'\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*scrotum.*'        and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'ESSEX',''),'SUSSEX','')) regexp '.*sex.*'            and lower(pet_name_split) not in ('bessex','bissex','essex','essex-crosby','sexby','sexon','sexstone','sexton','sussex','wessex')\n                --SHAG not in use for pet name swear words\n                --or       replace(replace(replace(replace(pet_name_split,'''',''),' ',''),'-',''),'&','') regexp 'shag'           and lower(pet_name_split) not in ('ashagbe','eshag','shagari','shagaya','shaghaghi')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*shit.*'           and lower(pet_name_split) not in ('ashitey','feshitan','kinoshita','mashiter','matsushita','miyashita','morishita','mwashita','oshitola','rakshit','rashit','rushiti','shith','shitta-bey','shittabey','shittu','shitu','yamashita')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*slag.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*slut.*'           and lower(pet_name_split) not in ('sluter')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*smegma.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*spunk.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*smelly.*'         and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'HONEYSUCKLE','')) regexp '.*suck.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*suicide.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*terrorist.*'      and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*testical.*'       and lower(pet_name_split) not in ('')\n            --     or          replace(replace(replace(replace(pet_name_split,'''',''),' ',''),'-',''),'&','') regexp 'tit'            and lower(pet_name_split) not in ('footitt','titcombe','bultitude','daintith','dentith','footit','foottit','futtit','grittith','grittiths','laetitia','le petit','lepetit','le-petit','lostitch','loutit','louttit','mititelu','mutiti','muttitt','otite','otitoju','pentith','petit','petite','petitjean','petitpierre','petitt','pettit','pettite','pettitt','ptitchard','satite','stitch','stitchell','stitcher','stitchman','stitfall','stitkovac','stitou','stitson','stitt','stittle','tita','titan','titchard','titchell','titchen','titchener','titchin','titchiner','titchmarsh','titchner','tite','titera','titerickx','titford','tithecott','tither','titheradge','titheridge','titherington','titherley','titherly','titi','titilayo','titiloye','titjen','title','titler','titley','titlow','titmarsh','titmas','titmass','titmus','titmuss','tito','titorenko','titov','titova','titre','titshall','titt','tittensor','titterington','titterrell','tittershill','titterton','tittle','tittley','titton','tittonis','tituana','titus','titus-glover','titze','whittit')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') = 'tit'            \n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*tosser.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*turd.*'           and lower(pet_name_split) not in ('sturdee','sturdey','sturdgess','sturdivant','sturdy')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*twat.*'           and lower(pet_name_split) not in ('attwater','attwaters','atwater','westwater')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*vagina.*'         and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'TWANKEY','')) regexp '.*wank.*'           and lower(pet_name_split) not in ('mufwankolo','nwankpa','nwankwo','nwankwor','nwankwu','schwank','swankie','wanklyn','wankowicz')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*whore.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bottomlicker.*'   and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*spannerpants.*'   and lower(pet_name_split) not in ('')\n                then 1 else 0\n        end as swear_flag\n        ,case when length(pet_name_split) > 100 then 1 else 0 end as max_length_flag\n        ,case \n            when length(replace(replace(replace(lower(pet_name_split),' ',''),'-',''),'&','')) = 1 then 1 \n            else 0 \n        end as min_length_flag\n        ,case \n            when lower(pet_name_split) not regexp '.*[a-zA-Z].*' or lower(pet_name) not regexp '.*[a-zA-Z].*' then 1 \n            else 0 \n        end no_alphabetic_flag\n        ,case \n            when lower(pet_name_split) regexp '(.*)(no name|unknown|not known|new cat|not named yet|see below|unamed|unnamed|not decided|not yet named|to be named|decided|not chosen)(.*)' then 1 --List of clearly bad names\n            when lower(pet_name_split) regexp '(.*)(sister|white|cat|dog|yes|brother)(.*)' and  pet_name_split regexp '.*\\\\).*' then 1 --List from searching for close brackets left over\n            when pet_name_split regexp '.*[0-9].*' and pet_name_split regexp '.*\\\\).*' then 1 --Identifies names that contain a number and a close bracket\n            when lower(pet_name_split) regexp '(.*)( years old|years old|0atis|0liver|0lly|0pel|0scar|0z|1 max. 2 pippa|1 poppy 2 dottie|1. vasska 2. sherman|10 years|12 cats|14 others|15 boy|1sheba|2 cats  barry|2 cats  demi|2 catsbrahma|2 dogs|2 dogs  coco|2 dogs coco|2 honey|2 kerry|2 s|2 siamese cats jasmin|2 x dogs star|3 cats|3 cats eve|3 cats oldest garfield|3 jack|3 moggie|3 others|3 s|34c25|3d|3hree|4 cats|4 cats bingo|5 cats|5 kittens|6 cats  lucy|7even|8 cats owned|9yrs|''bea''|''bertha simmering light|cant name them yet|cat 1|cat 2|cat 3|cat 4|cat a|cat name|cat1|cat1 tom|cat12|cat13|cat1bentley|cat2|cat3|''cea|''cooper'' magic pulse|do not have one|dog 1|dog 2|dog 3|dog 4|dog 5|dog1|dog11|dog2|dog3|dont have any|dont have names yet|dont have one|don''t know|dont know yet|don''t know yet|''dre|dunno|dunno yet|éva|gaylord|have 5 cats|have 6 cats|have not named them|havent chosen yet|havent named them|havent named yet|i have 11|i have 2 maisie|i have 2 micky|i have 3 cats|i have 3 twinkle|i have 4 cats|i have 5|i have 5 cats|i have 5 cat''s|i have lots|i have six molly|i havent got one|ive got 24 cats|i''ve got 4 cats|ive got 6 mia|just born|just born2|''kc''|no cat|no idea|no kittens|no more|no.1|no.2|no1 no2 no3 no|not given yet|not got adult|not keeping|not named|not named as yet|not named her yet|not picked on yet|not sure|not sure new kitten|not sure yet|not yet|not yet chose one|not yey named|nothing yet|''olly|only 1 dog|out door cat|pup1|pup2|pup3|puppies 10|puppies x 10|puppy 1|puppy 2|puppy 3|puss 1|puss 2|still thinking of name|still to name them|\uD83C\uDF40 clover|used to this)(.*)' \n                      and NOT(lower(pet_name_split) ilike any ('%dunnock%','%snowcat amber%','%kenynten say no more%','%kentixen no more drama%','%worry no more%','%dream no more%')) then 1 --bad names requested by CS to be blanked\n            else 0 end as invalid_name_flag\n        ,case\n            when length(pet_name_split) > 15 and (length(pet_name_split) - length(replace(replace(pet_name_split,' ',''),'-',''))) = 0 then 1\n            when length(split_part(replace(pet_name_split,'-',' '),' ',1)) > 15 then 1\n            when length(split_part(replace(pet_name_split,'-',' '),' ',2)) > 15 then 1\n            when length(split_part(replace(pet_name_split,'-',' '),' ',3)) > 15 then 1\n            when length(split_part(replace(pet_name_split,'-',' '),' ',4)) > 15 then 1\n            when length(split_part(replace(pet_name_split,'-',' '),' ',5)) > 15 then 1\n        else 0 end as long_name_flag\n        ,case when length(pet_name_split) - length(replace(pet_name_split,' ','')) > 3 then 1 else 0 end as multi_word_flag\n    from ${Database}.temp.all_pet_names\n)\nselect  \n    pet_name\n    ,case \n        when swear_flag = 1 or max_length_flag = 1 or min_length_flag = 1 or no_alphabetic_flag = 1 or invalid_name_flag = 1 or long_name_flag = 1 then '' \n        else replace(pet_name_split,')','') \n    end as pet_name_cleaned\n    ,swear_flag\n    ,max_length_flag\n    ,min_length_flag\n    ,no_alphabetic_flag\n    ,invalid_name_flag\n    ,long_name_flag\n    ,multi_word_flag\n    ,cast(0 as tinyint) as deceased_flag\nfrom flags\n;\n\ndrop table if exists ${Database}.temp.all_pet_names;\n\n--Add deceased marker to pet suppression markers\nupdate ${Database}.live.pet_name_lookup\nset deceased_flag = 1\nwhere upper(pet_name) in\n(\nselect upper(pet_name)\nfrom ${Database}.temp.deceased_name\n)\n;\n\n\nalter warehouse set warehouse_size = 'Small';\n\n--Work out suppressions from supps_pet table\ndrop table if exists ${Database}.temp.supps_pets;\ncreate or replace table ${Database}.temp.supps_pets\nas\nselect distinct\n    deceased_urn\nfrom (\n         select distinct\n              upper(x2.name_urn||'|'||trim(sp.pet_name)) as deceased_urn\n         from ${Database}.db.supps_pet sp\n         inner join ${Database}.live.xref_name_urn x1 on lower(x1.email) = lower(trim(sp.email))\n         inner join ${Database}.live.xref_name_urn x2 on x2.cid = x1.cid\n         where trim(sp.email) > ''\n         union all\n         select distinct\n              upper(x2.name_urn||'|'||trim(sp.pet_name)) as deceased_urn\n         from ${Database}.db.supps_pet sp\n         inner join ${Database}.live.xref_name_urn x1 on x1.name_urn = trim(sp.source_urn)\n         inner join ${Database}.live.xref_name_urn x2 on x2.cid = x1.cid\n     ) s;\n\n\n--Create full version of pet information (will be deduped later)\ndrop table if exists ${Database}.temp.cid_pet_temp;\nCREATE OR REPLACE TABLE ${Database}.temp.cid_pet_temp as\nselect\n    cid\n    ,name_urn\n    ,pet_type\n    ,pet_breed\n    ,nvl(pet_gender,'') as pet_gender\n    ,upper(nvl(pet_size,'')) as pet_size\n    ,pet_indoor_outdoor\n    ,pet_colour\n    ,nvl(pet_name_cleaned,'') as pet_name_cleaned\n    ,case\n        when pet_dob is not null then pet_dob --CIAM actual DOB\n        when pet_age_years is not null and pet_age_months is not null then add_months(pet_dob_first_data_date, -((pet_age_years*12)+pet_age_months)) --CIAM pet age years or months\n        when pet_birth_month is not null and pet_birth_year is not null\n            then case\n                     when try_to_date(cast(pet_birth_year as varchar)||'-'||pet_birth_month||'-'||to_char(pet_dob_first_data_date,'DD')) is not null\n                         then cast(cast(pet_birth_year as varchar)||'-'||pet_birth_month||'-'||to_char(pet_dob_first_data_date,'DD') as date)\n                     else last_day(cast(cast(pet_birth_year as varchar)||'-'||pet_birth_month||'-'||'01' as date))\n                 end --Birthday email \n        when pet_age_years is not null and pet_birth_month is not null\n            then case\n                     when try_to_date(cast(cast(to_char(pet_dob_first_data_date,'YYYY') as int) - cast(pet_age_years as int) - case when pet_birth_month_int <= month(pet_dob_first_data_date) then 0 else 1 end as varchar)||'-'||pet_birth_month||'-'||to_char(pet_dob_first_data_date,'DD')) is not null\n                         then cast(cast(cast(to_char(pet_dob_first_data_date,'YYYY') as int) - cast(pet_age_years as int) - case when pet_birth_month_int <= month(pet_dob_first_data_date) then 0 else 1 end as varchar)||'-'||pet_birth_month||'-'||to_char(pet_dob_first_data_date,'DD') as date)\n                     else last_day(cast(cast(cast(to_char(pet_dob_first_data_date,'YYYY') as int) - cast(pet_age_years as int) - case when pet_birth_month_int <= month(pet_dob_first_data_date) then 0 else 1 end as varchar)||'-'||pet_birth_month||'-'||'01' as date))\n                 end --Winalot campaign and eCRM 'sorry' email\n        when pet_age_weeks is not null then (pet_dob_first_data_date - (pet_age_weeks*7)) --Purina GP signup (age given in weeks)\n        when pet_age_months is not null then add_months(pet_dob_first_data_date, -pet_age_months) --Purina GP signup (age given in months)\n        when pet_age_years is not null and pet_age_months is null then to_date(to_char(year(pet_dob_first_data_date)-pet_age_years)||'-01-01','YYYY-MM-DD') --breed ugc have year but no months\n    end as derived_pet_dob\n    ,case\n        when pet_dob is not null then 'Actual pet DOB'\n        when pet_age_years is not null and pet_age_months is not null then 'Pet age years and months'\n        when pet_birth_month is not null and pet_birth_year is not null then 'Pet birth month and year'\n        when pet_age_years is not null and pet_birth_month is not null then 'Pet age years and pet birth month'\n        when pet_age_weeks is not null then 'Pet age weeks'\n        when pet_age_months is not null then 'Pet age months'  \n        when pet_age_years is not null and pet_age_months is null then 'Pet age years only'\n        else 'No DOB details'\n    end as dob_type\n    ,pet_life_stage\n    ,avatarid\n    ,source\n    ,pet_dob_last_data_date\n    ,data_date\nfrom\n    (\n    select distinct\n        cid\n        ,x.name_urn\n        ,case \n        when lower(p.pet_type) regexp '.*cat.*' then 'Cat'\n        when lower(p.pet_type) regexp '.*dog.*' then 'Dog'\n        else initcap(trim(p.pet_type)) end as pet_type\n        ,trim(coalesce(pbc.clean_breed_name,'')) as pet_breed\n        ,trim(pet_gender) as pet_gender\n        ,trim(pet_size) as pet_size\n        ,trim(pet_indoor_outdoor) as pet_indoor_outdoor\n        ,coalesce(trim(cl.purina_colour),trim(p.pet_colour)) as pet_colour\n        ,case when l.multi_word_flag = 1 and left(upper(x.name_urn),6) <> 'REG_KC' then '' else pet_name_cleaned end as pet_name_cleaned\n        ,pet_dob\n        ,lpad(to_char(pet_birth_month),2,'0') as pet_birth_month\n        ,pet_birth_month as pet_birth_month_int\n        ,pet_birth_year\n        ,pet_age_years\n        ,pet_age_months\n        ,pet_age_weeks\n      \t,pet_life_stage\n        ,trim(avatarid) as avatarid\t\t\t\t\t--Added NPP08750\n        ,trim(p.source) as source\n        ,least(p.data_date,source_date) as data_date\n        ,first_value(least(p.data_date,source_date)) over (partition by cid,case when lower(p.pet_type) regexp '.*cat.*' then 'Cat' when lower(collate(p.pet_type,'')) regexp 'dog' then 'Dog' else initcap(p.pet_type) end,pet_name_cleaned,pet_dob,pet_birth_month,pet_age_years,pet_age_months,pet_age_weeks order by least(p.data_date,source_date) asc) as pet_dob_first_data_date\n        ,first_value(least(p.data_date,source_date)) over (partition by cid,case when lower(p.pet_type) regexp '.*cat.*' then 'Cat' when lower(collate(p.pet_type,'')) regexp 'dog' then 'Dog' else initcap(p.pet_type) end,pet_name_cleaned,pet_dob,pet_birth_month,pet_age_years,pet_age_months,pet_age_weeks order by least(p.data_date,source_date) desc) as pet_dob_last_data_date\n    from ${Database}.live.xref_name_urn x\n    inner join ${Database}.db.pet p on x.name_urn = p.name_urn\n    left join ${Database}.live.pet_name_lookup l on upper(trim(p.pet_name)) = upper(l.pet_name)\n    left join ${Database}.db.ref_pet_breeds_clean pbc on lower(trim(pbc.breed_name)) = lower(trim(p.pet_breed))\n                                                and lower(trim(pbc.pet_type)) = lower(trim(p.pet_type))\nleft join ${Database}.db.pet_avatar_colour_lookup cl on upper(trim(p.pet_breed)) = upper(trim(cl.breed))\n                                                    and upper(trim(p.pet_colour)) = upper(trim(cl.passed_colour))\n    where nvl(l.deceased_flag,0) = 0\n    and upper(x.name_urn||'|'||trim(p.pet_name)) not in\n    (\n        select \n            deceased_urn\n        from ${Database}.temp.supps_pets\n    )\n    ) t\n;\n\ndrop table if exists ${Database}.temp.supps_pets;\n\n--Create deduped table of pet names with information\ndrop table if exists ${Database}.live.cid_pet;\nCREATE OR REPLACE TABLE ${Database}.live.cid_pet as\nselect \n    row_number() over (partition by cid order by case when nvl(pet_name,'') > '' then 1 else 0 end desc,pet_dob asc,case when nvl(pet_breed,'') > '' then 1 else 0 end desc,case when nvl(pet_gender,'') > '' then 1 else 0 end desc,name_urn desc,pet_name asc) as pet_number\n    ,* \nfrom\n(\nselect *\n       ,  case when pet_name > '' then pet_name\n               when pet_name = '' and lead(pet_name, 1) over(partition by cid, pet_type order by pet_name asc) > '' \n                                  and pet_data_date < lead(pet_data_date, 1) over(partition by cid, pet_type order by pet_data_date asc) then 'new name added' \n            else pet_name end as new_pets\nfrom\n(\nselect \n    cid\n    ,name_urn\n  \t,cast('' as varchar(50)) as pet_id\n    ,pet_type\n    ,pet_name_cleaned as pet_name\n    ,pet_breed\n    ,pet_gender\n    ,first_value(derived_pet_dob) over (partition by cid,pet_type,pet_name_cleaned order by case when derived_pet_dob is null then 0 else 1 end desc,pet_dob_last_data_date desc,derived_pet_dob desc) as pet_dob\n    ,first_value(dob_type) over (partition by cid,pet_type,pet_name_cleaned order by case when derived_pet_dob is null then 0 else 1 end desc,pet_dob_last_data_date desc,derived_pet_dob desc,dob_type desc) as pet_dob_type\n    ,coalesce(trim(lk.size),pt.pet_size) as pet_size\n    ,pet_indoor_outdoor\n    ,trim(pt.pet_colour) as pet_colour\n    ,pet_dob_last_data_date as pet_data_date\n    ,case\n  \t\twhen pet_life_stage > '' then pet_life_stage\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-12)  and coalesce(lk.size,pt.pet_size) in ('T','S')          then 'Puppy'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-24)  and coalesce(lk.size,pt.pet_size) in ('L','XL')         then 'Puppy'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-120) and coalesce(lk.size,pt.pet_size) in ('T','S')          then 'Adult'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-60)  and coalesce(lk.size,pt.pet_size) in ('L','XL')         then 'Adult'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-156) and coalesce(lk.size,pt.pet_size) in ('T','S','L','XL') then 'Senior'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-12)                                                          then 'Puppy'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-84)                                                          then 'Adult'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-156)                                                         then 'Senior'\n        when pet_type = 'Dog' and derived_pet_dob <= add_months(current_date,-156)                                                         then 'Older'\n        when pet_type = 'Cat' and derived_pet_dob >  add_months(current_date,-12)                                                          then 'Kitten'\n        when pet_type = 'Cat' and derived_pet_dob >  add_months(current_date,-84)                                                          then 'Adult'\n        when pet_type = 'Cat' and derived_pet_dob >  add_months(current_date,-192)                                                         then 'Senior'\n        when pet_type = 'Cat' and derived_pet_dob <= add_months(current_date,-192)                                                         then 'Older'\n        else 'Unknown'\n    end as pet_life_stage\n    ,cast(0 as int) as pdc_gender_link_update\n    ,cast(0 as int) as pdc_breed_link_update\n    ,cast(0 as int) as pdc_colour_link_update\n    ,cast(0 as int) as pdc_outdoor_link_update\n    ,first_value(avatarid) over (partition by cid,pet_type,pet_name_cleaned order by case when avatarid is null then 0 else 1 end desc,data_date desc) as avatarid\n    ,source\n    ,row_number() over (partition by cid,pet_type,pet_name_cleaned order by data_date desc,pet_dob_last_data_date desc,derived_pet_dob desc,pet_size desc,pet_indoor_outdoor desc,pet_gender desc,pet_breed desc) as rownum\nfrom ${Database}.temp.cid_pet_temp pt\nleft join ${Database}.db.dog_breed_size_lookup lk on upper(pt.pet_breed) =  upper(trim(lk.breed))\nwhere pet_type in ('Cat','Dog')\n) t\nwhere rownum = 1\nand\n    (\n        (\n            pet_type = 'Dog' \n            and pet_dob > add_months(current_date, -240) --Dogs must be under 20\n        )\n        or \n        (\n            pet_type = 'Cat' \n            and pet_dob > add_months(current_date, -360) --Cats must be under 30\n        )\n        or\n        (\n            pet_type in ('Dog', 'Cat') --remove anything other than cat/dog\n            and pet_data_date >= add_months(current_date, -12) --everything captured in the last 12 months is valid\n        )\n    )\nand name_urn not in (\n                    select distinct c.name_urn\n                    from ${Database}.temp.cid_pet_temp c\n                    inner join ${Database}.temp.cid_pet_temp c2 on c.cid = c2.cid \n                                                          and c.pet_type = c2.pet_type \n                                                          and c2.source = 'RESP_REV_DAILY'\n                    where c.pet_name_cleaned = ''\n                    ) \n) np \nwhere new_pets <> 'new name added'\n;\n\nalter warehouse set warehouse_size = 'Xsmall';\n                         \ndrop table if exists ${Database}.temp.cid_pet_temp ; \n    \ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid_pet',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_pet;\n\n--merge pdc ages\nmerge into ${Database}.live.cid_pet pt\nusing (\n          select\n              xr.cid,\n              ae.npp_ecrm_pdc_age as pet_name,\n              case when lower(link_url) ilike '%utm_content=twoyears%' then cast(add_months(event_timestamp, -24) as date)\n                   when lower(link_url) ilike '%utm_content=fiveyears%' then cast(add_months(event_timestamp, -60) as date)\n                   when lower(link_url) ilike '%utm_content=eightyears%' then cast(add_months(event_timestamp, -96) as date)\n                   when lower(link_url) ilike '%utm_content=tenyears%' then cast(add_months(event_timestamp, -120) as date)\n                   end as pet_dob,\n              cast(event_timestamp as date) as data_date,\n              row_number() over(partition by xr.cid, ae.npp_ecrm_pdc_age order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ae.name_urn\n          where lower(event_name) regexp '.*click.*'\n          and link_label = 'PDC | Service | PDC'\n          and link_url ilike any  (\n                                  '%utm_content=twoyears%',\n                                  '%utm_content=fiveyears%',\n                                  '%utm_content=eightyears%',\n                                  '%utm_content=tenyears%'\n                                 )\n          --and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population))\n      ) ax on ax.cid = pt.cid\n          and lower(ax.pet_name) = lower(pt.pet_name)\n          and ax.rn = 1\n          and ax.pet_dob <> pt.pet_dob\nwhen matched and ax.data_date > pt.pet_data_date  then update\nset pt.pet_dob = ax.pet_dob,\n    pt.PET_DOB_TYPE = 'PDC click',\n    pt.pet_data_date = ax.data_date;\n\n\n--merge pdc breeds\nmerge into ${Database}.live.cid_pet pt\nusing (\n          select\n              xr.cid,\n              ae.npp_ecrm_pdc_breed as pet_name,\n              case when lower(link_url) ilike '%utm_content=crossbreed%' then 'Cross Breed'\n                   when lower(link_url) ilike '%utm_content=labrador%' then 'Retriever (Labrador)'\n                   when lower(link_url) ilike '%utm_content=collie%' then 'Border Collie'\n                   when lower(link_url) ilike '%utm_ content=cocker%' then 'Spaniel (Cocker)'\n                   when lower(link_url) ilike '%utm_content=french%' then 'French Bulldog'\n                   end as pet_breed,\n              cast(event_timestamp as date) as data_date,\n              row_number() over(partition by xr.cid, ae.npp_ecrm_pdc_breed order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ae.name_urn\n          where lower(event_name) regexp '.*click.*'\n          and link_label = 'PDC | Service | PDC' --check\n          and link_url ilike any  (\n                                  '%utm_content=crossbreed%', \n                                  '%utm_content=labrador%',\n                                  '%utm_content=collie%',\n                                  '%utm_content=cocker%',\n                                  '%utm_content=french%'\n                                 )\n          --and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population))\n      ) ax on ax.cid = pt.cid\n          and lower(ax.pet_name) = lower(pt.pet_name)\n          and ax.rn = 1\n          and ax.pet_breed <> pt.pet_breed\nwhen matched and ax.data_date > pt.pet_data_date and pet_type = 'Dog' then update\nset pt.pet_breed = ax.pet_breed,\n    pt.pdc_breed_link_update = 1,\n    pt.pet_data_date = ax.data_date;\n;\n\n--merge pdc colours\nmerge into ${Database}.live.cid_pet pt\nusing (\n          select\n              xr.cid,\n              ae.npp_ecrm_pdc_colour as pet_name,\n              case when lower(link_url) ilike '%utm_content=white%' then 'White'\n                   when lower(link_url) ilike '%utm_content=blackwhite%'  then 'Black & White'\n                   when lower(link_url) ilike '%utm_content=black%'  then 'Black'\n                   when lower(link_url) ilike '%utm_content=tabby%' then 'Tabby'\n                   when lower(link_url) ilike '%utm_content=ginger%' then 'Ginger'\n                   when lower(link_url) ilike '%utm_content=multi%' then 'Multi'\n                   when lower(link_url) ilike '%utm_content=brown%' then 'Brown'\n                   when lower(link_url) ilike '%utm_content=grey%' then 'Grey'\n                   when lower(link_url) ilike '%utm_content=hairless%' then 'Hairless'\n                   end as pet_colour,\n              cast(event_timestamp as date) as data_date,\n              row_number() over(partition by xr.cid, ae.npp_ecrm_pdc_colour order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ae.name_urn\n          where lower(event_name) regexp '.*click.*'\n          and link_label = 'PDC | Service | PDC' --check\n          and link_url ilike any  (\n                                  '%utm_content=white%',\n                                  '%utm_content=blackwhite%',\n                                  '%utm_content=black%' ,\n                                  '%utm_content=tabby%',\n                                  '%utm_content=ginger%',\n                                  '%utm_content=multi%',\n                                  '%utm_content=brown%',\n                                  '%utm_content=grey%',\n                                  '%utm_content=hairless%'\n                                 )\n          --and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population))\n      ) ax on ax.cid = pt.cid\n          and lower(ax.pet_name) = lower(pt.pet_name)\n          and ax.rn = 1\n          and ax.pet_colour <> pt.pet_colour\nwhen matched and ax.data_date > pt.pet_data_date and pet_type = 'Cat' then update\nset pt.pet_colour = ax.pet_colour,\n    pt.pdc_colour_link_update = 1,\n    pt.pet_data_date = ax.data_date;\n;\n    \n--merge pdc npp_ecrm_pdc_outdoor\nmerge into ${Database}.live.cid_pet pt\nusing (\n          select\n              xr.cid,\n              ae.npp_ecrm_pdc_outdoor as pet_name,\n              case when lower(link_url) ilike '%utm_content=indoor%' then 'I'\n                   when lower(link_url) ilike '%utm_content=outdoor%'  then 'O'\n                   end as PET_INDOOR_OUTDOOR,\n              cast(event_timestamp as date) as data_date,\n              row_number() over(partition by xr.cid, ae.npp_ecrm_pdc_outdoor order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ae.name_urn\n          where lower(event_name) regexp '.*click.*'\n          and link_label = 'PDC | Service | PDC' --check\n          and link_url ilike any  (\n                                  '%utm_content=indoor%',\n                                  '%utm_content=outdoor%'\n                                 )\n          --and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population))\n      ) ax on ax.cid = pt.cid\n          and lower(ax.pet_name) = lower(pt.pet_name)\n          and ax.rn = 1\n          and ax.PET_INDOOR_OUTDOOR <> pt.PET_INDOOR_OUTDOOR\nwhen matched and ax.data_date > pt.pet_data_date and pet_type = 'Cat' then update\nset pt.PET_INDOOR_OUTDOOR = ax.PET_INDOOR_OUTDOOR,\n    pt.pdc_outdoor_link_update = 1,\n    pt.pet_data_date = ax.data_date;\n;\n\n--merge pdc genders\n--gender merged directly from adestra event to live cid pet, some links were missing (purina-pdc.tbw-apps.net)\nmerge into ${Database}.live.cid_pet pt\nusing (\n          select\n              xr.cid,\n              ae.npp_ecrm_pdc_gender as pet_name,\n              case when lower(link_url) regexp '.*=female.*' then 'Female'\n                   when lower(link_url) regexp '.*=male.*' then 'Male' \n                   end as pet_gender,\n              cast(event_timestamp as date) as data_date,\n              row_number() over(partition by xr.cid, ae.npp_ecrm_pdc_gender order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ae.name_urn\n          where lower(event_name) regexp '.*click.*'\n          and link_label = 'PDC | Service | PDC'\n          and link_url ilike any (\n                            '%utm_content=female%',\n                            '%utm_content=male%'\n                          )\n          --and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population))\n      ) ax on ax.cid = pt.cid\n          and lower(ax.pet_name) = lower(pt.pet_name)\n          and ax.rn = 1\n          and pt.pet_gender <> ax.pet_gender\nwhen matched and ax.data_date > pt.pet_data_date then update\nset pt.pet_gender = ax.pet_gender,\n    pt.pdc_gender_link_update = 1,\n    pt.pet_data_date = ax.data_date;\n;\n\n\n-- Insert new pets into pet id table\nmerge into ${Database}.db.ref_pet_id rp\nusing (\n          select\n              bbw_urn,\n              pet_type,\n              pet_name,\n              date_code||'-'||unique_code||'-'||pet_type_code||'-'||bbw_urn_code as pet_id\n          from (\n                   select\n                       xr.bbw_urn,\n                       pt.pet_type,\n                       lower(pt.pet_name) as pet_name,\n\t\t\t\t\t   --Note that the bit below will only work as long as the length of hte Hex string doesn't exceed 8 characters\n                       replace(to_char(to_char(current_date(),'YYYYMMDD')::integer,'XXXXXXXX'),' ','0') as date_code,\n                       replace(to_char(row_number() over (order by 1),'XXXXXX'),' ','0') as unique_code,\n\t\t\t\t\t   --Not totally sure why the hex isn't hard coded here?\n                       replace(to_char(case when pet_type = 'Cat' then 3120 else 4157 end,'XXXX'),' ','0') as pet_type_code,\n                       replace(to_char(xr.bbw_urn,'XXXXXXXXXXXX'),' ','0') as bbw_urn_code\n                   from ${Database}.live.cid_pet pt\n                   inner join (\n                                  select\n                                      cid,\n                                      min(bbw_urn) as bbw_urn\n                                  from ${Database}.live.xref_name_urn\n                                  group by 1\n                              ) xr on xr.cid = pt.cid\n               ) p\n      ) id on id.bbw_urn = rp.bbw_urn\n          and id.pet_type = rp.pet_type\n          and id.pet_name = rp.pet_name\nwhen not matched then insert\n(\n    bbw_urn,\n    pet_type,\n    pet_name,\n    pet_id,\n    data_date\n)\nvalues\n(\n    id.bbw_urn,\n    id.pet_type,\n    id.pet_name,\n    id.pet_id,\n    current_date\n);\n\ninsert into ${Database}.db.build_log \nselect\n    '${Database}_rollups',\n    '${Database}.db.ref_pet_id',\n    'new records',\n    cast(count(*) as varchar),\n    current_timestamp \nfrom ${Database}.db.ref_pet_id\nwhere data_date = current_date;\n\n\n-- Set pet_id in live pet table\nmerge into ${Database}.live.cid_pet pt\nusing (\n          select\n              xr.cid,\n              rp.pet_id,\n              rp.pet_type,\n              rp.pet_name,\n              row_number() over(partition by xr.cid, rp.pet_type, rp.pet_name order by rp.bbw_urn) as rn\n          from ${Database}.db.ref_pet_id rp\n          inner join ${Database}.live.xref_name_urn xr on xr.bbw_urn = rp.bbw_urn\n      ) rp on rp.cid = pt.cid\n          and rp.pet_type = pt.pet_type\n          and lower(rp.pet_name) = lower(pt.pet_name)\n          and rp.rn = 1\nwhen matched then update\nset pt.pet_id = rp.pet_id;\n\n---------------------\n--have cat/have dog\n\ndrop table if exists ${Database}.temp.build_rollups_cid_have_cat ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_have_cat \nas\nselect cid, count(*) as number_of_cats \nfrom ${Database}.live.cid_pet\nwhere lower(pet_type) regexp '.*cat.*'\ngroup by cid;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_have_cat',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_have_cat;\n\n\ndrop table if exists ${Database}.temp.build_rollups_cid_have_dog ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_have_dog \nas\nselect cid, count(*) as number_of_dogs \nfrom ${Database}.live.cid_pet\nwhere lower(pet_type) regexp '.*dog.*'\ngroup by cid;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_have_dog',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_have_dog;\n\n\ndrop table if exists ${Database}.temp.build_rollups_cid_pdc_pet ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_pdc_pet \nas\nselect cid,\n       case when pet_segment > '' then activity_date end as activity_date,\n       pet_segment\nfrom ( select        \n              xr.cid,\n              case when lower(link_url) regexp '.*=neither.*' then 'Neither'\n                   when lower(link_url) regexp '.*=both.*' and hc.cid is null and hd.cid is null then 'Both'\n                   when lower(link_url) regexp '.*=dog.*' and hd.cid is null then 'Dog'\n                   when lower(link_url) regexp '.*=cat.*' and hc.cid is null then 'Cat' \n                    else ''\n                   end as pet_segment,\n              cast(event_timestamp as date) as activity_date,\n              row_number() over(partition by xr.cid order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ae.name_urn\n          left join ${Database}.temp.build_rollups_cid_have_cat hc on hc.cid = xr.cid\n          left join ${Database}.temp.build_rollups_cid_have_dog hd on hd.cid = xr.cid\n          where lower(event_name) regexp '.*click.*'\n            and campaign_name ilike '%Better_Together%'\n            and link_label = 'PDC | Service | PDC'\n            and link_url ilike '%/purina-pdc.tbw-apps.net%'\n            and link_url ilike any ('%=dog%','%=cat%','%=both%','%=neither%')\n                           \n            and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population)) --not sure if this should be included, copied from gender\n       )\nwhere rn = 1\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_pdc_pet',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_pdc_pet;\t\t\t\t\t\t\t\t\t\t\t\t\n\n---------------------\n--inferred cat/inferred dog\n\ndrop table if exists ${Database}.temp.build_rollups_cid_inferred_cat;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_inferred_cat\nas\nselect\n    cid,\n    max(ic.data_date) as data_date\nfrom ${Database}.live.xref_name_urn xr\ninner join (\n               --coupons\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.quotient_coupons qc\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = qc.brand_id\n               where trim(brand_pet_type) = 'Cat'\n               union all\n               --coupons/samples\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.names_attributes\n               where (\n                            (trim(source) = 'REG_WUN' and trim(registration_campaign) in ('Gourmet Coupon','gourmet_coupon','Felix Try Now','Go-CAT Free Sample','Go-Cat Free Sample'))\n                         or\n                            (trim(source) = 'REG_KE' and lower(source_file) regexp '(.*)(purinaone|uk-3wc-freesample|uk-gocat)(.*)' and last_login is not null)\n                         or\n                            (trim(source) = 'SAMP_GOU_1')\n                     )\n               union all\n               --registrations\n               select distinct\n                   trim(nm.name_urn) as name_urn,\n                   reg_date as data_date\n               from ${Database}.db.names nm\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = nm.source_brand_id\n               where trim(brand_pet_type) = 'Cat'\n               union all\n               --preferences\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.names_preference np\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = np.brand_id\n               where lower(source_file) not regexp '.*json.*'\n                   and (pref_emailable = 1 or pref_mailable = 1)\n                   and trim(brand_pet_type) = 'Cat'\n           ) ic on ic.name_urn = xr.name_urn\ngroup by xr.cid;\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_inferred_cat',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_rollups_cid_inferred_cat;\n\n\ndrop table if exists ${Database}.temp.build_rollups_cid_inferred_dog;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_inferred_dog\nas\nselect\n    cid,\n    max(id.data_date) as data_date\nfrom ${Database}.live.xref_name_urn xr\ninner join (\n               --coupons\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.quotient_coupons qc\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = qc.brand_id\n               where trim(brand_pet_type) = 'Dog'\n               union all\n               --samples\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.names_attributes\n               where (\n                            (trim(source) = 'REG_WUN' and trim(registration_campaign) in ('Try For Free','Dentalife Dog Free Sample'))\n                         or\n                            (trim(source) = 'REG_KE' and lower(source_file) regexp '.*uk-dentalife.*' and last_login is not null)\n                     )\n               union all\n               --registrations\n               select distinct\n                   trim(name_urn) as name_urn,\n                   reg_date as data_date\n               from ${Database}.db.names nm\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = nm.source_brand_id\n               where trim(brand_pet_type) = 'Dog'\n               union all\n               --preferences\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.names_preference np\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = np.brand_id\n               where lower(source_file) not regexp '.*json.*'\n                   and (pref_emailable = 1 or pref_mailable = 1)\n                   and trim(brand_pet_type) = 'Dog'\n           ) id on id.name_urn = xr.name_urn\ngroup by xr.cid;\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_inferred_dog',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_rollups_cid_inferred_dog;\n\n\n---------------------\n--used to have cat/have dog (we 'expired' the pet)\n\ndrop table if exists ${Database}.temp.build_rollups_cid_used_to_have_cat ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_used_to_have_cat \nas\nselect cid\nfrom ${Database}.live.cid_pet\nwhere lower(pet_type) regexp '.*cat.*'\ngroup by cid;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_used_to_have_cat',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_used_to_have_cat;\n\n\ndrop table if exists ${Database}.temp.build_rollups_cid_used_to_have_dog ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_used_to_have_dog \nas\nselect cid\nfrom ${Database}.live.cid_pet\nwhere lower(pet_type) regexp '.*dog.*'\ngroup by cid;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_used_to_have_dog',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_used_to_have_dog;\n\n\ndrop table if exists ${Database}.temp.build_rollups_cid_deceased_pets ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_deceased_pets \nas\nselect cid, \n    sum\n    (\n        case \n            when \n                (\n                    pet_data_date >= add_months(current_date, -1) --data in the last month\n                    and pet_type = 'Dog' \n                    and pet_dob <= add_months(current_date, -240) --dog is over 20\n                )\n                or\n                (\n                    pet_data_date >= add_months(current_date, -1) --data in the last month\n                    and pet_type = 'Cat' \n                    and pet_dob <= add_months(current_date, -360) --cat is over 30\n                ) \n                or\n                (\n                    pet_dob is null \n                    and pet_data_date < add_months(current_date, -12) --just gone over 12 months old data\n                    and pet_data_date >= add_months(current_date, -13) \n                ) then 1 \n            else 0 \n        end\n    ) as num_pets_deceased_this_month\nfrom ${Database}.live.cid_pet\ngroup by cid;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_deceased_pets',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_deceased_pets;\n\n\n--CREATE cid_LitterTable\n\ndrop table if exists ${Database}.live.cid_litter;\n\nCREATE OR REPLACE TABLE ${Database}.live.cid_litter\nas\nselect\n    cid,\n    coalesce(sire_name,'') as sire_name,\n    coalesce(dam_name,'') as dam_name,\n    litter_type,\n    litter_dob,\n    case when litter_size = 'T' then 'S'\n               when litter_size = '' then Size\n               else litter_size end as litter_size,\n    litter_breed,\n    litter_puppies_kittens,\n    litter_kennel,\n    data_date,\n    source,\n    source_file,\n    source_urn,\n    source_date\nfrom (\n         select\n             xr.cid,\n  \t\t\ttrim(lt.name_urn) as NAME_URN,\n\t\t\ttrim(lt.sire_name) as SIRE_NAME,\n\t\t\ttrim(lt.dam_name) as DAM_NAME,\n\t\t\ttrim(lt.litter_type) as LITTER_TYPE,\n\t\t\tlt.litter_dob,\n\t\t\ttrim(lt.litter_size) as LITTER_SIZE,\n\t\t\ttrim(lt.litter_breed) as LITTER_BREED,\n\t\t\tlitter_puppies_kittens,\n\t\t\ttrim(litter_kennel) as LITTER_KENNEL,\n\t\t\tlt.data_date,\n\t\t\ttrim(lt.source) as SOURCE,\n\t\t\ttrim(lt.source_file) as SOURCE_FILE,\n\t\t\ttrim(lt.source_urn) as SOURCE_URN,\n\t\t\tlt.source_date,\n             row_number() over\n             (\n                 partition by \n                     xr.cid,\n                     trim(lt.sire_name),\n                     trim(lt.dam_name),\n                     trim(lt.litter_type),\n                     lt.litter_dob,\n                     trim(lt.litter_size),\n                     trim(lt.litter_breed),\n                     lt.litter_puppies_kittens,\n                     trim(lt.litter_kennel)\n                 order by \n                     lt.data_date desc nulls last,\n                     lt.source_date desc nulls last\n             ) as row_num\n         from ${Database}.live.xref_name_urn xr\n         inner join ${Database}.db.litter lt on trim(lt.name_urn) = xr.name_urn\n     ) dlt\n     left outer join ${Database}.db.DOG_BREED_SIZE_LOOKUP sl on lower(left(dlt.Litter_breed,15)) = lower(left(trim(sl.breed),15))\nwhere row_num = 1;\n\n---------------------\n--cid questions\n\ndrop table if exists ${Database}.live.cid_question ;  \n\nCREATE OR REPLACE TABLE ${Database}.live.cid_question \nas\nselect distinct\n    nm.cid,\n    qu.question_id,\n    trim(rqu.question) as question,\n    first_value(lower(trim(qu.answer))) over \n        (\n            partition by nm.cid, qu.question_id\n            order by \n                qu.data_date desc nulls last,\n                qu.source_date desc nulls last\n        ) as answer,\n    first_value(qu.data_date) over \n        (\n            partition by nm.cid, qu.question_id\n            order by \n                qu.data_date desc nulls last,\n                qu.source_date desc nulls last\n        ) as answer_data_date       \nfrom ${Database}.live.names nm    \ninner join ${Database}.db.question qu on nm.name_urn = trim(qu.name_urn)\ninner join ${Database}.db.ref_question rqu on qu.question_id = rqu.question_id\nwhere qu.data_date > add_months(current_date, -60) --now only using data from the last 5 years for questions\n    and qu.brand_id is null;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid_question',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_question;\n\n---------------------\n--brand questions\n\ndrop table if exists ${Database}.live.cid_brand_question ;  \n\nCREATE OR REPLACE TABLE ${Database}.live.cid_brand_question \nas\nselect distinct\n    nm.cid,\n    qu.brand_id,\n    qu.question_id,\n    trim(rqu.question) as question, \n    first_value(lower(trim(qu.answer))) over \n        (\n            partition by nm.cid, qu.brand_id, qu.question_id\n            order by \n                qu.data_date desc nulls last,\n                qu.source_date desc nulls last\n        ) as answer,\n    first_value(qu.data_date) over \n        (\n            partition by nm.cid, qu.brand_id, qu.question_id\n            order by \n                qu.data_date desc nulls last,\n                qu.source_date desc nulls last\n        ) as answer_data_date    \nfrom ${Database}.live.names nm    \ninner join ${Database}.db.question qu on nm.name_urn = trim(qu.name_urn)\ninner join ${Database}.db.ref_question rqu on qu.question_id = rqu.question_id\nwhere qu.data_date > add_months(current_date, -60) --now only using data from the last 5 years for questions\n    and qu.brand_id is not null;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid_brand_question',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_brand_question;\n\n---------------------\n--preferred brand questions\n\ndrop table if exists ${Database}.temp.build_rollups_cid_brand_preferred ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_brand_preferred \nas\nselect distinct\n    cid,\n    brand_id\nfrom ${Database}.live.cid_brand_question\nwhere answer_data_date > add_months(current_date, -60) --now only using data from the last 5 years to determine preference for brand\n    and brand_id is not null\n    and\n    (\n        question = 'Brand of pet food fed to pet'\n        or question = 'What type of food does your pet eat (Brand)'\n        or question = 'Brand of dry cat food fed to pet'\n        or \n        (\n            question = 'How often do you feed your pet (Brand)'\n            and answer in ('a couple of times per month', 'a couple of times per week', 'a couple of times per year','every day')\n        )\n        or \n        (\n            lower(question) regexp '.*consumption - coffee brand.*' \n            and lower(answer) not regexp '.*none.*'\n        )\n        or \n        (\n            lower(question) regexp '.*consumption - coffee product.*' \n            and lower(answer) not regexp '.*none.*'\n        )\n        or lower(question) regexp '.*drinking location - coffee product.*'\n        or lower(question) regexp '.*drinking time - coffee brand.*'\n        --dont use 'Brand of Pet Food you are interested in' - is bollox\n    );\n    \n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_brand_preferred',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_brand_preferred;\n\n---------------------\n--purina engagement scoring\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_rate_review;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_rate_review \nas\nselect    \n    cid,\n    answer_data_date as activity_date,\n    case when answer in ('3','4','5') then 'Left Positive Rate & Review'\n         when answer in ('1','2') then 'Left Negative Rate & Review'\n         end as activity,\n    qu.brand_id as activity_brand_id\nfrom ${Database}.live.cid_brand_question qu\ninner join ${Database}.live.ref_brand br on qu.brand_id = br.brand_id \n                                   and br.division_id = 12\nwhere question ilike '%overall%';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_rate_review',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_rate_review;\n\n---------------------\n--first/last source date by brand\n\ndrop table if exists ${Database}.temp.build_rollups_cid_brand_base ;  \n\nalter warehouse set warehouse_size = 'Large';\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_brand_base \nas\nselect distinct\n    nm.cid,\n    dbnm.source_brand_id as brand_id,\n    0 as assigned_master_brand,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by dbnm.data_date nulls last\n        )                                            as first_date_brand,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by dbnm.data_date desc nulls last\n        )                                            as last_date_brand,\n    first_value(nat.last_login) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by \n                nat.last_login desc, \n                dbnm.data_date nulls last, \n                nm.reg_date nulls last,\n                nm.source_date nulls last\n        )                                            as last_login_brand,      \n    first_value(trim(nat.channel)) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by \n                case when nat.channel > '' then 1 else 0 end desc, --only want populated channels\n                dbnm.data_date nulls last, \n                nm.reg_date nulls last,\n                nm.source_date nulls last\n        )                                            as first_channel_brand,    \n    first_value(trim(nat.channel)) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by \n                case when nat.channel > '' then 1 else 0 end desc, --only want populated channels\n                dbnm.data_date desc nulls last, \n                dbnm.reg_date desc nulls last,\n                dbnm.source_date desc nulls last\n        )                                            as last_channel_brand\nfrom ${Database}.live.names nm\ninner join ${Database}.db.names dbnm on trim(dbnm.name_urn) = nm.name_urn\nleft join ${Database}.db.names_attributes nat on trim(nat.name_urn) = trim(dbnm.name_urn)\n                                     and trim(nat.source) = trim(dbnm.source)\n                                     and nat.source_date = dbnm.source_date\n                                     and nat.source_urn = dbnm.source_urn\nwhere dbnm.source_brand_id is not null;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_brand_base',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_brand_base;\n\n---------------------\n--first/last source date by bu\n\ndrop table if exists ${Database}.temp.build_rollups_cid_bu_base ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_bu_base \nas\nselect distinct\n    nm.cid,\n    dbnm.source_data_controller_id as business_unit_id,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_data_controller_id \n            order by dbnm.data_date nulls last\n        )                                            as first_date_business_unit,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_data_controller_id \n            order by dbnm.data_date desc nulls last\n        )                                            as last_date_business_unit\nfrom ${Database}.live.names nm\ninner join ${Database}.db.names dbnm on trim(dbnm.name_urn) = nm.name_urn;\n\n--insert the brands that are actually business units \nmerge into ${Database}.temp.build_rollups_cid_bu_base bu\nusing \n(\n    select distinct \n        cbb.cid,\n        rbu.business_unit_id,\n        first_value(cbb.first_date_brand) over \n            (\n                partition by cbb.cid, rbu.business_unit_id\n                order by cbb.first_date_brand nulls last\n            ) as first_date_business_unit,\n        first_value(cbb.last_date_brand) over \n            (\n                partition by cbb.cid, rbu.business_unit_id\n                order by cbb.last_date_brand desc nulls last\n            ) as last_date_business_unit\n    from ${Database}.temp.build_rollups_cid_brand_base cbb\n    inner join ${Database}.live.ref_business_unit_brand rbu on cbb.brand_id = rbu.brand_id\n) mg on mg.cid = bu.cid \n    and mg.business_unit_id = bu.business_unit_id\nwhen not matched then insert\n(\n    cid,\n    business_unit_id,\n    first_date_business_unit,\n    last_date_business_unit\n)\nvalues \n(\n    mg.cid,\n    mg.business_unit_id,\n    mg.first_date_business_unit,\n    mg.last_date_business_unit\n);   \n\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_bu_base',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_bu_base;\n\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_npp_no_brand_base \nas\nselect distinct\n    nm.cid,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by dbnm.data_date nulls last\n        )                                            as first_date_brand,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by dbnm.data_date desc nulls last\n        )                                            as last_date_brand\nfrom ${Database}.live.names nm\ninner join ${Database}.db.names dbnm on dbnm.name_urn = nm.name_urn\nwhere dbnm.source_data_controller_id = (select data_controller_id from ${Database}.live.ref_data_controller where data_controller like 'Nestl_ Purina Petcare (UK) Ltd')\n    and dbnm.source_brand_id is null;\n\n---------------------\n--fix up for purina master brand - eveyone purina should be now flagged as master brand source \n\nmerge into ${Database}.temp.build_rollups_cid_brand_base cbb\nusing (\n          select distinct\n              cid,\n              (select brand_id from ${Database}.live.ref_brand where brand = 'Purina Masterbrand') as brand_id,\n              first_value(first_date_brand) over\n                  (\n                      partition by cid\n                      order by first_date_brand desc nulls last\n                  ) as first_date_brand,\n              first_value(last_date_brand) over\n                  (\n                      partition by cid\n                      order by last_date_brand desc nulls last\n                  ) as last_date_brand\n          from (\n                   select\n                       cbb.cid,\n                       cbb.first_date_brand,\n                       cbb.last_date_brand\n                   from ${Database}.temp.build_rollups_cid_brand_base cbb\n                   inner join ${Database}.live.ref_brand rb on rb.brand_id = cbb.brand_id\n                   left join (\n                                 select distinct\n                                     xr.cid,\n                                     'Growing Pup' as brand\n                                 from ${Database}.db.comms_hist ch\n                                 inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ch.name_urn\n                                 where ch.promotion_id = 'NPP07290'\n                                     and ch.cell_id = '1'\n                                 union all\n                                 select distinct\n                                     xr.cid,\n                                     'Growing Pup' as brand\n                                 from ${Database}.db.names nm\n                                 inner join ${Database}.live.xref_name_urn xr on xr.name_urn = nm.name_urn\n                                 left join ${Database}.live.cid_pet pt on pt.name_urn = nm.name_urn\n                                 where nm.source_brand_id = (select brand_id from ${Database}.live.ref_brand where brand = 'Growing Pup')\n                                     and (\n                                             pt.pet_dob < (add_months(current_date,-12)-12)\n                                          or\n                                             (nm.source = 'REG_THG' and pt.pet_dob is null and lower(pt.pet_life_stage) = 'puppy' and pt.pet_data_date < (add_months((current_date+56),-12))-12)\n                                         )\n                             ) gp on gp.cid = cbb.cid\n                                 and gp.brand = rb.brand\n                   left join (\n                                 select distinct\n                                     xr.cid,\n                                     'Breed Selector' as brand\n                                 from ${Database}.db.comms_hist ch\n                                 inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ch.name_urn\n                                 left join (\n                                             select\n                                                 xr.cid,\n                                                 drop_date\n                                             from ${Database}.db.comms_hist ch\n                                             inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ch.name_urn\n                                             where ch.promotion_id = 'NPP04398_C' and ch.cell_id = '1'\n                                             \n                                            ) gp on gp.cid = xr.cid\n                                 where ch.promotion_id = 'NPP06155'\n                                     and (\n                                             (ch.cell_id = '8' and ch.drop_date < dateadd(day,-14,current_date()) and gp.drop_date is null)\n                                          or      \n                                             (ch.cell_id = '8' and ch.drop_date < dateadd(day,-14,current_date()) and (gp.drop_date < ch.drop_date or gp.drop_date > dateadd(day,14,ch.drop_date))) \n                                          or ch.name_urn in (\n                                                                select\n                                                                    distinct urn as name_urn\n                                                                from ${Database}.db.npp_breed_selector_pdc_responses rs\n                                                                where lower(rs.bs_still_getting_puppy) = 'no'\n                                                            )\n                                         )\n                             ) bs on bs.cid = cbb.cid\n                                 and bs.brand = rb.brand\n                   where (rb.division = 'Petcare' and rb.brand not in  ('Beta Breeder','Pro Plan Breeder','Pro Plan Vet','Kitten Code','Growing Pup', 'Breed Selector'))\n                       or (rb.brand = 'Growing Pup' and gp.cid is not null)\n                       or (rb.brand = 'Breed Selector' and bs.cid is not null)\n                   union all\n                   select\n                       cid,\n                       first_date_brand,\n                       last_date_brand\n                   from ${Database}.temp.build_rollups_cid_npp_no_brand_base\n               ) mb\n      ) mb on mb.cid = cbb.cid\n          and mb.brand_id = cbb.brand_id\nwhen not matched then insert\n(\n    cid,\n    brand_id,\n    assigned_master_brand,\n    first_date_brand,\n    last_date_brand,\n    last_login_brand,\n    first_channel_brand,\n    last_channel_brand\n)\nvalues\n(\n    mb.cid,\n    mb.brand_id,\n    1,\n    mb.first_date_brand,\n    mb.last_date_brand,\n    cast(null as date),\n    cast(null as varchar(10)),\n    cast(null as varchar(10))\n);\n\n---------------------\n--set up Kitten Code brand for anyone who has a kitten from other brands\nmerge into ${Database}.temp.build_rollups_cid_brand_base cbb\nusing (\n          select distinct\n              cbb.cid,\n              (select brand_id from ${Database}.live.ref_brand where brand = 'Kitten Code') as brand_id,\n              first_value(first_date_brand) over\n                  (\n                      partition by cbb.cid\n                      order by first_date_brand nulls last\n                  ) as first_date_brand,\n              first_value(last_date_brand) over\n                  (\n                      partition by cbb.cid\n                      order by last_date_brand desc nulls last\n                  ) as last_date_brand\n          from (\n                   select\n                       cid,\n                       first_date_brand,\n                       last_date_brand\n                   from ${Database}.temp.build_rollups_cid_brand_base cbb\n                   inner join ${Database}.live.ref_brand rb on rb.brand_id = cbb.brand_id\n                   where (rb.division = 'Petcare' and rb.brand not in  ('Beta Breeder','Pro Plan Breeder','Pro Plan Vet'))\n                   union all\n                   select\n                       cid,\n                       first_date_brand,\n                       last_date_brand\n                   from ${Database}.temp.build_rollups_cid_npp_no_brand_base\n               ) cbb\n          inner join (\n                         select distinct\n                             cid\n                         from ${Database}.live.cid_pet\n                         where lower(pet_life_stage) = 'kitten'\n                     ) pt on pt.cid = cbb.cid\n      ) kc on kc.cid = cbb.cid\n          and kc.brand_id = cbb.brand_id\nwhen not matched then insert\n(\n    cid,\n    brand_id,\n    assigned_master_brand,\n    first_date_brand,\n    last_date_brand,\n    last_login_brand,\n    first_channel_brand,    \n    last_channel_brand\n)\nvalues \n(\n    kc.cid,\n    kc.brand_id,\n    0,\n    kc.first_date_brand,\n    kc.last_date_brand,\n    cast(null as date),\n    cast(null as varchar(10)),\n    cast(null as varchar(10))\n);\n\n---------------------\n--set up Growing Pup brand for anyone who has a Puppy from other brands\nmerge into ${Database}.temp.build_rollups_cid_brand_base cbb\nusing (\n          select distinct\n              cbb.cid,\n              (select brand_id from ${Database}.live.ref_brand where brand = 'Growing Pup') as brand_id,\n              first_value(first_date_brand) over\n                  (\n                      partition by cbb.cid\n                      order by first_date_brand nulls last\n                  ) as first_date_brand,\n              first_value(last_date_brand) over\n                  (\n                      partition by cbb.cid\n                      order by last_date_brand desc nulls last\n                  ) as last_date_brand\n          from (\n                   select\n                       cid,\n                       first_date_brand,\n                       last_date_brand\n                   from ${Database}.temp.build_rollups_cid_brand_base cbb\n                   inner join ${Database}.live.ref_brand rb on rb.brand_id = cbb.brand_id\n                   where (rb.division = 'Petcare' and rb.brand not in  ('Beta Breeder','Pro Plan Breeder','Pro Plan Vet'))\n                   union all\n                   select\n                       cid,\n                       first_date_brand,\n                       last_date_brand\n                   from ${Database}.temp.build_rollups_cid_npp_no_brand_base\n               ) cbb\n          inner join (\n                         select distinct\n                             cid\n                         from ${Database}.live.cid_pet\n                         where lower(pet_life_stage) = 'puppy'\n                     ) pt on pt.cid = cbb.cid\n      ) gp on gp.cid = cbb.cid\n          and gp.brand_id = cbb.brand_id\nwhen not matched then insert\n(\n    cid,\n    brand_id,\n    assigned_master_brand,\n    first_date_brand,\n    last_date_brand,\n    last_login_brand,\n    first_channel_brand,    \n    last_channel_brand\n)\nvalues \n(\n    gp.cid,\n    gp.brand_id,\n    0,\n    gp.first_date_brand,\n    gp.last_date_brand,\n    cast(null as date),\n    cast(null as varchar(10)),\n    cast(null as varchar(10))\n);\n\nalter warehouse set warehouse_size = 'Medium';\n\n---------------------\n--have no printer\n\ndrop table if exists ${Database}.temp.build_rollups_cid_no_printer ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_no_printer \nas\nselect distinct nm.cid\nfrom ${Database}.live.names nm\ninner join ${Database}.db.names_attributes nat on trim(nat.name_urn) = nm.name_urn\n                                         and nat.no_printer = 1;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_no_printer',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_no_printer;\n\n---------------------\n--purina engagement scoring\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_samples;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_samples\nas \nselect distinct   \n    cid,\n    first_value(activity_date) over (partition by cid, activity_brand_id order by activity_date desc) as activity_date,\n    'Requested free product sample' as activity,\n    activity_brand_id\nfrom (\n        select distinct \n            xr.cid,\n            case\n                when trim(ch.campaign_id) = 'NPP04825_1' then (select brand_id from ${Database}.live.ref_brand where brand = 'Go Cat')\n                when trim(ch.campaign_id) in ('NPP05588_1','NPP02921_3','NPP04571') then (select brand_id from ${Database}.live.ref_brand where brand = 'Dentalife')\n            end as activity_brand_id,\n            drop_date as activity_date\n        from ${Database}.db.comms_hist ch\n        inner join ${Database}.live.xref_name_urn xr on trim(ch.name_urn) = trim(xr.name_urn)\n        where trim(programme_id) = 'M' \n        and \n            (\n            trim(campaign_id) = 'NPP04825_1' --Go Cat\n            or trim(campaign_id) = 'NPP05588_1' -- Dentalife\n            or trim(campaign_id) = 'NPP02921_3' --old dentalife\n            or trim(campaign_id) = 'NPP04571' --old dentalife\n            )\n        union all\n        select distinct\n            xr.cid,\n            sm.source_brand_id as activity_brand_id,\n            coalesce(sm.request_date,sm.processing_date) as activity_date\n        from ${Database}.db.npp_sample_requests sm\n        inner join ${Database}.live.xref_name_urn xr on trim(xr.name_urn) = trim(sm.name_urn)\n    ) a\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_samples',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_samples;\n\n---------------------\n--all sources by brand\n\nalter warehouse set warehouse_size = 'Large';\n\ndrop table if exists ${Database}.live.cid_brand_source ;  \n\nCREATE OR REPLACE TABLE ${Database}.live.cid_brand_source\nas\nselect distinct\n    nm.cid,\n    dbnm.source_brand_id as brand_id,\n    trim(dbnm.source) as source,\n    trim(dbnm.source_file) as source_file,  \n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id, trim(dbnm.source), trim(dbnm.source_file)\n            order by dbnm.data_date nulls last\n        )                                            as first_date_brand_source,    \n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id, trim(dbnm.source), trim(dbnm.source_file)\n            order by dbnm.data_date desc nulls last\n        )                                            as last_date_brand_source\nfrom ${Database}.live.names nm\ninner join ${Database}.db.names dbnm on trim(dbnm.name_urn) = nm.name_urn\nwhere dbnm.source_brand_id is not null;\n\nalter warehouse set warehouse_size = 'Medium';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid_brand_source',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_brand_source;\n\n\n---------------------\n--preferrences (gigya)\ndrop table if exists ${Database}.temp.build_rollups_cid_brand_preference ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_brand_preference \nas\nselect distinct\n    nm.cid,\n    np.brand_id,\n    first_value(np.pref_emailable) over \n        (\n            partition by nm.cid, np.brand_id\n            order by \n                np.data_date desc nulls last,\n                case when lower(np.source_file) regexp '.*json.*' then 1 else 0 end --migration is json files\n        )  as pref_emailable,\n    first_value(case when lower(np.source_file) regexp '.*json.*' then 1 else 0 end) over \n        (\n            partition by nm.cid, np.brand_id\n            order by \n                np.data_date desc nulls last,\n                case when lower(np.source_file) regexp '.*json.*' then 1 else 0 end --migration is json files\n        )  as pref_mig,\n    first_value(np.data_date) over \n        (\n            partition by nm.cid, np.brand_id\n            order by \n                np.data_date desc nulls last,\n                case when lower(np.source_file) regexp '.*json.*' then 1 else 0 end --migration is json files\n        )  as pref_date,\n    first_value(np.data_date) over \n        (\n            partition by nm.cid, np.brand_id\n            order by \n                np.data_date asc nulls last,\n                case when lower(np.source_file) regexp '.*json.*' then 1 else 0 end --migration is json files\n        )  as first_pref_date\nfrom ${Database}.live.names nm\ninner join ${Database}.db.names_preference np on trim(np.name_urn) = nm.name_urn;\n                                     \ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_brand_preference',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_brand_preference;\n\n\n---------------------\n--all products (affiliations) by brand\n\n\ndrop table if exists ${Database}.live.cid_brand_product ;  \n\nCREATE OR REPLACE TABLE ${Database}.live.cid_brand_product\nas\nselect distinct\n    nm.cid,\n    rp.brand_id,\n    rp.product_id,\n    first_value(pr.data_date) over \n        (\n            partition by nm.cid, rp.brand_id, rp.product_id\n            order by pr.data_date desc nulls last\n        )  as last_date_brand_product\nfrom ${Database}.live.names nm\ninner join ${Database}.db.product pr on trim(pr.name_urn) = nm.name_urn\ninner join ${Database}.db.ref_product rp on pr.product_id = rp.product_id\nwhere rp.brand_id is not null;\n\nalter warehouse set warehouse_size = 'Small';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid_brand_product',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_brand_product;\n\ndrop table if exists ${Database}.live.ref_product;\n   \nCREATE OR REPLACE TABLE ${Database}.live.ref_product  \nas\nselect \n    product_id,\n    trim(product_name) as product_name\nfrom ${Database}.db.ref_product;\n\n\ndrop table if exists ${Database}.temp.build_rollups_cid_brand_product ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_brand_product\nas\nselect distinct\n    cid,\n    brand_id\nfrom ${Database}.live.cid_brand_product\nwhere last_date_brand_product > add_months(current_date, -60); --now only using data from the last 5 years to determine preference for brand\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_brand_product',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_brand_product;\n\n--purina engagement scoring\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_loyalty_scheme;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_loyalty_scheme\nas \nselect \n    distinct cid,\n    first_value(activity_date) over (partition by cid, trim(brand) order by activity_date desc) as activity_date,\n    'Joined Loyalty Scheme' as activity,\n    brand_id as activity_brand_id\nfrom (\n        select distinct    \n            xr.cid,\n            first_value(l.source_date) over (partition by xr.cid order by l.source_date desc) as activity_date,\n            'BETA' as brand,\n            (select brand_id from ${Database}.live.ref_brand where brand = 'Beta') as brand_id\n        from     ${Database}.db.npp_beta_pro_plan_loyalty l\n        join         ${Database}.live.xref_name_urn xr on xr.name_urn = 'REG_NPP_LYLTY|'||cast(l.urn as varchar)\n        where     trim(l.source) = 'BETA Loyalty'\n        \n        union all\n        \n        select distinct    \n            xr.cid,\n            first_value(l.source_date) over (partition by xr.cid order by l.source_date desc) as activity_date,\n            'Pro Plan' as brand,\n            (select brand_id from ${Database}.live.ref_brand where brand = 'Pro Plan') as brand_id\n        from     ${Database}.db.npp_beta_pro_plan_loyalty l\n        join         ${Database}.live.xref_name_urn xr on xr.name_urn = 'REG_NPP_LYLTY|'||cast(l.urn as varchar)\n        where     trim(l.source) = 'PRO PLAN Loyalty'\n        \n        union all\n        \n        select    \n            cid,\n            last_date_brand_product as activity_date,\n            case when product_id in (970,1611,1612,1613) then 'Pro Plan'\n                 when product_id = 1631 then 'Felix'\n                 when product_id = 1632 then 'Gourmet'\n                 else 'error' end as brand,\n            case when product_id in (970,1611,1612,1613) then (select brand_id from ${Database}.live.ref_brand where brand = 'Pro Plan')\n                 when product_id = 1631 then (select brand_id from ${Database}.live.ref_brand where brand = 'Felix')\n                 when product_id = 1632 then (select brand_id from ${Database}.live.ref_brand where brand = 'Gourmet')\n                 else cast(null as int) end as brand_id\n        from ${Database}.live.cid_brand_product\n        where product_id in (970,1611,1612,1613,1631,1632)\n        union all\n        select distinct\n            cid,\n            answer_data_date as activity_date,\n            'Your Purina' as brand,\n            (select brand_id from ${Database}.live.ref_brand where brand = 'Your Purina') as brand_id\n        from ${Database}.live.cid_question cq\n        inner join ${Database}.db.ref_question rq on rq.question_id = cq.question_id\n        where rq.question = 'Where do you buy food for your pets?'\n        ) a\n;\n\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_loyalty_scheme',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_loyalty_scheme;\n\ndrop table if exists ${Database}.temp.build_comms_history ;  \n\nalter warehouse set warehouse_size = 'Medium';\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_comms_history\nas \nselect \n    nm.cid,\n    ch.control_cell,\n    trim(ch.name_urn) as name_urn,\n    ch.drop_date,\n    ch.response_date,\n    ch.data_brand_id,\n    lower(trim(ch.email)) as email,\n    ch.brand_preference,\n    ch.brand_engagement,\n    trim(ch.programme_id)||'|'||trim(ch.campaign_id)||'|'||trim(ch.promotion_id)||'|'||trim(ch.cell_id)||'|'||trim(ch.pack_id) as packid\nfrom ${Database}.db.comms_hist ch\ninner join ${Database}.live.names nm on trim(ch.name_urn) = nm.name_urn;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_comms_history',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_comms_history;\n\n\ndrop table if exists ${Database}.temp.build_comms_history_lookup ;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_comms_history_lookup\nas\nselect *,\n    trim(programme_id)||'|'||trim(campaign_id)||'|'||trim(promotion_id)||'|'||trim(cell_id)||'|'||trim(pack_id) as packid\nfrom ${Database}.db.comms_hist_lookup;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_comms_history_lookup',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_comms_history_lookup;\n\n\n---------------------\n--responses\n\n\ndrop table if exists ${Database}.temp.adestra_events_in_xref;\n\n--create version of adestra table with all campaigns that are in the xref\nCREATE OR REPLACE TABLE ${Database}.temp.adestra_events_in_xref\nas\nselect\n    trim(ae.email) as EMAIL,\n\ttrim(ae.name_urn) as NAME_URN,\n\ttrim(ae.amf_id) as AMF_ID,\n\ttrim(ae.campaign_id) as CAMPAIGN_ID,\n\ttrim(ae.campaign_name) as CAMPAIGN_NAME,\n\ttrim(ae.event_name) as EVENT_NAME,\n\tae.event_timestamp,\n\ttrim(ae.link_label) as LINK_LABEL,\n\ttrim(ae.link_url) as LINK_URL,\n\ttrim(ae.form_builder_id) as FORM_BUILDER_ID,\n    trim(ae.email_client) as email_client,\n    trim(ae.email_client_type) as email_client_type,\n    trim(ae.browser) as browser,\n\ttrim(ae.kog_pack) as KOG_PACK,\n\ttrim(ae.source_file) as SOURCE_FILE,\n\tae.source_date,\n    trim(xr.ch_campaign_id) as ch_campaign_id\nfrom ${Database}.db.adestra_events ae\ninner join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(trim(ae.campaign_name)) = lower(trim(xr.adestra_campaign_name))\n                                                           and trim(xr.adestra_campaign_name) <> ''\nwhere ae.name_urn <> '999999';\n\ndrop table if exists ${Database}.temp.adestra_events_no_xref;\n\n--create version of adestra table with all campaign that are not in the xref\nCREATE OR REPLACE TABLE ${Database}.temp.adestra_events_no_xref\nas\nselect\n    trim(ae.email) as EMAIL,\n\ttrim(ae.name_urn) as NAME_URN,\n\ttrim(ae.amf_id) as AMF_ID,\n\ttrim(ae.campaign_id) as CAMPAIGN_ID,\n\ttrim(ae.campaign_name) as CAMPAIGN_NAME,\n\ttrim(ae.event_name) as EVENT_NAME,\n\tae.event_timestamp,\n\ttrim(ae.link_label) as LINK_LABEL,\n\ttrim(ae.link_url) as LINK_URL,\n\ttrim(ae.form_builder_id) as FORM_BUILDER_ID,\n    trim(ae.email_client) as email_client,\n    trim(ae.email_client_type) as email_client_type,\n    trim(ae.browser) as browser,\n\ttrim(ae.kog_pack) as KOG_PACK,\n\ttrim(ae.source_file) as SOURCE_FILE,\n\tae.source_date\nfrom ${Database}.db.adestra_events ae\nleft join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(trim(ae.campaign_name)) = lower(trim(xr.adestra_campaign_name))\n                                                          and trim(xr.adestra_campaign_name) <> ''\nwhere xr.adestra_campaign_name is null\n    and ae.name_urn <> '999999';\n\n\n\ndrop table if exists ${Database}.live.adestra_events ;  \n\nalter warehouse set warehouse_size = 'Xlarge';\n\n--insert the ones that are in the lookup and have a name_urn\ncreate or replace table ${Database}.live.adestra_events \nas \nselect distinct\n    'Adestra' as platform,\n    nm.cid,\n    ch.campaign_id,\n    lower(ae.email) as email,\n    ae.amf_id,\n    ae.campaign_id as adestra_campaign_id,\n    ae.campaign_name as adestra_campaign_name,\n    ae.event_name,\n    ae.event_timestamp,\n    case when ae.event_name ilike '%form_builder_click%' then 'DC | Service | Web Form'\n\t\t\t when ae.event_name ilike '%form_click%' then 'DC | Service | Web Form'\n             when ae.event_name ilike '%webversion_click%' then 'O | Generic | View in Browser'\n             else  coalesce(rll.link_label, ae.link_label)\n    end as link_label,\n    ae.link_url,\n    ae.form_builder_id,\n    ae.email_client,\n    ae.email_client_type,\n    ae.browser,\n\tcoalesce(ae.kog_pack,'') as kog_pack,\n    ae.source_file,\n    ae.source_date\nfrom ${Database}.temp.adestra_events_in_xref ae --the name_urn on here is only historic - assume only email now supplied\ninner join ${Database}.live.xref_name_urn nm on ae.name_urn = nm.name_urn --get all the old ones\ninner join ${Database}.temp.build_comms_history_lookup ch on lower(ch.campaign_id) = lower(ae.ch_campaign_id)\nleft join ${Database}.db.ref_link_label rll on trim(ae.link_url) = trim(rll.link_url)\n                                      and trim(lower(ae.campaign_name)) = trim(lower(rll.campaign_name)) \nwhere ae.name_urn > '';\n\n\n--insert the ones that are in the lookup with no name_urn\ninsert into ${Database}.live.adestra_events \nselect distinct\n    'Adestra' as platform,\n    nm.cid,\n    ch.campaign_id,\n    lower(ae.email) as email,\n    ae.amf_id,\n    ae.campaign_id as adestra_campaign_id,\n    ae.campaign_name,\n    ae.event_name,\n    ae.event_timestamp,\n    case when ae.event_name ilike '%form_builder_click%' then 'DC | Service | Web Form'\n\t\t\t when ae.event_name ilike '%form_click%' then 'DC | Service | Web Form'\n             when ae.event_name ilike '%webversion_click%' then 'O | Generic | View in Browser'\n             else  coalesce(rll.link_label, ae.link_label)\n    end as link_label,\n    ae.link_url,\n    ae.form_builder_id,\n    ae.email_client,\n    ae.email_client_type,\n    ae.browser,\n\tcoalesce(ae.kog_pack,'') as kog_pack,\n    ae.source_file,\n    ae.source_date\nfrom ${Database}.temp.adestra_events_in_xref ae --the name_urn on here is only historic - assume only email now supplied\ninner join ${Database}.live.xref_email nm on lower(ae.email) = nm.email --use this as it is all email addresses on the db\ninner join ${Database}.temp.build_comms_history_lookup ch on lower(ch.campaign_id) = lower(ae.ch_campaign_id)\ninner join ${Database}.temp.build_comms_history chb on chb.packid = ch.packid \n                                        and chb.cid = nm.cid\nleft join ${Database}.db.ref_link_label rll on trim(ae.link_url) = trim(rll.link_url)\n                                      and trim(lower(ae.campaign_name)) = trim(lower(rll.campaign_name))                                         \n\nwhere ae.name_urn = '';\n\n\ndrop table if exists ${Database}.temp.adestra_events_in_xref;\n\n\n--insert the ones that are not in the lookup but with name_urn\ninsert into ${Database}.live.adestra_events \nselect distinct\n    'Adestra' as platform,\n    nm.cid,\n    ch.campaign_id,\n    lower(ae.email) as email,\n    ae.amf_id,\n    ae.campaign_id as adestra_campaign_id,\n    ae.campaign_name,\n    ae.event_name,\n    ae.event_timestamp,\n    case when ae.event_name ilike '%form_builder_click%' then 'DC | Service | Web Form'\n\t\t\t when ae.event_name ilike '%form_click%' then 'DC | Service | Web Form'\n             when ae.event_name ilike '%webversion_click%' then 'O | Generic | View in Browser'\n             else  coalesce(rll.link_label, ae.link_label)\n    end as link_label,\n    ae.link_url,\n    ae.form_builder_id,\n    ae.email_client,\n    ae.email_client_type,\n    ae.browser,\n\tcoalesce(ae.kog_pack,'') as kog_pack,\n    ae.source_file,\n    ae.source_date\nfrom ${Database}.temp.adestra_events_no_xref ae --the name_urn on here is only historic - assume only email now supplied\ninner join ${Database}.live.xref_name_urn nm on ae.name_urn = nm.name_urn\ninner join ${Database}.temp.build_comms_history_lookup ch on ch.programme_id = 'E' \n                                              and lower(ch.campaign_id) = lower(case when ae.campaign_name ilike '%_MTE_%' then tbw.db.strchop(ae.campaign_name,'_',1,3) else tbw.db.strchop(ae.campaign_name,'_',1,1) end)\nleft join ${Database}.db.ref_link_label rll on trim(ae.link_url) = trim(rll.link_url)\n                                      and trim(lower(ae.campaign_name)) = trim(lower(rll.campaign_name))                                              \nwhere ae.name_urn > '';\n\n\n--insert the ones that are not in the lookup with no name_urn\ninsert into ${Database}.live.adestra_events \nselect distinct\n    'Adestra' as platform, \n    nm.cid,\n    ch.campaign_id,\n    lower(ae.email) as email,\n    ae.amf_id,\n    ae.campaign_id as adestra_campaign_id,\n    ae.campaign_name,\n    ae.event_name,\n    ae.event_timestamp,\n    case when ae.event_name ilike '%form_builder_click%' then 'DC | Service | Web Form'\n\t\t\t when ae.event_name ilike '%form_click%' then 'DC | Service | Web Form'\n             when ae.event_name ilike '%webversion_click%' then 'O | Generic | View in Browser'\n             else  coalesce(rll.link_label, ae.link_label)\n    end as link_label,\n    ae.link_url,\n    ae.form_builder_id,\n    ae.email_client,\n    ae.email_client_type,\n    ae.browser,\n\tcoalesce(ae.kog_pack,'') as kog_pack,\n    ae.source_file,\n    ae.source_date\nfrom ${Database}.temp.adestra_events_no_xref ae --the name_urn on here is only historic - assume only email now supplied\ninner join ${Database}.live.xref_email nm on lower(ae.email) = nm.email --use this as it is all email addresses on the db\ninner join ${Database}.temp.build_comms_history_lookup ch on ch.programme_id = 'E' \n                                              and lower(ch.campaign_id) = lower(case when ae.campaign_name ilike '%_MTE_%' then tbw.db.strchop(ae.campaign_name,'_',1,3) else tbw.db.strchop(ae.campaign_name,'_',1,1) end)\ninner join ${Database}.temp.build_comms_history chb on chb.packid = ch.packid \n\n                                        and chb.cid = nm.cid \n\nleft join ${Database}.db.ref_link_label rll on trim(ae.link_url) = trim(rll.link_url)\n                                      and trim(lower(ae.campaign_name)) = trim(lower(rll.campaign_name))\nwhere ae.name_urn = '';\n\ndrop table ${Database}.temp.adestra_events_no_xref;\n\n\nalter warehouse set warehouse_size = 'Medium';\n\ndrop table if exists ${Database}.temp.mapp_events_in_xref;\n\n--create version of adestra table with all campaigns that are in the xref\nCREATE OR REPLACE TABLE ${Database}.temp.mapp_events_in_xref\nas\nselect\n    mp.senttomta_timestamp,\n\ttrim(mp.senttomta_externaltransactionid) as senttomta_externaltransactionid,\n\ttrim(mp.senttomta_sendoutchannel) as senttomta_sendoutchannel,\n\tmp.skip_timestamp,\n\ttrim(mp.skip_category) as skip_category,\n\ttrim(mp.skip_externaltransactionid) as skip_externaltransactionid,\n\tmp.bounce_timestamp,\n\ttrim(mp.bounce_category) as bounce_category,\n\ttrim(mp.bounce_text) as bounce_text,\n\tmp.feedback_timestamp,\n\ttrim(mp.feedback_category) as feedback_category,\n\tmp.render_timestamp,\n\ttrim(mp.render_geolocation_isocountrycode) as render_geolocation_isocountrycode,\n\ttrim(mp.render_geolocation_regioncode) as render_geolocation_regioncode,\n\ttrim(mp.render_geolocation_city) as render_geolocation_city,\n\ttrim(mp.render_geolocation_latitude) as render_geolocation_latitude,\n\ttrim(mp.render_geolocation_longitude) as render_geolocation_longitude,\n\ttrim(mp.render_useragent_platform) as render_useragent_platform,\n\ttrim(mp.render_useragent_operatingsystemname) as render_useragent_operatingsystemname,\n\ttrim(mp.render_useragent_operatingsystemversion) as render_useragent_operatingsystemversion,\n\ttrim(mp.render_useragent_clientname) as render_useragent_clientname,\n\ttrim(mp.render_useragent_clientversion) as render_useragent_clientversion,\n\ttrim(mp.render_useragent_rawstring) as render_useragent_rawstring,\n\tmp.click_timestamp,\n\ttrim(mp.click_link_id) as click_link_id,\n\ttrim(mp.click_link_category_id) as click_link_category_id,\n\ttrim(mp.click_link_category_name) as click_link_category_name,\n\ttrim(mp.click_link_url) as click_link_url,\n\ttrim(mp.click_link_systemlinktype) as click_link_systemlinktype,\n\ttrim(mp.click_link_type) as click_link_type,\n\ttrim(mp.click_geolocation_isocountrycode) as click_geolocation_isocountrycode,\n\ttrim(mp.click_geolocation_regioncode) as click_geolocation_regioncode,\n\ttrim(mp.click_geolocation_city) as click_geolocation_city,\n\ttrim(mp.click_geolocation_latitude) as click_geolocation_latitude,\n\ttrim(mp.click_geolocation_longitude) as click_geolocation_longitude,\n\ttrim(mp.click_useragent_platform) as click_useragent_platform,\n\ttrim(mp.click_useragent_operatingsystem) as click_useragent_operatingsystem,\n\ttrim(mp.click_useragent_operatingsystemversion) as click_useragent_operatingsystemversion,\n\ttrim(mp.click_useragent_clientname) as click_useragent_clientname,\n\ttrim(mp.click_useragent_clientversion) as click_useragent_clientversion,\n\ttrim(mp.click_useragent_rawstring) as click_useragent_rawstring,\n\tmp.unsubscribe_timestamp,\n\tmp.forward_timestamp,\n\tmp.conversion_cp_timestamp,\n\ttrim(mp.conversion_cp_id) as conversion_cp_id,\n\ttrim(mp.conversion_cp_name) as conversion_cp_name,\n\ttrim(mp.conversion_cp_orderid) as conversion_cp_orderid,\n\ttrim(mp.conversion_cp_itemcount) as conversion_cp_itemcount,\n\ttrim(mp.conversion_cp_amount) as conversion_cp_amount,\n\ttrim(mp.conversion_cp_requestparameters) as conversion_cp_requestparameters,\n\ttrim(mp.group_id) as group_id,\n\ttrim(mp.group_name) as group_name,\n\ttrim(mp.group_email) as group_email,\n\ttrim(mp.group_category_id) as group_category_id,\n\ttrim(mp.group_category_name) as group_category_name,\n\ttrim(mp.message_id) as message_id,\n\ttrim(mp.message_name) as message_name,\n\ttrim(mp.message_category_id) as message_category_id,\n\ttrim(mp.message_category_name) as message_category_name,\n\ttrim(mp.message_subject_unresolved) as message_subject_unresolved,\n\ttrim(mp.message_externalid) as message_externalid,\n\ttrim(mp.message_type) as message_type,\n\ttrim(mp.message_variation_id) as message_variation_id,\n\ttrim(mp.selection_id) as selection_id,\n\ttrim(mp.selection_name) as selection_name,\n\tmp.record_timestamp,\n\ttrim(mp.record_type) as record_type,\n\tmp.record_senttomta_timestamp,\n\ttrim(mp.record_externaltransactionid) as record_externaltransactionid,\n\ttrim(mp.sendout_type) as sendout_type,\n\ttrim(mp.sendout_addresseerole) as sendout_addresseerole,\n\ttrim(mp.sendout_recipienttype) as sendout_recipienttype,\n\ttrim(mp.user_id) as user_id,\n\ttrim(mp.user_email) as user_email,\n\ttrim(mp.user_mobilenumber) as user_mobilenumber,\n\ttrim(mp.user_faxnumber) as user_faxnumber,\n\ttrim(mp.user_identifier) as user_identifier,\n\ttrim(mp.user_custom_attribute_batch) as user_custom_attribute_batch,\n\ttrim(mp.user_custom_attribute_cell) as user_custom_attribute_cell,\n\ttrim(mp.user_custom_attribute_name_urn) as user_custom_attribute_name_urn,\n\ttrim(mp.source_file) as source_file,\n\tmp.source_date,\n    xr.ch_campaign_id\nfrom ${Database}.db.mapp_events mp\ninner join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(trim(mp.message_name)) = lower(trim(xr.mapp_message_name))\n                                                           and trim(xr.mapp_message_name) <> '';\n\n\ndrop table if exists ${Database}.temp.mapp_events_no_xref;\n\n--create version of adestra table with all campaigns that are in the xref\nCREATE OR REPLACE TABLE ${Database}.temp.mapp_events_no_xref\nas\nselect\n    mp.senttomta_timestamp,\n\ttrim(mp.senttomta_externaltransactionid) as senttomta_externaltransactionid,\n\ttrim(mp.senttomta_sendoutchannel) as senttomta_sendoutchannel,\n\tmp.skip_timestamp,\n\ttrim(mp.skip_category) as skip_category,\n\ttrim(mp.skip_externaltransactionid) as skip_externaltransactionid,\n\tmp.bounce_timestamp,\n\ttrim(mp.bounce_category) as bounce_category,\n\ttrim(mp.bounce_text) as bounce_text,\n\tmp.feedback_timestamp,\n\ttrim(mp.feedback_category) as feedback_category,\n\tmp.render_timestamp,\n\ttrim(mp.render_geolocation_isocountrycode) as render_geolocation_isocountrycode,\n\ttrim(mp.render_geolocation_regioncode) as render_geolocation_regioncode,\n\ttrim(mp.render_geolocation_city) as render_geolocation_city,\n\ttrim(mp.render_geolocation_latitude) as render_geolocation_latitude,\n\ttrim(mp.render_geolocation_longitude) as render_geolocation_longitude,\n\ttrim(mp.render_useragent_platform) as render_useragent_platform,\n\ttrim(mp.render_useragent_operatingsystemname) as render_useragent_operatingsystemname,\n\ttrim(mp.render_useragent_operatingsystemversion) as render_useragent_operatingsystemversion,\n\ttrim(mp.render_useragent_clientname) as render_useragent_clientname,\n\ttrim(mp.render_useragent_clientversion) as render_useragent_clientversion,\n\ttrim(mp.render_useragent_rawstring) as render_useragent_rawstring,\n\tmp.click_timestamp,\n\ttrim(mp.click_link_id) as click_link_id,\n\ttrim(mp.click_link_category_id) as click_link_category_id,\n\ttrim(mp.click_link_category_name) as click_link_category_name,\n\ttrim(mp.click_link_url) as click_link_url,\n\ttrim(mp.click_link_systemlinktype) as click_link_systemlinktype,\n\ttrim(mp.click_link_type) as click_link_type,\n\ttrim(mp.click_geolocation_isocountrycode) as click_geolocation_isocountrycode,\n\ttrim(mp.click_geolocation_regioncode) as click_geolocation_regioncode,\n\ttrim(mp.click_geolocation_city) as click_geolocation_city,\n\ttrim(mp.click_geolocation_latitude) as click_geolocation_latitude,\n\ttrim(mp.click_geolocation_longitude) as click_geolocation_longitude,\n\ttrim(mp.click_useragent_platform) as click_useragent_platform,\n\ttrim(mp.click_useragent_operatingsystem) as click_useragent_operatingsystem,\n\ttrim(mp.click_useragent_operatingsystemversion) as click_useragent_operatingsystemversion,\n\ttrim(mp.click_useragent_clientname) as click_useragent_clientname,\n\ttrim(mp.click_useragent_clientversion) as click_useragent_clientversion,\n\ttrim(mp.click_useragent_rawstring) as click_useragent_rawstring,\n\tmp.unsubscribe_timestamp,\n\tmp.forward_timestamp,\n\tmp.conversion_cp_timestamp,\n\ttrim(mp.conversion_cp_id) as conversion_cp_id,\n\ttrim(mp.conversion_cp_name) as conversion_cp_name,\n\ttrim(mp.conversion_cp_orderid) as conversion_cp_orderid,\n\ttrim(mp.conversion_cp_itemcount) as conversion_cp_itemcount,\n\ttrim(mp.conversion_cp_amount) as conversion_cp_amount,\n\ttrim(mp.conversion_cp_requestparameters) as conversion_cp_requestparameters,\n\ttrim(mp.group_id) as group_id,\n\ttrim(mp.group_name) as group_name,\n\ttrim(mp.group_email) as group_email,\n\ttrim(mp.group_category_id) as group_category_id,\n\ttrim(mp.group_category_name) as group_category_name,\n\ttrim(mp.message_id) as message_id,\n\ttrim(mp.message_name) as message_name,\n\ttrim(mp.message_category_id) as message_category_id,\n\ttrim(mp.message_category_name) as message_category_name,\n\ttrim(mp.message_subject_unresolved) as message_subject_unresolved,\n\ttrim(mp.message_externalid) as message_externalid,\n\ttrim(mp.message_type) as message_type,\n\ttrim(mp.message_variation_id) as message_variation_id,\n\ttrim(mp.selection_id) as selection_id,\n\ttrim(mp.selection_name) as selection_name,\n\tmp.record_timestamp,\n\ttrim(mp.record_type) as record_type,\n\tmp.record_senttomta_timestamp,\n\ttrim(mp.record_externaltransactionid) as record_externaltransactionid,\n\ttrim(mp.sendout_type) as sendout_type,\n\ttrim(mp.sendout_addresseerole) as sendout_addresseerole,\n\ttrim(mp.sendout_recipienttype) as sendout_recipienttype,\n\ttrim(mp.user_id) as user_id,\n\ttrim(mp.user_email) as user_email,\n\ttrim(mp.user_mobilenumber) as user_mobilenumber,\n\ttrim(mp.user_faxnumber) as user_faxnumber,\n\ttrim(mp.user_identifier) as user_identifier,\n\ttrim(mp.user_custom_attribute_batch) as user_custom_attribute_batch,\n\ttrim(mp.user_custom_attribute_cell) as user_custom_attribute_cell,\n\ttrim(mp.user_custom_attribute_name_urn) as user_custom_attribute_name_urn,\n\ttrim(mp.source_file) as source_file,\n\tmp.source_date,\n    xr.ch_campaign_id\nfrom ${Database}.db.mapp_events mp\nleft join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(trim(mp.message_name)) = lower(trim(xr.mapp_message_name))\n                                                           and trim(xr.mapp_message_name) <> ''\nwhere xr.mapp_message_name is null;\n\n\n\n--insert the ones that are in the lookup and have a name_urn\ninsert into ${Database}.live.adestra_events\nselect distinct\n    'Mapp' as platform,\n    xr.cid,\n    chl.campaign_id,\n    lower(mp.user_email) as email,\n    '' as amf_id,\n    mp.message_id as adestra_campaign_id,\n    mp.message_name as adestra_campaign_name,\n    case\n        when mp.record_type = 'SentToMTA' then 'sent_campaign'\n        when mp.record_type = 'Render' then 'read'\n        when mp.record_type = 'Click' then 'click'\n        when mp.record_type = 'Bounce' then 'inbound_bounce'\n        when mp.record_type = 'Feedback' then 'feedback'\n        when mp.record_type = 'Skip' then 'skip'\n        else lower(mp.record_type)\n    end as event_name,\n    mp.record_timestamp as event_timestamp,\n    coalesce(trim(rll.link_label), mp.click_link_category_name) as link_label,\n    mp.click_link_url as link_url,\n    '' as form_builder_id,\n    '' as email_client,\n    '' as email_client_type,\n    '' as browser,\n    '' as kog_pack,\n    mp.source_file,\n    mp.source_date\nfrom ${Database}.temp.mapp_events_in_xref mp\ninner join ${Database}.live.xref_name_urn xr on mp.user_custom_attribute_name_urn = xr.name_urn\ninner join ${Database}.temp.build_comms_history_lookup chl on lower(chl.campaign_id) = lower(mp.ch_campaign_id)\nleft join ${Database}.db.ref_link_label rll on trim(mp.click_link_url) = trim(rll.link_url)\n                                      and trim(lower(mp.message_name)) = trim(lower(rll.campaign_name))                                        \nwhere mp.user_custom_attribute_name_urn > '';\n    \n\n--insert the ones that are in the lookup with no name_urn\ninsert into ${Database}.live.adestra_events\nselect distinct\n    'Mapp' as platform,\n    xr.cid,\n    chl.campaign_id,\n    lower(mp.user_email) as email,\n    '' as amf_id,\n    mp.message_id as adestra_campaign_id,\n    mp.message_name as adestra_campaign_name,\n    case\n        when mp.record_type = 'SentToMTA' then 'sent_campaign'\n        when mp.record_type = 'Render' then 'read'\n        when mp.record_type = 'Click' then 'click'\n        when mp.record_type = 'Bounce' then 'inbound_bounce'\n        when mp.record_type = 'Feedback' then 'feedback'\n        when mp.record_type = 'Skip' then 'skip'\n        else lower(mp.record_type)\n    end as event_name,\n    mp.record_timestamp as event_timestamp,\n    coalesce(trim(rll.link_label), mp.click_link_category_name) as link_label,\n    mp.click_link_url as link_url,\n    '' as form_builder_id,\n    '' as email_client,\n    '' as email_client_type,\n    '' as browser,\n    '' as kog_pack,\n    mp.source_file,\n    mp.source_date\nfrom ${Database}.temp.mapp_events_in_xref mp\ninner join ${Database}.live.xref_email xr on lower(mp.user_email) = lower(xr.email)\ninner join ${Database}.temp.build_comms_history_lookup chl on lower(chl.campaign_id) = lower(mp.ch_campaign_id)\ninner join ${Database}.temp.build_comms_history ch on ch.packid = chl.packid\n                                             and ch.cid = xr.cid\nleft join ${Database}.db.ref_link_label rll on trim(mp.click_link_url) = trim(rll.link_url)\n                                      and trim(lower(mp.message_name)) = trim(lower(rll.campaign_name))\nwhere mp.user_custom_attribute_name_urn = '';\n\n\ndrop table if exists ${Database}.temp.mapp_events_in_xref;\n\n\n--insert the ones that are not in the lookup but with name_urn\ninsert into ${Database}.live.adestra_events\nselect distinct\n    'Mapp' as platform,\n    xr.cid,\n    chl.campaign_id,\n    lower(mp.user_email) as email,\n    '' as amf_id,\n    mp.message_id as adestra_campaign_id,\n    mp.message_name as adestra_campaign_name,\n    case\n        when mp.record_type = 'SentToMTA' then 'sent_campaign'\n        when mp.record_type = 'Render' then 'read'\n        when mp.record_type = 'Click' then 'click'\n        when mp.record_type = 'Bounce' then 'inbound_bounce'\n        when mp.record_type = 'Feedback' then 'feedback'\n        when mp.record_type = 'Skip' then 'skip'\n        else lower(mp.record_type)\n    end as event_name,\n    mp.record_timestamp as event_timestamp,\n    coalesce(trim(rll.link_label), mp.click_link_category_name) as link_label,\n    mp.click_link_url as link_url,\n    '' as form_builder_id,\n    '' as email_client,\n    '' as email_client_type,\n    '' as browser,\n    '' as kog_pack,\n    mp.source_file,\n    mp.source_date\nfrom ${Database}.temp.mapp_events_no_xref mp\ninner join ${Database}.live.xref_name_urn xr on mp.user_custom_attribute_name_urn = xr.name_urn\ninner join ${Database}.temp.build_comms_history_lookup chl on chl.programme_id = 'E'\n                                                     and lower(chl.campaign_id) = lower(case when collate(mp.message_name,'') ilike '%_MTE_%' then tbw.db.strchop(mp.message_name,'_',1,3) else split_part(mp.message_name,'_',1) end)\nleft join ${Database}.db.ref_link_label rll on trim(mp.click_link_url) = trim(rll.link_url)\n                                      and trim(lower(mp.message_name)) = trim(lower(rll.campaign_name))\nwhere mp.user_custom_attribute_name_urn > '';\n\n\n--insert the ones that are not in the lookup with no name_urn\ninsert into ${Database}.live.adestra_events\nselect distinct\n    'Mapp' as platform,\n    xr.cid,\n    chl.campaign_id,\n    lower(mp.user_email) as email,\n    '' as amf_id,\n    mp.message_id as adestra_campaign_id,\n    mp.message_name as adestra_campaign_name,\n    case\n        when mp.record_type = 'SentToMTA' then 'sent_campaign'\n        when mp.record_type = 'Render' then 'read'\n        when mp.record_type = 'Click' then 'click'\n        when mp.record_type = 'Bounce' then 'inbound_bounce'\n        when mp.record_type = 'Feedback' then 'feedback'\n        when mp.record_type = 'Skip' then 'skip'\n        else lower(mp.record_type)\n    end as event_name,\n    mp.record_timestamp as event_timestamp,\n    coalesce(trim(rll.link_label), mp.click_link_category_name) as link_label,\n    mp.click_link_url as link_url,\n    '' as form_builder_id,\n    '' as email_client,\n    '' as email_client_type,\n    '' as browser,\n    '' as kog_pack,\n    mp.source_file,\n    mp.source_date\nfrom ${Database}.temp.mapp_events_no_xref mp\ninner join ${Database}.live.xref_email xr on lower(mp.user_email) = lower(xr.email)\ninner join ${Database}.temp.build_comms_history_lookup chl on chl.programme_id = 'E'\n                                                     and lower(chl.campaign_id) = lower(case when collate(mp.message_name,'') ilike '%_MTE_%' then tbw.db.strchop(mp.message_name,'_',1,3) else split_part(mp.message_name,'_',1) end)\ninner join ${Database}.temp.build_comms_history ch on ch.packid = chl.packid\n                                             and ch.cid = xr.cid\nleft join ${Database}.db.ref_link_label rll on trim(mp.click_link_url) = trim(rll.link_url)\n                                      and trim(lower(mp.message_name)) = trim(lower(rll.campaign_name))                                              \nwhere mp.user_custom_attribute_name_urn = '';\n\nalter warehouse set warehouse_size = 'Small';\n\ndrop table ${Database}.temp.mapp_events_no_xref;\n\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.adestra_events',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.adestra_events;\n\n--select count(*) from ${Database}.live.adestra_events; --20,747,040\n--select count(*) from ${Database}.db.adestra_events; --63,857,827\n--select * from ${Database}.live.adestra_events;\n\n---------------------\n--all those who have opened an email by brand\n\ndrop table if exists ${Database}.temp.build_rollups_cid_brand_emails ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_brand_emails\nas\nselect \n    ae.email,\n    ch.brand_id,\n    max(cast(ae.event_timestamp as date)) as event_date\nfrom ${Database}.live.adestra_events ae\ninner join ${Database}.temp.build_comms_history_lookup ch on ch.campaign_id = ae.campaign_id\nwhere ch.brand_id is not null\n    and lower(collate(ae.event_name,'')) regexp '.*click.*|.*open.*|.*read.*|.*shared.*|.*submit.*'\n    and lower(collate(ae.event_name,'')) not regexp '.*unsubscribe.*'\n    and ae.event_timestamp > add_months(current_date, -60) --now only using data from the last 5 years to determine preference for brand\ngroup by \n    ae.email,\n    ch.brand_id; \n\n--insert SMA emails\ninsert into ${Database}.temp.build_rollups_cid_brand_emails\nselect\n    ae.email,\n    rb.brand_id,\n    max(cast(ae.event_timestamp as date)) as event_date\nfrom ${Database}.db.adestra_events_sma ae\ninner join ${Database}.db.ref_brand rb on lower(trim(rb.brand)) = 'sma'\nwhere lower(ae.event_name) regexp '.*click.*|.*open.*|.*read.*|.*shared.*|.*submit.*'\n    and lower(ae.event_name) not regexp '.*unsubscribe.*'\n    and ae.event_timestamp > add_months(current_date, -60) --now only using data from the last 5 years to determine preference for brand\n    and trim(ae.workspace_name) = 'SMA'\ngroup by \n    ae.email,\n    rb.brand_id; \n\n--insert Cerelac emails\ninsert into ${Database}.temp.build_rollups_cid_brand_emails\nselect\n    ae.email,\n    rb.brand_id,\n    max(cast(ae.event_timestamp as date)) as event_date\nfrom ${Database}.db.adestra_events_sma ae\ninner join ${Database}.db.ref_brand rb on lower(trim(rb.brand)) = 'cerelac'\nwhere lower(ae.event_name) regexp '.*click.*|.*open.*|.*read.*|.*shared.*|.*submit.*'\n    and lower(ae.event_name) not regexp '.*unsubscribe.*'\n    and ae.event_timestamp > add_months(current_date, -60) --now only using data from the last 5 years to determine preference for brand\n    and lower(ae.workspace_name) regexp '.*cerelac.*'\ngroup by \n    ae.email,\n    rb.brand_id; \n\n--insert HCP emails\ninsert into ${Database}.temp.build_rollups_cid_brand_emails\nselect\n    ae.email,\n    rb.brand_id,\n    max(cast(ae.event_timestamp as date)) as event_date\nfrom ${Database}.db.adestra_events_hcp ae\ninner join ${Database}.db.ref_brand rb on lower(trim(rb.brand)) = 'hcp'\nwhere lower(ae.event_name) regexp '.*click.*|.*open.*|.*read.*|.*shared.*|.*submit.*'\n    and lower(ae.event_name) not regexp '.*unsubscribe.*'\n    and ae.event_timestamp > add_months(current_date, -60) --now only using data from the last 5 years to determine preference for brand\ngroup by \n    ae.email,\n    rb.brand_id; \n\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_brand_emails',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_brand_emails;\n\n\n---------------------\n--purina engagement scoring\n\n--Contact CES\n\nalter warehouse set warehouse_size = 'Xsmall';\n\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_careline;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_careline\nas \nselect    \n    cid, \n    activity_date,\n    min(activity) as activity,\n    cast(null as int) as activity_brand_id\nfrom      \n(\n    select    \n        trim(name_urn) as name_urn,\n        cast(contact_date as date) as activity_date,\n        'Contacted CES (without completing survey)' as activity\n    from ${Database}.db.npp_ces_contacts\n    union all \n    select    \n        trim(name_urn) as name_urn,\n        cast(contact_date as date) as activity_date,\n        'Completed CES Survey'\n    from ${Database}.db.npp_ces_contacts_and_surveys\n) cs\ninner join ${Database}.live.xref_name_urn xr on xr.name_urn = cs.name_urn\ngroup by 1, 2;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_careline',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_careline;\n\n\n--Coupons\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_coupons;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_coupons\nas \nselect    \n    cid,\n    print_date as activity_date,\n    case \n        when max(trim(redeemed)) = 'Y' then 'Redeemed Coupon'\n        else 'Downloaded Coupon (but did not redeem)'\n    end as activity,\n    qc.brand_id as activity_brand_id\nfrom ${Database}.db.quotient_coupons qc\ninner join ${Database}.live.xref_name_urn xr on trim(qc.name_urn) = xr.name_urn\nwhere trim(qc.name_urn) > ''\ngroup by 1,2,4\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_coupons',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_coupons;\n\n--THG Purchases\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_thg_purchases;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_thg_purchases\nas\nselect distinct\n    n.cid,\n    order_created as activity_date,\n    'Purchased Product' as activity,\n    n.source_brand_id as activity_brand_id\nfrom (\n        select distinct\n                customer_id,\n                order_created,\n                sum(quantity_ordered * transaction_charge_price_per_unit) as order_total_value\n        from ${Database}.db.npp_thg_trans\n        where lower(trim(order_line_status)) = 'despatched'\n        group by customer_id, order_created\n        ) thg\nleft join ${Database}.live.names n on n.name_urn = 'REG_THG|'||cast(thg.customer_id as varchar)\nwhere order_total_value > 0 --1 or more items were not free packs\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_thg_purchases',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_thg_purchases;\n\n--Competition entry/draw\ndrop table if exists ${Database}.temp.build_rollups_npp_competition_entry;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_competition_entry\nas\nselect    \n    cid,\n    max(drop_date) as activity_date,\n    'Competition entry' activity,\n    (select brand_id from ${Database}.live.ref_brand where brand ilike '%purina masterbrand%') as activity_brand_id\nfrom ${Database}.db.comms_hist cmp\ninner join ${Database}.live.xref_name_urn xr on trim(cmp.name_urn) = xr.name_urn\nwhere trim(cmp.name_urn) > ''\nand cmp.promotion_id = 'NPP07753_2'\ngroup by 1,3,4\nunion all\nselect\n    cid,\n    max(q.data_date) as activity_date,\n    'Competition entry' activity,\n    (select brand_id from ${Database}.live.ref_brand where brand ilike '%purina masterbrand%') as activity_brand_id\nfrom ${Database}.db.question q\ninner join ${Database}.live.xref_name_urn x on x.name_urn = q.name_urn\nwhere question_id = (select question_id from ${Database}.db.ref_question where question = 'Pet Photo Uploader')\ngroup by 1,3,4\nunion all\nselect\n    cid,\n    max(acq.data_date) as activity_date,\n    'Competition entry' activity,\n    (select brand_id from ${Database}.live.ref_brand where brand ilike '%purina masterbrand%') as activity_brand_id\nfrom ${Database}.db.names_attributes acq\ninner join ${Database}.live.xref_name_urn x on x.name_urn = acq.name_urn\nwhere REGISTRATION_CAMPAIGN = 'NBS - UK - Quiz - Purina Summer Special - long form - chrono'\ngroup by 1,3,4\nunion all\nselect\n    cid,\n    max(na.data_date) as activity_date,\n    'Competition entry' activity,\n    (select brand_id from ${Database}.live.ref_brand where brand ilike '%purina masterbrand%') as activity_brand_id\nfrom ${Database}.db.names na\ninner join ${Database}.live.xref_name_urn x on x.name_urn = na.name_urn\nwhere na.source = 'NPP09393_BT_SS_QUALIFIO_EXIST'\ngroup by 1,3,4;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_competition_entry',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_competition_entry;\n\n\n--Pet Photo Upload\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_photo_upload;\ncreate or replace table ${Database}.temp.build_rollups_npp_engagement_photo_upload\nas\nselect\n    cid,\n    max(q.data_date) as activity_date,\n    'User Generated Content' activity,\n    (select brand_id from ${Database}.live.ref_brand where brand ilike '%masterbrand%') as activity_brand_id\nfrom ${Database}.db.question q\ninner join ${Database}.live.xref_name_urn x on x.name_urn = q.name_urn\nwhere question_id = (select question_id from ${Database}.db.ref_question where question = 'Pet Photo Uploader')\ngroup by 1,3,4\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_photo_upload',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_photo_upload;\n\n\n--Casting a vote\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_voters;\ncreate or replace table ${Database}.temp.build_rollups_npp_engagement_voters\nas\nselect\n    cid,\n    max(q.data_date) as activity_date,\n    'Cast a Vote' activity,\n    (select brand_id from ${Database}.live.ref_brand where brand ilike '%masterbrand%') as activity_brand_id\nfrom ${Database}.db.question q\ninner join ${Database}.live.xref_name_urn x on x.name_urn = q.name_urn\nwhere question_id = (select question_id from ${Database}.db.ref_question where question = 'Pet Photo Voter')\ngroup by 1,3,4\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_voters',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_voters;\n\n\n--Reconsent\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_reconsent;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_reconsent\nas \nselect    \n    xr.cid,\n    dp.data_date as activity_date,\n    'Reconsent' as activity,\n    cast(null as int) as activity_brand_id\nfrom ${Database}.db.names_dp dp\nleft join ${Database}.live.xref_name_urn xr on xr.name_urn = trim(dp.name_urn)\nwhere trim(dp.source) in ('RESP_ADE_10|232','RESP_ADE_10|234','RESP_ADE_10|253','RESP_ADE_10|259','RESP_ADE_10|274','RESP_ADE_10|275','RESP_ADE_10|317')\nand dp_emailable = 1\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_reconsent',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_reconsent;\n\n\n--registered CIAM account\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_CIAM_accounts;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_CIAM_accounts\nas\nselect distinct\ncid\n,data_date as activity_date\n,case when rownum = 1 then 'Registered New CIAM Account' \n         when rownum > 1 then 'Updated CIAM Account'\n         end as activity\n         ,source_brand_id\nfrom\n(\nselect\n    cid\n    ,nm.data_date\n    ,nm.source_brand_id\n    ,row_number() over (partition by cid,nm.data_date order by nm.data_date asc,nm.source_brand_id asc) as rownum\nfrom ${Database}.live.names nm\ninner join ${Database}.db.names_preference np on trim(np.name_urn) = nm.name_urn\nwhere nm.source = 'REG_GIG' --have a gigya account\nand data_controller_id = 5 --gigya account is for a Purina brand\nand lower(nm.source_file) not regexp '.*json.*' --account was not migrated\nand lower(np.source_file) not regexp '.*json.*'\n) t\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_CIAM_accounts',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_CIAM_accounts;\n\n--Registered to Growing Pup\n--drop table if exists ${Database}.temp.build_rollups_npp_engagement_GP_registrants;\n--CREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_GP_registrants\n--as\n--select distinct\n --   xr.cid,\n--    first_value(p.data_date) over (partition by xr.cid order by p.data_date asc) as activity_date,\n--    'Joined Growing Pup' as activity,\n--    first_value(n.source_brand_id) over (partition by xr.cid order by p.data_date asc) as activity_brand_id\n--from     ${Database}.db.pet p\n--left join ${Database}.live.xref_name_urn xr on xr.name_urn = p.name_urn\n--left join ${Database}.live.names n on n.name_urn = p.name_urn\n--where trim(p.source) in ('REG_KC','REG_THG') or (trim(p.source) = 'REG_GIG' and lower(p.name_urn) regexp '.*growing pup.*')\n--;\n--Registered to Growing Pup\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_GP_registrants;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_GP_registrants\nas\n\t\tselect distinct cid, first_date_brand as activity_date,'Joined Growing Pup' as activity,'138' as activity_brand_id  from ${Database}.live.cid_brand \n\t\t\t\t\t  where brand_id = 138 and activity_date is not NULL and brand_preference = 1  \n\t\t\t\t\t  group by 1,2\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_GP_registrants',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_GP_registrants;\n\n--Registered to Kitten Code\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_KC_registrants;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_KC_registrants\nas\n    select distinct cid, first_date_brand as activity_date,'Joined Kitten Code' as activity,'143' as activity_brand_id  from ${Database}.live.cid_brand \n                  where brand_id = 143 and activity_date is not NULL and brand_preference = 1  \n                  group by 1,2\n\t\t\t\t  ;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_KC_registrants',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_KC_registrants;\n\n--Cashback\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_cashback;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_cashback\nas\n    select distinct cid, data_date as activity_date,'Cashback' as activity,source_brand_id as activity_brand_id  from ${Database}.live.names \n                   where (NAME_URN ilike '%reg_hashting%' or NAME_URN ilike '%reg_shopm%')  \n                   group by 1,2,3,4\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_cashback',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_cashback;\n\n--Your Purina\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_your_purina;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_your_purina\nas\n  select distinct cid, answer_data_date as ACTIVITY_DATE,'Joined Your Purina' as activity,\n  (select brand_id from ${Database}.live.ref_brand where brand ilike '%masterbrand%') as activity_brand_id\n                        from ${Database}.live.cid_question cq\n                        inner join ${Database}.db.ref_question rq on rq.question_id = cq.question_id\n                        where rq.question = 'Where do you buy food for your pets?' \n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_your_purina',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_your_purina;\n\n\n--Your Purina Survey clicks\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_your_purina_survey;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_your_purina_survey\nas\n  select cid, cast(max(event_timestamp) as date) as ACTIVITY_DATE,'Completed Survey' as activity,\n\t\t(select brand_id from ${Database}.live.ref_brand where brand ilike '%your purina%') as activity_brand_id\n    from ${Database}.live.adestra_events ae\n\tjoin ${Database}.db.ref_your_purina_survey_lookup ref on  ae.adestra_campaign_id = ref.campaign_id and ae.link_url = ref.link_url \n    where  event_name ilike '%click%'\ngroup by 1;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_your_purina_survey',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_your_purina_survey;\n\n\n--Updated Pet Details\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_updated_pet_details;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_updated_pet_details\nas\nselect cid, pet_data_date as ACTIVITY_DATE,'Updated Pet Details' as activity,\n(select brand_id from ${Database}.live.ref_brand where brand ilike '%masterbrand%') as activity_brand_id\nfrom ${Database}.live.cid_pet   group by 1,2\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_updated_pet_details',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_updated_pet_details;\n\n\n--Completed Survey\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_survey;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_survey\nas \nselect distinct \n    cid,\n    data_date as activity_date,\n    'Completed Survey' as activity,\n    source_brand_id as activity_brand_id\nfrom ${Database}.live.names\nwhere collate(name_urn,'') ilike 'RESP_GP%'\nunion all\nselect distinct \n    cid,\n    cast(event_timestamp as date) as activity_date,\n    'Completed Survey' as activity,\n    (select brand_id from ${Database}.db.ref_brand where brand ilike '%masterbrand') as activity_brand_id\nfrom ${Database}.live.adestra_events\nwhere event_name = 'GA Survey';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_survey',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_survey;\n\n-- Registration Opt In\n\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_optin;\ncreate table ${Database}.temp.build_rollups_npp_engagement_optin\nas\nselect \ncid,\ndp_date as activity_date,cast(null as int) as activity_brand_id,'Opt In' as activity\nfrom ${Database}.db.names_dp nd\njoin ${Database}.live.names nm\non nd.name_urn = nm.name_urn\nwhere data_controller_id = 5 and dp_emailable = 1 group by 1,2;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_optin',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_optin;\n\n--Registration\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_registered_to_purina;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_registered_to_purina\nas \nselect distinct\n    cbb.cid,\n    first_value(cbb.first_date_brand) over (partition by cbb.cid order by cbb.first_date_brand asc) as activity_date,\n    'Registration' as activity,\n    first_value(cbb.brand_id) over (partition by cbb.cid order by cbb.first_date_brand asc) as activity_brand_id\nfrom ${Database}.temp.build_rollups_cid_brand_base cbb\ninner join ${Database}.live.ref_business_unit_brand rbu on cbb.brand_id = rbu.brand_id\nwhere rbu.business_unit_id in (select business_unit_id from ${Database}.live.ref_business_unit where collate(business_unit,'') ilike 'Nestl_ Purina Petcare (UK) Ltd')\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_registered_to_purina',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_registered_to_purina;\n\n\nalter warehouse set warehouse_size = 'Small';\n\n--Email engagement\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_adestra_prep;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_adestra_prep\nas\nselect     cid,\n    adestra_campaign_id,\n    activity_date,\n    event_name,\n    case when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'A' then 'Clicked for Advice'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'Buy_now' then 'Clicked Buy Now'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'C' then 'Clicked Coupon'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'DC' and updated_ciam = 0 then 'Clicked Update Details'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'I' then 'Clicked for Info'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'P' then 'Clicked Product'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'PDC' then 'Clicked PDC'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'R' then 'Clicked Reconsent'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'S' then 'Clicked Social'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is null and split_part(link_label, '|', 1) = 'O' then 'Clicked Other'\n         when lower(collate(event_name,'')) regexp '.*click.*' and link_type is not null then link_type\n         when lower(collate(event_name,'')) regexp '.*read.*' then 'Opened email (no click)'\n         else 'Clicked Other' end as link_type ,\n    brand_id\nfrom (\n        select distinct     \n            ae.cid, \n            ae.adestra_campaign_id,\n            cast(ae.event_timestamp as date) as activity_date,\n            ae.event_name,\n            ae.link_label,\n            trim(lt.link_type) as link_type,\n            case when c.cid is not null \n                 and lower(ae.event_name) regexp '.*click.*' \n                 and (trim(lt.link_type) = 'Update Details' or (lt.link_type is null and split_part(ae.link_label, '|', 1) = 'DC'))\n                 then 1 else 0 end as updated_ciam, --only get points for clicking if they didn't register or update CIAM details\n            case when atl.adestra_campaign_id is null then cast(null as int) else rb.brand_id end as brand_id\n        from ${Database}.live.adestra_events ae \n        left join ${Database}.db.ref_link_label_type lt on lower(ae.link_url) = lower(trim(lt.link_url))\n        left join ${Database}.temp.build_rollups_npp_engagement_CIAM_accounts c on c.cid = ae.cid \n                                                                                   and c.activity_date = cast(ae.event_timestamp as date)\n        left join ${Database}.db.adestra_tag_lookup atl on trim(atl.adestra_campaign_id) = ae.adestra_campaign_id\n        left join ${Database}.live.ref_brand rb on rb.brand = atl.brand\n        where ae.campaign_id ilike 'npp%'\n            and lower(ae.event_name) regexp '.*click.*|.*open.*|.*read.*|.*shared.*|.*submit.*'\n            and lower(ae.link_url) not regexp '.*unsub.*'\n    ) a\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_adestra_prep',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_adestra_prep;\n\n\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_adestra;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_adestra\nas\nselect distinct \n    adestra_campaign_id,  \n    cid, \n    activity_date,\n    first_value\n        (\n            case\n                when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Buy Now' then 'Clicked Buy Now'\n                when lower(event_name) regexp '.*click.*' and link_type = 'Clicked PDC' then 'Clicked PDC'\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n                when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Product' then 'Clicked Product'\n                when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Reconsent' then 'Clicked Reconsent'  \n                when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Coupon' then 'Clicked Coupon'  \n\t\t\t\twhen lower(event_name) regexp '.*click.*' and link_type in ('Clicked for Info','Clicked Social','Clicked for Advice','Clicked Update Details','Clicked Other') then 'Clicked Generic'\n                when lower(event_name) regexp '.*click.*|.*submit.*' then 'Clicked Other'\n                when lower(event_name) regexp '.*read.*' then 'Opened email (no click)'\n            end\n        ) over\n        (\n            partition by cid, adestra_campaign_id\n            order by \n                case\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked PDC' then 1\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Buy Now' then 2\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Product' then 3\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Coupon' then 4\n\t\t\t\t\twhen lower(event_name) regexp '.*click.*' and link_type in ('Clicked for Info','Clicked Social','Clicked for Advice','Clicked Update Details','Clicked Other') then 5\n                    when lower(event_name) regexp '.*click.*|.*submit.*' and link_type = 'Clicked Other' then 6\n                    when lower(event_name) regexp '.*read.*' then 7\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Reconsent' then 8\n                end\n        ) as activity,\n    first_value(brand_id)\n          over(\n             partition by cid, adestra_campaign_id\n             order by \n                case\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked PDC' then 1\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Buy Now' then 2\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Product' then 3\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Coupon' then 4\n\t\t\t\t\twhen lower(event_name) regexp '.*click.*' and link_type in ('Clicked for Info','Clicked Social','Clicked for Advice','Clicked Update Details','Clicked Other') then 5\n                    when lower(event_name) regexp '.*click.*|.*submit.*' and link_type = 'Clicked Other' then 6\n                    when lower(event_name) regexp '.*read.*' then 7\n                    when lower(event_name) regexp '.*click.*' and link_type = 'Clicked Reconsent' then 8\n                end\n        ) as activity_brand_id  \nfrom ${Database}.temp.build_rollups_npp_engagement_adestra_prep\n;\n\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_adestra',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_adestra;\n\n-- Create tables for Generic clicks/open, one per month per campaign\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_adestra_generic_clicks;\ncreate or replace table ${Database}.temp.build_rollups_npp_engagement_adestra_generic_clicks as\nselect adestra_campaign_id, concat(year(activity_date),month(activity_date)) as year_month,cid,activity,activity_brand_id,max(activity_date) as activity_date\nfrom ${Database}.temp.build_rollups_npp_engagement_adestra\nwhere activity in \n('Clicked Generic','Opened email (no click)')\ngroup by 1,2,3,4,5;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_adestra_generic_clicks',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_adestra_generic_clicks;\n\n-- Create table for non generic clicks to allow more points\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_adestra_nongeneric_clicks;\ncreate or replace table ${Database}.temp.build_rollups_npp_engagement_adestra_nongeneric_clicks as\nselect adestra_campaign_id, activity,cid,activity_brand_id,activity_date\nfrom ${Database}.temp.build_rollups_npp_engagement_adestra\nwhere activity not in \n('Clicked Generic','Opened email (no click)');\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_adestra_nongeneric_clicks',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_adestra_nongeneric_clicks;\n\n  --purina qualifio kitten code campaign\n--drop table if exists ${Database}.temp.build_rollups_npp_Qualifio_participation;\n--create table ${Database}.temp.build_rollups_npp_Qualifio_participation\n--as\n--select distinct   \n--    cid,\n--    first_value(na.data_date) over(partition by cid, REGISTRATION_CAMPAIGN order by na.data_date asc) as activity_date,\n--    'Qualifio participation' as activity,\n--   n.source_brand_id as activity_brand_id\n--from ${Database}.db.names_attributes na\n--inner join ${Database}.db.names n on n.name_urn = na.name_urn and n.data_date = na.data_date\n--inner join ${Database}.live.xref_name_urn xr on trim(n.name_urn) = trim(xr.name_urn)\n--where na.source = 'REG_QUALIFIO'\n--and n.SOURCE_DATA_CONTROLLER_ID = (select data_controller_id from ${Database}.db.ref_data_controller where data_controller like 'Nestl_ Purina Petcare (UK) Ltd')  \n--;\n\n\n--insert into ${Database}.db.build_log \n--select \n--    'nestle_rollups',\n--    '${Database}.temp.build_rollups_npp_Qualifio_participation',\n--    'total records',\n--    cast(count(*) as varchar),\n--    CURRENT_TIMESTAMP\n--from ${Database}.temp.build_rollups_npp_Qualifio_participation;\n\n\n--purina pet avatar creation\ndrop table if exists ${Database}.temp.build_rollups_npp_pet_avatar_creation;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_pet_avatar_creation\nas\nselect    \n    cid,\n    max(to_date(left(user_date_created,10),'YYYY-MM-DD')) as activity_date,\n    'Pet Avatar Creation' activity,\n    (select brand_id from ${Database}.live.ref_brand where brand ilike '%masterbrand%') as activity_brand_id\nfrom ${Database}.db.npp_pet_avatar_details ppa\ninner join ${Database}.live.xref_name_urn xr on trim(ppa.name_urn) = trim(xr.name_urn)\nwhere trim(ppa.name_urn) > ''\ngroup by 1,3,4\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_pet_avatar_creation',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_pet_avatar_creation;\n\n\n--score rollup\ndrop table if exists ${Database}.live.npp_engagement_scoring_activities;\n\nCREATE OR REPLACE TABLE ${Database}.live.npp_engagement_scoring_activities\nas\nselect    \n    cid,\n    activity_date,\n    activity,\n    activity_brand_id,\n    (((1 / sqrt((datediff(day,activity_date,current_date())/60)+1) * 15 ) + 1)) as   recency_multiplier,\n    case\n        when activity = 'Purchased Product' then 40\n\t\twhen activity = 'Left Positive Rate & Review' then 40\n\t\twhen activity = 'Left Negative Rate & Review' then 40\n\t\twhen activity = 'Joined Your Purina' then 40\n        when activity = 'Pet Avatar Creation' then 40\n        when activity = 'Completed Survey' then 30\n        when activity = 'Clicked PDC' then 30\n\t\twhen activity = 'Clicked Update Details' then 30\n        when activity = 'User Generated Content' then 30\n\t\twhen activity = 'Contacted CES (without completing survey)' then 12\n        when activity = 'Joined Growing Pup' then 12\n\t\twhen activity = 'Joined Kitten Code' then 12\n        when activity = 'Clicked Buy Now' then 12\n\t\twhen activity = 'Updated Pet Details' then 12\n\t\twhen activity = 'Redeemed Coupon' then 12\n\t\twhen activity = 'Cashback' then 12\n\t\twhen activity = 'Requested free product sample' then 12\n\t\twhen activity = 'Joined Loyalty Scheme' then 12\n\t\twhen activity = 'Registered New CIAM Account' then 12\n\t\twhen activity = 'Updated CIAM Account' then 12\n        when activity = 'Completed CES Survey' then 12\n\t\twhen activity = 'Downloaded Coupon (but did not redeem)' then 12\n\t\twhen activity = 'Reconsent' then 12\n\t\twhen activity = 'Clicked Reconsent' then 12\n\t\twhen activity = 'Registration' then 6\n\t\twhen activity = 'Opt In' then 6\n\t\twhen activity = 'Clicked Generic' then 6\n        when activity = 'Cast a Vote' then 6\t\t\t\t\t\t\t\t\t\t\t\n        when activity = 'Competition entry' then 2\n        when activity = 'Opened email (no click)' then 1\n    end as base_score\nfrom      \n(   select cid, activity_date, activity, source_brand_id as activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_CIAM_accounts\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_thg_purchases\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_rate_review\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_loyalty_scheme\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_careline\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_samples\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_coupons\n \tunion all\n\tselect cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_competition_entry\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_adestra_nongeneric_clicks\n\tunion all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_adestra_generic_clicks\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_GP_registrants\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_reconsent\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_survey\n\tunion all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_pet_avatar_creation\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_photo_upload\n    union all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_voters \n\tunion all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_KC_registrants\n\tunion all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_cashback\n\tunion all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_your_purina\n\tunion all\n\tselect cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_your_purina_survey\n\tunion all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_updated_pet_details\n\tunion all\n    select cid, activity_date, activity, activity_brand_id\n    from ${Database}.temp.build_rollups_npp_engagement_optin\n) activities\n;\n\ndrop table if exists ${Database}.temp.build_npp_engagement_scoring_occurrence_pre;\ncreate or replace table ${Database}.temp.build_npp_engagement_scoring_occurrence_pre as \nselect cid,activity,activity_brand_id,activity_date,recency_multiplier,base_score,\ndatediff(month,diff_date,activity_date) as count_month\nfrom (\nselect cid,activity,activity_brand_id,activity_date,recency_multiplier,base_score,\nlead(activity_date) over (partition by activity   order by cid,activity,activity_date desc) \nas diff_date\nfrom ${Database}.live.npp_engagement_scoring_activities\n) new;\n\n-- Add in occurrence_multiplier\ndrop table if exists ${Database}.temp.build_npp_engagement_scoring_occurrence;\n\ncreate or replace table ${Database}.temp.build_npp_engagement_scoring_occurrence as\nselect\ncid,\nactivity,\nactivity_brand_id,\nactivity_date,\nrecency_multiplier,\nbase_score,\ncase\nwhen row_number() over(partition by cid, activity, rn order by activity_date) < 4 then 1\nwhen row_number() over(partition by cid, activity, rn order by activity_date) = 4 then 0.8\nwhen row_number() over(partition by cid, activity, rn order by activity_date) = 5 then 0.6\nwhen row_number() over(partition by cid, activity, rn order by activity_date) >= 6 then 0.5\nend as occurrence_multiplier\nfrom (select distinct\na.*,\nfirst_value(coalesce(b.rn,9999)) over(partition by a.cid, a.activity, a.activity_date order by b.rn) as rn\nfrom ${Database}.temp.build_npp_engagement_scoring_occurrence_pre a\nleft join (select *, row_number() over(partition by cid, activity order by activity_date) as rn from ${Database}.temp.build_npp_engagement_scoring_occurrence_pre where count_month >= 6) b on a.cid = b.cid\nand a.activity = b.activity\nand a.activity_date < b.activity_date) a\norder by activity, activity_date;\n\nalter warehouse set warehouse_size = 'Xsmall';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_npp_engagement_scoring_occurrence',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_npp_engagement_scoring_occurrence;\n\n-- New Distinct Activity setup for Engagement Score\ncreate or replace table ${Database}.temp.build_rollups_npp_engagement_distinct_activity as\nselect\n cid,activity\nfrom ${Database}.live.npp_engagement_scoring_activities\nwhere activity_date < current_date()\ngroup by 1,2;\n\n-- Summarise the above table to CID level\n\ncreate or replace table ${Database}.temp.build_rollups_npp_engagement_distinct_activity_cid_level\nas \nselect\ncid,count(*) as distinct_activity\nfrom ${Database}.temp.build_rollups_npp_engagement_distinct_activity\ngroup by 1;\n\n\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_CIAM_accounts;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_thg_purchases;\ndrop table if exists ${Database}.temp.build_rollups_npp_competition_entry;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_rate_review;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_loyalty_scheme;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_careline;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_samples;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_coupons;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_adestra;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_GP_registrants;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_reconsent;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_registered_to_purina;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_survey;\ndrop table if exists ${Database}.temp.build_rollups_npp_pet_avatar_creation;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_adestra_nongeneric_clicks;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_adestra_generic_clicks;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_photo_upload;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_voters;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_KC_registrants;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_cashback;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_your_purina;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_updated_pet_details;\ndrop table if exists ${Database}.temp.build_rollups_npp_test_engagement_optin;\ndrop table if exists ${Database}.temp.build_npp_engagement_scoring_occurrence_pre;\n\n--final engagement table\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_score;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_score \nas\nselect    \n    npsa.cid,\n  sum(coalesce(base_score,0) * coalesce(recency_multiplier,0) * \n  coalesce(occurrence_multiplier,0)\n  * coalesce(case when  npda.distinct_activity <= 3 then 1 when npda.distinct_activity <= 5 then 1.25 else 1.5 end, 0)) as engagement_score\nfrom ${Database}.temp.build_npp_engagement_scoring_occurrence npsa\njoin ${Database}.temp.build_rollups_npp_engagement_distinct_activity_cid_level npda\non npsa.cid = npda.cid\ngroup by 1;\n\ndrop table if exists ${Database}.temp.build_npp_engagement_scoring_occurrence;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_score',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_score;\n\n--lapse risk segment table\ncreate or replace table ${Database}.temp.build_rollups_npp_lapse_risk_segment\nas\nselect\n    ev.cid,\n    case\n        when ev.last_open < add_months(current_date,-10)\n            or ((ev.first_date_business_unit < add_months(current_date,-6) or ev.first_date_business_unit is null) and ev.last_open is null) then 'Very High Risk'\n        when (ev.last_open >= add_months(current_date,-10) and ev.last_open < add_months(current_date,-6))\n            or ((ev.first_date_business_unit < add_months(current_date,-12) or ev.first_date_business_unit is null)\n                and ev.last_click is null\n                and ev.last_open >= add_months(current_date, -6)\n                and ev.last_open < add_months(current_date, -3))\n            or ((ev.first_date_business_unit >= add_months(current_date,-6) and ev.first_date_business_unit < add_months(current_date,-3)) and ev.last_open is null) then 'High Risk'\n        when (ev.last_open >= add_months(current_date, -6) and ev.last_open < add_months(current_date, -3) and (ev.last_click is not null or ev.first_date_business_unit >= add_months(current_date,-12)))\n              or (ev.last_open is null and ev.first_date_business_unit >= add_months(current_date, -3)) then 'Medium Risk'\n        when ev.last_open >= add_months (current_date, -3) then 'Low Risk'\n    end as purina_lapse_risk_segment\nfrom (\n         select\n             cbb.cid,\n             min(cbb.first_date_business_unit) as first_date_business_unit,\n             max(case when lower(ae.event_name) rlike '.*read.*|.*click.*' then cast(ae.event_timestamp as date) end) as last_open,\n             max(case when lower(ae.event_name) rlike '.*click.*' then cast(ae.event_timestamp as date) end) as last_click\n         from ${Database}.temp.build_rollups_cid_bu_base cbb\n         left join ${Database}.live.adestra_events ae on ae.cid = cbb.cid\n                                                     and lower(ae.campaign_id) rlike '^npp.*'\n         where cbb.business_unit_id = 5\n         group by 1\n         union all\n         select\n             ae.cid,\n             cast(null as date) as first_date_business_unit,\n             max(case when lower(ae.event_name) rlike '.*read.*|.*click.*' then cast(ae.event_timestamp as date) end) as last_open,\n             max(case when lower(ae.event_name) rlike '.*click.*' then cast(ae.event_timestamp as date) end) as last_click\n         from ${Database}.live.adestra_events ae\n         left join ${Database}.temp.build_rollups_cid_bu_base cbb on cbb.cid = ae.cid\n                                                     and cbb.business_unit_id = 5\n         where lower(ae.campaign_id) rlike '^npp.*'\n             and cbb.cid is null\n         group by 1\n  ) ev;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_npp_lapse_risk_segment',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_lapse_risk_segment;\n\n---------------------\n---------------------\n-- cid\n\ndrop table if exists ${Database}.live.cid ;  \n\nalter warehouse set warehouse_size = 'Large';\n\nCREATE OR REPLACE TABLE ${Database}.live.cid \nas \nselect \n    cb.cid,\n    cb.hid,\n    cb.bbw_urn,\n    cb.name_urn,\n    cb.created_date,\n    cb.updated_date,\n    case when gf.cid is null then cb.gender else 'X' end                                        as gender,\n    cast(left(upper(cb.postcode),20) as varchar(20))                                            as postcode,\n    postcode_area_home,\n    postcode_district_home,\n    cast\n    (\n        case \n            when lower(cb.country)='united kingdom' then left(upper(split_part(cb.postcode,' ',1)||' '||left(split_part(cb.postcode,' ',-1),1)),10) \n            else '' \n        end as varchar(10)\n    )                                                                                           as postal_sector,\n    cast\n    (\n        case \n            when lower(cb.country)='united kingdom' then left(upper(split_part(cb.postcode,' ',1)),10) \n            else '' \n        end as varchar(10)\n    )                                                                                           as postal_district,\n    cast\n    (\n        upper\n        (\n            case \n                when lower(cb.country)='united kingdom' then \n                    case\n                        when lower(substring(collate(cb.postcode,''),2,1)) regexp '.*[a-z].*' then left(cb.postcode,2) \n                        else left(cb.postcode,1) \n                    end \n                else '' \n            end\n        ) as char(2)\n    )                                                                                           as postal_area,\n    cb.country,   \n    cb.dob,\n    case when cb.mailable_ignoring_dp          = 1 then cb.name_urn_to_mail_ignoring_dp          else cast(null as varchar) end as name_urn_to_mail_ignoring_dp,\n    case when cb.emailable_ignoring_dp         = 1 then cb.name_urn_to_email_ignoring_dp         else cast(null as varchar) end as name_urn_to_email_ignoring_dp,\n    case when cb.phoneable_ignoring_dp         = 1 then cb.name_urn_to_phone_ignoring_dp         else cast(null as varchar) end as name_urn_to_phone_ignoring_dp,\n    case when cb.smsable_ignoring_dp           = 1 then cb.name_urn_to_sms_ignoring_dp           else cast(null as varchar) end as name_urn_to_sms_ignoring_dp,\n    case when np.cid is not null then 1 else cast(null as tinyint) end                          as no_printer, \n    case \n        when hc.cid is not null then 'Y'\n        when ncat.cid is not null then 'Y'  \n        when pcat.cid is not null then 'Y'\n        when cat.cid is not null and lower(cat.answer) = 'y' then 'Y'\n        when cat.cid is not null and lower(cat.answer) = 'n' then 'N'\n        when ic.data_date >= add_months(current_date,-60) then 'IN'\n        when ic.data_date < add_months(current_date,-60) then 'IO'\n        else 'N' \n    end as have_cat,\n    case \n        when hd.cid is not null then 'Y'\n        when ndog.cid is not null then 'Y'  \n        when pdog.cid is not null then 'Y'\n        when dog.cid is not null and lower(dog.answer) = 'y' then 'Y'\n        when dog.cid is not null and lower(dog.answer) = 'n' then 'N'\n        when id.data_date >= add_months(current_date,-60) then 'IN'\n        when id.data_date < add_months(current_date,-60) then 'IO'\n        else 'N' \n    end as have_dog,\n    case \n        when hc.cid is not null then hc.number_of_cats\n        when ncat.cid is not null then cast(ncat.answer as int)          \n        when cat.cid is not null and lower(cat.answer) = 'y' then 1\n        when pcat.cid is not null then 1\n        else 0\n    end as number_of_cats,\n    case \n        when hd.cid is not null then hd.number_of_dogs\n        when ndog.cid is not null then cast(ndog.answer as int)          \n        when dog.cid is not null and lower(dog.answer) = 'y' then 1\n        when pdog.cid is not null then 1\n        else 0\n    end as number_of_dogs,\n    pdc.pet_segment as pdc_click_pet_seg,\n    pdc.activity_date as pdc_click_pet_seg_updated,\n    case \n        when hc.cid is null \n            and ncat.cid is null \n            and cat.cid is null \n            and uhc.cid is not null then 'Y'\n        else '' \n    end as used_to_have_cat,\n    case \n        when hd.cid is null\n            and ndog.cid is null\n            and dog.cid is null\n            and uhd.cid is not null then 'Y'\n        else '' \n    end as used_to_have_dog,\n\tcase \n        when hc.cid is not null\n             and ncat.cid is not null  \n             and pcat.cid is not null\n\t\t\tand pdc.cid is not null and pdc.pet_segment in ('Both','Cat') then 'Y'\n\t\telse 'N' \n    end as pdc_cat_link_update,\n\tcase \n        when hd.cid is not null\n             and ndog.cid is not null  \n             and pdog.cid is not null\n\t\t\tand pdc.cid is not null and pdc.pet_segment in ('Both','Dog') then 'Y'\n\t\telse 'N' \n    end as pdc_dog_link_update,\t\t\t\t\t\t   \n    dp.num_pets_deceased_this_month,\n    es.engagement_score as purina_engagement_score,\n\tlrs.purina_lapse_risk_segment\nfrom ${Database}.temp.build_rollups_cid_base                     cb\nleft join ${Database}.temp.build_rollups_cid_gender_fix          gf   on cb.cid = gf.cid\nleft join ${Database}.temp.build_rollups_cid_have_cat            hc   on cb.cid = hc.cid\nleft join ${Database}.temp.build_rollups_cid_have_dog            hd   on cb.cid = hd.cid\nleft join ${Database}.temp.build_rollups_cid_inferred_cat        ic   on cb.cid = ic.cid\nleft join ${Database}.temp.build_rollups_cid_inferred_dog        id   on cb.cid = id.cid\nleft join ${Database}.temp.build_rollups_cid_used_to_have_cat    uhc  on cb.cid = uhc.cid\nleft join ${Database}.temp.build_rollups_cid_used_to_have_dog    uhd  on cb.cid = uhd.cid\nleft join ${Database}.temp.build_rollups_cid_deceased_pets       dp   on cb.cid = dp.cid\nleft join ${Database}.temp.build_rollups_cid_no_printer          np   on cb.cid = np.cid\nleft join ${Database}.temp.build_rollups_npp_engagement_score    es   on cb.cid = es.cid\nleft join ${Database}.temp.build_rollups_npp_lapse_risk_segment  lrs  on cb.cid = lrs.cid\nleft join ${Database}.live.cid_question                          cat  on cat.cid = cb.cid \n                                                                     and cat.question = 'Have cat'\nleft join ${Database}.live.cid_question                          dog  on dog.cid = cb.cid \n                                                                     and dog.question = 'Have dog'\nleft join ${Database}.live.cid_question                          ncat on ncat.cid = cb.cid \n                                                                     and ncat.question = 'Number of cats'\nleft join ${Database}.live.cid_question                          ndog on ndog.cid = cb.cid \n                                                                     and ndog.question = 'Number of dogs'\nleft join ${Database}.live.cid_question                          pcat on pcat.cid = cb.cid \n                                                                     and lower(collate(pcat.question,'')) regexp '.*which pets do you have.*'\n                                                                     and lower(collate(pcat.answer,'')) regexp '.*cat.*'\nleft join ${Database}.live.cid_question                          pdog on pdog.cid = cb.cid \n                                                                     and lower(collate(pdog.question,'')) regexp '.*which pets do you have.*'\n                                                                     and lower(collate(pdog.answer,'')) regexp '.*dog.*'\nleft join ${Database}.temp.build_rollups_cid_pdc_pet            pdc on pdc.cid = cb.cid \n;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid;   \n  \ndrop table ${Database}.temp.build_rollups_cid_gender_fix;\ndrop table ${Database}.temp.build_rollups_cid_have_cat;\ndrop table ${Database}.temp.build_rollups_cid_have_dog;\ndrop table ${Database}.temp.build_rollups_cid_inferred_cat;\ndrop table ${Database}.temp.build_rollups_cid_inferred_dog;\ndrop table ${Database}.temp.build_rollups_cid_no_printer;\ndrop table ${Database}.temp.build_rollups_cid_used_to_have_cat;\ndrop table ${Database}.temp.build_rollups_cid_used_to_have_dog;\ndrop table ${Database}.temp.build_rollups_cid_deceased_pets;\ndrop table ${Database}.temp.build_rollups_npp_engagement_score;\n\n---------------------\n-- cid details\n\ndrop table if exists ${Database}.live.cid_details ;  \n\nCREATE OR REPLACE TABLE ${Database}.live.cid_details \nas\nselect distinct\n    ci.cid,\n    ci.hid,\n    coalesce(utm.name_urn, ute.name_urn, utp.name_urn, uts.name_urn, ci.name_urn)                                       as name_urn,\n    cast(regexp_replace(coalesce(utm.title, ute.title, ma.title),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))                as title,\n    cast(regexp_replace(coalesce(utm.firstname, ute.firstname, ma.firstname),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))    as firstname, \n    cast(regexp_replace(coalesce(utm.lastname, ute.lastname, ma.lastname),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))       as lastname,\n    --blank address if not mailable\n    cast(regexp_replace(coalesce(utm.add1, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                 as add1,\n    cast(regexp_replace(coalesce(utm.add2, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                 as add2,\n    cast(regexp_replace(coalesce(utm.add3, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                 as add3,\n    cast(regexp_replace(coalesce(utm.add4, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                 as add4,\n    cast(regexp_replace(coalesce(utm.add5, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                 as add5,\n    cast(regexp_replace(coalesce(utm.city, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                 as town,\n    cast(regexp_replace(coalesce(utm.state, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                                as county,\n    cast(regexp_replace(coalesce(utm.country_clean, ci.country),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                as country,\n    cast(regexp_replace(upper(coalesce(utm.postcode, ci.postcode)),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))              as postcode,\n    cast(regexp_replace(coalesce(utp.phone_home, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))                            as phone_home,\n    cast(regexp_replace(coalesce(utp.phone_work, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))                            as phone_work,\n    cast(regexp_replace(coalesce(\n        case \n            when uts.phone_mobile like '+44 %' then replace(replace(uts.phone_mobile , '+' , '') , ' ' , '') \n            else uts.phone_mobile\n        end,''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))                                                                 as phone_mobile,\n    cast(regexp_replace(coalesce(utm.formal_salutation, ute.formal_salutation, ma.formal_salutation),'[\\x00-\\x1F|\\x7F]','')as nvarchar(100))       as salutation, \n    cast(regexp_replace(coalesce(utm.informal_salutation, ute.informal_salutation, ma.informal_salutation),'[\\x00-\\x1F|\\x7F]','')as nvarchar(100)) as salutation_informal\nfrom ${Database}.live.cid ci \nleft join ${Database}.live.names utm   on ci.name_urn_to_mail_ignoring_dp  = utm.name_urn\nleft join ${Database}.live.names ute   on ci.name_urn_to_email_ignoring_dp = ute.name_urn\nleft join ${Database}.live.names utp   on ci.name_urn_to_phone_ignoring_dp = utp.name_urn\nleft join ${Database}.live.names uts   on ci.name_urn_to_sms_ignoring_dp   = uts.name_urn\nleft join ${Database}.live.names ma    on ci.name_urn                      = ma.name_urn\n; \n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid_details',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_details;\n\n\n---------------------\n-- cid brand\n\ndrop table if exists ${Database}.temp.names_supps_dp_brand;\n\nalter warehouse set warehouse_size = 'Medium';\n\nCREATE OR REPLACE TABLE ${Database}.temp.names_supps_dp_brand\nas\nselect distinct\n    cid,\n    business_unit_id,\n    division_id,\n    brand_id,\n    max(first_email)  as email,\n    max(dp_last_date) as dp_last_date,\n    max(last_open_date)       as last_open_date,\n    max(last_open_date_ios15) as last_open_date_ios15,\n    max(customer_retention_group_date) \t\t\t\t\t\t    as customer_retention_group_date,\n    max(customer_retention_group_date_ios15) \t\t\t\t\tas customer_retention_group_date_ios15,\n    max(customer_retention_group_expiry_date_calculated) \t\tas customer_retention_group_expiry_date,\n    max(customer_retention_group_expiry_date_ios15_calculated) \tas customer_retention_group_expiry_date_ios15,\n    min(customer_retention_group_base)  \t\t\t\t\t\tas customer_retention_group_base,\n    min(customer_retention_group_base_ios15) \t\t\t\t\tas customer_retention_group_base_ios15,\n    min(customer_suppression_group_base) \t\t\t\t\t\tas customer_suppression_group_base,\n    max(mailable)  as mailable,\n    max(emailable) as emailable,\n\tmin(emailable_first_date)   as emailable_first_date,\n\tmax(emailable_first_source) as emailable_first_source,\n\tmax(emailable_last_date)    as emailable_last_date,\n\tmax(emailable_last_source)  as emailable_last_source, \n    max(emailable_newsletter)  as emailable_newsletter,\n    max(mailable_ignoring_dp)  as mailable_ignoring_dp,\n    max(emailable_ignoring_dp) as emailable_ignoring_dp\nfrom (\n\t select\n\t\t *,\n\t\t case\n\t\t\t when brand_id = (select brand_id from ${Database}.db.ref_brand where brand = 'SMA') then add_months(customer_retention_group_date,36)\n\t\t\t else add_months(customer_retention_group_date,24)\n\t\t end as customer_retention_group_expiry_date_calculated,\n\t\t case\n\t\t\t when brand_id = (select brand_id from ${Database}.db.ref_brand where brand = 'SMA') then add_months(customer_retention_group_date_ios15,36)\n\t\t\t else add_months(customer_retention_group_date_ios15,24)\n\t\t end as customer_retention_group_expiry_date_ios15_calculated\n\t\t,first_value(email)                    over (partition by cid, business_unit_id, division_id, brand_id order by emailable desc nulls last, emailable_newsletter desc nulls last, dp_last_date desc nulls last,last_open_date desc nulls last,email asc nulls last) as first_email\n\t\t,first_value(dp_first_date) \t       over (partition by cid, business_unit_id, division_id, brand_id order by emailable desc nulls last, emailable_newsletter desc nulls last, dp_first_date nulls last    ,last_open_date desc nulls last,email asc nulls last) as emailable_first_date\n\t\t,first_value(dp_first_source)          over (partition by cid, business_unit_id, division_id, brand_id order by emailable desc nulls last, emailable_newsletter desc nulls last, dp_first_date nulls last\t ,last_open_date desc nulls last,email asc nulls last) as emailable_first_source\n\t\t,first_value(dp_last_date) \t           over (partition by cid, business_unit_id, division_id, brand_id order by emailable desc nulls last, emailable_newsletter desc nulls last, dp_last_date desc nulls last,last_open_date desc nulls last,email asc nulls last) as emailable_last_date\n\t\t,first_value(dp_last_emailable_source) over (partition by cid, business_unit_id, division_id, brand_id order by emailable desc nulls last, emailable_newsletter desc nulls last, dp_last_date desc nulls last,last_open_date desc nulls last,email asc nulls last) as emailable_last_source \n         from ${Database}.temp.build_email_brand_contact_flags\n     ) cf\ngroup by 1,2,3,4\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.names_supps_dp_brand',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.names_supps_dp_brand;\n\n\ndrop table if exists ${Database}.temp.xref_cid_email; \n\nCREATE OR REPLACE TABLE ${Database}.temp.xref_cid_email as\nselect *\nfrom ${Database}.live.xref_email\n;\n    \ninsert into ${Database}.temp.xref_cid_email \nselect \n    cid,\n    '' as email,\n    min(bbw_urn) as bbw_urn\nfrom ${Database}.live.xref_name_urn\ngroup by \n    cid;    \n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.xref_cid_email',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.xref_cid_email;\n\n--brand preference & base combine\ndrop table if exists ${Database}.temp.build_rollups_cid_brand_pref_base; \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_brand_pref_base as\nselect distinct\n\tcid,\n\tbrand_id,\n\tfirst_value(pref_emailable) over (partition by cid, brand_id order by pref_date desc, pref_source) as pref_emailable\nfrom\n(\t\n\t\tselect cid,\n\t\t\tbrand_id,\n\t\t\tpref_emailable, \t\t--Ticked/unticked a box on Gigya to confirm they want to/don't want to hear from the brand – i.e. done it themselves\n\t\t\tpref_date,\n\t\t\tcast(1 as int) as pref_source\n\t\tfrom ${Database}.temp.build_rollups_cid_brand_preference\n\t\twhere pref_mig = 0\t\t\t--don't consider preferences from before migration\n\t\tunion all\n\t\tselect cid,\n\t\t\tbrand_id,\n\t\t\t1 as pref_emailable,\t--any positive brand registration action in the last 5 years\n\t\t\tlast_date_brand as pref_date,\n\t\t\tcast(2 as int) as pref_source \n\t\tfrom ${Database}.temp.build_rollups_cid_brand_base\n)\n;\n  \n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_brand_pref_base',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_brand_pref_base;\n\n\ndrop table if exists ${Database}.live.cid_brand ;  \n\nCREATE OR REPLACE TABLE ${Database}.live.cid_brand\nas\nselect\n    to_char(xr.bbw_urn)||'-'||to_char(dp.brand_id) as cid_brand_urn,\n    ci.cid,\n    dp.business_unit_id,\n    dp.division_id,\n    dp.brand_id,\n   case\n        when dp.customer_retention_group_base = 1 then 'Safe'\n        when dp.customer_retention_group_base = 2 then 'Re-consent'\n        when dp.customer_retention_group_base = 3 then 'New'\n        when dp.customer_retention_group_base = 4 then 'At Risk'\n        when dp.customer_retention_group_base = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base = 6 then 'Gone this month'\n        when dp.customer_retention_group_base = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_brand,\n   case\n        when dp.customer_retention_group_base_ios15 = 1 then 'Safe'\n        when dp.customer_retention_group_base_ios15 = 2 then 'Re-consent'\n        when dp.customer_retention_group_base_ios15 = 3 then 'New'\n        when dp.customer_retention_group_base_ios15 = 4 then 'At Risk'\n        when dp.customer_retention_group_base_ios15 = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base_ios15 = 6 then 'Gone this month'\n        when dp.customer_retention_group_base_ios15 = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_brand_ios15,\n    dp.customer_retention_group_date as customer_retention_date_brand,\n    dp.customer_retention_group_date_ios15 as customer_retention_date_brand_ios15,\n    dp.customer_retention_group_expiry_date as customer_retention_expiry_date_brand,\n    dp.customer_retention_group_expiry_date_ios15 as customer_retention_expiry_date_brand_ios15,\n    dp.dp_last_date as last_subscription_date_brand,\n    em.event_date as last_email_open_date_brand,\n    case\n        when pgi.first_pref_date is null then cbb.first_date_brand\n        when cbb.first_date_brand is null then pgi.first_pref_date\n        else least(cbb.first_date_brand, pgi.first_pref_date)\n    end as first_date_brand, --least data date from existing pref_date or first_date_brand\n    cbb.last_date_brand,\n    cbb.first_channel_brand,\n    cbb.last_channel_brand,\n\tcase\n        when bpb.pref_emailable is not null then bpb.pref_emailable \n        else -1 end as brand_preference, \n    case\n        when dp.brand_id = (select brand_id from ${Database}.live.ref_brand where contains(lower(brand),'your purina')) then 0\n        when pro.brand_id is not null then 1 --Has had a product from the brand in the L5Y (sample, coupon, loyalty scheme, left an R&R of 3 and above)\n        when cbb.last_login_brand >= add_months(current_date, -60) then 1 --Has logged into their account on a brand website in last 5 years (Pets Welcome or Gigya)\n        when pref.brand_id is not null then 1 --Has answered a brand question (old golden questions) in the last 5 years\n        when em.brand_id is not null then 1 --Opened or clicked an email from the brand in the last 5 years\n        else 0\n    end as brand_engagement,\n\tcase\n        when bpb.pref_emailable is not null then bpb.pref_emailable \n        when dp.brand_id = (select brand_id from ${Database}.live.ref_brand where contains(lower(brand),'your purina')) then 0\n        when pro.brand_id is not null then 1 --Has had a product from the brand in the L5Y (sample, coupon, loyalty scheme, left an R&R of 3 and above)\n        when cbb.last_login_brand >= add_months(current_date, -60) then 1 --Has logged into their account on a brand website in last 5 years (Pets Welcome or Gigya)\n        when pref.brand_id is not null then 1 --Has answered a brand question (old golden questions) in the last 5 years\n        when em.brand_id is not null then 1 --Opened or clicked an email from the brand in the last 5 years\n        else 0\n    end as brand_campaignable,\n    case\n        when pgi.pref_emailable = 1 and pgi.pref_mig = 0 then 1\n        when pgi.pref_emailable = 1 and pgi.pref_mig = 1 then -1\n        else 0\n    end as preferred_brand_gigya,\n    case\n        when dp.emailable = 1 or dp.emailable_newsletter = 1 then ''\n        when customer_suppression_group_base = 1 then 'Deceased TM'\n        when customer_suppression_group_base = 2 then 'Deceased'\n        when customer_suppression_group_base = 3 then 'Manual TM'\n        when customer_suppression_group_base = 4 then 'Manual'\n        when customer_suppression_group_base = 5 then 'Bounce TM'\n        when customer_suppression_group_base = 6 then 'Bounce'\n        when customer_suppression_group_base = 7 then 'Unsub TM'\n        when customer_suppression_group_base = 8 then 'Unsub'\n        when customer_suppression_group_base = 9 then 'Opt-Out TM'\n        when customer_suppression_group_base = 10 then 'Opt-Out'\n        when customer_suppression_group_base = 11 then 'Engagement'\n        else 'Misc'\n    end as customer_suppression_group_brand,\n    --    contactable status\n    case when dp.mailable = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable,\n    case when dp.emailable = 1 then 1 else 0 end as emailable,\n\tdp.emailable_first_date,\n\tdp.emailable_first_source,\n\tdp.emailable_last_date,\n\tdp.emailable_last_source, \n    case when dp.emailable_newsletter = 1 then 1 else 0 end as emailable_newsletter,\n    case when dp.mailable_ignoring_dp = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable_ignoring_dp,\n    case when dp.emailable_ignoring_dp = 1 then 1 else 0 end as emailable_ignoring_dp,\n    cast(regexp_replace(coalesce(\n        case\n            when dp.emailable = 1\n            or dp.emailable_newsletter = 1 then collate(dp.email,'')\n            else ''\n        end, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100)) as email_brand\nfrom ${Database}.temp.build_rollups_cid_base                 ci\ninner join ${Database}.temp.names_supps_dp_brand             dp   on ci.cid = dp.cid\ninner join ${Database}.temp.xref_cid_email                   xr   on dp.cid = xr.cid\n                                                            and dp.email = xr.email\nleft join ${Database}.temp.build_rollups_cid_brand_base      cbb  on dp.cid = cbb.cid\n                                                            and dp.brand_id = cbb.brand_id\nleft join ${Database}.temp.build_rollups_cid_brand_preferred pref on dp.cid = pref.cid\n                                                            and dp.brand_id = pref.brand_id\nleft join ${Database}.temp.build_rollups_cid_brand_preference pgi on dp.cid = pgi.cid --gigya prefereces\n                                                            and dp.brand_id = pgi.brand_id\nleft join ${Database}.temp.build_rollups_cid_brand_emails    em   on dp.email = em.email\n                                                            and dp.brand_id = em.brand_id\nleft join ${Database}.temp.build_rollups_cid_brand_product   pro  on dp.cid = pro.cid\n                                                            and dp.brand_id = pro.brand_id\nleft join ${Database}.temp.build_rollups_cid_brand_pref_base bpb  on dp.cid = bpb.cid\n                                                            and dp.brand_id = bpb.brand_id;\n \n \ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid_brand',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_brand;   \n\n--drop table ${Database}.temp.build_rollups_cid_brand_preferred;\n--drop table ${Database}.temp.build_rollups_cid_brand_preference;\n--drop table ${Database}.temp.build_rollups_cid_brand_emails;\n--drop table ${Database}.temp.build_rollups_cid_brand_product;\n--drop table ${Database}.temp.build_rollups_cid_brand_pref_base; \n\n---------------------\n-- cid division\n\ndrop table if exists ${Database}.temp.names_supps_dp_division;\n\nCREATE OR REPLACE TABLE ${Database}.temp.names_supps_dp_division\nas\nselect distinct\n    cid,\n    business_unit_id,\n    division_id,\n    max(first_email)  as email,\n    max(dp_last_date) as dp_last_date,\n    max(last_open_date)       as last_open_date,\n    max(last_open_date_ios15) as last_open_date_ios15,\n    max(customer_retention_group_date) \t\t\t\tas customer_retention_group_date,\n    max(customer_retention_group_date_ios15) \t\tas customer_retention_group_date_ios15,\n    max(customer_retention_group_expiry_date) \t\tas customer_retention_group_expiry_date,\n    max(customer_retention_group_expiry_date_ios15) as customer_retention_group_expiry_date_ios15,\n    min(customer_retention_group_base) \t\t\t\tas customer_retention_group_base,\n    min(customer_retention_group_base_ios15) \t\tas customer_retention_group_base_ios15,\n    min(customer_suppression_group_base) \t\t\tas customer_suppression_group_base,\n    max(mailable)  as mailable,\n    max(emailable) as emailable,\n\tmax(div_emailable_first_date)   as emailable_first_date,\n\tmax(div_emailable_first_source) as emailable_first_source,\n\tmax(div_emailable_last_date)    as emailable_last_date,\n\tmax(div_emailable_last_source)  as emailable_last_source, \n    max(emailable_newsletter)  as emailable_newsletter,\n    max(mailable_ignoring_dp)  as mailable_ignoring_dp,\n    max(emailable_ignoring_dp) as emailable_ignoring_dp\nfrom \n\t(\n\tselect \n\t\t*\n\t\t,first_value(email) \t\t\t\t over (partition by cid, business_unit_id, division_id order by emailable desc nulls last, emailable_newsletter desc nulls last, dp_last_date desc nulls last       ,last_open_date desc nulls last,email asc nulls last) as first_email\n\t\t,first_value(emailable_first_date) \t over (partition by cid, business_unit_id, division_id order by emailable desc nulls last, emailable_newsletter desc nulls last, emailable_first_date nulls last    ,last_open_date desc nulls last,email asc nulls last) as div_emailable_first_date\n\t\t,first_value(emailable_first_source) over (partition by cid, business_unit_id, division_id order by emailable desc nulls last, emailable_newsletter desc nulls last, emailable_first_date nulls last    ,last_open_date desc nulls last,email asc nulls last) as div_emailable_first_source\n\t\t,first_value(emailable_last_date) \t over (partition by cid, business_unit_id, division_id order by emailable desc nulls last, emailable_newsletter desc nulls last, emailable_last_date desc nulls last,last_open_date desc nulls last,email asc nulls last) as div_emailable_last_date\n\t\t,first_value(emailable_last_source)  over (partition by cid, business_unit_id, division_id order by emailable desc nulls last, emailable_newsletter desc nulls last, emailable_last_date desc nulls last,last_open_date desc nulls last,email asc nulls last) as div_emailable_last_source \n\tfrom ${Database}.temp.names_supps_dp_brand\n\t) t\ngroup by 1,2,3\n;\n\nalter warehouse set warehouse_size = 'Small';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.names_supps_dp_division',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.names_supps_dp_division;\n\ndrop table if exists ${Database}.temp.build_rollups_cid_division_base ;  \n\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_division_base \nas\nselect \n    cbb.cid,\n    rb.division_id,\n    min(cbb.first_date_brand) as first_date_division,\n    max(cbb.last_date_brand) as last_date_division\nfrom ${Database}.temp.build_rollups_cid_brand_base cbb\ninner join ${Database}.live.ref_brand rb on cbb.brand_id = rb.brand_id\ngroup by \n    cbb.cid,\n    rb.division_id;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.build_rollups_cid_division_base',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_division_base;    \n\ndrop table if exists ${Database}.temp.group_division_new_check;\n\n--If grouping New then check if other brands exist with New/At Risk as these will be classed as safe\nCREATE OR REPLACE TABLE ${Database}.temp.group_division_new_check\nas\nselect distinct \n    cbbo.cid,\n    cbbo.division_id\nfrom ${Database}.temp.names_supps_dp_brand cbbo\ninner join ${Database}.temp.names_supps_dp_brand cbbt on cbbo.cid = cbbt.cid\n                                                and cbbo.division_id = cbbt.division_id\nwhere cbbo.customer_retention_group_base = 3 --New\n    and cbbt.customer_retention_group_base in (4,5);  --At Risk/Data Orphan\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.group_division_new_check',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.group_division_new_check;    \n\n\ncreate or replace table ${Database}.temp.group_division_new_check_ios15\nas\nselect distinct\n    cbbo.cid,\n    cbbo.division_id\nfrom ${Database}.temp.names_supps_dp_brand cbbo\ninner join ${Database}.temp.names_supps_dp_brand cbbt on cbbo.cid = cbbt.cid\n                                                     and cbbo.division_id = cbbt.division_id\nwhere cbbo.customer_retention_group_base_ios15 = 3 --New\n    and cbbt.customer_retention_group_base_ios15 in (4,5); --At Risk/Data Orphan\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_rollups',\n    '${Database}.temp.group_division_new_check_ios15',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.group_division_new_check_ios15;\n\n\n--drop table ${Database}.temp.names_supps_dp_brand;\n--drop table ${Database}.temp.build_rollups_cid_brand_base;\n\ndrop table if exists ${Database}.live.cid_division ;  \n\nCREATE OR REPLACE TABLE ${Database}.live.cid_division \nas\nselect \n    to_char(xr.bbw_urn)||'-'||to_char(dp.division_id) as cid_division_urn,\n    ci.cid,\n    dp.business_unit_id,\n    dp.division_id,\n   case \n        when dp.customer_retention_group_base = 1 then 'Safe'\n        when dp.customer_retention_group_base = 2 then 'Re-consent'\n        when gnd.cid is not null then 'Safe'\n        when dp.customer_retention_group_base = 3 then 'New'\n        when dp.customer_retention_group_base = 4 then 'At Risk'\n        when dp.customer_retention_group_base = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base = 6 then 'Gone this month'\n        when dp.customer_retention_group_base = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_division,\n   case \n        when dp.customer_retention_group_base_ios15 = 1 then 'Safe'\n        when dp.customer_retention_group_base_ios15 = 2 then 'Re-consent'\n        when gnd15.cid is not null then 'Safe'\n        when dp.customer_retention_group_base_ios15 = 3 then 'New'\n        when dp.customer_retention_group_base_ios15 = 4 then 'At Risk'\n        when dp.customer_retention_group_base_ios15 = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base_ios15 = 6 then 'Gone this month'\n        when dp.customer_retention_group_base_ios15 = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_division_ios15,\n    dp.customer_retention_group_date as customer_retention_date_division,\n    dp.customer_retention_group_date_ios15 as customer_retention_date_division_ios15,\n    dp.customer_retention_group_expiry_date as customer_retention_expiry_date_division,\n    dp.customer_retention_group_expiry_date_ios15 as customer_retention_expiry_date_division_ios15,\n    dp.dp_last_date as last_subscription_date_division,\n    dp.last_open_date as last_email_open_date_division, \n    dp.last_open_date_ios15 as last_email_open_date_division_ios15, \n    cdb.first_date_division,\n    cdb.last_date_division,\n    case \n        when dp.emailable = 1 or dp.emailable_newsletter = 1 then ''\n        when customer_suppression_group_base = 1 then 'Deceased TM'\n        when customer_suppression_group_base = 2 then 'Deceased'\n        when customer_suppression_group_base = 3 then 'Manual TM'\n        when customer_suppression_group_base = 4 then 'Manual'\n        when customer_suppression_group_base = 5 then 'Bounce TM'\n        when customer_suppression_group_base = 6 then 'Bounce'\n        when customer_suppression_group_base = 7 then 'Unsub TM'\n        when customer_suppression_group_base = 8 then 'Unsub'\n        when customer_suppression_group_base = 9 then 'Opt-Out TM'\n        when customer_suppression_group_base = 10 then 'Opt-Out'\n        when customer_suppression_group_base = 11 then 'Engagement'\n        else 'Misc'\n    end as customer_suppression_group_division,    \n    --    contactable status \n    case when dp.mailable = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable,\n    case when dp.emailable = 1 then 1 else 0 end as emailable,\n\tdp.emailable_first_date,\n\tdp.emailable_first_source,\n\tdp.emailable_last_date,\n\tdp.emailable_last_source, \n    case when dp.emailable_newsletter = 1 then 1 else 0 end as emailable_newsletter,\n    case when dp.mailable_ignoring_dp = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable_ignoring_dp,\n    case when dp.emailable_ignoring_dp = 1 then 1 else 0 end as emailable_ignoring_dp,\n    cast(regexp_replace(coalesce(\n        case \n            when dp.emailable = 1 or dp.emailable_newsletter = 1 then collate(dp.email,'')\n            else '' \n        end, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100)) as email_division\nfrom ${Database}.temp.build_rollups_cid_base ci\ninner join ${Database}.temp.names_supps_dp_division dp on ci.cid = dp.cid\ninner join ${Database}.temp.xref_cid_email                   xr   on dp.cid = xr.cid\n                                                            and dp.email = xr.email\nleft join ${Database}.temp.build_rollups_cid_division_base cdb on dp.cid = cdb.cid \n                                                         and dp.division_id = cdb.division_id\nleft join ${Database}.temp.group_division_new_check gnd on dp.cid = gnd.cid\n                                                  and dp.division_id = gnd.division_id\nleft join ${Database}.temp.group_division_new_check_ios15 gnd15 on dp.cid = gnd15.cid\n                                                             and dp.division_id = gnd15.division_id;\n    \ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid_division',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_division;   \n\n--drop table ${Database}.temp.build_rollups_cid_division_base;\n-----------------\n-- cid business unit \n\ndrop table if exists ${Database}.temp.names_supps_dp_business_unit;\n\nCREATE OR REPLACE TABLE ${Database}.temp.names_supps_dp_business_unit\nas\nselect distinct\n    cid,\n    business_unit_id,\n    max(first_email)  as email,\n    max(dp_last_date) as dp_last_date,\n    max(last_open_date)       as last_open_date,\n    max(last_open_date_ios15) as last_open_date_ios15,\n    max(customer_retention_group_date)       \t\tas customer_retention_group_date,\n    max(customer_retention_group_date_ios15) \t\tas customer_retention_group_date_ios15,\n    max(customer_retention_group_expiry_date) \t\tas customer_retention_group_expiry_date,\n    max(customer_retention_group_expiry_date_ios15) as customer_retention_group_expiry_date_ios15,\n    max(customer_retention_group_expiry_date) \t\tas dp_processing_expiry_date,\n    max(customer_retention_group_expiry_date_ios15) as dp_processing_expiry_date_ios15,\n    min(customer_retention_group_base) \t\t\t\tas customer_retention_group_base,\n    min(customer_retention_group_base_ios15) \t\tas customer_retention_group_base_ios15,\n    min(customer_suppression_group_base) \t\t\tas customer_suppression_group_base,\n    max(mailable)  as mailable,\n    max(emailable) as emailable,\n\tmax(bu_emailable_first_date)   as emailable_first_date,\n\tmax(bu_emailable_first_source) as emailable_first_source,\n\tmax(bu_emailable_last_date)    as emailable_last_date,\n\tmax(bu_emailable_last_source)  as emailable_last_source, \n    max(emailable_newsletter)   as emailable_newsletter,\n    max(mailable_ignoring_dp)   as mailable_ignoring_dp,\n    max(emailable_ignoring_dp)  as emailable_ignoring_dp\nfrom \n\t(\n\tselect\n\t\t*\n\t\t,first_value(email) \t\t\t\t over (partition by cid, business_unit_id order by emailable desc nulls last, emailable_newsletter desc nulls last, dp_last_date desc nulls last,last_open_date desc nulls last,email asc nulls last) as first_email\n\t\t,first_value(emailable_first_date) \t over (partition by cid, business_unit_id order by emailable desc nulls last, emailable_newsletter desc nulls last, emailable_first_date nulls last    ,last_open_date desc nulls last,email asc nulls last) as bu_emailable_first_date\n\t\t,first_value(emailable_first_source) over (partition by cid, business_unit_id order by emailable desc nulls last, emailable_newsletter desc nulls last, emailable_first_date nulls last\t   ,last_open_date desc nulls last,email asc nulls last) as bu_emailable_first_source\n\t\t,first_value(emailable_last_date) \t over (partition by cid, business_unit_id order by emailable desc nulls last, emailable_newsletter desc nulls last, emailable_last_date desc nulls last,last_open_date desc nulls last,email asc nulls last) as bu_emailable_last_date\n\t\t,first_value(emailable_last_source)  over (partition by cid, business_unit_id order by emailable desc nulls last, emailable_newsletter desc nulls last, emailable_last_date desc nulls last,last_open_date desc nulls last,email asc nulls last) as bu_emailable_last_source \n\tfrom ${Database}.temp.names_supps_dp_division\n\t) t\ngroup by 1,2\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'db_names_suppressions',\n    '${Database}.temp.names_supps_dp_business_unit',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.names_supps_dp_business_unit;\n\ndrop table if exists ${Database}.temp.group_business_new_check;\n\n--If grouping New then check if other divisions exist with New/At Risk as these will be classed as safe - also check if check was needed before\nCREATE OR REPLACE TABLE ${Database}.temp.group_business_new_check\nas\nselect distinct \n    cbbo.cid,\n    cbbo.business_unit_id\nfrom ${Database}.temp.names_supps_dp_division cbbo\nleft join ${Database}.temp.names_supps_dp_division cbbt on cbbo.cid = cbbt.cid\n                                                  and cbbo.business_unit_id = cbbt.business_unit_id\n                                                  and cbbt.customer_retention_group_base in (4,5)  --At Risk/Data Orphan\nleft join ${Database}.temp.group_division_new_check gdc on cbbo.cid = gdc.cid\n                                                  and cbbo.division_id = gdc.division_id\nwhere cbbo.customer_retention_group_base = 3 --New\n    and (gdc.cid is not null or cbbt.cid is not null); --Either already Safe due to previous checking or new grouping filter needed\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.temp.group_business_new_check',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.group_business_new_check;    \n\n\nCREATE OR REPLACE TABLE ${Database}.temp.group_business_new_check_ios15\nas\nselect distinct\n    cbbo.cid,\n    cbbo.business_unit_id\nfrom ${Database}.temp.names_supps_dp_division cbbo\nleft join ${Database}.temp.names_supps_dp_division cbbt on cbbo.cid = cbbt.cid\n                                                  and cbbo.business_unit_id = cbbt.business_unit_id\n                                                  and cbbt.customer_retention_group_base_ios15 in (4,5)  --At Risk/Data Orphan\nleft join ${Database}.temp.group_division_new_check_ios15 gdc on cbbo.cid = gdc.cid\n                                                             and cbbo.division_id = gdc.division_id\nwhere cbbo.customer_retention_group_base_ios15 = 3 --New\n    and (gdc.cid is not null or cbbt.cid is not null); --Either already Safe due to previous checking or new grouping filter needed\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_rollups',\n    '${Database}.temp.group_business_new_check_ios15',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.group_business_new_check_ios15;\n\n--drop table ${Database}.temp.group_division_new_check;\n--drop table ${Database}.temp.group_division_new_check_ios15;\n--drop table ${Database}.temp.names_supps_dp_division;\n\n\nalter warehouse set warehouse_size = 'Medium';\n\n--acquisition types\nCREATE OR REPLACE TABLE ${Database}.temp.npp_acquisition_type_base\nas\nselect distinct\n    acq.cid,\n    acq.acquisition_name_urn,\n    trim(acq.acquisition_source) as acquisition_source,\n    acq.acquisition_source_brand_id,\n    acq.acquisition_source_file,\n    first_value(trim(na.registration_campaign)) over\n        (\n            partition by cid \n            order by \n                na.data_date nulls last,\n                na.source_date nulls last\n        ) as acquisition_registration_campaign\nfrom (\n         select distinct\n             xr.cid,\n             first_value(n.name_urn) over\n                 (\n                     partition by xr.cid\n                     order by\n                         n.data_date nulls last,\n                         n.reg_date nulls last,\n                         n.source_date nulls last\n                 ) as acquisition_name_urn,\n             first_value(n.source) over\n                 (\n                     partition by xr.cid\n                     order by\n                         n.data_date nulls last,\n                         n.reg_date nulls last,\n                         n.source_date nulls last\n                 ) as acquisition_source,\n             first_value(n.source_brand_id) over\n                 (\n                     partition by xr.cid\n                     order by\n                         n.data_date nulls last,\n                         n.reg_date nulls last,\n                         n.source_date nulls last\n                 ) as acquisition_source_brand_id,\n             first_value(n.source_file) over\n                 (\n                     partition by xr.cid\n                     order by\n                         n.data_date nulls last,\n                         n.reg_date nulls last,\n                         n.source_date nulls last\n                 ) as acquisition_source_file\n         from ${Database}.db.names n\n         left join ${Database}.live.xref_name_urn xr on xr.name_urn = n.name_urn\n         where source_data_controller_id = (select data_controller_id from ${Database}.live.ref_data_controller where data_controller like 'Nestl_ Purina Petcare (UK) Ltd')\n\t\t and n.source <> 'RESP_ADE_RMI' and n.source <> 'NPP09393_BT_SS_QUALIFIO_EXIST'\n     ) acq\nleft join ${Database}.db.names_attributes na on na.name_urn = acq.acquisition_name_urn \n                                       and (source <> 'REG_GIG' or (na.source = 'REG_GIG' and na.registration_campaign not in  (\n\n                                                                                                                                'GBCERELACWEB_MIG',\n                                                                                                                                'UKAEROCHOCOLATEWEB',\n                                                                                                                                'UKBUXTONWATERWEB',\n                                                                                                                                'UKCARNATIONWEB',\n                                                                                                                                'UKCERELACWEB',\n                                                                                                                                'UKCERELACWEB_MIG',\n                                                                                                                                'UKKITKATWEB',\n                                                                                                                                'UKMAGGIWEB',\n                                                                                                                                'UKMERITENEWEB',\n                                                                                                                                'UKMERITENEWEB_MIG',\n                                                                                                                                'UKMILKYBARWEB',\n                                                                                                                                'UKNESCAFEWEB',\n                                                                                                                                'UKROWNTREESWEB',\n                                                                                                                                'UKYESSNACKSWEB',\n                                                                                                                                'UKNESTLEPURELIFEWEB'))); --CIAM name_urns can join to ${Database} reg_campaigns from names_attibutes\n\nalter warehouse set warehouse_size = 'Small';\n\ninsert into ${Database}.db.build_log \nselect \n    '${Database}_rollups',\n    '${Database}.temp.npp_acquisition_type_base',\n    'total records',\n    cast(count(*) as varchar),\n    current_timestamp \nfrom ${Database}.temp.npp_acquisition_type_base;\n\n--cid level table with acquisition types attributed\ndrop table if exists ${Database}.temp.ref_acquisition_type_joined;\n\nCREATE OR REPLACE TABLE ${Database}.temp.ref_acquisition_type_joined\nas\n--new source - has populated registration_campaign and brand_id\n--join on source, reg_campaign and brand\nselect     distinct \n    b.cid,\n    b.acquisition_source,\n    '' as acquisition_source_file,\n    b.acquisition_source_brand_id,\n    b.acquisition_registration_campaign,\n    case when b.acquisition_source = 'REG_GIG' then 'Website Registrations' else tc.acquisition_type end as acquisition_type, --Issue with reg_campaign when joining CIAM records to names_attributes, but they're all website reg\n    tc.acquisition_channel,\n    '1 - source, reg_campaign and brand' as join_type\nfrom ${Database}.temp.npp_acquisition_type_base b\nleft join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                           and b.acquisition_registration_campaign = tc.registration_campaign\n                                           and b.acquisition_source_brand_id = tc.acquisition_source_brand_id\nwhere (b.acquisition_registration_campaign > '')\n    and b.acquisition_source_brand_id is not null\n    and contains(lower(tc.source_old_new),'new')\nunion all\n--new source - has null or blank registration_campaign and populated brand_id\n--join on source and brand_id\nselect     distinct\n    b.cid,\n    b.acquisition_source,\n    '' as acquisition_source_file,\n    b.acquisition_source_brand_id,\n    b.acquisition_registration_campaign,\n    case when b.acquisition_source = 'REG_GIG' then 'Website Registrations' else tc.acquisition_type end as acquisition_type, --Issue with reg_campaign when joining CIAM records to names_attributes, but they're all website reg\n    tc.acquisition_channel,\n    '2 - source and brand' as join_type\nfrom ${Database}.temp.npp_acquisition_type_base b\nleft join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                           and b.acquisition_source_brand_id = tc.acquisition_source_brand_id\nwhere (b.acquisition_registration_campaign is null or b.acquisition_registration_campaign = '')\n    and tc.registration_campaign is null\n    and b.acquisition_source_brand_id is not null\n    and contains(lower(tc.source_old_new),'new')\nunion all\n--new source - has populated registration_campaign and null brand_id\n--join on source and reg_campaign\nselect     distinct\n    b.cid,\n    b.acquisition_source,\n    '' as acquisition_source_file,\n    b.acquisition_source_brand_id,\n    b.acquisition_registration_campaign,\n    case when b.acquisition_source = 'REG_GIG' then 'Website Registrations' else tc.acquisition_type end as acquisition_type, --Issue with reg_campaign when joining CIAM records to names_attributes, but they're all website reg\n    tc.acquisition_channel,\n    '3 - source and reg_campaign' as join_type\nfrom ${Database}.temp.npp_acquisition_type_base b\nleft join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                           and b.acquisition_registration_campaign = tc.registration_campaign\nwhere (b.acquisition_registration_campaign > '')\n    and b.acquisition_source_brand_id is null\n    and tc.acquisition_source_brand_id is null\n    and contains(lower(tc.source_old_new),'new')\nunion all\n--new source - has null registration_campaign and null brand_id\n--hard coding as Website Registrations\nselect     distinct\n    b.cid,\n    b.acquisition_source,\n    '' as acquisition_source_file,\n    b.acquisition_source_brand_id,\n    b.acquisition_registration_campaign,\n    'Website Registrations' as acquisition_type,\n    tc.acquisition_channel,\n    '4 - all null' as join_type\nfrom ${Database}.temp.npp_acquisition_type_base b\ninner join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                            and tc.acquisition_source_brand_id is null\n                                            and (tc.registration_campaign = '' or tc.registration_campaign is null)\nwhere (b.acquisition_registration_campaign is null or b.acquisition_registration_campaign = '')\n    and b.acquisition_source_brand_id is null\n    and not contains(upper(b.acquisition_source),'NPP')\nunion all\n--old source - non-null acquisition_source_brand_id\nselect     distinct \n    b.cid,\n    b.acquisition_source,\n    b.acquisition_source_file,\n    b.acquisition_source_brand_id,\n    '' as acquisition_registration_campaign,\n    tc.acquisition_type,\n    tc.acquisition_channel,\n    '5 - populated acquisition_source_brand_id ' as join_type\nfrom ${Database}.temp.npp_acquisition_type_base b\nleft join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                           and b.acquisition_source_file = tc.acquisition_source_file\n                                           and b.acquisition_source_brand_id = tc.acquisition_source_brand_id\nwhere contains(lower(tc.source_old_new),'old')\n    and b.acquisition_source_brand_id is not null\nunion all\n--old source - has null acquisition_source_brand_id\nselect     distinct \n    b.cid,\n    b.acquisition_source,\n    b.acquisition_source_file,\n    b.acquisition_source_brand_id,\n    '' as acquisition_registration_campaign,\n    tc.acquisition_type,\n    tc.acquisition_channel,\n    '6 - null acquisition_source_brand_id ' as join_type\nfrom ${Database}.temp.npp_acquisition_type_base b\nleft join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                           and b.acquisition_source_file = tc.acquisition_source_file\nwhere contains(lower(tc.source_old_new),'old')\n    and b.acquisition_source_brand_id is null;\n\ninsert into ${Database}.db.build_log \nselect \n    '${Database}_rollups',\n    '${Database}.temp.ref_acquisition_type_joined',\n    'total records',\n    cast(count(*) as varchar),\n    current_timestamp \nfrom ${Database}.temp.ref_acquisition_type_joined;\n\n--to output email with any missing ones that need actioning\ndrop table if exists ${Database}.jobs.npp_acquisition_types_missing;\ncreate table ${Database}.jobs.npp_acquisition_types_missing\nas\nselect\n    b.acquisition_source, \n    rb.brand,\n    b.acquisition_registration_campaign,\n    count(b.cid) as volume\nfrom ${Database}.temp.npp_acquisition_type_base b\nleft join ${Database}.live.ref_brand rb on b.acquisition_source_brand_id = rb.brand_id\nwhere cid not in (select cid from ${Database}.temp.ref_acquisition_type_joined)\ngroup by 1,2,3\n;\n\ndrop table if exists ${Database}.live.cid_business_unit ;  \n\nCREATE OR REPLACE TABLE ${Database}.live.cid_business_unit \nas\nselect \n    to_char(xr.bbw_urn)||'-'||to_char(dp.business_unit_id) as cid_business_unit_urn,\n    ci.cid,\n    dp.business_unit_id,\n   case \n        when dp.customer_retention_group_base = 1 then 'Safe'\n        when dp.customer_retention_group_base = 2 then 'Re-consent'\n        when gnc.cid is not null then 'Safe'\n        when dp.customer_retention_group_base = 3 then 'New'\n        when dp.customer_retention_group_base = 4 then 'At Risk'\n        when dp.customer_retention_group_base = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base = 6 then 'Gone this month'\n        when dp.customer_retention_group_base = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_business_unit,\n   case \n        when dp.customer_retention_group_base_ios15 = 1 then 'Safe'\n        when dp.customer_retention_group_base_ios15 = 2 then 'Re-consent'\n        when gnc15.cid is not null then 'Safe'\n        when dp.customer_retention_group_base_ios15 = 3 then 'New'\n        when dp.customer_retention_group_base_ios15 = 4 then 'At Risk'\n        when dp.customer_retention_group_base_ios15 = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base_ios15 = 6 then 'Gone this month'\n        when dp.customer_retention_group_base_ios15 = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_business_unit_ios15,\n    dp.customer_retention_group_date as customer_retention_date_business_unit,\n    dp.customer_retention_group_date_ios15 as customer_retention_date_business_unit_ios15,\n    dp.customer_retention_group_expiry_date as customer_retention_expiry_date_business_unit,\n    dp.customer_retention_group_expiry_date_ios15 as customer_retention_expiry_date_business_unit_ios15,\n    dp.dp_processing_expiry_date,\n    dp.dp_processing_expiry_date_ios15,\n    dp.dp_last_date as last_subscription_date_business_unit,\n    dp.last_open_date as last_email_open_date_business_unit,\n    dp.last_open_date_ios15 as last_email_open_date_business_unit_ios15,\n    cdb.first_date_business_unit,\n    cdb.last_date_business_unit,  \n    case \n        when dp.emailable = 1 or dp.emailable_newsletter = 1 then ''\n        when customer_suppression_group_base = 1 then 'Deceased TM'\n        when customer_suppression_group_base = 2 then 'Deceased'\n        when customer_suppression_group_base = 3 then 'Manual TM'\n        when customer_suppression_group_base = 4 then 'Manual'\n        when customer_suppression_group_base = 5 then 'Bounce TM'\n        when customer_suppression_group_base = 6 then 'Bounce'\n        when customer_suppression_group_base = 7 then 'Unsub TM'\n        when customer_suppression_group_base = 8 then 'Unsub'\n        when customer_suppression_group_base = 9 then 'Opt-Out TM'\n        when customer_suppression_group_base = 10 then 'Opt-Out'\n        when customer_suppression_group_base = 11 then 'Engagement'\n        else 'Misc'\n    end as customer_suppression_group_business_unit,     \n    --    contactable status  \n    case when dp.mailable = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable,\n    case when dp.emailable = 1 then 1 else 0 end as emailable,\n    dp.emailable_first_date,\n    dp.emailable_first_source,\n    dp.emailable_last_date,\n    dp.emailable_last_source,\n    case when dp.emailable_newsletter = 1 then 1 else 0 end as emailable_newsletter,\n    case when dp.mailable_ignoring_dp = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable_ignoring_dp,\n    case when dp.emailable_ignoring_dp = 1 then 1 else 0 end as emailable_ignoring_dp,\n    cast(regexp_replace(coalesce(\n        case \n            when dp.emailable = 1 or dp.emailable_newsletter = 1 then collate(dp.email,'')\n            else '' \n        end, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100)) as email_business_unit,\n        coalesce(acq.acquisition_type, '') as acquisition_type,\n    coalesce(acq.acquisition_channel,'') as acquisition_channel\nfrom ${Database}.temp.build_rollups_cid_base ci\ninner join ${Database}.temp.names_supps_dp_business_unit dp on ci.cid = dp.cid\ninner join ${Database}.temp.xref_cid_email                   xr   on dp.cid = xr.cid\n                                                            and dp.email = xr.email\nleft join ${Database}.temp.build_rollups_cid_bu_base cdb on dp.cid = cdb.cid \n                                                   and dp.business_unit_id = cdb.business_unit_id\nleft join ${Database}.temp.group_business_new_check gnc on dp.cid = gnc.cid\n                                                  and dp.business_unit_id = gnc.business_unit_id\nleft join ${Database}.temp.group_business_new_check_ios15 gnc15 on dp.cid = gnc15.cid\n                                                  and dp.business_unit_id = gnc15.business_unit_id\nleft join ${Database}.temp.ref_acquisition_type_joined acq on acq.cid = ci.cid\n                                                     and dp.business_unit_id = 5\n                                                     and cdb.first_date_business_unit is not null;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.cid_business_unit',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_business_unit;   \n\n--drop table ${Database}.temp.names_supps_dp_business_unit;\n--drop table ${Database}.temp.build_rollups_cid_bu_base;\n--drop table ${Database}.temp.group_business_new_check;\n--drop table ${Database}.temp.xref_cid_email;\n\n\n--update risk segment of non-anonymised lapsed customer when customer_retention_group_business_unit='new'\nmerge into ${Database}.live.cid c\nusing (\n          select distinct\n              cid\n          from ${Database}.live.cid_business_unit\n          where business_unit_id = 5\n              and customer_retention_group_business_unit='New'\n      ) cbu on c.cid = cbu.cid\nwhen matched and c.purina_lapse_risk_segment in ('Very High Risk','High Risk') then update\nset c.purina_lapse_risk_segment = 'Medium Risk';\n\n\n---------------------  \n---------------------\n-- hid\n\ndrop table if exists ${Database}.live.hid ;  \n\nCREATE OR REPLACE TABLE ${Database}.live.hid \nas \nselect \n    hid\nfrom ${Database}.temp.build_rollups_cid_base\ngroup by hid;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.hid',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.hid;   \n  \n--drop table ${Database}.temp.build_rollups_cid_base;\n\n--Create ${Database}.live.npp_thg_trans table\n\n\ndrop table if exists ${Database}.live.npp_thg_trans;\n\ncreate table ${Database}.live.npp_thg_trans \nas\nselect nt.*\nfrom ${Database}.db.npp_thg_trans nt\ninner join  --this will give me the set of order detail lines for just the latest dated file for the order\n    (\n        select distinct\n            trim(order_number) as order_number,\n            --just incase 2 files are loaded in the same day and so have the same source date (tried to use datadate but it's a time stamp so different for each detail line...)\n            first_value(trim(source_file)) \n            over\n            (\n                partition by trim(order_number)\n                order by \n                    source_date desc nulls last,  \n                    trim(source_file) desc\n            ) as source_file \n        from ${Database}.db.npp_thg_trans\n    ) sq on trim(nt.order_number) = sq.order_number\n        and trim(nt.source_file) = sq.source_file; --this will give me the 1 latest dated file for the order\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '${Database}.live.npp_thg_trans',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.npp_thg_trans;  \n\n---------------------\n--coid - not required\n\n---------------------\n--insert seeds for faststats\n\n---------------------\n--fs views\n\n\n---------------------\n--sars views\n\n--collect recent new SARs\ncreate or replace table ${Database}.temp.build_todays_sars\nas\nselect distinct\n    nm.cid,\n    first_value(nm.name_urn) over(partition by nm.cid, s.email order by nm.data_date nulls last) as urn,\n    s.supp_urn,\n    s.email,\n    s.sar_source_date\nfrom (\n         select\n             supp_urn,\n             email1 as email,\n             source_date as sar_source_date\n         from ${Database}.db.supps_sar\n         where supp_urn not in (select supp_urn from ${Database}.db.sar_hist_contact)\n             and source_date >= current_date-3 --it's a rolling record of current SARs\n             and trim(email1) > ''\n         union all\n         select\n             supp_urn,\n             email2 as email,\n             source_date as SAR_source_date\n         from ${Database}.db.supps_sar\n         where supp_urn not in (select supp_urn from ${Database}.db.sar_hist_contact)\n             and source_date >= current_date-3 --it's a rolling record of current SARs\n             and trim(email2) > ''\n     ) s\nleft join ${Database}.live.names nm on lower(trim(s.email)) = lower(trim(nm.email));\n\n\ndelete\nfrom ${Database}.db.sar_hist_contact\nwhere sar_source_date < current_date - 7;\n\n\ninsert into ${Database}.db.sar_hist_contact\n(\n    supp_urn,\n    urn,\n    name_urn,\n    date_of_receipt,\n    title,\n    firstname,\n    lastname,\n    job_title,\n    company,\n    address_line_1,\n    address_line_2,\n    address_line_3,\n    address_line_4,\n    city,\n    county,\n    post_code,\n    country,\n    date_of_birth,\n    gender,\n    work_phone,\n    home_phone,\n    mobile_phone,\n    email,\n    source,\n    data_controller,\n    source_brand,\n    sar_source_date\n)\nselect distinct\n    s.supp_urn,\n    s.urn,\n    nm.name_urn,\n    nm.data_date,\n    nm.title,\n    nm.firstname,\n    nm.lastname,\n    nm.job_title,\n    nm.company,\n    nm.add1,\n    nm.add2,\n    nm.add3,\n    nm.add4,\n    nm.city,\n    nm.state,\n    nm.postcode,\n    nm.country,\n    nm.dob,\n    nm.gender,\n    nm.phone_work,\n    nm.phone_home,\n    nm.phone_mobile,\n    nm.email,\n    nm.source,\n    dc.data_controller,\n    br.brand,\n    s.sar_source_date\nfrom ${Database}.temp.build_todays_sars s\ninner join ${Database}.live.xref_name_urn xref on s.cid = xref.cid\ninner join ${Database}.live.names nm on trim(xref.name_urn) = trim(nm.name_urn)\ninner join ${Database}.live.ref_data_controller dc on nm.source_data_controller_id = dc.data_controller_id\nleft join ${Database}.live.ref_brand br on nm.source_brand_id = br.brand_id;\n\n\ndelete\nfrom ${Database}.db.sar_hist_dp\nwhere sar_source_date < current_date - 7;\n\n\ninsert into ${Database}.db.sar_hist_dp\n(\n    supp_urn,\n    urn,\n    name_urn,\n    opt_in_mail_comms,\n    opt_in_email_comms,\n    opt_in_newsletter,\n    opt_in_date,\n    opt_in_business_unit,\n    opt_in_brand,\n    source,\n    opt_in_statement,\n    sar_source_date\n)\nselect\n    s.supp_urn,\n    s.urn,\n    dp.name_urn,\n    case when dp.dp_mailable = 1 then 'Yes' when dp.dp_mailable = 0 then 'No' else '' end,\n    case when dp.dp_emailable = 1 then 'Yes' when dp.dp_emailable = 0 then 'No' else '' end,\n    case when dp.dp_newsletter = 1 then 'Yes' when dp.dp_newsletter = 0 then 'No' else '' end,\n    dp.dp_date,\n    dc.data_controller,\n    br.brand,\n    dp.source,\n    rdp.dp_statement,\n    s.sar_source_date\nfrom ${Database}.temp.build_todays_sars s\ninner join ${Database}.live.xref_name_urn xref on s.cid = xref.cid\ninner join ${Database}.db.names_dp dp on trim(xref.name_urn) = trim(dp.name_urn)\ninner join ${Database}.live.ref_data_controller dc on dp.data_controller_id = dc.data_controller_id\nleft join ${Database}.live.ref_brand br on dp.brand_id = br.brand_id\nleft join ${Database}.db.ref_dp rdp on trim(dp.source) = trim(rdp.source)\n                              and dp.data_controller_id = rdp.data_controller_id\n                              and coalesce(dp.brand_id,0) = coalesce(rdp.brand_id,0)\n                              and (dp.data_date >= rdp.start_date or rdp.start_date is null)\n                              and (dp.data_date <= rdp.end_date or rdp.end_date is null);\n\n\ndelete\nfrom ${Database}.db.sar_hist_comms\nwhere sar_source_date < current_date - 7;\n\n\ninsert into ${Database}.db.sar_hist_comms\n(\n    supp_urn,\n    urn,\n    name_urn,\n    email,\n    send_date,\n    brand_opted_in_to,\n    campaign_business_unit,\n    campaign_brand,\n    programme_description,\n    campaign_description,\n    promotion_description,\n    cell_description,\n    pack_description,\n    destination,\n    sar_source_date\n)\nselect\n    s.supp_urn,\n    s.urn,\n    ch.name_urn,\n    ch.email,\n    ch.drop_date,\n    br.brand,\n    dc.data_controller,\n    br1.brand,\n    chl.programme_description,\n    chl.campaign_id||' '||chl.campaign_description,\n    chl.promotion_id||' '||chl.promotion_description,\n    chl.cell_id||' '||chl.cell_description,\n    chl.pack_id||' '||chl.pack_description,\n    chl.final_destination,\n    s.sar_source_date\nfrom ${Database}.temp.build_todays_sars s\ninner join ${Database}.live.xref_name_urn xref on s.cid = xref.cid\ninner join ${Database}.db.comms_hist ch on trim(xref.name_urn) = trim(ch.name_urn)\ninner join ${Database}.db.comms_hist_lookup chl on trim(ch.programme_id) = trim(chl.programme_id)\n                                          and trim(ch.campaign_id) = trim(chl.campaign_id)\n                                          and trim(ch.promotion_id) = trim(chl.promotion_id)\n                                          and trim(ch.cell_id) = trim(chl.cell_id)\n                                          and trim(ch.pack_id) = trim(chl.pack_id)\nleft join ${Database}.live.ref_brand br on ch.data_brand_id = br.brand_id\nleft join ${Database}.live.ref_data_controller dc on chl.data_controller_id = dc.data_controller_id\nleft join ${Database}.live.ref_brand br1 on chl.brand_id = br1.brand_id;\n\n\ninsert into ${Database}.db.sar_hist_comms --sma and nestle comms all go into the same tab in the report\n(\n    supp_urn,\n    urn,\n    name_urn,\n    email,\n    send_date,\n    brand_opted_in_to,\n    campaign_business_unit,\n    campaign_brand,\n    programme_description,\n    campaign_description,\n    promotion_description,\n    cell_description,\n    pack_description,\n    destination,\n    sar_source_date\n)\nselect\n    s.supp_urn,\n    s.urn,\n    s.urn,\n    s.email,\n    ch.communication_date,\n    'SMA',\n    'Nestlé UK Ltd',\n    'SMA',\n    chl.programme_name,\n    cast(chl.campaign_id as varchar)||' '||chl.campaign_name,\n    cast(chl.promotion_id as varchar)||' '||chl.promotion_name,\n    cast(chl.cell_id as varchar)||' '||chl.cell_name,\n    cast(chl.pack_id as varchar)||' '||chl.pack_name,\n    'Adestra/Pragmatica',\n    s.sar_source_date\nfrom ${Database}.temp.build_todays_sars s\ninner join ${Database}.live.sma_comms_hist ch on s.cid = ch.cid\nleft join ${Database}.live.sma_comms_hist_lookup chl on trim(ch.pack_id) = trim(chl.pack_id);\n\n\ndelete\nfrom ${Database}.db.sar_hist_pets\nwhere sar_source_date < current_date - 7;\n\n\ninsert into ${Database}.db.sar_hist_pets\n(\n    supp_urn,\n    name_urn,\n    pet_name,\n    pet_type,\n    pet_age_years,\n    pet_age_months,\n    pet_dob,\n    pet_birth_month,\n    pet_birth_year,\n    pet_age_weeks,\n    pet_indoor_outdoor,\n    pet_size,\n    pet_breed,\n    pet_colour,\n    pet_weight,\n    pet_gender,\n    pet_life_stage,\n    pet_bodyshape,\n    pet_lifestyle,\n    pet_deceased,\n    pet_kennel,\n    source,\n    source_date,\n    sar_source_date\n)\nselect\n    s.supp_urn,\n    p.name_urn,\n    p.pet_name,\n    p.pet_type,\n    p.pet_age_years,\n    p.pet_age_months,\n    p.pet_dob,\n    p.pet_birth_month,\n    p.pet_birth_year,\n    p.pet_age_weeks,\n    p.pet_indoor_outdoor,\n    p.pet_size,\n    p.pet_breed,\n    p.pet_colour,\n    p.pet_weight,\n    p.pet_gender,\n    p.pet_life_stage,\n    p.pet_bodyshape,\n    p.pet_lifestyle,\n    p.pet_deceased,\n    p.pet_kennel,\n    p.source,\n    p.source_date,\n    s.sar_source_date\nfrom ${Database}.temp.build_todays_sars s\ninner join ${Database}.live.xref_name_urn xr on s.cid = xr.cid\ninner join ${Database}.db.pet p on trim(xr.name_urn) = trim(p.name_urn);\n\n\ndelete\nfrom ${Database}.db.sar_hist_children\nwhere sar_source_date < current_date - 7;\n\n\ninsert into ${Database}.db.sar_hist_children\n(\n    supp_urn,\n    urn,\n    name_urn,\n    firstname,\n    lastname,\n    gender,\n    yearofbirth,\n    dateofbirth,\n    create_date,\n    source,\n    source_date,\n    sar_source_date\n)\nselect\n    s.supp_urn,\n    s.urn,\n    name_urn,\n    case when firstname = 'Baby' then '' else firstname end,\n    lastname,\n    gender,\n    left(cast(dob as varchar),4),\n    dob,\n    cast(created_date as date),\n    source,\n    cast(created_date as date),\n    s.sar_source_date\nfrom ${Database}.temp.build_todays_sars s\ninner join ${Database}.live.dependant ch on s.cid = ch.cid;\n\n\n--lookup for SARs to output today\ncreate or replace table ${Database}.jobs.build_sars_lookup\nas\nselect distinct\n    first_value(supp_urn) over(order by sar_source_date) as supp_urn,\n    row_number() over(partition by supp_urn order by 1) as rn --order doesn't matter\nfrom (\n         select distinct\n             supp_urn,\n             sar_source_date\n         from ${Database}.db.sar_hist_contact\n         where processed_date is null\n     ) a;\n\n\n/******************************************************************************************\n                                       FINISH PROC\n******************************************************************************************/\n\nupdate ${Database}.db.build_dates\nset nestle_rollups = CURRENT_TIMESTAMP::timestamp_ntz\nwhere build_flag    = 'C';\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_rollups',\n    '*************************',\n    '*************************',\n    'end of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;  \n  \n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 12 Rollups'\n, \t\t'SCRIPT'\n, \t\t'FINISHED'\n;\n\nalter warehouse set warehouse_size = 'Xsmall';"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"197159":{"id":197159,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-432,"y":-64,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[197157],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Start","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{},"failureConnectors":{},"unconditionalConnectors":{"197157":{"id":197157,"sourceID":197159,"targetID":197158}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{"197153":{"id":197153,"x":-368,"y":50,"width":314,"height":103,"text":"Backup of original Proc12 (10/5/2022)","colour":"e6e63c"}},"variables":{},"grids":{}},"info":{"name":"Proc12 Rollups","description":"Proc12 Rollups","type":"ORCHESTRATION","tag":"3628373b-5f2b-45a5-b619-532eb311b2de"}}