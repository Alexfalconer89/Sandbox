{"job":{"components":{"197169":{"id":197169,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-176,"y":-64,"width":32,"height":32,"inputConnectorIDs":[197168],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Drop Core Prep Temp Tables"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nProgram           : Drop Core Prep Rollups Temp Tables\nAuthor            : Lee Wallis\nClient Name       : Nestle\nJob Number        : HH010177 \nStandard Machine  : Snowflake\nAmendment History : v01 - Split of Core Prep data from the original Proc12 process\n******************************************************************************************/\n\n/******************************************************************************************\n                             DROP CORE PREP ROLLUPS TEMP TABLES\n******************************************************************************************/\n\ndrop table if exists ${Database}.temp.build_rollups_cid_npp_no_brand_base ;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"197170":{"id":197170,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-301,"y":-65,"width":32,"height":32,"inputConnectorIDs":[197175],"outputSuccessConnectorIDs":[197168],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"CorePrep_Rollups"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nProgram           : Core Prep Rollups\nAuthor            : Lindsay Timms / Lee Wallis\nClient Name       : Nestle\nJob Number        : HH010177 \nStandard Machine  : Snowflake\nAmendment History : v01 - Split of Core Prep data from the original Proc12 process\n******************************************************************************************/\n\n/*\n\t\tTABLES CREATED:\t\t\n        --all referred to in Core Table Rollups\n        temp.build_rollups_cid_base\t\t\t\t--also Others Rollups\n        temp.build_rollups_cid_gender_fix\t\n        temp.build_rollups_cid_brand_base\t \t--also Engagement Rollups\n        temp.build_rollups_cid_bu_base      \n        temp.build_rollups_cid_brand_preference \n        temp.xref_cid_email\n        \n        TABLES UPDATED:\n        [none]\n*/\n/* hello\n\n/******************************************************************************************\n                                CORE PREP ROLLUPS\n******************************************************************************************/\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_prep_rollups',\n    '*************************',\n    '*************************',\n    'start of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;  \n\n\n---------------------\n-- cid base\ndrop table if exists ${Database}.temp.build_rollups_cid_base;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_base  \nas\nselect \n    cid,\n    max(case when name_urn = latest_name_urn then hid end) as hid,\n    min(bbw_urn) as bbw_urn,\n    max(latest_name_urn) as name_urn,    \n    min(reg_date) as created_date,\n    max(data_date) as updated_date, \n    max(case when name_urn = name_urn_to_mail_ignoring_dp then country_clean end) as country,        \n    min(case when gender = '' then 'X' else gender end) as gender, -- min works assuming 'm','f','x' (gender conflicts are fixed below)\n    max(case when name_urn = name_urn_to_mail_ignoring_dp then postcode end) as postcode,\n    max(case when name_urn = name_urn_to_mail_ignoring_dp then postcode_area_home end) as postcode_area_home,    \n    max(case when name_urn = name_urn_to_mail_ignoring_dp then postcode_district_home end) as postcode_district_home,   \n    max(case when name_urn = name_urn_to_dob then dob end) as dob,\n    --    contactable status     \n    max(mailable_ignoring_dp) as mailable_ignoring_dp,\n    max(emailable_ignoring_dp) as emailable_ignoring_dp,\n    max(phoneable_ignoring_dp) as phoneable_ignoring_dp,\n    max(smsable_ignoring_dp) as smsable_ignoring_dp,    \n    --    which record for that customer is best to contact for each channel   \n    max(name_urn_to_mail_ignoring_dp) as name_urn_to_mail_ignoring_dp,\n    max(name_urn_to_email_ignoring_dp) as name_urn_to_email_ignoring_dp,       \n    max(name_urn_to_phone_ignoring_dp) as name_urn_to_phone_ignoring_dp,   \n    max(name_urn_to_sms_ignoring_dp) as name_urn_to_sms_ignoring_dp\nfrom\n\t(\n\tselect \n\t\tnm.cid\n\t\t,nm.hid\n\t\t,nm.name_urn\n\t\t,nm.bbw_urn\n\t\t,nm.reg_date\n\t\t,nm.data_date\n\t\t,nm.country_clean\n\t\t,nm.gender\n\t\t,nm.postcode\n\t\t,cf.mailable_ignoring_dp\n\t\t,cf.emailable_ignoring_dp\n\t\t,cf.phoneable_ignoring_dp\n\t\t,cf.smsable_ignoring_dp\n\t\t,case\n\t\t\twhen lower(collate(nm.name_urn,'')) not regexp '.*work.*' and upper(nm.postcode) in ('IRELAND','EIRE')                     then 'RO'\n\t\t\twhen lower(collate(nm.name_urn,'')) not regexp '.*work.*' then  case\n\t\t\t\t\t\twhen lower(substring(collate(nm.postcode,''),2,1)) regexp '.*[a-z].*' then left(nm.postcode,2) \n\t\t\t\t\t\telse left(nm.postcode,1) \n\t\t\t\t\tend \n\t\t\telse ''\n\t\tend as postcode_area_home\n\t\t,case\n\t\t\twhen lower(collate(nm.name_urn,'')) not regexp '.*work.*' then case \n\t\t\t\twhen lower(nm.country)='united kingdom' then left(upper(split_part(nm.postcode,' ',1)),10) \n\t\t\t\telse '' \n\t\t\t\tend\n\t\t\telse ''\n\t\tend as postcode_district_home\n\t\t,case \n\t\t\twhen nm.dob = '2001-01-01' then cast(null as date) \n\t\t\twhen nm.dob >= current_date then cast(null as date) \n\t\t\twhen nm.dob <= '1901-01-01' then cast(null as date) \n\t\t\telse nm.dob \n\t\tend as dob\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc, nm.name_urn asc) as Latest_name_urn\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by nm.data_date asc nulls last, nm.reg_date asc nulls last, nm.source_date asc nulls last, nm.bbw_urn asc, nm.name_urn asc) as Earliest_name_urn\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by case when nm.dob is not null then 1 else 0 end desc nulls last, nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc,nm.name_urn asc) as name_urn_to_dob\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by cf.mailable_ignoring_dp desc nulls last, nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc,nm.name_urn asc) as name_urn_to_mail_ignoring_dp\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by cf.emailable_ignoring_dp desc nulls last, nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc,nm.name_urn asc) as name_urn_to_email_ignoring_dp\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by cf.phoneable_ignoring_dp desc nulls last, nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc,nm.name_urn asc) as name_urn_to_phone_ignoring_dp\n\t\t,first_value(nm.name_urn) over (partition by nm.cid order by cf.smsable_ignoring_dp desc nulls last, nm.data_date desc nulls last, nm.reg_date desc nulls last, nm.source_date desc nulls last, nm.bbw_urn asc,nm.name_urn asc) as name_urn_to_sms_ignoring_dp\n\tfrom ${Database}.live.names nm \n\tinner join ${Database}.temp.build_names_contact_flags cf on nm.name_urn = cf.name_urn\n\t) t\ngroup by 1\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_prep_rollups',\n    '${Database}.temp.build_rollups_cid_base',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_base;   \n\n---------------------\n--  gender fix\ndrop table if exists ${Database}.temp.build_rollups_cid_gender_fix;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_gender_fix \nas\nselect   \n    cid,\n    max(case when lower(gender) = 'm' then 1 else 0 end) as male,\n    max(case when lower(gender) = 'f' then 1 else 0 end) as female\nfrom ${Database}.live.names\ngroup by cid\nhaving  max(case when lower(gender) = 'm' then 1 else 0 end) = 1\n    and max(case when lower(gender) = 'f' then 1 else 0 end) = 1;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_prep_rollups',\n    '${Database}.temp.build_rollups_cid_gender_fix',\n    'fixed gender',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_gender_fix;\n\n\n---------------------\n--first/last source date by brand\ndrop table if exists ${Database}.temp.build_rollups_cid_brand_base ;  \nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_brand_base \nas\nselect distinct\n    nm.cid,\n    dbnm.source_brand_id as brand_id,\n    0 as assigned_master_brand,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by dbnm.data_date nulls last\n        )                                            as first_date_brand,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by dbnm.data_date desc nulls last\n        )                                            as last_date_brand,\n    first_value(nat.last_login) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by \n                nat.last_login desc, \n                dbnm.data_date nulls last, \n                nm.reg_date nulls last,\n                nm.source_date nulls last\n        )                                            as last_login_brand,      \n    first_value(trim(nat.channel)) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by \n                case when nat.channel > '' then 1 else 0 end desc, --only want populated channels\n                dbnm.data_date nulls last, \n                nm.reg_date nulls last,\n                nm.source_date nulls last\n        )                                            as first_channel_brand,    \n    first_value(trim(nat.channel)) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by \n                case when nat.channel > '' then 1 else 0 end desc, --only want populated channels\n                dbnm.data_date desc nulls last, \n                dbnm.reg_date desc nulls last,\n                dbnm.source_date desc nulls last\n        )                                            as last_channel_brand\nfrom ${Database}.live.names nm\ninner join ${Database}.db.names dbnm on trim(dbnm.name_urn) = nm.name_urn\nleft join ${Database}.db.names_attributes nat on trim(nat.name_urn) = trim(dbnm.name_urn)\n                                     and trim(nat.source) = trim(dbnm.source)\n                                     and nat.source_date = dbnm.source_date\n                                     and nat.source_urn = dbnm.source_urn\nwhere dbnm.source_brand_id is not null;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_prep_rollups',\n    '${Database}.temp.build_rollups_cid_brand_base',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_brand_base;\n\n---------------------\n--first/last source date by bu\ndrop table if exists ${Database}.temp.build_rollups_cid_bu_base ;  \nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_bu_base \nas\nselect distinct\n    nm.cid,\n    dbnm.source_data_controller_id as business_unit_id,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_data_controller_id \n            order by dbnm.data_date nulls last\n        )                                            as first_date_business_unit,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_data_controller_id \n            order by dbnm.data_date desc nulls last\n        )                                            as last_date_business_unit\nfrom ${Database}.live.names nm\ninner join ${Database}.db.names dbnm on trim(dbnm.name_urn) = nm.name_urn;\n\n--insert the brands that are actually business units \nmerge into ${Database}.temp.build_rollups_cid_bu_base bu\nusing \n(\n    select distinct \n        cbb.cid,\n        rbu.business_unit_id,\n        first_value(cbb.first_date_brand) over \n            (\n                partition by cbb.cid, rbu.business_unit_id\n                order by cbb.first_date_brand nulls last\n            ) as first_date_business_unit,\n        first_value(cbb.last_date_brand) over \n            (\n                partition by cbb.cid, rbu.business_unit_id\n                order by cbb.last_date_brand desc nulls last\n            ) as last_date_business_unit\n    from ${Database}.temp.build_rollups_cid_brand_base cbb\n    inner join ${Database}.live.ref_business_unit_brand rbu on cbb.brand_id = rbu.brand_id\n) mg on mg.cid = bu.cid \n    and mg.business_unit_id = bu.business_unit_id\nwhen not matched then insert\n(\n    cid,\n    business_unit_id,\n    first_date_business_unit,\n    last_date_business_unit\n)\nvalues \n(\n    mg.cid,\n    mg.business_unit_id,\n    mg.first_date_business_unit,\n    mg.last_date_business_unit\n);   \n\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_prep_rollups',\n    '${Database}.temp.build_rollups_cid_bu_base',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_bu_base;\n\n\ndrop table if exists ${Database}.temp.build_rollups_cid_npp_no_brand_base ;  \nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_npp_no_brand_base \nas\nselect distinct\n    nm.cid,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by dbnm.data_date nulls last\n        )                                            as first_date_brand,\n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id \n            order by dbnm.data_date desc nulls last\n        )                                            as last_date_brand\nfrom ${Database}.live.names nm\ninner join ${Database}.db.names dbnm on dbnm.name_urn = nm.name_urn\nwhere dbnm.source_data_controller_id = (select data_controller_id from ${Database}.live.ref_data_controller where data_controller like 'Nestl_ Purina Petcare (UK) Ltd')\n    and dbnm.source_brand_id is null;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_prep_rollups',\n    '${Database}.temp.build_rollups_cid_npp_no_brand_base',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_npp_no_brand_base;\n\n---------------------\n--fix up for purina master brand - eveyone purina should be now flagged as master brand source \nmerge into ${Database}.temp.build_rollups_cid_brand_base cbb\nusing (\n          select distinct\n              cid,\n              (select brand_id from ${Database}.live.ref_brand where brand = 'Purina Masterbrand') as brand_id,\n              first_value(first_date_brand) over\n                  (\n                      partition by cid\n                      order by first_date_brand desc nulls last\n                  ) as first_date_brand,\n              first_value(last_date_brand) over\n                  (\n                      partition by cid\n                      order by last_date_brand desc nulls last\n                  ) as last_date_brand\n          from (\n                   select\n                       cbb.cid,\n                       cbb.first_date_brand,\n                       cbb.last_date_brand\n                   from ${Database}.temp.build_rollups_cid_brand_base cbb\n                   inner join ${Database}.live.ref_brand rb on rb.brand_id = cbb.brand_id\n                   left join (\n                                 select distinct\n                                     xr.cid,\n                                     'Growing Pup' as brand\n                                 from ${Database}.db.comms_hist ch\n                                 inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ch.name_urn\n                                 where ch.promotion_id = 'NPP07290'\n                                     and ch.cell_id = '1'\n                                 union all\n                                 select distinct\n                                     xr.cid,\n                                     'Growing Pup' as brand\n                                 from ${Database}.db.names nm\n                                 inner join ${Database}.live.xref_name_urn xr on xr.name_urn = nm.name_urn\n                                 left join ${Database}.live.cid_pet pt on pt.name_urn = nm.name_urn\n                                 where nm.source_brand_id = (select brand_id from ${Database}.live.ref_brand where brand = 'Growing Pup')\n                                     and (\n                                             pt.pet_dob < (add_months(current_date,-12)-12)\n                                          or\n                                             (nm.source = 'REG_THG' and pt.pet_dob is null and lower(pt.pet_life_stage) = 'puppy' and pt.pet_data_date < (add_months((current_date+56),-12))-12)\n                                         )\n                             ) gp on gp.cid = cbb.cid\n                                 and gp.brand = rb.brand\n                   left join (\n                                 select distinct\n                                     xr.cid,\n                                     'Breed Selector' as brand\n                                 from ${Database}.db.comms_hist ch\n                                 inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ch.name_urn\n                                 left join (\n                                             select\n                                                 xr.cid,\n                                                 drop_date\n                                             from ${Database}.db.comms_hist ch\n                                             inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ch.name_urn\n                                             where ch.promotion_id = 'NPP04398_C' and ch.cell_id = '1'\n                                             \n                                            ) gp on gp.cid = xr.cid\n                                 where ch.promotion_id = 'NPP06155'\n                                     and (\n                                             (ch.cell_id = '8' and ch.drop_date < dateadd(day,-14,current_date()) and gp.drop_date is null)\n                                          or      \n                                             (ch.cell_id = '8' and ch.drop_date < dateadd(day,-14,current_date()) and (gp.drop_date < ch.drop_date or gp.drop_date > dateadd(day,14,ch.drop_date))) \n                                          or ch.name_urn in (\n                                                                select\n                                                                    distinct urn as name_urn\n                                                                from ${Database}.db.npp_breed_selector_pdc_responses rs\n                                                                where lower(rs.bs_still_getting_puppy) = 'no'\n                                                            )\n                                         )\n                             ) bs on bs.cid = cbb.cid\n                                 and bs.brand = rb.brand\n                   where (rb.division = 'Petcare' and rb.brand not in  ('Beta Breeder','Pro Plan Breeder','Pro Plan Vet','Kitten Code','Growing Pup', 'Breed Selector'))\n                       or (rb.brand = 'Growing Pup' and gp.cid is not null)\n                       or (rb.brand = 'Breed Selector' and bs.cid is not null)\n                   union all\n                   select\n                       cid,\n                       first_date_brand,\n                       last_date_brand\n                   from ${Database}.temp.build_rollups_cid_npp_no_brand_base\n               ) mb\n      ) mb on mb.cid = cbb.cid\n          and mb.brand_id = cbb.brand_id\nwhen not matched then insert\n(\n    cid,\n    brand_id,\n    assigned_master_brand,\n    first_date_brand,\n    last_date_brand,\n    last_login_brand,\n    first_channel_brand,\n    last_channel_brand\n)\nvalues\n(\n    mb.cid,\n    mb.brand_id,\n    1,\n    mb.first_date_brand,\n    mb.last_date_brand,\n    cast(null as date),\n    cast(null as varchar(10)),\n    cast(null as varchar(10))\n);\n\n---------------------\n--set up Kitten Code brand for anyone who has a kitten from other brands\nmerge into ${Database}.temp.build_rollups_cid_brand_base cbb\nusing (\n          select distinct\n              cbb.cid,\n              (select brand_id from ${Database}.live.ref_brand where brand = 'Kitten Code') as brand_id,\n              first_value(first_date_brand) over\n                  (\n                      partition by cbb.cid\n                      order by first_date_brand nulls last\n                  ) as first_date_brand,\n              first_value(last_date_brand) over\n                  (\n                      partition by cbb.cid\n                      order by last_date_brand desc nulls last\n                  ) as last_date_brand\n          from (\n                   select\n                       cid,\n                       first_date_brand,\n                       last_date_brand\n                   from ${Database}.temp.build_rollups_cid_brand_base cbb\n                   inner join ${Database}.live.ref_brand rb on rb.brand_id = cbb.brand_id\n                   where (rb.division = 'Petcare' and rb.brand not in  ('Beta Breeder','Pro Plan Breeder','Pro Plan Vet'))\n                   union all\n                   select\n                       cid,\n                       first_date_brand,\n                       last_date_brand\n                   from ${Database}.temp.build_rollups_cid_npp_no_brand_base\n               ) cbb\n          inner join (\n                         select distinct\n                             cid\n                         from ${Database}.live.cid_pet\n                         where lower(pet_life_stage) = 'kitten'\n                     ) pt on pt.cid = cbb.cid\n      ) kc on kc.cid = cbb.cid\n          and kc.brand_id = cbb.brand_id\nwhen not matched then insert\n(\n    cid,\n    brand_id,\n    assigned_master_brand,\n    first_date_brand,\n    last_date_brand,\n    last_login_brand,\n    first_channel_brand,    \n    last_channel_brand\n)\nvalues \n(\n    kc.cid,\n    kc.brand_id,\n    0,\n    kc.first_date_brand,\n    kc.last_date_brand,\n    cast(null as date),\n    cast(null as varchar(10)),\n    cast(null as varchar(10))\n);\n\n---------------------\n--set up Growing Pup brand for anyone who has a Puppy from other brands\nmerge into ${Database}.temp.build_rollups_cid_brand_base cbb\nusing (\n          select distinct\n              cbb.cid,\n              (select brand_id from ${Database}.live.ref_brand where brand = 'Growing Pup') as brand_id,\n              first_value(first_date_brand) over\n                  (\n                      partition by cbb.cid\n                      order by first_date_brand nulls last\n                  ) as first_date_brand,\n              first_value(last_date_brand) over\n                  (\n                      partition by cbb.cid\n                      order by last_date_brand desc nulls last\n                  ) as last_date_brand\n          from (\n                   select\n                       cid,\n                       first_date_brand,\n                       last_date_brand\n                   from ${Database}.temp.build_rollups_cid_brand_base cbb\n                   inner join ${Database}.live.ref_brand rb on rb.brand_id = cbb.brand_id\n                   where (rb.division = 'Petcare' and rb.brand not in  ('Beta Breeder','Pro Plan Breeder','Pro Plan Vet'))\n                   union all\n                   select\n                       cid,\n                       first_date_brand,\n                       last_date_brand\n                   from ${Database}.temp.build_rollups_cid_npp_no_brand_base\n               ) cbb\n          inner join (\n                         select distinct\n                             cid\n                         from ${Database}.live.cid_pet\n                         where lower(pet_life_stage) = 'puppy'\n                     ) pt on pt.cid = cbb.cid\n      ) gp on gp.cid = cbb.cid\n          and gp.brand_id = cbb.brand_id\nwhen not matched then insert\n(\n    cid,\n    brand_id,\n    assigned_master_brand,\n    first_date_brand,\n    last_date_brand,\n    last_login_brand,\n    first_channel_brand,    \n    last_channel_brand\n)\nvalues \n(\n    gp.cid,\n    gp.brand_id,\n    0,\n    gp.first_date_brand,\n    gp.last_date_brand,\n    cast(null as date),\n    cast(null as varchar(10)),\n    cast(null as varchar(10))\n);\n\n---------------------\n--preferences (gigya)\ndrop table if exists ${Database}.temp.build_rollups_cid_brand_preference ;  \nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_brand_preference \nas\nselect distinct\n    nm.cid,\n    np.brand_id,\n    first_value(np.pref_emailable) over \n        (\n            partition by nm.cid, np.brand_id\n            order by \n                np.data_date desc nulls last,\n                case when lower(np.source_file) regexp '.*json.*' then 1 else 0 end --migration is json files\n        )  as pref_emailable,\n    first_value(case when lower(np.source_file) regexp '.*json.*' then 1 else 0 end) over \n        (\n            partition by nm.cid, np.brand_id\n            order by \n                np.data_date desc nulls last,\n                case when lower(np.source_file) regexp '.*json.*' then 1 else 0 end --migration is json files\n        )  as pref_mig,\n    first_value(np.data_date) over \n        (\n            partition by nm.cid, np.brand_id\n            order by \n                np.data_date desc nulls last,\n                case when lower(np.source_file) regexp '.*json.*' then 1 else 0 end --migration is json files\n        )  as pref_date,\n    first_value(np.data_date) over \n        (\n            partition by nm.cid, np.brand_id\n            order by \n                np.data_date asc nulls last,\n                case when lower(np.source_file) regexp '.*json.*' then 1 else 0 end --migration is json files\n        )  as first_pref_date\nfrom ${Database}.live.names nm\ninner join ${Database}.db.names_preference np on trim(np.name_urn) = nm.name_urn;\n                                     \ninsert into ${Database}.db.build_log \nselect \n    'nestle_prep_rollups',\n    '${Database}.temp.build_rollups_cid_brand_preference',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_brand_preference;\n\n\n--create copy of live xref_email table\ndrop table if exists ${Database}.temp.xref_cid_email; \nCREATE OR REPLACE TABLE ${Database}.temp.xref_cid_email as\nselect *\nfrom ${Database}.live.xref_email\n;\n    \ninsert into ${Database}.temp.xref_cid_email \nselect \n    cid,\n    '' as email,\n    min(bbw_urn) as bbw_urn\nfrom ${Database}.live.xref_name_urn\ngroup by \n    cid;    \n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_prep_rollups',\n    '${Database}.temp.xref_cid_email',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.xref_cid_email;\n\n\n/******************************************************************************************\n                                       FINISH PROC\n******************************************************************************************/\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_prep_rollups',\n    '*************************',\n    '*************************',\n    'end of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;  \n "}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"197171":{"id":197171,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-432,"y":-64,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[197175],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Start","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"197168":{"id":197168,"sourceID":197170,"targetID":197169}},"failureConnectors":{},"unconditionalConnectors":{"197175":{"id":197175,"sourceID":197171,"targetID":197170}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{"197164":{"id":197164,"x":-52,"y":-90,"width":308,"height":72,"text":"This creates several **temp** schema tables in preparation for creating the Core tables.\n\nSee top rows of Rollups SQL script for list of tables created.","colour":"00ce4f"}},"variables":{},"grids":{}},"info":{"name":"Proc12_CorePrep","description":"Proc12 CorePrep","type":"ORCHESTRATION","tag":"bb10365b-7339-4953-b158-854eda968e69"}}