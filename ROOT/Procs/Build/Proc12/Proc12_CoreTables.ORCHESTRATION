{"job":{"components":{"197248":{"id":197248,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-176,"y":-64,"width":32,"height":32,"inputConnectorIDs":[197203],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Drop Core Temp Tables"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nProgram           : Drop Core Rollups Temp Tables\nAuthor            : Lee Wallis\nClient Name       : Nestle\nJob Number        : HH010177 \nStandard Machine  : Snowflake\nAmendment History : v01 - Split of core temp table drops from the original Proc12 process\n******************************************************************************************/\n\n/******************************************************************************************\n                             DROP EVENTS ROLLUPS TEMP TABLES\n******************************************************************************************/\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_CIAM_accounts;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_thg_purchases;\ndrop table if exists ${Database}.temp.build_rollups_npp_competition_entry;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_rate_review;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_loyalty_scheme;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_careline;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_samples;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_coupons;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_adestra;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_GP_registrants;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_reconsent;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_registered_to_purina;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_survey;\ndrop table if exists ${Database}.temp.build_rollups_npp_pet_avatar_creation;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_adestra_nongeneric_clicks;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_adestra_generic_clicks;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_photo_upload;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_voters;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_KC_registrants;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_cashback;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_your_purina;\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_updated_pet_details;\ndrop table if exists ${Database}.temp.build_rollups_npp_test_engagement_optin;\ndrop table if exists ${Database}.temp.build_npp_engagement_scoring_occurrence_pre;\ndrop table if exists ${Database}.temp.build_npp_engagement_scoring_occurrence;\ndrop table ${Database}.temp.build_rollups_cid_gender_fix;\ndrop table ${Database}.temp.build_rollups_cid_have_cat;\ndrop table ${Database}.temp.build_rollups_cid_have_dog;\ndrop table ${Database}.temp.build_rollups_cid_inferred_cat;\ndrop table ${Database}.temp.build_rollups_cid_inferred_dog;\ndrop table ${Database}.temp.build_rollups_cid_no_printer;\ndrop table ${Database}.temp.build_rollups_cid_used_to_have_cat;\ndrop table ${Database}.temp.build_rollups_cid_used_to_have_dog;\ndrop table ${Database}.temp.build_rollups_cid_deceased_pets;\ndrop table ${Database}.temp.build_rollups_npp_engagement_score;\ndrop table ${Database}.temp.build_rollups_cid_brand_preferred;\ndrop table ${Database}.temp.build_rollups_cid_brand_preference;\ndrop table ${Database}.temp.build_rollups_cid_brand_emails;\ndrop table ${Database}.temp.build_rollups_cid_brand_product;\ndrop table ${Database}.temp.build_rollups_cid_brand_pref_base; \ndrop table ${Database}.temp.names_supps_dp_brand;\ndrop table ${Database}.temp.build_rollups_cid_brand_base;\ndrop table ${Database}.temp.build_rollups_cid_division_base;\ndrop table ${Database}.temp.group_division_new_check;\ndrop table ${Database}.temp.group_division_new_check_ios15;\ndrop table ${Database}.temp.names_supps_dp_division;\ndrop table ${Database}.temp.names_supps_dp_business_unit;\ndrop table ${Database}.temp.build_rollups_cid_bu_base;\ndrop table ${Database}.temp.group_business_new_check;\ndrop table ${Database}.temp.xref_cid_email;\n\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"197249":{"id":197249,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-301,"y":-65,"width":32,"height":32,"inputConnectorIDs":[197202],"outputSuccessConnectorIDs":[197203],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Core Table Rollups"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nProgram           : Core Tables Rollups\nAuthor            : Lindsay Timms / Lee Wallis\nClient Name       : Nestle\nJob Number        : HH010177 \nStandard Machine  : Snowflake\nAmendment History : v01 - Split of Core table data from the original Proc12 process\n******************************************************************************************/\n\n/*\n\t\tTABLES CREATED:\n        live.cid\n        live.cid_details\n        live.cid_brand\n        live.cid_division\n        live.cid_business_unit \n        \n        TABLES UPDATED:\n        [none]\n*/\n\n/******************************************************************************************\n                                   EVENTS ROLLUPS\n******************************************************************************************/\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_core_rollups',\n    '*************************',\n    '*************************',\n    'start of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;  \n\n\n\n---------------------\n--have cat\ndrop table if exists ${Database}.temp.build_rollups_cid_have_cat ;  \nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_have_cat \nas\nselect cid, count(*) as number_of_cats \nfrom ${Database}.live.cid_pet\nwhere lower(pet_type) regexp '.*cat.*'\ngroup by cid;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_core_rollups',\n    '${Database}.temp.build_rollups_cid_have_cat',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_have_cat;\n\n\n---------------------\n--have dog\ndrop table if exists ${Database}.temp.build_rollups_cid_have_dog ;  \nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_have_dog \nas\nselect cid, count(*) as number_of_dogs \nfrom ${Database}.live.cid_pet\nwhere lower(pet_type) regexp '.*dog.*'\ngroup by cid;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_core_rollups',\n    '${Database}.temp.build_rollups_cid_have_dog',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_have_dog;\n\n\ndrop table if exists ${Database}.temp.build_rollups_cid_pdc_pet ;  \nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_pdc_pet \nas\nselect cid,\n       case when pet_segment > '' then activity_date end as activity_date,\n       pet_segment\nfrom ( select        \n              xr.cid,\n              case when lower(link_url) regexp '.*=neither.*' then 'Neither'\n                   when lower(link_url) regexp '.*=both.*' and hc.cid is null and hd.cid is null then 'Both'\n                   when lower(link_url) regexp '.*=dog.*' and hd.cid is null then 'Dog'\n                   when lower(link_url) regexp '.*=cat.*' and hc.cid is null then 'Cat' \n                    else ''\n                   end as pet_segment,\n              cast(event_timestamp as date) as activity_date,\n              row_number() over(partition by xr.cid order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ae.name_urn\n          left join ${Database}.temp.build_rollups_cid_have_cat hc on hc.cid = xr.cid\n          left join ${Database}.temp.build_rollups_cid_have_dog hd on hd.cid = xr.cid\n          where lower(event_name) regexp '.*click.*'\n            and campaign_name ilike '%Better_Together%'\n            and link_label = 'PDC | Service | PDC'\n            and link_url ilike '%/purina-pdc.tbw-apps.net%'\n            and link_url ilike any ('%=dog%','%=cat%','%=both%','%=neither%')\n                           \n            and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population)) --not sure if this should be included, copied from gender\n       )\nwhere rn = 1\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_core_rollups',\n    '${Database}.temp.build_rollups_cid_pdc_pet',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_pdc_pet;\t\t\t\t\t\t\t\t\t\t\t\t\n\n---------------------\n--inferred cat\ndrop table if exists ${Database}.temp.build_rollups_cid_inferred_cat;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_inferred_cat\nas\nselect\n    cid,\n    max(ic.data_date) as data_date\nfrom ${Database}.live.xref_name_urn xr\ninner join (\n               --coupons\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.quotient_coupons qc\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = qc.brand_id\n               where trim(brand_pet_type) = 'Cat'\n               union all\n               --coupons/samples\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.names_attributes\n               where (\n                            (trim(source) = 'REG_WUN' and trim(registration_campaign) in ('Gourmet Coupon','gourmet_coupon','Felix Try Now','Go-CAT Free Sample','Go-Cat Free Sample'))\n                         or\n                            (trim(source) = 'REG_KE' and lower(source_file) regexp '(.*)(purinaone|uk-3wc-freesample|uk-gocat)(.*)' and last_login is not null)\n                         or\n                            (trim(source) = 'SAMP_GOU_1')\n                     )\n               union all\n               --registrations\n               select distinct\n                   trim(nm.name_urn) as name_urn,\n                   reg_date as data_date\n               from ${Database}.db.names nm\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = nm.source_brand_id\n               where trim(brand_pet_type) = 'Cat'\n               union all\n               --preferences\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.names_preference np\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = np.brand_id\n               where lower(source_file) not regexp '.*json.*'\n                   and (pref_emailable = 1 or pref_mailable = 1)\n                   and trim(brand_pet_type) = 'Cat'\n           ) ic on ic.name_urn = xr.name_urn\ngroup by xr.cid;\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_core_rollups',\n    '${Database}.temp.build_rollups_cid_inferred_cat',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_rollups_cid_inferred_cat;\n\n\n---------------------\n--inferred dog\ndrop table if exists ${Database}.temp.build_rollups_cid_inferred_dog;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_inferred_dog\nas\nselect\n    cid,\n    max(id.data_date) as data_date\nfrom ${Database}.live.xref_name_urn xr\ninner join (\n               --coupons\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.quotient_coupons qc\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = qc.brand_id\n               where trim(brand_pet_type) = 'Dog'\n               union all\n               --samples\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.names_attributes\n               where (\n                            (trim(source) = 'REG_WUN' and trim(registration_campaign) in ('Try For Free','Dentalife Dog Free Sample'))\n                         or\n                            (trim(source) = 'REG_KE' and lower(source_file) regexp '.*uk-dentalife.*' and last_login is not null)\n                     )\n               union all\n               --registrations\n               select distinct\n                   trim(name_urn) as name_urn,\n                   reg_date as data_date\n               from ${Database}.db.names nm\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = nm.source_brand_id\n               where trim(brand_pet_type) = 'Dog'\n               union all\n               --preferences\n               select distinct\n                   trim(name_urn) as name_urn,\n                   data_date\n               from ${Database}.db.names_preference np\n               inner join ${Database}.db.ref_brand rb on rb.brand_id = np.brand_id\n               where lower(source_file) not regexp '.*json.*'\n                   and (pref_emailable = 1 or pref_mailable = 1)\n                   and trim(brand_pet_type) = 'Dog'\n           ) id on id.name_urn = xr.name_urn\ngroup by xr.cid;\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_core_rollups',\n    '${Database}.temp.build_rollups_cid_inferred_dog',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_rollups_cid_inferred_dog;\n\n\n---------------------\n--used to have cat (we 'expired' the pet)\ndrop table if exists ${Database}.temp.build_rollups_cid_used_to_have_cat ;  \nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_used_to_have_cat \nas\nselect cid\nfrom ${Database}.live.cid_pet\nwhere lower(pet_type) regexp '.*cat.*'\ngroup by cid;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_core_rollups',\n    '${Database}.temp.build_rollups_cid_used_to_have_cat',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_used_to_have_cat;\n\n\n---------------------\n--used to have dog (we 'expired' the pet)\ndrop table if exists ${Database}.temp.build_rollups_cid_used_to_have_dog ;  \nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_used_to_have_dog \nas\nselect cid\nfrom ${Database}.live.cid_pet\nwhere lower(pet_type) regexp '.*dog.*'\ngroup by cid;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_core_rollups',\n    '${Database}.temp.build_rollups_cid_used_to_have_dog',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_used_to_have_dog;\n\n\ndrop table if exists ${Database}.temp.build_rollups_cid_deceased_pets ;  \nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_deceased_pets \nas\nselect cid, \n    sum\n    (\n        case \n            when \n                (\n                    pet_data_date >= add_months(current_date, -1) --data in the last month\n                    and pet_type = 'Dog' \n                    and pet_dob <= add_months(current_date, -240) --dog is over 20\n                )\n                or\n                (\n                    pet_data_date >= add_months(current_date, -1) --data in the last month\n                    and pet_type = 'Cat' \n                    and pet_dob <= add_months(current_date, -360) --cat is over 30\n                ) \n                or\n                (\n                    pet_dob is null \n                    and pet_data_date < add_months(current_date, -12) --just gone over 12 months old data\n                    and pet_data_date >= add_months(current_date, -13) \n                ) then 1 \n            else 0 \n        end\n    ) as num_pets_deceased_this_month\nfrom ${Database}.live.cid_pet\ngroup by cid;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_core_rollups',\n    '${Database}.temp.build_rollups_cid_deceased_pets',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_deceased_pets;\n\n---------------------\n--preferred brand questions\ndrop table if exists ${Database}.temp.build_rollups_cid_brand_preferred ;  \nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_brand_preferred \nas\nselect distinct\n    cid,\n    brand_id\nfrom ${Database}.live.cid_brand_question\nwhere answer_data_date > add_months(current_date, -60) --now only using data from the last 5 years to determine preference for brand\n    and brand_id is not null\n    and\n    (\n        question = 'Brand of pet food fed to pet'\n        or question = 'What type of food does your pet eat (Brand)'\n        or question = 'Brand of dry cat food fed to pet'\n        or \n        (\n            question = 'How often do you feed your pet (Brand)'\n            and answer in ('a couple of times per month', 'a couple of times per week', 'a couple of times per year','every day')\n        )\n        or \n        (\n            lower(question) regexp '.*consumption - coffee brand.*' \n            and lower(answer) not regexp '.*none.*'\n        )\n        or \n        (\n            lower(question) regexp '.*consumption - coffee product.*' \n            and lower(answer) not regexp '.*none.*'\n        )\n        or lower(question) regexp '.*drinking location - coffee product.*'\n        or lower(question) regexp '.*drinking time - coffee brand.*'\n        --dont use 'Brand of Pet Food you are interested in' - is bollox\n    );\n    \n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_core_rollups',\n    '${Database}.temp.build_rollups_cid_brand_preferred',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_brand_preferred;\n\n\n---------------------\n--have no printer\ndrop table if exists ${Database}.temp.build_rollups_cid_no_printer ;  \nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_no_printer \nas\nselect distinct nm.cid\nfrom ${Database}.live.names nm\ninner join ${Database}.db.names_attributes nat on trim(nat.name_urn) = nm.name_urn\n                                         and nat.no_printer = 1;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_core_rollups',\n    '${Database}.temp.build_rollups_cid_no_printer',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_no_printer;\n\n\n\ndrop table if exists ${Database}.temp.build_rollups_cid_brand_product ;  \nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_brand_product\nas\nselect distinct\n    cid,\n    brand_id\nfrom ${Database}.live.cid_brand_product\nwhere last_date_brand_product > add_months(current_date, -60); --now only using data from the last 5 years to determine preference for brand\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_core_rollups',\n    '${Database}.temp.build_rollups_cid_brand_product',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_brand_product;\n\n\n---------------------\n--all those who have opened an email by brand\ndrop table if exists ${Database}.temp.build_rollups_cid_brand_emails ;  \nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_brand_emails\nas\nselect \n    ae.email,\n    ch.brand_id,\n    max(cast(ae.event_timestamp as date)) as event_date\nfrom ${Database}.live.adestra_events ae\ninner join ${Database}.temp.build_comms_history_lookup ch on ch.campaign_id = ae.campaign_id\nwhere ch.brand_id is not null\n    and lower(collate(ae.event_name,'')) regexp '.*click.*|.*open.*|.*read.*|.*shared.*|.*submit.*'\n    and lower(collate(ae.event_name,'')) not regexp '.*unsubscribe.*'\n    and ae.event_timestamp > add_months(current_date, -60) --now only using data from the last 5 years to determine preference for brand\ngroup by \n    ae.email,\n    ch.brand_id; \n\n--insert SMA emails\ninsert into ${Database}.temp.build_rollups_cid_brand_emails\nselect\n    ae.email,\n    rb.brand_id,\n    max(cast(ae.event_timestamp as date)) as event_date\nfrom ${Database}.db.adestra_events_sma ae\ninner join ${Database}.db.ref_brand rb on lower(trim(rb.brand)) = 'sma'\nwhere lower(ae.event_name) regexp '.*click.*|.*open.*|.*read.*|.*shared.*|.*submit.*'\n    and lower(ae.event_name) not regexp '.*unsubscribe.*'\n    and ae.event_timestamp > add_months(current_date, -60) --now only using data from the last 5 years to determine preference for brand\n    and trim(ae.workspace_name) = 'SMA'\ngroup by \n    ae.email,\n    rb.brand_id; \n\n--insert Cerelac emails\ninsert into ${Database}.temp.build_rollups_cid_brand_emails\nselect\n    ae.email,\n    rb.brand_id,\n    max(cast(ae.event_timestamp as date)) as event_date\nfrom ${Database}.db.adestra_events_sma ae\ninner join ${Database}.db.ref_brand rb on lower(trim(rb.brand)) = 'cerelac'\nwhere lower(ae.event_name) regexp '.*click.*|.*open.*|.*read.*|.*shared.*|.*submit.*'\n    and lower(ae.event_name) not regexp '.*unsubscribe.*'\n    and ae.event_timestamp > add_months(current_date, -60) --now only using data from the last 5 years to determine preference for brand\n    and lower(ae.workspace_name) regexp '.*cerelac.*'\ngroup by \n    ae.email,\n    rb.brand_id; \n\n--insert HCP emails\ninsert into ${Database}.temp.build_rollups_cid_brand_emails\nselect\n    ae.email,\n    rb.brand_id,\n    max(cast(ae.event_timestamp as date)) as event_date\nfrom ${Database}.db.adestra_events_hcp ae\ninner join ${Database}.db.ref_brand rb on lower(trim(rb.brand)) = 'hcp'\nwhere lower(ae.event_name) regexp '.*click.*|.*open.*|.*read.*|.*shared.*|.*submit.*'\n    and lower(ae.event_name) not regexp '.*unsubscribe.*'\n    and ae.event_timestamp > add_months(current_date, -60) --now only using data from the last 5 years to determine preference for brand\ngroup by \n    ae.email,\n    rb.brand_id; \n\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_core_rollups',\n    '${Database}.temp.build_rollups_cid_brand_emails',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_brand_emails;\n\n\ndrop table if exists ${Database}.temp.build_npp_engagement_scoring_occurrence_pre;\ncreate or replace table ${Database}.temp.build_npp_engagement_scoring_occurrence_pre as \nselect cid,activity,activity_brand_id,activity_date,recency_multiplier,base_score,\ndatediff(month,diff_date,activity_date) as count_month\nfrom (\nselect cid,activity,activity_brand_id,activity_date,recency_multiplier,base_score,\nlead(activity_date) over (partition by activity   order by cid,activity,activity_date desc) \nas diff_date\nfrom ${Database}.live.npp_engagement_scoring_activities\n) new;\n\n-- Add in occurrence_multiplier\ndrop table if exists ${Database}.temp.build_npp_engagement_scoring_occurrence;\ncreate or replace table ${Database}.temp.build_npp_engagement_scoring_occurrence as\nselect\ncid,\nactivity,\nactivity_brand_id,\nactivity_date,\nrecency_multiplier,\nbase_score,\ncase\nwhen row_number() over(partition by cid, activity, rn order by activity_date) < 4 then 1\nwhen row_number() over(partition by cid, activity, rn order by activity_date) = 4 then 0.8\nwhen row_number() over(partition by cid, activity, rn order by activity_date) = 5 then 0.6\nwhen row_number() over(partition by cid, activity, rn order by activity_date) >= 6 then 0.5\nend as occurrence_multiplier\nfrom (select distinct\na.*,\nfirst_value(coalesce(b.rn,9999)) over(partition by a.cid, a.activity, a.activity_date order by b.rn) as rn\nfrom ${Database}.temp.build_npp_engagement_scoring_occurrence_pre a\nleft join (select *, row_number() over(partition by cid, activity order by activity_date) as rn from ${Database}.temp.build_npp_engagement_scoring_occurrence_pre where count_month >= 6) b on a.cid = b.cid\nand a.activity = b.activity\nand a.activity_date < b.activity_date) a\norder by activity, activity_date;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_core_rollups',\n    '${Database}.temp.build_npp_engagement_scoring_occurrence',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_npp_engagement_scoring_occurrence;\n\n-- New Distinct Activity setup for Engagement Score\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_distinct_activity;\ncreate or replace table ${Database}.temp.build_rollups_npp_engagement_distinct_activity as\nselect\n cid,activity\nfrom ${Database}.live.npp_engagement_scoring_activities\nwhere activity_date < current_date()\ngroup by 1,2;\n\n-- Summarise the above table to CID level\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_distinct_activity_cid_level;\ncreate or replace table ${Database}.temp.build_rollups_npp_engagement_distinct_activity_cid_level\nas \nselect\ncid,count(*) as distinct_activity\nfrom ${Database}.temp.build_rollups_npp_engagement_distinct_activity\ngroup by 1;\n\n\n--final engagement table\ndrop table if exists ${Database}.temp.build_rollups_npp_engagement_score;\nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_npp_engagement_score \nas\nselect    \n    npsa.cid,\n  sum(coalesce(base_score,0) * coalesce(recency_multiplier,0) * \n  coalesce(occurrence_multiplier,0)\n  * coalesce(case when  npda.distinct_activity <= 3 then 1 when npda.distinct_activity <= 5 then 1.25 else 1.5 end, 0)) as engagement_score\nfrom ${Database}.temp.build_npp_engagement_scoring_occurrence npsa\njoin ${Database}.temp.build_rollups_npp_engagement_distinct_activity_cid_level npda\non npsa.cid = npda.cid\ngroup by 1;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_core_rollups',\n    '${Database}.temp.build_rollups_npp_engagement_score',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_engagement_score;\n\n--lapse risk segment table\ndrop table if exists ${Database}.temp.build_rollups_npp_lapse_risk_segment;\ncreate or replace table ${Database}.temp.build_rollups_npp_lapse_risk_segment\nas\nselect\n    ev.cid,\n    case\n        when ev.last_open < add_months(current_date,-10)\n            or ((ev.first_date_business_unit < add_months(current_date,-6) or ev.first_date_business_unit is null) and ev.last_open is null) then 'Very High Risk'\n        when (ev.last_open >= add_months(current_date,-10) and ev.last_open < add_months(current_date,-6))\n            or ((ev.first_date_business_unit < add_months(current_date,-12) or ev.first_date_business_unit is null)\n                and ev.last_click is null\n                and ev.last_open >= add_months(current_date, -6)\n                and ev.last_open < add_months(current_date, -3))\n            or ((ev.first_date_business_unit >= add_months(current_date,-6) and ev.first_date_business_unit < add_months(current_date,-3)) and ev.last_open is null) then 'High Risk'\n        when (ev.last_open >= add_months(current_date, -6) and ev.last_open < add_months(current_date, -3) and (ev.last_click is not null or ev.first_date_business_unit >= add_months(current_date,-12)))\n              or (ev.last_open is null and ev.first_date_business_unit >= add_months(current_date, -3)) then 'Medium Risk'\n        when ev.last_open >= add_months (current_date, -3) then 'Low Risk'\n    end as purina_lapse_risk_segment\nfrom (\n         select\n             cbb.cid,\n             min(cbb.first_date_business_unit) as first_date_business_unit,\n             max(case when lower(ae.event_name) rlike '.*read.*|.*click.*' then cast(ae.event_timestamp as date) end) as last_open,\n             max(case when lower(ae.event_name) rlike '.*click.*' then cast(ae.event_timestamp as date) end) as last_click\n         from ${Database}.temp.build_rollups_cid_bu_base cbb\n         left join ${Database}.live.adestra_events ae on ae.cid = cbb.cid\n                                                     and lower(ae.campaign_id) rlike '^npp.*'\n         where cbb.business_unit_id = 5\n         group by 1\n         union all\n         select\n             ae.cid,\n             cast(null as date) as first_date_business_unit,\n             max(case when lower(ae.event_name) rlike '.*read.*|.*click.*' then cast(ae.event_timestamp as date) end) as last_open,\n             max(case when lower(ae.event_name) rlike '.*click.*' then cast(ae.event_timestamp as date) end) as last_click\n         from ${Database}.live.adestra_events ae\n         left join ${Database}.temp.build_rollups_cid_bu_base cbb on cbb.cid = ae.cid\n                                                     and cbb.business_unit_id = 5\n         where lower(ae.campaign_id) rlike '^npp.*'\n             and cbb.cid is null\n         group by 1\n  ) ev;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_core_rollups',\n    '${Database}.temp.build_rollups_npp_lapse_risk_segment',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_npp_lapse_risk_segment;\n\n---------------------\n---------------------\n-- cid\ndrop table if exists ${Database}.live.cid ;  \nCREATE OR REPLACE TABLE ${Database}.live.cid \nas \nselect \n    cb.cid,\n    cb.hid,\n    cb.bbw_urn,\n    cb.name_urn,\n    cb.created_date,\n    cb.updated_date,\n    case when gf.cid is null then cb.gender else 'X' end                                        as gender,\n    cast(left(upper(cb.postcode),20) as varchar(20))                                            as postcode,\n    postcode_area_home,\n    postcode_district_home,\n    cast\n    (\n        case \n            when lower(cb.country)='united kingdom' then left(upper(split_part(cb.postcode,' ',1)||' '||left(split_part(cb.postcode,' ',-1),1)),10) \n            else '' \n        end as varchar(10)\n    )                                                                                           as postal_sector,\n    cast\n    (\n        case \n            when lower(cb.country)='united kingdom' then left(upper(split_part(cb.postcode,' ',1)),10) \n            else '' \n        end as varchar(10)\n    )                                                                                           as postal_district,\n    cast\n    (\n        upper\n        (\n            case \n                when lower(cb.country)='united kingdom' then \n                    case\n                        when lower(substring(collate(cb.postcode,''),2,1)) regexp '.*[a-z].*' then left(cb.postcode,2) \n                        else left(cb.postcode,1) \n                    end \n                else '' \n            end\n        ) as char(2)\n    )                                                                                           as postal_area,\n    cb.country,   \n    cb.dob,\n    case when cb.mailable_ignoring_dp          = 1 then cb.name_urn_to_mail_ignoring_dp          else cast(null as varchar) end as name_urn_to_mail_ignoring_dp,\n    case when cb.emailable_ignoring_dp         = 1 then cb.name_urn_to_email_ignoring_dp         else cast(null as varchar) end as name_urn_to_email_ignoring_dp,\n    case when cb.phoneable_ignoring_dp         = 1 then cb.name_urn_to_phone_ignoring_dp         else cast(null as varchar) end as name_urn_to_phone_ignoring_dp,\n    case when cb.smsable_ignoring_dp           = 1 then cb.name_urn_to_sms_ignoring_dp           else cast(null as varchar) end as name_urn_to_sms_ignoring_dp,\n    case when np.cid is not null then 1 else cast(null as tinyint) end                          as no_printer, \n    case \n        when hc.cid is not null then 'Y'\n        when ncat.cid is not null then 'Y'  \n        when pcat.cid is not null then 'Y'\n        when cat.cid is not null and lower(cat.answer) = 'y' then 'Y'\n        when cat.cid is not null and lower(cat.answer) = 'n' then 'N'\n        when ic.data_date >= add_months(current_date,-60) then 'IN'\n        when ic.data_date < add_months(current_date,-60) then 'IO'\n        else 'N' \n    end as have_cat,\n    case \n        when hd.cid is not null then 'Y'\n        when ndog.cid is not null then 'Y'  \n        when pdog.cid is not null then 'Y'\n        when dog.cid is not null and lower(dog.answer) = 'y' then 'Y'\n        when dog.cid is not null and lower(dog.answer) = 'n' then 'N'\n        when id.data_date >= add_months(current_date,-60) then 'IN'\n        when id.data_date < add_months(current_date,-60) then 'IO'\n        else 'N' \n    end as have_dog,\n    case \n        when hc.cid is not null then hc.number_of_cats\n        when ncat.cid is not null then cast(ncat.answer as int)          \n        when cat.cid is not null and lower(cat.answer) = 'y' then 1\n        when pcat.cid is not null then 1\n        else 0\n    end as number_of_cats,\n    case \n        when hd.cid is not null then hd.number_of_dogs\n        when ndog.cid is not null then cast(ndog.answer as int)          \n        when dog.cid is not null and lower(dog.answer) = 'y' then 1\n        when pdog.cid is not null then 1\n        else 0\n    end as number_of_dogs,\n    pdc.pet_segment as pdc_click_pet_seg,\n    pdc.activity_date as pdc_click_pet_seg_updated,\n    case \n        when hc.cid is null \n            and ncat.cid is null \n            and cat.cid is null \n            and uhc.cid is not null then 'Y'\n        else '' \n    end as used_to_have_cat,\n    case \n        when hd.cid is null\n            and ndog.cid is null\n            and dog.cid is null\n            and uhd.cid is not null then 'Y'\n        else '' \n    end as used_to_have_dog,\n\tcase \n        when hc.cid is not null\n             and ncat.cid is not null  \n             and pcat.cid is not null\n\t\t\tand pdc.cid is not null and pdc.pet_segment in ('Both','Cat') then 'Y'\n\t\telse 'N' \n    end as pdc_cat_link_update,\n\tcase \n        when hd.cid is not null\n             and ndog.cid is not null  \n             and pdog.cid is not null\n\t\t\tand pdc.cid is not null and pdc.pet_segment in ('Both','Dog') then 'Y'\n\t\telse 'N' \n    end as pdc_dog_link_update,\t\t\t\t\t\t   \n    dp.num_pets_deceased_this_month,\n    es.engagement_score as purina_engagement_score,\n\tlrs.purina_lapse_risk_segment\nfrom ${Database}.temp.build_rollups_cid_base                     cb\nleft join ${Database}.temp.build_rollups_cid_gender_fix          gf   on cb.cid = gf.cid\nleft join ${Database}.temp.build_rollups_cid_have_cat            hc   on cb.cid = hc.cid\nleft join ${Database}.temp.build_rollups_cid_have_dog            hd   on cb.cid = hd.cid\nleft join ${Database}.temp.build_rollups_cid_inferred_cat        ic   on cb.cid = ic.cid\nleft join ${Database}.temp.build_rollups_cid_inferred_dog        id   on cb.cid = id.cid\nleft join ${Database}.temp.build_rollups_cid_used_to_have_cat    uhc  on cb.cid = uhc.cid\nleft join ${Database}.temp.build_rollups_cid_used_to_have_dog    uhd  on cb.cid = uhd.cid\nleft join ${Database}.temp.build_rollups_cid_deceased_pets       dp   on cb.cid = dp.cid\nleft join ${Database}.temp.build_rollups_cid_no_printer          np   on cb.cid = np.cid\nleft join ${Database}.temp.build_rollups_npp_engagement_score    es   on cb.cid = es.cid\nleft join ${Database}.temp.build_rollups_npp_lapse_risk_segment  lrs  on cb.cid = lrs.cid\nleft join ${Database}.live.cid_question                          cat  on cat.cid = cb.cid \n                                                                     and cat.question = 'Have cat'\nleft join ${Database}.live.cid_question                          dog  on dog.cid = cb.cid \n                                                                     and dog.question = 'Have dog'\nleft join ${Database}.live.cid_question                          ncat on ncat.cid = cb.cid \n                                                                     and ncat.question = 'Number of cats'\nleft join ${Database}.live.cid_question                          ndog on ndog.cid = cb.cid \n                                                                     and ndog.question = 'Number of dogs'\nleft join ${Database}.live.cid_question                          pcat on pcat.cid = cb.cid \n                                                                     and lower(collate(pcat.question,'')) regexp '.*which pets do you have.*'\n                                                                     and lower(collate(pcat.answer,'')) regexp '.*cat.*'\nleft join ${Database}.live.cid_question                          pdog on pdog.cid = cb.cid \n                                                                     and lower(collate(pdog.question,'')) regexp '.*which pets do you have.*'\n                                                                     and lower(collate(pdog.answer,'')) regexp '.*dog.*'\nleft join ${Database}.temp.build_rollups_cid_pdc_pet            pdc on pdc.cid = cb.cid \n;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_core_rollups',\n    '${Database}.live.cid',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid;   \n  \n---------------------\n-- cid details\ndrop table if exists ${Database}.live.cid_details ;  \nCREATE OR REPLACE TABLE ${Database}.live.cid_details \nas\nselect distinct\n    ci.cid,\n    ci.hid,\n    coalesce(utm.name_urn, ute.name_urn, utp.name_urn, uts.name_urn, ci.name_urn)                                    as name_urn,\n    cast(regexp_replace(coalesce(utm.title, ute.title, ma.title),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))             as title,\n    cast(regexp_replace(coalesce(utm.firstname, ute.firstname, ma.firstname),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50)) as firstname, \n    cast(regexp_replace(coalesce(utm.lastname, ute.lastname, ma.lastname),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))    as lastname,\n    --blank address if not mailable\n    cast(regexp_replace(coalesce(utm.add1, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                              as add1,\n    cast(regexp_replace(coalesce(utm.add2, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                              as add2,\n    cast(regexp_replace(coalesce(utm.add3, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                              as add3,\n    cast(regexp_replace(coalesce(utm.add4, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                              as add4,\n    cast(regexp_replace(coalesce(utm.add5, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                              as add5,\n    cast(regexp_replace(coalesce(utm.city, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                              as town,\n    cast(regexp_replace(coalesce(utm.state, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))                             as county,\n    cast(regexp_replace(coalesce(utm.country_clean, ci.country),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100))             as country,\n    cast(regexp_replace(upper(coalesce(utm.postcode, ci.postcode)),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))           as postcode,\n    cast(regexp_replace(coalesce(utp.phone_home, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))                         as phone_home,\n    cast(regexp_replace(coalesce(utp.phone_work, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))                         as phone_work,\n    cast(regexp_replace(coalesce(\n        case \n            when uts.phone_mobile like '+44 %' then replace(replace(uts.phone_mobile , '+' , '') , ' ' , '') \n            else uts.phone_mobile\n        end,''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(50))                                                                 as phone_mobile,\n    cast(regexp_replace(coalesce(utm.formal_salutation, ute.formal_salutation, ma.formal_salutation),'[\\x00-\\x1F|\\x7F]','')as nvarchar(100))       as salutation, \n    cast(regexp_replace(coalesce(utm.informal_salutation, ute.informal_salutation, ma.informal_salutation),'[\\x00-\\x1F|\\x7F]','')as nvarchar(100)) as salutation_informal\nfrom ${Database}.live.cid ci \nleft join ${Database}.live.names utm   on ci.name_urn_to_mail_ignoring_dp  = utm.name_urn\nleft join ${Database}.live.names ute   on ci.name_urn_to_email_ignoring_dp = ute.name_urn\nleft join ${Database}.live.names utp   on ci.name_urn_to_phone_ignoring_dp = utp.name_urn\nleft join ${Database}.live.names uts   on ci.name_urn_to_sms_ignoring_dp   = uts.name_urn\nleft join ${Database}.live.names ma    on ci.name_urn                      = ma.name_urn\n; \n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_core_rollups',\n    '${Database}.live.cid_details',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_details;\n\n\n---------------------\n-- cid brand\ndrop table if exists ${Database}.temp.names_supps_dp_brand;\nCREATE OR REPLACE TABLE ${Database}.temp.names_supps_dp_brand\nas\nselect distinct\n    cid,\n    business_unit_id,\n    division_id,\n    brand_id,\n    max(first_email)  as email,\n    max(dp_last_date) as dp_last_date,\n    max(last_open_date)       as last_open_date,\n    max(last_open_date_ios15) as last_open_date_ios15,\n    max(customer_retention_group_date) \t\t\t\t\t\t    as customer_retention_group_date,\n    max(customer_retention_group_date_ios15) \t\t\t\t\tas customer_retention_group_date_ios15,\n    max(customer_retention_group_expiry_date_calculated) \t\tas customer_retention_group_expiry_date,\n    max(customer_retention_group_expiry_date_ios15_calculated) \tas customer_retention_group_expiry_date_ios15,\n    min(customer_retention_group_base)  \t\t\t\t\t\tas customer_retention_group_base,\n    min(customer_retention_group_base_ios15) \t\t\t\t\tas customer_retention_group_base_ios15,\n    min(customer_suppression_group_base) \t\t\t\t\t\tas customer_suppression_group_base,\n    max(mailable)  as mailable,\n    max(emailable) as emailable,\n\tmin(emailable_first_date)   as emailable_first_date,\n\tmax(emailable_first_source) as emailable_first_source,\n\tmax(emailable_last_date)    as emailable_last_date,\n\tmax(emailable_last_source)  as emailable_last_source, \n    max(emailable_newsletter)  as emailable_newsletter,\n    max(mailable_ignoring_dp)  as mailable_ignoring_dp,\n    max(emailable_ignoring_dp) as emailable_ignoring_dp\nfrom (\n\t select\n\t\t *,\n\t\t case\n\t\t\t when brand_id = (select brand_id from ${Database}.db.ref_brand where brand = 'SMA') then add_months(customer_retention_group_date,36)\n\t\t\t else add_months(customer_retention_group_date,24)\n\t\t end as customer_retention_group_expiry_date_calculated,\n\t\t case\n\t\t\t when brand_id = (select brand_id from ${Database}.db.ref_brand where brand = 'SMA') then add_months(customer_retention_group_date_ios15,36)\n\t\t\t else add_months(customer_retention_group_date_ios15,24)\n\t\t end as customer_retention_group_expiry_date_ios15_calculated\n\t\t,first_value(email)                    over (partition by cid, business_unit_id, division_id, brand_id order by emailable desc nulls last, emailable_newsletter desc nulls last, dp_last_date desc nulls last,last_open_date desc nulls last,email asc nulls last) as first_email\n\t\t,first_value(dp_first_date) \t       over (partition by cid, business_unit_id, division_id, brand_id order by emailable desc nulls last, emailable_newsletter desc nulls last, dp_first_date nulls last    ,last_open_date desc nulls last,email asc nulls last) as emailable_first_date\n\t\t,first_value(dp_first_source)          over (partition by cid, business_unit_id, division_id, brand_id order by emailable desc nulls last, emailable_newsletter desc nulls last, dp_first_date nulls last\t ,last_open_date desc nulls last,email asc nulls last) as emailable_first_source\n\t\t,first_value(dp_last_date) \t           over (partition by cid, business_unit_id, division_id, brand_id order by emailable desc nulls last, emailable_newsletter desc nulls last, dp_last_date desc nulls last,last_open_date desc nulls last,email asc nulls last) as emailable_last_date\n\t\t,first_value(dp_last_emailable_source) over (partition by cid, business_unit_id, division_id, brand_id order by emailable desc nulls last, emailable_newsletter desc nulls last, dp_last_date desc nulls last,last_open_date desc nulls last,email asc nulls last) as emailable_last_source \n         from ${Database}.temp.build_email_brand_contact_flags\n     ) cf\ngroup by 1,2,3,4\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_core_rollups',\n    '${Database}.temp.names_supps_dp_brand',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.names_supps_dp_brand;\n\n\n--brand preference & base combine\ndrop table if exists ${Database}.temp.build_rollups_cid_brand_pref_base; \nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_brand_pref_base as\nselect distinct\n\tcid,\n\tbrand_id,\n\tfirst_value(pref_emailable) over (partition by cid, brand_id order by pref_date desc, pref_source) as pref_emailable\nfrom\n(\t\n\t\tselect cid,\n\t\t\tbrand_id,\n\t\t\tpref_emailable, \t\t--Ticked/unticked a box on Gigya to confirm they want to/don't want to hear from the brand – i.e. done it themselves\n\t\t\tpref_date,\n\t\t\tcast(1 as int) as pref_source\n\t\tfrom ${Database}.temp.build_rollups_cid_brand_preference\n\t\twhere pref_mig = 0\t\t\t--don't consider preferences from before migration\n\t\tunion all\n\t\tselect cid,\n\t\t\tbrand_id,\n\t\t\t1 as pref_emailable,\t--any positive brand registration action in the last 5 years\n\t\t\tlast_date_brand as pref_date,\n\t\t\tcast(2 as int) as pref_source \n\t\tfrom ${Database}.temp.build_rollups_cid_brand_base\n)\n;\n  \n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_core_rollups',\n    '${Database}.temp.build_rollups_cid_brand_pref_base',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_brand_pref_base;\n\n-- final cid brand table\ndrop table if exists ${Database}.live.cid_brand ;  \nCREATE OR REPLACE TABLE ${Database}.live.cid_brand\nas\nselect\n    to_char(xr.bbw_urn)||'-'||to_char(dp.brand_id) as cid_brand_urn,\n    ci.cid,\n    dp.business_unit_id,\n    dp.division_id,\n    dp.brand_id,\n   case\n        when dp.customer_retention_group_base = 1 then 'Safe'\n        when dp.customer_retention_group_base = 2 then 'Re-consent'\n        when dp.customer_retention_group_base = 3 then 'New'\n        when dp.customer_retention_group_base = 4 then 'At Risk'\n        when dp.customer_retention_group_base = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base = 6 then 'Gone this month'\n        when dp.customer_retention_group_base = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_brand,\n   case\n        when dp.customer_retention_group_base_ios15 = 1 then 'Safe'\n        when dp.customer_retention_group_base_ios15 = 2 then 'Re-consent'\n        when dp.customer_retention_group_base_ios15 = 3 then 'New'\n        when dp.customer_retention_group_base_ios15 = 4 then 'At Risk'\n        when dp.customer_retention_group_base_ios15 = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base_ios15 = 6 then 'Gone this month'\n        when dp.customer_retention_group_base_ios15 = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_brand_ios15,\n    dp.customer_retention_group_date as customer_retention_date_brand,\n    dp.customer_retention_group_date_ios15 as customer_retention_date_brand_ios15,\n    dp.customer_retention_group_expiry_date as customer_retention_expiry_date_brand,\n    dp.customer_retention_group_expiry_date_ios15 as customer_retention_expiry_date_brand_ios15,\n    dp.dp_last_date as last_subscription_date_brand,\n    em.event_date as last_email_open_date_brand,\n    case\n        when pgi.first_pref_date is null then cbb.first_date_brand\n        when cbb.first_date_brand is null then pgi.first_pref_date\n        else least(cbb.first_date_brand, pgi.first_pref_date)\n    end as first_date_brand, --least data date from existing pref_date or first_date_brand\n    cbb.last_date_brand,\n    cbb.first_channel_brand,\n    cbb.last_channel_brand,\n\tcase\n        when bpb.pref_emailable is not null then bpb.pref_emailable \n        else -1 end as brand_preference, \n    case\n        when dp.brand_id = (select brand_id from ${Database}.live.ref_brand where contains(lower(brand),'your purina')) then 0\n        when pro.brand_id is not null \t\t\t\t\t\t\t   then 1 --Has had a product from the brand in the L5Y (sample, coupon, loyalty scheme, left an R&R of 3 and above)\n        when cbb.last_login_brand >= add_months(current_date, -60) then 1 --Has logged into their account on a brand website in last 5 years (Pets Welcome or Gigya)\n        when pref.brand_id is not null \t\t\t\t\t\t\t   then 1 --Has answered a brand question (old golden questions) in the last 5 years\n        when em.brand_id is not null \t\t\t\t\t\t\t   then 1 --Opened or clicked an email from the brand in the last 5 years\n        else 0\n    end as brand_engagement,\n\tcase\n        when bpb.pref_emailable is not null then bpb.pref_emailable \n        when dp.brand_id = (select brand_id from ${Database}.live.ref_brand where contains(lower(brand),'your purina')) then 0\n        when pro.brand_id is not null \t\t\t\t\t\t\t   then 1 --Has had a product from the brand in the L5Y (sample, coupon, loyalty scheme, left an R&R of 3 and above)\n        when cbb.last_login_brand >= add_months(current_date, -60) then 1 --Has logged into their account on a brand website in last 5 years (Pets Welcome or Gigya)\n        when pref.brand_id is not null \t\t\t\t\t\t\t   then 1 --Has answered a brand question (old golden questions) in the last 5 years\n        when em.brand_id is not null \t\t\t\t\t\t\t   then 1 --Opened or clicked an email from the brand in the last 5 years\n        else 0\n    end as brand_campaignable,\n    case\n        when pgi.pref_emailable = 1 and pgi.pref_mig = 0 then 1\n        when pgi.pref_emailable = 1 and pgi.pref_mig = 1 then -1\n        else 0\n    end as preferred_brand_gigya,\n    case\n        when dp.emailable = 1 or dp.emailable_newsletter = 1 then ''\n        when customer_suppression_group_base = 1 then 'Deceased TM'\n        when customer_suppression_group_base = 2 then 'Deceased'\n        when customer_suppression_group_base = 3 then 'Manual TM'\n        when customer_suppression_group_base = 4 then 'Manual'\n        when customer_suppression_group_base = 5 then 'Bounce TM'\n        when customer_suppression_group_base = 6 then 'Bounce'\n        when customer_suppression_group_base = 7 then 'Unsub TM'\n        when customer_suppression_group_base = 8 then 'Unsub'\n        when customer_suppression_group_base = 9 then 'Opt-Out TM'\n        when customer_suppression_group_base = 10 then 'Opt-Out'\n        when customer_suppression_group_base = 11 then 'Engagement'\n        else 'Misc'\n    end as customer_suppression_group_brand,\n    --    contactable status\n    case when dp.mailable = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable,\n    case when dp.emailable = 1 then 1 else 0 end as emailable,\n\tdp.emailable_first_date,\n\tdp.emailable_first_source,\n\tdp.emailable_last_date,\n\tdp.emailable_last_source, \n    case when dp.emailable_newsletter = 1 then 1 else 0 end as emailable_newsletter,\n    case when dp.mailable_ignoring_dp = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable_ignoring_dp,\n    case when dp.emailable_ignoring_dp = 1 then 1 else 0 end as emailable_ignoring_dp,\n    cast(regexp_replace(coalesce(\n        case\n            when dp.emailable = 1\n            or dp.emailable_newsletter = 1 then collate(dp.email,'')\n            else ''\n        end, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100)) as email_brand\nfrom ${Database}.temp.build_rollups_cid_base                 ci\ninner join ${Database}.temp.names_supps_dp_brand             dp   on ci.cid = dp.cid\ninner join ${Database}.temp.xref_cid_email                   xr   on dp.cid = xr.cid\n                                                            and dp.email = xr.email\nleft join ${Database}.temp.build_rollups_cid_brand_base      cbb  on dp.cid = cbb.cid\n                                                            and dp.brand_id = cbb.brand_id\nleft join ${Database}.temp.build_rollups_cid_brand_preferred pref on dp.cid = pref.cid\n                                                            and dp.brand_id = pref.brand_id\nleft join ${Database}.temp.build_rollups_cid_brand_preference pgi on dp.cid = pgi.cid --gigya prefereces\n                                                            and dp.brand_id = pgi.brand_id\nleft join ${Database}.temp.build_rollups_cid_brand_emails    em   on dp.email = em.email\n                                                            and dp.brand_id = em.brand_id\nleft join ${Database}.temp.build_rollups_cid_brand_product   pro  on dp.cid = pro.cid\n                                                            and dp.brand_id = pro.brand_id\nleft join ${Database}.temp.build_rollups_cid_brand_pref_base bpb  on dp.cid = bpb.cid\n                                                            and dp.brand_id = bpb.brand_id;\n \n \ninsert into ${Database}.db.build_log \nselect \n    'nestle_core_rollups',\n    '${Database}.live.cid_brand',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_brand;   \n\n\n---------------------\n-- cid division\ndrop table if exists ${Database}.temp.names_supps_dp_division;\nCREATE OR REPLACE TABLE ${Database}.temp.names_supps_dp_division\nas\nselect distinct\n    cid,\n    business_unit_id,\n    division_id,\n    max(first_email)  as email,\n    max(dp_last_date) as dp_last_date,\n    max(last_open_date)       as last_open_date,\n    max(last_open_date_ios15) as last_open_date_ios15,\n    max(customer_retention_group_date) \t\t\t\tas customer_retention_group_date,\n    max(customer_retention_group_date_ios15) \t\tas customer_retention_group_date_ios15,\n    max(customer_retention_group_expiry_date) \t\tas customer_retention_group_expiry_date,\n    max(customer_retention_group_expiry_date_ios15) as customer_retention_group_expiry_date_ios15,\n    min(customer_retention_group_base) \t\t\t\tas customer_retention_group_base,\n    min(customer_retention_group_base_ios15) \t\tas customer_retention_group_base_ios15,\n    min(customer_suppression_group_base) \t\t\tas customer_suppression_group_base,\n    max(mailable)  as mailable,\n    max(emailable) as emailable,\n\tmax(div_emailable_first_date)   as emailable_first_date,\n\tmax(div_emailable_first_source) as emailable_first_source,\n\tmax(div_emailable_last_date)    as emailable_last_date,\n\tmax(div_emailable_last_source)  as emailable_last_source, \n    max(emailable_newsletter)  as emailable_newsletter,\n    max(mailable_ignoring_dp)  as mailable_ignoring_dp,\n    max(emailable_ignoring_dp) as emailable_ignoring_dp\nfrom \n\t(\n\tselect \n\t\t*\n\t\t,first_value(email) \t\t\t\t over (partition by cid, business_unit_id, division_id order by emailable desc nulls last, emailable_newsletter desc nulls last, dp_last_date desc nulls last       ,last_open_date desc nulls last,email asc nulls last) as first_email\n\t\t,first_value(emailable_first_date) \t over (partition by cid, business_unit_id, division_id order by emailable desc nulls last, emailable_newsletter desc nulls last, emailable_first_date nulls last    ,last_open_date desc nulls last,email asc nulls last) as div_emailable_first_date\n\t\t,first_value(emailable_first_source) over (partition by cid, business_unit_id, division_id order by emailable desc nulls last, emailable_newsletter desc nulls last, emailable_first_date nulls last    ,last_open_date desc nulls last,email asc nulls last) as div_emailable_first_source\n\t\t,first_value(emailable_last_date) \t over (partition by cid, business_unit_id, division_id order by emailable desc nulls last, emailable_newsletter desc nulls last, emailable_last_date desc nulls last,last_open_date desc nulls last,email asc nulls last) as div_emailable_last_date\n\t\t,first_value(emailable_last_source)  over (partition by cid, business_unit_id, division_id order by emailable desc nulls last, emailable_newsletter desc nulls last, emailable_last_date desc nulls last,last_open_date desc nulls last,email asc nulls last) as div_emailable_last_source \n\tfrom ${Database}.temp.names_supps_dp_brand\n\t) t\ngroup by 1,2,3\n;\n\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_core_rollups',\n    '${Database}.temp.names_supps_dp_division',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.names_supps_dp_division;\n\n\ndrop table if exists ${Database}.temp.build_rollups_cid_division_base ;  \nCREATE OR REPLACE TABLE ${Database}.temp.build_rollups_cid_division_base \nas\nselect \n    cbb.cid,\n    rb.division_id,\n    min(cbb.first_date_brand) as first_date_division,\n    max(cbb.last_date_brand) as last_date_division\nfrom ${Database}.temp.build_rollups_cid_brand_base cbb\ninner join ${Database}.live.ref_brand rb on cbb.brand_id = rb.brand_id\ngroup by \n    cbb.cid,\n    rb.division_id;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_core_rollups',\n    '${Database}.temp.build_rollups_cid_division_base',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.build_rollups_cid_division_base;    \n\n\n--If grouping New then check if other brands exist with New/At Risk as these will be classed as safe\ndrop table if exists ${Database}.temp.group_division_new_check;\nCREATE OR REPLACE TABLE ${Database}.temp.group_division_new_check\nas\nselect distinct \n    cbbo.cid,\n    cbbo.division_id\nfrom ${Database}.temp.names_supps_dp_brand cbbo\ninner join ${Database}.temp.names_supps_dp_brand cbbt on cbbo.cid = cbbt.cid\n                                                and cbbo.division_id = cbbt.division_id\nwhere cbbo.customer_retention_group_base = 3 --New\n    and cbbt.customer_retention_group_base in (4,5);  --At Risk/Data Orphan\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_core_rollups',\n    '${Database}.temp.group_division_new_check',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.group_division_new_check;    \n\n\ndrop table if exists ${Database}.temp.group_division_new_check_ios15 ;  \ncreate or replace table ${Database}.temp.group_division_new_check_ios15\nas\nselect distinct\n    cbbo.cid,\n    cbbo.division_id\nfrom ${Database}.temp.names_supps_dp_brand cbbo\ninner join ${Database}.temp.names_supps_dp_brand cbbt on cbbo.cid = cbbt.cid\n                                                     and cbbo.division_id = cbbt.division_id\nwhere cbbo.customer_retention_group_base_ios15 = 3 --New\n    and cbbt.customer_retention_group_base_ios15 in (4,5); --At Risk/Data Orphan\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_core_rollups',\n    '${Database}.temp.group_division_new_check_ios15',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.group_division_new_check_ios15;\n\n\n--final cid div table\ndrop table if exists ${Database}.live.cid_division ;  \nCREATE OR REPLACE TABLE ${Database}.live.cid_division \nas\nselect \n    to_char(xr.bbw_urn)||'-'||to_char(dp.division_id) as cid_division_urn,\n    ci.cid,\n    dp.business_unit_id,\n    dp.division_id,\n   case \n        when dp.customer_retention_group_base = 1 then 'Safe'\n        when dp.customer_retention_group_base = 2 then 'Re-consent'\n        when gnd.cid is not null then 'Safe'\n        when dp.customer_retention_group_base = 3 then 'New'\n        when dp.customer_retention_group_base = 4 then 'At Risk'\n        when dp.customer_retention_group_base = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base = 6 then 'Gone this month'\n        when dp.customer_retention_group_base = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_division,\n   case \n        when dp.customer_retention_group_base_ios15 = 1 then 'Safe'\n        when dp.customer_retention_group_base_ios15 = 2 then 'Re-consent'\n        when gnd15.cid is not null then 'Safe'\n        when dp.customer_retention_group_base_ios15 = 3 then 'New'\n        when dp.customer_retention_group_base_ios15 = 4 then 'At Risk'\n        when dp.customer_retention_group_base_ios15 = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base_ios15 = 6 then 'Gone this month'\n        when dp.customer_retention_group_base_ios15 = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_division_ios15,\n    dp.customer_retention_group_date as customer_retention_date_division,\n    dp.customer_retention_group_date_ios15 as customer_retention_date_division_ios15,\n    dp.customer_retention_group_expiry_date as customer_retention_expiry_date_division,\n    dp.customer_retention_group_expiry_date_ios15 as customer_retention_expiry_date_division_ios15,\n    dp.dp_last_date as last_subscription_date_division,\n    dp.last_open_date as last_email_open_date_division, \n    dp.last_open_date_ios15 as last_email_open_date_division_ios15, \n    cdb.first_date_division,\n    cdb.last_date_division,\n    case \n        when dp.emailable = 1 or dp.emailable_newsletter = 1 then ''\n        when customer_suppression_group_base = 1 then 'Deceased TM'\n        when customer_suppression_group_base = 2 then 'Deceased'\n        when customer_suppression_group_base = 3 then 'Manual TM'\n        when customer_suppression_group_base = 4 then 'Manual'\n        when customer_suppression_group_base = 5 then 'Bounce TM'\n        when customer_suppression_group_base = 6 then 'Bounce'\n        when customer_suppression_group_base = 7 then 'Unsub TM'\n        when customer_suppression_group_base = 8 then 'Unsub'\n        when customer_suppression_group_base = 9 then 'Opt-Out TM'\n        when customer_suppression_group_base = 10 then 'Opt-Out'\n        when customer_suppression_group_base = 11 then 'Engagement'\n        else 'Misc'\n    end as customer_suppression_group_division,    \n    --    contactable status \n    case when dp.mailable = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable,\n    case when dp.emailable = 1 then 1 else 0 end as emailable,\n\tdp.emailable_first_date,\n\tdp.emailable_first_source,\n\tdp.emailable_last_date,\n\tdp.emailable_last_source, \n    case when dp.emailable_newsletter = 1 then 1 else 0 end as emailable_newsletter,\n    case when dp.mailable_ignoring_dp = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable_ignoring_dp,\n    case when dp.emailable_ignoring_dp = 1 then 1 else 0 end as emailable_ignoring_dp,\n    cast(regexp_replace(coalesce(\n        case \n            when dp.emailable = 1 or dp.emailable_newsletter = 1 then collate(dp.email,'')\n            else '' \n        end, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100)) as email_division\nfrom ${Database}.temp.build_rollups_cid_base ci\ninner join ${Database}.temp.names_supps_dp_division dp on ci.cid = dp.cid\ninner join ${Database}.temp.xref_cid_email xr on dp.cid = xr.cid\n                                           and dp.email = xr.email\nleft join ${Database}.temp.build_rollups_cid_division_base cdb on dp.cid = cdb.cid \n                                                           and dp.division_id = cdb.division_id\nleft join ${Database}.temp.group_division_new_check gnd on dp.cid = gnd.cid\n                                                    and dp.division_id = gnd.division_id\nleft join ${Database}.temp.group_division_new_check_ios15 gnd15 on dp.cid = gnd15.cid\n                                                          and dp.division_id = gnd15.division_id;\n    \ninsert into ${Database}.db.build_log \nselect \n    'nestle_core_rollups',\n    '${Database}.live.cid_division',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_division;   \n\n\n-----------------\n-- cid business unit \ndrop table if exists ${Database}.temp.names_supps_dp_business_unit;\nCREATE OR REPLACE TABLE ${Database}.temp.names_supps_dp_business_unit\nas\nselect distinct\n    cid,\n    business_unit_id,\n    max(first_email)  as email,\n    max(dp_last_date) as dp_last_date,\n    max(last_open_date)       as last_open_date,\n    max(last_open_date_ios15) as last_open_date_ios15,\n    max(customer_retention_group_date)       \t\tas customer_retention_group_date,\n    max(customer_retention_group_date_ios15) \t\tas customer_retention_group_date_ios15,\n    max(customer_retention_group_expiry_date) \t\tas customer_retention_group_expiry_date,\n    max(customer_retention_group_expiry_date_ios15) as customer_retention_group_expiry_date_ios15,\n    max(customer_retention_group_expiry_date) \t\tas dp_processing_expiry_date,\n    max(customer_retention_group_expiry_date_ios15) as dp_processing_expiry_date_ios15,\n    min(customer_retention_group_base) \t\t\t\tas customer_retention_group_base,\n    min(customer_retention_group_base_ios15) \t\tas customer_retention_group_base_ios15,\n    min(customer_suppression_group_base) \t\t\tas customer_suppression_group_base,\n    max(mailable)  as mailable,\n    max(emailable) as emailable,\n\tmax(bu_emailable_first_date)   as emailable_first_date,\n\tmax(bu_emailable_first_source) as emailable_first_source,\n\tmax(bu_emailable_last_date)    as emailable_last_date,\n\tmax(bu_emailable_last_source)  as emailable_last_source, \n    max(emailable_newsletter)   as emailable_newsletter,\n    max(mailable_ignoring_dp)   as mailable_ignoring_dp,\n    max(emailable_ignoring_dp)  as emailable_ignoring_dp\nfrom \n\t(\n\tselect\n\t\t*\n\t\t,first_value(email) \t\t\t\t over (partition by cid, business_unit_id order by emailable desc nulls last, emailable_newsletter desc nulls last, dp_last_date desc nulls last,last_open_date desc nulls last,email asc nulls last) as first_email\n\t\t,first_value(emailable_first_date) \t over (partition by cid, business_unit_id order by emailable desc nulls last, emailable_newsletter desc nulls last, emailable_first_date nulls last    ,last_open_date desc nulls last,email asc nulls last) as bu_emailable_first_date\n\t\t,first_value(emailable_first_source) over (partition by cid, business_unit_id order by emailable desc nulls last, emailable_newsletter desc nulls last, emailable_first_date nulls last\t   ,last_open_date desc nulls last,email asc nulls last) as bu_emailable_first_source\n\t\t,first_value(emailable_last_date) \t over (partition by cid, business_unit_id order by emailable desc nulls last, emailable_newsletter desc nulls last, emailable_last_date desc nulls last,last_open_date desc nulls last,email asc nulls last) as bu_emailable_last_date\n\t\t,first_value(emailable_last_source)  over (partition by cid, business_unit_id order by emailable desc nulls last, emailable_newsletter desc nulls last, emailable_last_date desc nulls last,last_open_date desc nulls last,email asc nulls last) as bu_emailable_last_source \n\tfrom ${Database}.temp.names_supps_dp_division\n\t) t\ngroup by 1,2\n;\n\ninsert into ${Database}.db.build_log \nselect \n    'db_names_suppressions',\n    '${Database}.temp.names_supps_dp_business_unit',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.names_supps_dp_business_unit;\n\n\n--If grouping New then check if other divisions exist with New/At Risk as these will be classed as safe \n-- also check if check was needed before\ndrop table if exists ${Database}.temp.group_business_new_check;\nCREATE OR REPLACE TABLE ${Database}.temp.group_business_new_check\nas\nselect distinct \n    cbbo.cid,\n    cbbo.business_unit_id\nfrom ${Database}.temp.names_supps_dp_division cbbo\nleft join ${Database}.temp.names_supps_dp_division cbbt on cbbo.cid = cbbt.cid\n                                                  and cbbo.business_unit_id = cbbt.business_unit_id\n                                                  and cbbt.customer_retention_group_base in (4,5)  --At Risk/Data Orphan\nleft join ${Database}.temp.group_division_new_check gdc on cbbo.cid = gdc.cid\n                                                  and cbbo.division_id = gdc.division_id\nwhere cbbo.customer_retention_group_base = 3 --New\n    and (gdc.cid is not null or cbbt.cid is not null); --Either already Safe due to previous checking or new grouping filter needed\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_core_rollups',\n    '${Database}.temp.group_business_new_check',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.group_business_new_check;    \n\n\ndrop table if exists ${Database}.temp.group_business_new_check_ios15;\nCREATE OR REPLACE TABLE ${Database}.temp.group_business_new_check_ios15\nas\nselect distinct\n    cbbo.cid,\n    cbbo.business_unit_id\nfrom ${Database}.temp.names_supps_dp_division cbbo\nleft join ${Database}.temp.names_supps_dp_division cbbt on cbbo.cid = cbbt.cid\n                                                  and cbbo.business_unit_id = cbbt.business_unit_id\n                                                  and cbbt.customer_retention_group_base_ios15 in (4,5)  --At Risk/Data Orphan\nleft join ${Database}.temp.group_division_new_check_ios15 gdc on cbbo.cid = gdc.cid\n                                                             and cbbo.division_id = gdc.division_id\nwhere cbbo.customer_retention_group_base_ios15 = 3 --New\n    and (gdc.cid is not null or cbbt.cid is not null); --Either already Safe due to previous checking or new grouping filter needed\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_core_rollups',\n    '${Database}.temp.group_business_new_check_ios15',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.group_business_new_check_ios15;\n\n\n--acquisition types\ndrop table if exists ${Database}.temp.npp_acquisition_type_base;\nCREATE OR REPLACE TABLE ${Database}.temp.npp_acquisition_type_base\nas\nselect distinct\n    acq.cid,\n    acq.acquisition_name_urn,\n    trim(acq.acquisition_source) as acquisition_source,\n    acq.acquisition_source_brand_id,\n    acq.acquisition_source_file,\n    first_value(trim(na.registration_campaign)) over\n        (\n            partition by cid \n            order by \n                na.data_date nulls last,\n                na.source_date nulls last\n        ) as acquisition_registration_campaign\nfrom (\n         select distinct\n             xr.cid,\n             first_value(n.name_urn) over\n                 (\n                     partition by xr.cid\n                     order by\n                         n.data_date nulls last,\n                         n.reg_date nulls last,\n                         n.source_date nulls last\n                 ) as acquisition_name_urn,\n             first_value(n.source) over\n                 (\n                     partition by xr.cid\n                     order by\n                         n.data_date nulls last,\n                         n.reg_date nulls last,\n                         n.source_date nulls last\n                 ) as acquisition_source,\n             first_value(n.source_brand_id) over\n                 (\n                     partition by xr.cid\n                     order by\n                         n.data_date nulls last,\n                         n.reg_date nulls last,\n                         n.source_date nulls last\n                 ) as acquisition_source_brand_id,\n             first_value(n.source_file) over\n                 (\n                     partition by xr.cid\n                     order by\n                         n.data_date nulls last,\n                         n.reg_date nulls last,\n                         n.source_date nulls last\n                 ) as acquisition_source_file\n         from ${Database}.db.names n\n         left join ${Database}.live.xref_name_urn xr on xr.name_urn = n.name_urn\n         where source_data_controller_id = (select data_controller_id from ${Database}.live.ref_data_controller where data_controller like 'Nestl_ Purina Petcare (UK) Ltd')\n\t\t and n.source <> 'RESP_ADE_RMI' and n.source <> 'NPP09393_BT_SS_QUALIFIO_EXIST'\n     ) acq\nleft join ${Database}.db.names_attributes na on na.name_urn = acq.acquisition_name_urn \nand (source <> 'REG_GIG' or (na.source = 'REG_GIG' and na.registration_campaign not in  (\n                                                         'GBCERELACWEB_MIG',\n                                                         'UKAEROCHOCOLATEWEB',\n                                                         'UKBUXTONWATERWEB',\n                                                         'UKCARNATIONWEB',\n                                                         'UKCERELACWEB',\n                                                         'UKCERELACWEB_MIG',\n                                                         'UKKITKATWEB',\n                                                         'UKMAGGIWEB',\n                                                         'UKMERITENEWEB',\n                                                         'UKMERITENEWEB_MIG',\n                                                         'UKMILKYBARWEB',\n                                                         'UKNESCAFEWEB',\n                                                         'UKROWNTREESWEB',\n                                                         'UKYESSNACKSWEB',\n                                                         'UKNESTLEPURELIFEWEB'))); --CIAM name_urns can join to ${Database} reg_campaigns from names_attibutes\n\n\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_core_rollups',\n    '${Database}.temp.npp_acquisition_type_base',\n    'total records',\n    cast(count(*) as varchar),\n    current_timestamp \nfrom ${Database}.temp.npp_acquisition_type_base;\n\n--cid level table with acquisition types attributed\ndrop table if exists ${Database}.temp.ref_acquisition_type_joined;\nCREATE OR REPLACE TABLE ${Database}.temp.ref_acquisition_type_joined\nas\n--new source - has populated registration_campaign and brand_id\n--join on source, reg_campaign and brand\nselect     distinct \n    b.cid,\n    b.acquisition_source,\n    '' as acquisition_source_file,\n    b.acquisition_source_brand_id,\n    b.acquisition_registration_campaign,\n    case when b.acquisition_source = 'REG_GIG' then 'Website Registrations' else tc.acquisition_type end as acquisition_type, --Issue with reg_campaign when joining CIAM records to names_attributes, but they're all website reg\n    tc.acquisition_channel,\n    '1 - source, reg_campaign and brand' as join_type\nfrom ${Database}.temp.npp_acquisition_type_base b\nleft join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                           and b.acquisition_registration_campaign = tc.registration_campaign\n                                           and b.acquisition_source_brand_id = tc.acquisition_source_brand_id\nwhere (b.acquisition_registration_campaign > '')\n    and b.acquisition_source_brand_id is not null\n    and contains(lower(tc.source_old_new),'new')\nunion all\n--new source - has null or blank registration_campaign and populated brand_id\n--join on source and brand_id\nselect     distinct\n    b.cid,\n    b.acquisition_source,\n    '' as acquisition_source_file,\n    b.acquisition_source_brand_id,\n    b.acquisition_registration_campaign,\n    case when b.acquisition_source = 'REG_GIG' then 'Website Registrations' else tc.acquisition_type end as acquisition_type, --Issue with reg_campaign when joining CIAM records to names_attributes, but they're all website reg\n    tc.acquisition_channel,\n    '2 - source and brand' as join_type\nfrom ${Database}.temp.npp_acquisition_type_base b\nleft join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                           and b.acquisition_source_brand_id = tc.acquisition_source_brand_id\nwhere (b.acquisition_registration_campaign is null or b.acquisition_registration_campaign = '')\n    and tc.registration_campaign is null\n    and b.acquisition_source_brand_id is not null\n    and contains(lower(tc.source_old_new),'new')\nunion all\n--new source - has populated registration_campaign and null brand_id\n--join on source and reg_campaign\nselect     distinct\n    b.cid,\n    b.acquisition_source,\n    '' as acquisition_source_file,\n    b.acquisition_source_brand_id,\n    b.acquisition_registration_campaign,\n    case when b.acquisition_source = 'REG_GIG' then 'Website Registrations' else tc.acquisition_type end as acquisition_type, --Issue with reg_campaign when joining CIAM records to names_attributes, but they're all website reg\n    tc.acquisition_channel,\n    '3 - source and reg_campaign' as join_type\nfrom ${Database}.temp.npp_acquisition_type_base b\nleft join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                           and b.acquisition_registration_campaign = tc.registration_campaign\nwhere (b.acquisition_registration_campaign > '')\n    and b.acquisition_source_brand_id is null\n    and tc.acquisition_source_brand_id is null\n    and contains(lower(tc.source_old_new),'new')\nunion all\n--new source - has null registration_campaign and null brand_id\n--hard coding as Website Registrations\nselect     distinct\n    b.cid,\n    b.acquisition_source,\n    '' as acquisition_source_file,\n    b.acquisition_source_brand_id,\n    b.acquisition_registration_campaign,\n    'Website Registrations' as acquisition_type,\n    tc.acquisition_channel,\n    '4 - all null' as join_type\nfrom ${Database}.temp.npp_acquisition_type_base b\ninner join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                            and tc.acquisition_source_brand_id is null\n                                            and (tc.registration_campaign = '' or tc.registration_campaign is null)\nwhere (b.acquisition_registration_campaign is null or b.acquisition_registration_campaign = '')\n    and b.acquisition_source_brand_id is null\n    and not contains(upper(b.acquisition_source),'NPP')\nunion all\n--old source - non-null acquisition_source_brand_id\nselect     distinct \n    b.cid,\n    b.acquisition_source,\n    b.acquisition_source_file,\n    b.acquisition_source_brand_id,\n    '' as acquisition_registration_campaign,\n    tc.acquisition_type,\n    tc.acquisition_channel,\n    '5 - populated acquisition_source_brand_id ' as join_type\nfrom ${Database}.temp.npp_acquisition_type_base b\nleft join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                           and b.acquisition_source_file = tc.acquisition_source_file\n                                           and b.acquisition_source_brand_id = tc.acquisition_source_brand_id\nwhere contains(lower(tc.source_old_new),'old')\n    and b.acquisition_source_brand_id is not null\nunion all\n--old source - has null acquisition_source_brand_id\nselect     distinct \n    b.cid,\n    b.acquisition_source,\n    b.acquisition_source_file,\n    b.acquisition_source_brand_id,\n    '' as acquisition_registration_campaign,\n    tc.acquisition_type,\n    tc.acquisition_channel,\n    '6 - null acquisition_source_brand_id ' as join_type\nfrom ${Database}.temp.npp_acquisition_type_base b\nleft join ${Database}.db.ref_acquisition_type tc on b.acquisition_source = tc.acquisition_source\n                                           and b.acquisition_source_file = tc.acquisition_source_file\nwhere contains(lower(tc.source_old_new),'old')\n    and b.acquisition_source_brand_id is null;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_core_rollups',\n    '${Database}.temp.ref_acquisition_type_joined',\n    'total records',\n    cast(count(*) as varchar),\n    current_timestamp \nfrom ${Database}.temp.ref_acquisition_type_joined;\n\n--to output email with any missing ones that need actioning\ndrop table if exists ${Database}.jobs.npp_acquisition_types_missing;\ncreate table ${Database}.jobs.npp_acquisition_types_missing\nas\nselect\n    b.acquisition_source, \n    rb.brand,\n    b.acquisition_registration_campaign,\n    count(b.cid) as volume\nfrom ${Database}.temp.npp_acquisition_type_base b\nleft join ${Database}.live.ref_brand rb on b.acquisition_source_brand_id = rb.brand_id\nwhere cid not in (select cid from ${Database}.temp.ref_acquisition_type_joined)\ngroup by 1,2,3\n;\n\n--final cid bu table\ndrop table if exists ${Database}.live.cid_business_unit ;  \nCREATE OR REPLACE TABLE ${Database}.live.cid_business_unit \nas\nselect \n    to_char(xr.bbw_urn)||'-'||to_char(dp.business_unit_id) as cid_business_unit_urn,\n    ci.cid,\n    dp.business_unit_id,\n   case \n        when dp.customer_retention_group_base = 1 then 'Safe'\n        when dp.customer_retention_group_base = 2 then 'Re-consent'\n        when gnc.cid is not null then 'Safe'\n        when dp.customer_retention_group_base = 3 then 'New'\n        when dp.customer_retention_group_base = 4 then 'At Risk'\n        when dp.customer_retention_group_base = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base = 6 then 'Gone this month'\n        when dp.customer_retention_group_base = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_business_unit,\n   case \n        when dp.customer_retention_group_base_ios15 = 1 then 'Safe'\n        when dp.customer_retention_group_base_ios15 = 2 then 'Re-consent'\n        when gnc15.cid is not null then 'Safe'\n        when dp.customer_retention_group_base_ios15 = 3 then 'New'\n        when dp.customer_retention_group_base_ios15 = 4 then 'At Risk'\n        when dp.customer_retention_group_base_ios15 = 5 then 'Data Orphan'\n        when dp.customer_retention_group_base_ios15 = 6 then 'Gone this month'\n        when dp.customer_retention_group_base_ios15 = 7 then 'Anonymise'\n        else 'Other'\n    end as customer_retention_group_business_unit_ios15,\n    dp.customer_retention_group_date as customer_retention_date_business_unit,\n    dp.customer_retention_group_date_ios15 as customer_retention_date_business_unit_ios15,\n    dp.customer_retention_group_expiry_date as customer_retention_expiry_date_business_unit,\n    dp.customer_retention_group_expiry_date_ios15 as customer_retention_expiry_date_business_unit_ios15,\n    dp.dp_processing_expiry_date,\n    dp.dp_processing_expiry_date_ios15,\n    dp.dp_last_date as last_subscription_date_business_unit,\n    dp.last_open_date as last_email_open_date_business_unit,\n    dp.last_open_date_ios15 as last_email_open_date_business_unit_ios15,\n    cdb.first_date_business_unit,\n    cdb.last_date_business_unit,  \n    case \n        when dp.emailable = 1 or dp.emailable_newsletter = 1 then ''\n        when customer_suppression_group_base = 1 then 'Deceased TM'\n        when customer_suppression_group_base = 2 then 'Deceased'\n        when customer_suppression_group_base = 3 then 'Manual TM'\n        when customer_suppression_group_base = 4 then 'Manual'\n        when customer_suppression_group_base = 5 then 'Bounce TM'\n        when customer_suppression_group_base = 6 then 'Bounce'\n        when customer_suppression_group_base = 7 then 'Unsub TM'\n        when customer_suppression_group_base = 8 then 'Unsub'\n        when customer_suppression_group_base = 9 then 'Opt-Out TM'\n        when customer_suppression_group_base = 10 then 'Opt-Out'\n        when customer_suppression_group_base = 11 then 'Engagement'\n        else 'Misc'\n    end as customer_suppression_group_business_unit,     \n    --    contactable status  \n    case when dp.mailable = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable,\n    case when dp.emailable = 1 then 1 else 0 end as emailable,\n    dp.emailable_first_date,\n    dp.emailable_first_source,\n    dp.emailable_last_date,\n    dp.emailable_last_source,\n    case when dp.emailable_newsletter = 1 then 1 else 0 end as emailable_newsletter,\n    case when dp.mailable_ignoring_dp = 1 and ci.mailable_ignoring_dp = 1 then 1 else 0 end as mailable_ignoring_dp,\n    case when dp.emailable_ignoring_dp = 1 then 1 else 0 end as emailable_ignoring_dp,\n    cast(regexp_replace(coalesce(\n        case \n            when dp.emailable = 1 or dp.emailable_newsletter = 1 then collate(dp.email,'')\n            else '' \n        end, ''),'[\\x00-\\x1F|\\x7F]','') as nvarchar(100)) as email_business_unit,\n        coalesce(acq.acquisition_type, '') as acquisition_type,\n    coalesce(acq.acquisition_channel,'') as acquisition_channel\nfrom ${Database}.temp.build_rollups_cid_base ci\ninner join ${Database}.temp.names_supps_dp_business_unit dp on ci.cid = dp.cid\ninner join ${Database}.temp.xref_cid_email                   xr   on dp.cid = xr.cid\n                                                            and dp.email = xr.email\nleft join ${Database}.temp.build_rollups_cid_bu_base cdb on dp.cid = cdb.cid \n                                                   and dp.business_unit_id = cdb.business_unit_id\nleft join ${Database}.temp.group_business_new_check gnc on dp.cid = gnc.cid\n                                                  and dp.business_unit_id = gnc.business_unit_id\nleft join ${Database}.temp.group_business_new_check_ios15 gnc15 on dp.cid = gnc15.cid\n                                                  and dp.business_unit_id = gnc15.business_unit_id\nleft join ${Database}.temp.ref_acquisition_type_joined acq on acq.cid = ci.cid\n                                                     and dp.business_unit_id = 5\n                                                     and cdb.first_date_business_unit is not null;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_core_rollups',\n    '${Database}.live.cid_business_unit',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_business_unit;   \n\n\n--update risk segment of non-anonymised lapsed customer when customer_retention_group_business_unit='new'\nmerge into ${Database}.live.cid c\nusing (\n          select distinct\n              cid\n          from ${Database}.live.cid_business_unit\n          where business_unit_id = 5\n              and customer_retention_group_business_unit='New'\n      ) cbu on c.cid = cbu.cid\nwhen matched and c.purina_lapse_risk_segment in ('Very High Risk','High Risk') then update\nset c.purina_lapse_risk_segment = 'Medium Risk';\n\n\n/******************************************************************************************\n                                       FINISH PROC\n******************************************************************************************/\n\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_core_rollups',\n    '*************************',\n    '*************************',\n    'end of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;  \n  \n\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"197250":{"id":197250,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-432,"y":-64,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[197202],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Start","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"197203":{"id":197203,"sourceID":197249,"targetID":197248}},"failureConnectors":{},"unconditionalConnectors":{"197202":{"id":197202,"sourceID":197250,"targetID":197249}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{"197200":{"id":197200,"x":-34,"y":-72,"width":317,"height":71,"text":"This creates several **live** schema tables that are the Core of Nestle reporting and campaigns.\n\nSee top rows of Rollups SQL script for list of tables created.","colour":"00ce4f"}},"variables":{},"grids":{}},"info":{"name":"Proc12_CoreTables","description":"Proc12 CoreTables","type":"ORCHESTRATION","tag":"d233cdc8-7474-4719-83da-3293b8c184e0"}}