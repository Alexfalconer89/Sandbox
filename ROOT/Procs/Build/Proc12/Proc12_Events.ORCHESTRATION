{"job":{"components":{"197184":{"id":197184,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-432,"y":-64,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[197188],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Start","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"197190":{"id":197190,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-197,"y":-59,"width":32,"height":32,"inputConnectorIDs":[197189],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Drop Events Temp Tables"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nProgram           : Drop Events Rollups Temp Tables\nAuthor            : Lee Wallis\nClient Name       : Nestle\nJob Number        : HH010177 \nStandard Machine  : Snowflake\nAmendment History : v01 - Split of Event data from the original Proc12 process\n******************************************************************************************/\n\n/******************************************************************************************\n                             DROP EVENTS ROLLUPS TEMP TABLES\n******************************************************************************************/\ndrop table if exists ${Database}.temp.build_comms_history ; \n--drop table if exists ${Database}.temp.build_comms_history_lookup ; --required in Core table creation\ndrop table if exists ${Database}.temp.adestra_events_no_xref;\ndrop table if exists ${Database}.temp.adestra_events_in_xref;\ndrop table if exists ${Database}.temp.mapp_events_in_xref;\ndrop table if exists ${Database}.temp.mapp_events_no_xref;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"197191":{"id":197191,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-301,"y":-65,"width":32,"height":32,"inputConnectorIDs":[197188],"outputSuccessConnectorIDs":[197189],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Events_rollup"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nProgram           : Events Rollups\nAuthor            : Lindsay Timms / Lee Wallis\nClient Name       : Nestle\nJob Number        : HH010177 \nStandard Machine  : Snowflake\nAmendment History : v01 - Split of Event data from the original Proc12 process\n******************************************************************************************/\n\n/*\n\t\tTABLES CREATED:\n        live.adestra_events\n        \n        TABLES UPDATED:\n        [none]\n*/\n\n/******************************************************************************************\n                                   EVENTS ROLLUPS\n******************************************************************************************/\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_events_rollups',\n    '*************************',\n    '*************************',\n    'start of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;  \n\n\ndrop table if exists ${Database}.temp.build_comms_history ; \nCREATE OR REPLACE TABLE ${Database}.temp.build_comms_history\nas \nselect \n    nm.cid,\n    ch.control_cell,\n    trim(ch.name_urn) as name_urn,\n    ch.drop_date,\n    ch.response_date,\n    ch.data_brand_id,\n    lower(trim(ch.email)) as email,\n    ch.brand_preference,\n    ch.brand_engagement,\n    trim(ch.programme_id)||'|'||trim(ch.campaign_id)||'|'||trim(ch.promotion_id)||'|'||trim(ch.cell_id)||'|'||trim(ch.pack_id) as packid\nfrom ${Database}.db.comms_hist ch\ninner join ${Database}.live.names nm on trim(ch.name_urn) = nm.name_urn;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_events_rollups',\n    '${Database}.temp.build_comms_history',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_comms_history;\n\n\ndrop table if exists ${Database}.temp.build_comms_history_lookup ;\nCREATE OR REPLACE TABLE ${Database}.temp.build_comms_history_lookup\nas\nselect *,\n    trim(programme_id)||'|'||trim(campaign_id)||'|'||trim(promotion_id)||'|'||trim(cell_id)||'|'||trim(pack_id) as packid\nfrom ${Database}.db.comms_hist_lookup;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_events_rollups',\n    '${Database}.temp.build_comms_history_lookup',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_comms_history_lookup;\n\n\n/*\n\tAdestra responses\n*/    \n\n--create version of adestra table with all campaigns that are in the xref\ndrop table if exists ${Database}.temp.adestra_events_in_xref;\nCREATE OR REPLACE TABLE ${Database}.temp.adestra_events_in_xref\nas\nselect\n    trim(ae.email) as EMAIL,\n\ttrim(ae.name_urn) as NAME_URN,\n\ttrim(ae.amf_id) as AMF_ID,\n\ttrim(ae.campaign_id) as CAMPAIGN_ID,\n\ttrim(ae.campaign_name) as CAMPAIGN_NAME,\n\ttrim(ae.event_name) as EVENT_NAME,\n\tae.event_timestamp,\n\ttrim(ae.link_label) as LINK_LABEL,\n\ttrim(ae.link_url) as LINK_URL,\n\ttrim(ae.form_builder_id) as FORM_BUILDER_ID,\n    trim(ae.email_client) as email_client,\n    trim(ae.email_client_type) as email_client_type,\n    trim(ae.browser) as browser,\n\ttrim(ae.kog_pack) as KOG_PACK,\n\ttrim(ae.source_file) as SOURCE_FILE,\n\tae.source_date,\n    trim(xr.ch_campaign_id) as ch_campaign_id\nfrom ${Database}.db.adestra_events ae\ninner join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(trim(ae.campaign_name)) = lower(trim(xr.adestra_campaign_name))\n                                                           and trim(xr.adestra_campaign_name) <> ''\nwhere ae.name_urn <> '999999';\n\n--create version of adestra table with all campaign that are not in the xref\ndrop table if exists ${Database}.temp.adestra_events_no_xref;\nCREATE OR REPLACE TABLE ${Database}.temp.adestra_events_no_xref\nas\nselect\n    trim(ae.email) as EMAIL,\n\ttrim(ae.name_urn) as NAME_URN,\n\ttrim(ae.amf_id) as AMF_ID,\n\ttrim(ae.campaign_id) as CAMPAIGN_ID,\n\ttrim(ae.campaign_name) as CAMPAIGN_NAME,\n\ttrim(ae.event_name) as EVENT_NAME,\n\tae.event_timestamp,\n\ttrim(ae.link_label) as LINK_LABEL,\n\ttrim(ae.link_url) as LINK_URL,\n\ttrim(ae.form_builder_id) as FORM_BUILDER_ID,\n    trim(ae.email_client) as email_client,\n    trim(ae.email_client_type) as email_client_type,\n    trim(ae.browser) as browser,\n\ttrim(ae.kog_pack) as KOG_PACK,\n\ttrim(ae.source_file) as SOURCE_FILE,\n\tae.source_date\nfrom ${Database}.db.adestra_events ae\nleft join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(trim(ae.campaign_name)) = lower(trim(xr.adestra_campaign_name))\n                                                          and trim(xr.adestra_campaign_name) <> ''\nwhere xr.adestra_campaign_name is null\n    and ae.name_urn <> '999999';\n\n\n--insert the ones that are in the lookup and have a name_urn\ndrop table if exists ${Database}.live.adestra_events ;  \ncreate or replace table ${Database}.live.adestra_events \nas \nselect distinct\n    'Adestra' as platform,\n    nm.cid,\n    ch.campaign_id,\n    lower(ae.email) as email,\n    ae.amf_id,\n    ae.campaign_id as adestra_campaign_id,\n    ae.campaign_name as adestra_campaign_name,\n    ae.event_name,\n    ae.event_timestamp,\n    case when ae.event_name ilike '%form_builder_click%' then 'DC | Service | Web Form'\n\t\t\t when ae.event_name ilike '%form_click%' then 'DC | Service | Web Form'\n             when ae.event_name ilike '%webversion_click%' then 'O | Generic | View in Browser'\n             else  coalesce(rll.link_label, ae.link_label)\n    end as link_label,\n    ae.link_url,\n    ae.form_builder_id,\n    ae.email_client,\n    ae.email_client_type,\n    ae.browser,\n\tcoalesce(ae.kog_pack,'') as kog_pack,\n    ae.source_file,\n    ae.source_date\nfrom ${Database}.temp.adestra_events_in_xref ae --the name_urn on here is only historic - assume only email now supplied\ninner join ${Database}.live.xref_name_urn nm on ae.name_urn = nm.name_urn --get all the old ones\ninner join ${Database}.temp.build_comms_history_lookup ch on lower(ch.campaign_id) = lower(ae.ch_campaign_id)\nleft join ${Database}.db.ref_link_label rll on trim(ae.link_url) = trim(rll.link_url)\n                                      and trim(lower(ae.campaign_name)) = trim(lower(rll.campaign_name)) \nwhere ae.name_urn > '';\n\n\n--insert the ones that are in the lookup with no name_urn\ninsert into ${Database}.live.adestra_events \nselect distinct\n    'Adestra' as platform,\n    nm.cid,\n    ch.campaign_id,\n    lower(ae.email) as email,\n    ae.amf_id,\n    ae.campaign_id as adestra_campaign_id,\n    ae.campaign_name,\n    ae.event_name,\n    ae.event_timestamp,\n    case when ae.event_name ilike '%form_builder_click%' then 'DC | Service | Web Form'\n\t\t\t when ae.event_name ilike '%form_click%' then 'DC | Service | Web Form'\n             when ae.event_name ilike '%webversion_click%' then 'O | Generic | View in Browser'\n             else  coalesce(rll.link_label, ae.link_label)\n    end as link_label,\n    ae.link_url,\n    ae.form_builder_id,\n    ae.email_client,\n    ae.email_client_type,\n    ae.browser,\n\tcoalesce(ae.kog_pack,'') as kog_pack,\n    ae.source_file,\n    ae.source_date\nfrom ${Database}.temp.adestra_events_in_xref ae --the name_urn on here is only historic - assume only email now supplied\ninner join ${Database}.live.xref_email nm on lower(ae.email) = nm.email --use this as it is all email addresses on the db\ninner join ${Database}.temp.build_comms_history_lookup ch on lower(ch.campaign_id) = lower(ae.ch_campaign_id)\ninner join ${Database}.temp.build_comms_history chb on chb.packid = ch.packid \n                                        and chb.cid = nm.cid\nleft join ${Database}.db.ref_link_label rll on trim(ae.link_url) = trim(rll.link_url)\n                                      and trim(lower(ae.campaign_name)) = trim(lower(rll.campaign_name))                                         \n\nwhere ae.name_urn = '';\n\n\n--insert the ones that are not in the lookup but with name_urn\ninsert into ${Database}.live.adestra_events \nselect distinct\n    'Adestra' as platform,\n    nm.cid,\n    ch.campaign_id,\n    lower(ae.email) as email,\n    ae.amf_id,\n    ae.campaign_id as adestra_campaign_id,\n    ae.campaign_name,\n    ae.event_name,\n    ae.event_timestamp,\n    case when ae.event_name ilike '%form_builder_click%' then 'DC | Service | Web Form'\n\t\t\t when ae.event_name ilike '%form_click%' then 'DC | Service | Web Form'\n             when ae.event_name ilike '%webversion_click%' then 'O | Generic | View in Browser'\n             else  coalesce(rll.link_label, ae.link_label)\n    end as link_label,\n    ae.link_url,\n    ae.form_builder_id,\n    ae.email_client,\n    ae.email_client_type,\n    ae.browser,\n\tcoalesce(ae.kog_pack,'') as kog_pack,\n    ae.source_file,\n    ae.source_date\nfrom ${Database}.temp.adestra_events_no_xref ae --the name_urn on here is only historic - assume only email now supplied\ninner join ${Database}.live.xref_name_urn nm on ae.name_urn = nm.name_urn\ninner join ${Database}.temp.build_comms_history_lookup ch on ch.programme_id = 'E' \n                                              and lower(ch.campaign_id) = lower(case when ae.campaign_name ilike '%_MTE_%' then tbw.db.strchop(ae.campaign_name,'_',1,3) else tbw.db.strchop(ae.campaign_name,'_',1,1) end)\nleft join ${Database}.db.ref_link_label rll on trim(ae.link_url) = trim(rll.link_url)\n                                      and trim(lower(ae.campaign_name)) = trim(lower(rll.campaign_name))                                              \nwhere ae.name_urn > '';\n\n\n--insert the ones that are not in the lookup with no name_urn\ninsert into ${Database}.live.adestra_events \nselect distinct\n    'Adestra' as platform, \n    nm.cid,\n    ch.campaign_id,\n    lower(ae.email) as email,\n    ae.amf_id,\n    ae.campaign_id as adestra_campaign_id,\n    ae.campaign_name,\n    ae.event_name,\n    ae.event_timestamp,\n    case when ae.event_name ilike '%form_builder_click%' then 'DC | Service | Web Form'\n\t\t\t when ae.event_name ilike '%form_click%' then 'DC | Service | Web Form'\n             when ae.event_name ilike '%webversion_click%' then 'O | Generic | View in Browser'\n             else  coalesce(rll.link_label, ae.link_label)\n    end as link_label,\n    ae.link_url,\n    ae.form_builder_id,\n    ae.email_client,\n    ae.email_client_type,\n    ae.browser,\n\tcoalesce(ae.kog_pack,'') as kog_pack,\n    ae.source_file,\n    ae.source_date\nfrom ${Database}.temp.adestra_events_no_xref ae --the name_urn on here is only historic - assume only email now supplied\ninner join ${Database}.live.xref_email nm on lower(ae.email) = nm.email --use this as it is all email addresses on the db\ninner join ${Database}.temp.build_comms_history_lookup ch on ch.programme_id = 'E' \n                                              and lower(ch.campaign_id) = lower(case when ae.campaign_name ilike '%_MTE_%' then tbw.db.strchop(ae.campaign_name,'_',1,3) else tbw.db.strchop(ae.campaign_name,'_',1,1) end)\ninner join ${Database}.temp.build_comms_history chb on chb.packid = ch.packid \n                                        and chb.cid = nm.cid \nleft join ${Database}.db.ref_link_label rll on trim(ae.link_url) = trim(rll.link_url)\n                                      and trim(lower(ae.campaign_name)) = trim(lower(rll.campaign_name))\nwhere ae.name_urn = '';\n\n/*\n\t\tMapp responses\n*/\n\n--create version of mapp table with all campaigns that are in the xref\ndrop table if exists ${Database}.temp.mapp_events_in_xref;\nCREATE OR REPLACE TABLE ${Database}.temp.mapp_events_in_xref\nas\nselect\n    mp.senttomta_timestamp,\n\ttrim(mp.senttomta_externaltransactionid) as senttomta_externaltransactionid,\n\ttrim(mp.senttomta_sendoutchannel) as senttomta_sendoutchannel,\n\tmp.skip_timestamp,\n\ttrim(mp.skip_category) as skip_category,\n\ttrim(mp.skip_externaltransactionid) as skip_externaltransactionid,\n\tmp.bounce_timestamp,\n\ttrim(mp.bounce_category) as bounce_category,\n\ttrim(mp.bounce_text) as bounce_text,\n\tmp.feedback_timestamp,\n\ttrim(mp.feedback_category) as feedback_category,\n\tmp.render_timestamp,\n\ttrim(mp.render_geolocation_isocountrycode) as render_geolocation_isocountrycode,\n\ttrim(mp.render_geolocation_regioncode) as render_geolocation_regioncode,\n\ttrim(mp.render_geolocation_city) as render_geolocation_city,\n\ttrim(mp.render_geolocation_latitude) as render_geolocation_latitude,\n\ttrim(mp.render_geolocation_longitude) as render_geolocation_longitude,\n\ttrim(mp.render_useragent_platform) as render_useragent_platform,\n\ttrim(mp.render_useragent_operatingsystemname) as render_useragent_operatingsystemname,\n\ttrim(mp.render_useragent_operatingsystemversion) as render_useragent_operatingsystemversion,\n\ttrim(mp.render_useragent_clientname) as render_useragent_clientname,\n\ttrim(mp.render_useragent_clientversion) as render_useragent_clientversion,\n\ttrim(mp.render_useragent_rawstring) as render_useragent_rawstring,\n\tmp.click_timestamp,\n\ttrim(mp.click_link_id) as click_link_id,\n\ttrim(mp.click_link_category_id) as click_link_category_id,\n\ttrim(mp.click_link_category_name) as click_link_category_name,\n\ttrim(mp.click_link_url) as click_link_url,\n\ttrim(mp.click_link_systemlinktype) as click_link_systemlinktype,\n\ttrim(mp.click_link_type) as click_link_type,\n\ttrim(mp.click_geolocation_isocountrycode) as click_geolocation_isocountrycode,\n\ttrim(mp.click_geolocation_regioncode) as click_geolocation_regioncode,\n\ttrim(mp.click_geolocation_city) as click_geolocation_city,\n\ttrim(mp.click_geolocation_latitude) as click_geolocation_latitude,\n\ttrim(mp.click_geolocation_longitude) as click_geolocation_longitude,\n\ttrim(mp.click_useragent_platform) as click_useragent_platform,\n\ttrim(mp.click_useragent_operatingsystem) as click_useragent_operatingsystem,\n\ttrim(mp.click_useragent_operatingsystemversion) as click_useragent_operatingsystemversion,\n\ttrim(mp.click_useragent_clientname) as click_useragent_clientname,\n\ttrim(mp.click_useragent_clientversion) as click_useragent_clientversion,\n\ttrim(mp.click_useragent_rawstring) as click_useragent_rawstring,\n\tmp.unsubscribe_timestamp,\n\tmp.forward_timestamp,\n\tmp.conversion_cp_timestamp,\n\ttrim(mp.conversion_cp_id) as conversion_cp_id,\n\ttrim(mp.conversion_cp_name) as conversion_cp_name,\n\ttrim(mp.conversion_cp_orderid) as conversion_cp_orderid,\n\ttrim(mp.conversion_cp_itemcount) as conversion_cp_itemcount,\n\ttrim(mp.conversion_cp_amount) as conversion_cp_amount,\n\ttrim(mp.conversion_cp_requestparameters) as conversion_cp_requestparameters,\n\ttrim(mp.group_id) as group_id,\n\ttrim(mp.group_name) as group_name,\n\ttrim(mp.group_email) as group_email,\n\ttrim(mp.group_category_id) as group_category_id,\n\ttrim(mp.group_category_name) as group_category_name,\n\ttrim(mp.message_id) as message_id,\n\ttrim(mp.message_name) as message_name,\n\ttrim(mp.message_category_id) as message_category_id,\n\ttrim(mp.message_category_name) as message_category_name,\n\ttrim(mp.message_subject_unresolved) as message_subject_unresolved,\n\ttrim(mp.message_externalid) as message_externalid,\n\ttrim(mp.message_type) as message_type,\n\ttrim(mp.message_variation_id) as message_variation_id,\n\ttrim(mp.selection_id) as selection_id,\n\ttrim(mp.selection_name) as selection_name,\n\tmp.record_timestamp,\n\ttrim(mp.record_type) as record_type,\n\tmp.record_senttomta_timestamp,\n\ttrim(mp.record_externaltransactionid) as record_externaltransactionid,\n\ttrim(mp.sendout_type) as sendout_type,\n\ttrim(mp.sendout_addresseerole) as sendout_addresseerole,\n\ttrim(mp.sendout_recipienttype) as sendout_recipienttype,\n\ttrim(mp.user_id) as user_id,\n\ttrim(mp.user_email) as user_email,\n\ttrim(mp.user_mobilenumber) as user_mobilenumber,\n\ttrim(mp.user_faxnumber) as user_faxnumber,\n\ttrim(mp.user_identifier) as user_identifier,\n\ttrim(mp.user_custom_attribute_batch) as user_custom_attribute_batch,\n\ttrim(mp.user_custom_attribute_cell) as user_custom_attribute_cell,\n\ttrim(mp.user_custom_attribute_name_urn) as user_custom_attribute_name_urn,\n\ttrim(mp.source_file) as source_file,\n\tmp.source_date,\n    xr.ch_campaign_id\nfrom ${Database}.db.mapp_events mp\ninner join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(trim(mp.message_name)) = lower(trim(xr.mapp_message_name))\n                                                           and trim(xr.mapp_message_name) <> '';\n\n\n--create version of mapp table with all campaigns that are in the xref\ndrop table if exists ${Database}.temp.mapp_events_no_xref;\nCREATE OR REPLACE TABLE ${Database}.temp.mapp_events_no_xref\nas\nselect\n    mp.senttomta_timestamp,\n\ttrim(mp.senttomta_externaltransactionid) as senttomta_externaltransactionid,\n\ttrim(mp.senttomta_sendoutchannel) as senttomta_sendoutchannel,\n\tmp.skip_timestamp,\n\ttrim(mp.skip_category) as skip_category,\n\ttrim(mp.skip_externaltransactionid) as skip_externaltransactionid,\n\tmp.bounce_timestamp,\n\ttrim(mp.bounce_category) as bounce_category,\n\ttrim(mp.bounce_text) as bounce_text,\n\tmp.feedback_timestamp,\n\ttrim(mp.feedback_category) as feedback_category,\n\tmp.render_timestamp,\n\ttrim(mp.render_geolocation_isocountrycode) as render_geolocation_isocountrycode,\n\ttrim(mp.render_geolocation_regioncode) as render_geolocation_regioncode,\n\ttrim(mp.render_geolocation_city) as render_geolocation_city,\n\ttrim(mp.render_geolocation_latitude) as render_geolocation_latitude,\n\ttrim(mp.render_geolocation_longitude) as render_geolocation_longitude,\n\ttrim(mp.render_useragent_platform) as render_useragent_platform,\n\ttrim(mp.render_useragent_operatingsystemname) as render_useragent_operatingsystemname,\n\ttrim(mp.render_useragent_operatingsystemversion) as render_useragent_operatingsystemversion,\n\ttrim(mp.render_useragent_clientname) as render_useragent_clientname,\n\ttrim(mp.render_useragent_clientversion) as render_useragent_clientversion,\n\ttrim(mp.render_useragent_rawstring) as render_useragent_rawstring,\n\tmp.click_timestamp,\n\ttrim(mp.click_link_id) as click_link_id,\n\ttrim(mp.click_link_category_id) as click_link_category_id,\n\ttrim(mp.click_link_category_name) as click_link_category_name,\n\ttrim(mp.click_link_url) as click_link_url,\n\ttrim(mp.click_link_systemlinktype) as click_link_systemlinktype,\n\ttrim(mp.click_link_type) as click_link_type,\n\ttrim(mp.click_geolocation_isocountrycode) as click_geolocation_isocountrycode,\n\ttrim(mp.click_geolocation_regioncode) as click_geolocation_regioncode,\n\ttrim(mp.click_geolocation_city) as click_geolocation_city,\n\ttrim(mp.click_geolocation_latitude) as click_geolocation_latitude,\n\ttrim(mp.click_geolocation_longitude) as click_geolocation_longitude,\n\ttrim(mp.click_useragent_platform) as click_useragent_platform,\n\ttrim(mp.click_useragent_operatingsystem) as click_useragent_operatingsystem,\n\ttrim(mp.click_useragent_operatingsystemversion) as click_useragent_operatingsystemversion,\n\ttrim(mp.click_useragent_clientname) as click_useragent_clientname,\n\ttrim(mp.click_useragent_clientversion) as click_useragent_clientversion,\n\ttrim(mp.click_useragent_rawstring) as click_useragent_rawstring,\n\tmp.unsubscribe_timestamp,\n\tmp.forward_timestamp,\n\tmp.conversion_cp_timestamp,\n\ttrim(mp.conversion_cp_id) as conversion_cp_id,\n\ttrim(mp.conversion_cp_name) as conversion_cp_name,\n\ttrim(mp.conversion_cp_orderid) as conversion_cp_orderid,\n\ttrim(mp.conversion_cp_itemcount) as conversion_cp_itemcount,\n\ttrim(mp.conversion_cp_amount) as conversion_cp_amount,\n\ttrim(mp.conversion_cp_requestparameters) as conversion_cp_requestparameters,\n\ttrim(mp.group_id) as group_id,\n\ttrim(mp.group_name) as group_name,\n\ttrim(mp.group_email) as group_email,\n\ttrim(mp.group_category_id) as group_category_id,\n\ttrim(mp.group_category_name) as group_category_name,\n\ttrim(mp.message_id) as message_id,\n\ttrim(mp.message_name) as message_name,\n\ttrim(mp.message_category_id) as message_category_id,\n\ttrim(mp.message_category_name) as message_category_name,\n\ttrim(mp.message_subject_unresolved) as message_subject_unresolved,\n\ttrim(mp.message_externalid) as message_externalid,\n\ttrim(mp.message_type) as message_type,\n\ttrim(mp.message_variation_id) as message_variation_id,\n\ttrim(mp.selection_id) as selection_id,\n\ttrim(mp.selection_name) as selection_name,\n\tmp.record_timestamp,\n\ttrim(mp.record_type) as record_type,\n\tmp.record_senttomta_timestamp,\n\ttrim(mp.record_externaltransactionid) as record_externaltransactionid,\n\ttrim(mp.sendout_type) as sendout_type,\n\ttrim(mp.sendout_addresseerole) as sendout_addresseerole,\n\ttrim(mp.sendout_recipienttype) as sendout_recipienttype,\n\ttrim(mp.user_id) as user_id,\n\ttrim(mp.user_email) as user_email,\n\ttrim(mp.user_mobilenumber) as user_mobilenumber,\n\ttrim(mp.user_faxnumber) as user_faxnumber,\n\ttrim(mp.user_identifier) as user_identifier,\n\ttrim(mp.user_custom_attribute_batch) as user_custom_attribute_batch,\n\ttrim(mp.user_custom_attribute_cell) as user_custom_attribute_cell,\n\ttrim(mp.user_custom_attribute_name_urn) as user_custom_attribute_name_urn,\n\ttrim(mp.source_file) as source_file,\n\tmp.source_date,\n    xr.ch_campaign_id\nfrom ${Database}.db.mapp_events mp\nleft join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(trim(mp.message_name)) = lower(trim(xr.mapp_message_name))\n                                                           and trim(xr.mapp_message_name) <> ''\nwhere xr.mapp_message_name is null;\n\n\n--insert the ones that are in the lookup and have a name_urn\ninsert into ${Database}.live.adestra_events\nselect distinct\n    'Mapp' as platform,\n    xr.cid,\n    chl.campaign_id,\n    lower(mp.user_email) as email,\n    '' as amf_id,\n    mp.message_id as adestra_campaign_id,\n    mp.message_name as adestra_campaign_name,\n    case\n        when mp.record_type = 'SentToMTA' then 'sent_campaign'\n        when mp.record_type = 'Render' then 'read'\n        when mp.record_type = 'Click' then 'click'\n        when mp.record_type = 'Bounce' then 'inbound_bounce'\n        when mp.record_type = 'Feedback' then 'feedback'\n        when mp.record_type = 'Skip' then 'skip'\n        else lower(mp.record_type)\n    end as event_name,\n    mp.record_timestamp as event_timestamp,\n    coalesce(trim(rll.link_label), mp.click_link_category_name) as link_label,\n    mp.click_link_url as link_url,\n    '' as form_builder_id,\n    '' as email_client,\n    '' as email_client_type,\n    '' as browser,\n    '' as kog_pack,\n    mp.source_file,\n    mp.source_date\nfrom ${Database}.temp.mapp_events_in_xref mp\ninner join ${Database}.live.xref_name_urn xr on mp.user_custom_attribute_name_urn = xr.name_urn\ninner join ${Database}.temp.build_comms_history_lookup chl on lower(chl.campaign_id) = lower(mp.ch_campaign_id)\nleft join ${Database}.db.ref_link_label rll on trim(mp.click_link_url) = trim(rll.link_url)\n                                      and trim(lower(mp.message_name)) = trim(lower(rll.campaign_name))                                        \nwhere mp.user_custom_attribute_name_urn > '';\n    \n\n--insert the ones that are in the lookup with no name_urn\ninsert into ${Database}.live.adestra_events\nselect distinct\n    'Mapp' as platform,\n    xr.cid,\n    chl.campaign_id,\n    lower(mp.user_email) as email,\n    '' as amf_id,\n    mp.message_id as adestra_campaign_id,\n    mp.message_name as adestra_campaign_name,\n    case\n        when mp.record_type = 'SentToMTA' then 'sent_campaign'\n        when mp.record_type = 'Render' then 'read'\n        when mp.record_type = 'Click' then 'click'\n        when mp.record_type = 'Bounce' then 'inbound_bounce'\n        when mp.record_type = 'Feedback' then 'feedback'\n        when mp.record_type = 'Skip' then 'skip'\n        else lower(mp.record_type)\n    end as event_name,\n    mp.record_timestamp as event_timestamp,\n    coalesce(trim(rll.link_label), mp.click_link_category_name) as link_label,\n    mp.click_link_url as link_url,\n    '' as form_builder_id,\n    '' as email_client,\n    '' as email_client_type,\n    '' as browser,\n    '' as kog_pack,\n    mp.source_file,\n    mp.source_date\nfrom ${Database}.temp.mapp_events_in_xref mp\ninner join ${Database}.live.xref_email xr on lower(mp.user_email) = lower(xr.email)\ninner join ${Database}.temp.build_comms_history_lookup chl on lower(chl.campaign_id) = lower(mp.ch_campaign_id)\ninner join ${Database}.temp.build_comms_history ch on ch.packid = chl.packid\n                                             and ch.cid = xr.cid\nleft join ${Database}.db.ref_link_label rll on trim(mp.click_link_url) = trim(rll.link_url)\n                                      and trim(lower(mp.message_name)) = trim(lower(rll.campaign_name))\nwhere mp.user_custom_attribute_name_urn = '';\n\n\n--insert the ones that are not in the lookup but with name_urn\ninsert into ${Database}.live.adestra_events\nselect distinct\n    'Mapp' as platform,\n    xr.cid,\n    chl.campaign_id,\n    lower(mp.user_email) as email,\n    '' as amf_id,\n    mp.message_id as adestra_campaign_id,\n    mp.message_name as adestra_campaign_name,\n    case\n        when mp.record_type = 'SentToMTA' then 'sent_campaign'\n        when mp.record_type = 'Render' then 'read'\n        when mp.record_type = 'Click' then 'click'\n        when mp.record_type = 'Bounce' then 'inbound_bounce'\n        when mp.record_type = 'Feedback' then 'feedback'\n        when mp.record_type = 'Skip' then 'skip'\n        else lower(mp.record_type)\n    end as event_name,\n    mp.record_timestamp as event_timestamp,\n    coalesce(trim(rll.link_label), mp.click_link_category_name) as link_label,\n    mp.click_link_url as link_url,\n    '' as form_builder_id,\n    '' as email_client,\n    '' as email_client_type,\n    '' as browser,\n    '' as kog_pack,\n    mp.source_file,\n    mp.source_date\nfrom ${Database}.temp.mapp_events_no_xref mp\ninner join ${Database}.live.xref_name_urn xr on mp.user_custom_attribute_name_urn = xr.name_urn\ninner join ${Database}.temp.build_comms_history_lookup chl on chl.programme_id = 'E'\n                                                     and lower(chl.campaign_id) = lower(case when collate(mp.message_name,'') ilike '%_MTE_%' then tbw.db.strchop(mp.message_name,'_',1,3) else split_part(mp.message_name,'_',1) end)\nleft join ${Database}.db.ref_link_label rll on trim(mp.click_link_url) = trim(rll.link_url)\n                                      and trim(lower(mp.message_name)) = trim(lower(rll.campaign_name))\nwhere mp.user_custom_attribute_name_urn > '';\n\n\n--insert the ones that are not in the lookup with no name_urn\ninsert into ${Database}.live.adestra_events\nselect distinct\n    'Mapp' as platform,\n    xr.cid,\n    chl.campaign_id,\n    lower(mp.user_email) as email,\n    '' as amf_id,\n    mp.message_id as adestra_campaign_id,\n    mp.message_name as adestra_campaign_name,\n    case\n        when mp.record_type = 'SentToMTA' then 'sent_campaign'\n        when mp.record_type = 'Render' then 'read'\n        when mp.record_type = 'Click' then 'click'\n        when mp.record_type = 'Bounce' then 'inbound_bounce'\n        when mp.record_type = 'Feedback' then 'feedback'\n        when mp.record_type = 'Skip' then 'skip'\n        else lower(mp.record_type)\n    end as event_name,\n    mp.record_timestamp as event_timestamp,\n    coalesce(trim(rll.link_label), mp.click_link_category_name) as link_label,\n    mp.click_link_url as link_url,\n    '' as form_builder_id,\n    '' as email_client,\n    '' as email_client_type,\n    '' as browser,\n    '' as kog_pack,\n    mp.source_file,\n    mp.source_date\nfrom ${Database}.temp.mapp_events_no_xref mp\ninner join ${Database}.live.xref_email xr on lower(mp.user_email) = lower(xr.email)\ninner join ${Database}.temp.build_comms_history_lookup chl on chl.programme_id = 'E'\n                                                     and lower(chl.campaign_id) = lower(case when collate(mp.message_name,'') ilike '%_MTE_%' then tbw.db.strchop(mp.message_name,'_',1,3) else split_part(mp.message_name,'_',1) end)\ninner join ${Database}.temp.build_comms_history ch on ch.packid = chl.packid\n                                             and ch.cid = xr.cid\nleft join ${Database}.db.ref_link_label rll on trim(mp.click_link_url) = trim(rll.link_url)\n                                      and trim(lower(mp.message_name)) = trim(lower(rll.campaign_name))                                              \nwhere mp.user_custom_attribute_name_urn = '';\n\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_events_rollups',\n    '${Database}.live.adestra_events',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.adestra_events;\n\n\n\n/******************************************************************************************\n                                       FINISH PROC\n******************************************************************************************/\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_events_rollups',\n    '*************************',\n    '*************************',\n    'end of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;  \n  \n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"197189":{"id":197189,"sourceID":197191,"targetID":197190}},"failureConnectors":{},"unconditionalConnectors":{"197188":{"id":197188,"sourceID":197184,"targetID":197191}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{"197185":{"id":197185,"x":-89,"y":-80,"width":360,"height":75,"text":"This aggregates post email campaign events, primarily from Adestra.\n\nSee top rows of Rollups SQL script for list of tables created.\n","colour":"00ce4f"}},"variables":{},"grids":{}},"info":{"name":"Proc12_Events","description":"Proc12 Events","type":"ORCHESTRATION","tag":"8ebbb978-edb4-42ad-b4ed-fa2c4542c5a1"}}