{"job":{"components":{"197208":{"id":197208,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-432,"y":-64,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[197215],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Start","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"197209":{"id":197209,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-301,"y":-65,"width":32,"height":32,"inputConnectorIDs":[197215],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Others Rollups"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nProgram           : Others Data Rollups\nAuthor            : Lindsay Timms / Lee Wallis\nClient Name       : Nestle\nJob Number        : HH010177 \nStandard Machine  : Snowflake\nAmendment History : v01 - Split of other data from the original Proc12 process\n******************************************************************************************/\n\n/*\n\t\tTABLES CREATED:\n        live.cid_brand_source\n        live.cid_brand_product\n        live.ref_product\n        live.hid\n        live.npp_thg_trans\n        \n        TABLES UPDATED:\n        [none]\n*/\n\n/******************************************************************************************\n                                  OTHER DATA ROLLUPS\n******************************************************************************************/\n\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_others_rollups',\n    '*************************',\n    '*************************',\n    'start of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;  \n\n\n--all sources by brand\ndrop table if exists ${Database}.live.cid_brand_source ;  \nCREATE OR REPLACE TABLE ${Database}.live.cid_brand_source\nas\nselect distinct\n    nm.cid,\n    dbnm.source_brand_id as brand_id,\n    trim(dbnm.source) as source,\n    trim(dbnm.source_file) as source_file,  \n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id, trim(dbnm.source), trim(dbnm.source_file)\n            order by dbnm.data_date nulls last\n        )                                            as first_date_brand_source,    \n    first_value(dbnm.data_date) over \n        (\n            partition by nm.cid, dbnm.source_brand_id, trim(dbnm.source), trim(dbnm.source_file)\n            order by dbnm.data_date desc nulls last\n        )                                            as last_date_brand_source\nfrom ${Database}.live.names nm\ninner join ${Database}.db.names dbnm on trim(dbnm.name_urn) = nm.name_urn\nwhere dbnm.source_brand_id is not null;\n\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_others_rollups',\n    '${Database}.live.cid_brand_source',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_brand_source;\n\n\n\n--all products (affiliations) by brand\ndrop table if exists ${Database}.live.cid_brand_product ;  \nCREATE OR REPLACE TABLE ${Database}.live.cid_brand_product\nas\nselect distinct\n    nm.cid,\n    rp.brand_id,\n    rp.product_id,\n    first_value(pr.data_date) over \n        (\n            partition by nm.cid, rp.brand_id, rp.product_id\n            order by pr.data_date desc nulls last\n        )  as last_date_brand_product\nfrom ${Database}.live.names nm\ninner join ${Database}.db.product pr on trim(pr.name_urn) = nm.name_urn\ninner join ${Database}.db.ref_product rp on pr.product_id = rp.product_id\nwhere rp.brand_id is not null;\n\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_others_rollups',\n    '${Database}.live.cid_brand_product',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_brand_product;\n\ndrop table if exists ${Database}.live.ref_product;\nCREATE OR REPLACE TABLE ${Database}.live.ref_product  \nas\nselect \n    product_id,\n    trim(product_name) as product_name\nfrom ${Database}.db.ref_product;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_others_rollups',\n    '${Database}.live.ref_product',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.ref_product;\n\n\n---------------------\n-- hid\ndrop table if exists ${Database}.live.hid ;  \nCREATE OR REPLACE TABLE ${Database}.live.hid \nas \nselect \n    hid\nfrom ${Database}.temp.build_rollups_cid_base\ngroup by hid;\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_others_rollups',\n    '${Database}.live.hid',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.hid;   \n  \n\n--Create THG Transaction table\ndrop table if exists ${Database}.live.npp_thg_trans;\ncreate table ${Database}.live.npp_thg_trans \nas\nselect nt.*\nfrom ${Database}.db.npp_thg_trans nt\ninner join  --this will give me the set of order detail lines for just the latest dated file for the order\n    (\n        select distinct\n            trim(order_number) as order_number,\n            --just incase 2 files are loaded in the same day and so have the same source date (tried to use datadate but it's a time stamp so different for each detail line...)\n            first_value(trim(source_file)) \n            over\n            (\n                partition by trim(order_number)\n                order by \n                    source_date desc nulls last,  \n                    trim(source_file) desc\n            ) as source_file \n        from ${Database}.db.npp_thg_trans\n    ) sq on trim(nt.order_number) = sq.order_number\n        and trim(nt.source_file) = sq.source_file; --this will give me the 1 latest dated file for the order\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_others_rollups',\n    '${Database}.live.npp_thg_trans',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.npp_thg_trans;  \n\n\n/******************************************************************************************\n                                       FINISH PROC\n******************************************************************************************/\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_others_rollups',\n    '*************************',\n    '*************************',\n    'end of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;  \n  \n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{},"failureConnectors":{},"unconditionalConnectors":{"197215":{"id":197215,"sourceID":197208,"targetID":197209}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{"197210":{"id":197210,"x":-190,"y":-88,"width":360,"height":75,"text":"This creates other **live** schema tables required for Nestle campaigns\n\nSee top rows of Rollups SQL script for list of tables created.\n","colour":"00ce4f"}},"variables":{},"grids":{}},"info":{"name":"Proc12_Others","description":"Proc12 Others","type":"ORCHESTRATION","tag":"60032f0e-7bc5-426d-a168-04f8bce9a66c"}}