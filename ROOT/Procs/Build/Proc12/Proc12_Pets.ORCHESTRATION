{"job":{"components":{"197172":{"id":197172,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-432,"y":-64,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[197176],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Start","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"197178":{"id":197178,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-192,"y":-64,"width":32,"height":32,"inputConnectorIDs":[197177],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Drop Pets Temp Tables"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nProgram           : Drop Pets Rollups Temp Tables\nAuthor            : Lee Wallis\nClient Name       : Nestle\nJob Number        : HH010177 \nStandard Machine  : Snowflake\nAmendment History : v01 - Split of Event data from the original Proc12 process\n******************************************************************************************/\n\n/******************************************************************************************\n                             DROP PETS ROLLUPS TEMP TABLES\n******************************************************************************************/\n\ndrop table if exists ${Database}.temp.pet_name_lookup_1;\ndrop table if exists ${Database}.temp.pet_name_split;\ndrop table if exists ${Database}.temp.all_pet_names_1;\ndrop table if exists ${Database}.temp.all_pet_names;\ndrop table if exists ${Database}.temp.supps_pets;\ndrop table if exists ${Database}.temp.cid_pet_temp ; "}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"197179":{"id":197179,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-301,"y":-65,"width":32,"height":32,"inputConnectorIDs":[197176],"outputSuccessConnectorIDs":[197177],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Pets Rollups"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nProgram           : Pets Rollups\nAuthor            : Lindsay Timms / Lee Wallis\nClient Name       : Nestle\nJob Number        : HH010177 \nStandard Machine  : Snowflake\nAmendment History : v01 - Split of Pets data from the original Proc12 process\n******************************************************************************************/\n\n/*\n\t\tTABLES CREATED:\n        live.pet_name_lookup\n        live.cid_pet\n        live.cid_litter\n        \n        TABLES UPDATED:\n        db.ref_pet_id        \n*/\n\n/******************************************************************************************\n                                  PETS ROLLUP\n******************************************************************************************/\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_pets_rollups',\n    '*************************',\n    '*************************',\n    'start of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;  \n\n\n--Create list of \"DECEASED\" pet names\ndrop table if exists ${Database}.temp.deceased_name;\nCREATE OR REPLACE TABLE ${Database}.temp.deceased_name as\nselect \n    distinct trim(pet_name) as pet_name\nfrom ${Database}.db.pet\nwhere lower(trim(pet_name)) regexp '(.*)(dcsd|decd|deceased|r\\.i\\.p|dec\\.)(.*)'\nor (lower(trim(pet_name)) regexp '.*died.*' and lower(trim(pet_name)) not regexp '(.*)(diedre|diedu|ndied)(.*)')\nor (lower(trim(pet_name)) regexp '.*rip.*' and lower(trim(pet_name)) not regexp '(.*)(ripl|ripe|strip|ripp|trip|crip|rips|grip|ripu|ript|frip|ripo|ripa|prip|riph|ripk)(.*)' and lower(trim(pet_name)) not in ('rip','little rip'))\nor (lower(trim(pet_name)) regexp '.*dead.*' and lower(trim(pet_name)) not regexp '(.*)(deads|dead p|deadr|deadl|deadm|p dead)(.*)')\n;\n\n-- Create list of all pet names for cleaning\ndrop table if exists ${Database}.temp.pet_name_lookup_1;\nCREATE OR REPLACE TABLE ${Database}.temp.pet_name_lookup_1 as\nselect \n    distinct upper(trim(pet_name)) as pet_name\nfrom ${Database}.db.pet\n;\n\n--Split names to try and get multiple valid names\ndrop table if exists ${Database}.temp.pet_names_split;\nCREATE OR REPLACE TABLE ${Database}.temp.pet_names_split as\nselect \n        pet_name\n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 1) as pet_name_1   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 2) as pet_name_2   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 3) as pet_name_3   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 4) as pet_name_4   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 5) as pet_name_5   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 6) as pet_name_6   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 7) as pet_name_7   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 8) as pet_name_8   \n        ,split_part(trim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(lower(pet_name),'&amp;','/'),'.and ','/'),',and ','/'),' and,','/'),' and ','/'),'&','/'),'+','/'),',','/'),' and. ','/'),';','/'),'\\\\','/'),'~','/'),'1)','/'),'2)','/'),'3)','/'),'4)','/'),'5)','/'),'6)','/'),'7)','/'),'8)','/'),'9)','/'),':)',''),'(:',''),' . . ','/'),' .. ','/'),' ...','/')),'/', 9) as pet_name_9\n    from ${Database}.temp.pet_name_lookup_1\n    ;\n    \ninsert into ${Database}.db.build_log \nselect \n    'nestle_pets_rollups',\n    '${Database}.temp.pet_names_split',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.temp.pet_names_split;\n\n--Create thin table for mapping pet names to all cleaned pet names\ndrop table if exists ${Database}.temp.all_pet_names_1;\nCREATE OR REPLACE TABLE ${Database}.temp.all_pet_names_1 as   \n--REMOVE UNWANTED CHARACTERS\nselect distinct\n    split.pet_name\n    ,trim(initcap(translate(upper(regexp_replace(split.pet_name_split,'[\\x00-\\x1F|\\x7F]','')), 'ÀÁÂÃÄÅÇÐÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜÝŸŽL©¶³¤¢§º¼½¦®ª«¡¨¯¹»›‰¾†¬±˜~\\|`!\"£$%^*_-=:;@~#<>?', 'aaaaaacdeeeeiiiinoooooosuuuuyyzl'))) as pet_name_split\nfrom\n    (\n    select pet_name, initcap(replace(replace(replace(trim(pet_name_1),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_1 > ''\n    union all   \n    select pet_name, initcap(replace(replace(replace(trim(pet_name_2),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_2 > ''\n    union all  \n    select pet_name, initcap(replace(replace(replace(trim(pet_name_3),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_3 > '' \n    union all\n    select pet_name, initcap(replace(replace(replace(trim(pet_name_4),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_4 > '' \n    union all  \n    select pet_name, initcap(replace(replace(replace(trim(pet_name_5),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_5 > '' \n    union all\n    select pet_name, initcap(replace(replace(replace(trim(pet_name_6),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_6 > '' \n    union all  \n    select pet_name, initcap(replace(replace(replace(trim(pet_name_7),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_7 > '' \n    union all\n    select pet_name, initcap(replace(replace(replace(trim(pet_name_8),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_8 > '' \n    union all  \n    select pet_name, initcap(replace(replace(replace(trim(pet_name_9),' ','~|'),'|~',''),'~|',' ')) as pet_name_split from ${Database}.temp.pet_names_split where pet_name_9 > '' \n    ) split\nwhere trim(initcap(translate(upper(regexp_replace(split.pet_name_split,'[\\x00-\\x1F|\\x7F]','')), 'ÀÁÂÃÄÅÇÐÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜÝŸŽL©¶³¤¢§º¼½¦®ª«¡¨¯¹»›‰¾†¬±˜~\\|`!\"£$%^*_-=:;@~#<>?', 'aaaaaacdeeeeiiiinoooooosuuuuyyzl'))) > ''\n;\n\n--Remove everything brackets\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'('||tbw.db.suckchars(pet_name_split,'(',')')||')','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'('||tbw.db.suckchars(pet_name_split,'(',')')||')','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'('||tbw.db.suckchars(pet_name_split,'(',')')||')','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'('||tbw.db.suckchars(pet_name_split,'(',')')||')','');\n\n--Remove everything in square brackets\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'['||tbw.db.suckchars(pet_name_split,'[',']')||']','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'['||tbw.db.suckchars(pet_name_split,'[',']')||']','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'['||tbw.db.suckchars(pet_name_split,'[',']')||']','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'['||tbw.db.suckchars(pet_name_split,'[',']')||']','');\n\n--Remove everything in curly brackets\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'{'||tbw.db.suckchars(pet_name_split,'{','}')||'}','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'{'||tbw.db.suckchars(pet_name_split,'{','}')||'}','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'{'||tbw.db.suckchars(pet_name_split,'{','}')||'}','');\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,'{'||tbw.db.suckchars(pet_name_split,'{','}')||'}','');\n\n--Remove everything following unclosed brackets\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,substr(pet_name_split,CHARINDEX('(',pet_name_split,-1)),'')\nwhere CHARINDEX('(',pet_name_split,-1) > CHARINDEX(')',pet_name_split,-1)\n;\n\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,substr(pet_name_split,CHARINDEX('[',pet_name_split,-1)),'')\nwhere CHARINDEX('[',pet_name_split,-1) > CHARINDEX(']',pet_name_split,-1)\n;\n\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = replace(pet_name_split,substr(pet_name_split,CHARINDEX('{',pet_name_split,-1)),'')\nwhere CHARINDEX('{',pet_name_split,-1) > CHARINDEX('}',pet_name_split,-1)\n;\n\nupdate ${Database}.temp.all_pet_names_1\nset pet_name_split = trim(right(pet_name_split,length(pet_name_split) - 1))\nwhere left(pet_name_split,1) = '.'\n;\n\n--Create cleaned pet name lookup\ndrop table if exists ${Database}.temp.all_pet_names;\nCREATE OR REPLACE TABLE ${Database}.temp.all_pet_names as\nselect \n    pet_name\n    ,case \n        when left(pet_name_split,1) = '-' then trim(replace(pet_name_split,'-','')) \n        else trim(pet_name_split) \n    end as pet_name_split\nfrom ${Database}.temp.all_pet_names_1\n;\n\n--Create lookup table with flags for reference\ndrop table if exists ${Database}.live.pet_name_lookup;\nCREATE OR REPLACE TABLE ${Database}.live.pet_name_lookup as\nwith flags \nas\n(\n    select \n        pet_name\n        ,case\n             when left(upper(pet_name_split),4) = 'AGE ' then ''\n             when charindex(' AGE ',upper(pet_name_split)) > 1 then left(pet_name_split,charindex(' AGE ',upper(pet_name_split)) - 1)\n             else pet_name_split\n         end as pet_name_split\n        ,case \n            when  replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') in ('gook','spick','spik','prat','stupid')\n                 or       lower(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'CANAL','')) regexp '.*anal.*'           and lower(pet_name_split) not in ('analoui','analts','analuwa','aspanall','banal','branall','bwanali','campanale','canal','canale','canalella','canale-parola','canales','canali','canals','chanal','courbanally','cuanalo','danaldson','ganalon','gnanalingam','gnanalingham','hajyzamanali','hassanali','hassanally','janal','janali','kanal','kanala','kanalas','kanalos','kanalosova','kankanala','khanal','macanally','manalac','manalan','manalang','manalansan','manalastas','manalaysay','manaley','manalili','manally','manalo','manaloto','mcanallen','mcanally','mcdanald','mcdoanald','panal','panaligan','rabanal','rajanala','ramjanali','ramjanally','ramzanali','ranaldi','ranaldo','ranall','ranalli','ranallo','roshanali','sanalitro')\n                 or       replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'URANUS','') in ('ANUS','SMELLMYANUS','HUGHJANUS')           --and lower(pet_name_split) not in ('anush','anusha','anusic','anusiewicz','anusionwu','anuszkiewicz','banushi','banuso','bhanushali','blanusa','deanus','emanus','emmanus','ganuszko','hanus','hanusch','hanusiak','hanusova','hanuszewicz','hermanus','iloanusi','iwanuschak','jaanus','janus','janusaitis','janusas','janusauskaite','janusauskas','janusauskiene','janusevicius','januska','januskaite','januskeviciene','januskevicius','januskeviciute','janusonis','janusz','januszczak','januszczyk','januszek','januszewska','januszewski','januszkiewicz','januszko','mac manus','macmanus','mamanus','manus','manuschka','manuszewski','mc manus','mchanus','mcmanus','mcnanus','ndanusa','ohanusi','ranus','romanus','sanusi','silvanus','stanuszek','tanushi','zanussi')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*arse.*'           and lower(pet_name_split) not in ('arseen','arsenault','arsene','arseneault','arsenio','arsenis','arseniuk','banarse','barseghian','barsellotti','barsey','carse','carsell','carsen','carser','carsewell','carsey','darsey','farser','garsed','gerard-pearse','harse','harsent','hearse','hearsey','karsenbarg','karsera','karseras','kearse','kearsey','larsen','lund-larsen','marse','marseden','marseglia','marseille','marseilles','marsek','marsel','marsell','marsella','marsello','marsen','marsenic','marsey','narse','parse','parsell','parselle','parsells','parsely','parsens','parsey','pearse','pearsey','posarsek','sarsero','scarse','scarsebrook','scarsella','summarsell','swearse','tarsey','tearse')\n                 --or       replace(replace(replace(replace(collate(pet_name_split,''),'''',''),' ',''),'-',''),'&','') regexp 'ass'            and lower(pet_name_split) not in ('abass','abassah','abassi','abbass','abbassi','abbassian','abbassy','abdelmassih','abecassis','abu hassan','abuhassan','admassu','afrassiabi','agass','agassiz','aghassi','aghdassi','akass','akhrass','al hassan','alassad','al-assadi','alassaf','albassam','al-bassam','aldabass','alhassan','al-hassan','alhassani','al-hassani','alhasso','al-hasso','alihassan','ali-hassan','aljassar','alkass','alkassim','allass','allassani','allpass','almassi','alnassar','alnasser','al-nasser','alqassab','al-qassab','alqassimi','altass','altwasser','al-yassin','amass','amasse','amassoul','amirghassemi','anastassi','anastassiades','anastassiou','andrassy','andreassen','andreasson','appassamy','asparassa','assa','assaad','assab','assad','assadi','assadian','assadourian','assadullah','assaed','assael','assaf','assah','assakarah','assal','assali','assall','assalone','assam','assamoi','assamoua','assan','assanah','assanand','assani','assante','assar','assareh','assari','assaritti','assas','assassa','assassi','assayag','assaye','asscher','assefa','assefaw','assefuah','asseily','asselin','assell','assem','assemakis','assemian','assen','assender','assenheim','assenjee','assenso','assenti','asser','asserati','assersohn','asset','asseter','assey','assheton','assheton-smith','assi','assia','assiamah','assibey','assid','assif','assifuah','assig','assili','assim','assimakopoulos','assin','assinder','assing','assini','assiotes','assirati','assiratti','assis','assiter','assitt','asslanian','assmann','asso','associates','assock','assoku','assomull','asson','assor','assou','assouad','assoufi','assoul','assouline','assour','assra','assrafally','assucena','assumpcao','assuncao','assur','atanassov','atanassova','atassi','athanassiou','athanassopoulos','ayadassen','ayassamy','babassana','balassa','baldassari','baldassarra','baldassarre','baldassarri','barass','barkass','barlass','barrass','barrasso','bass','bassa','bassadone','bassage','bassah','bassaid','bassakaropoulos','bassal','bassalian','bassam','bassan','bassani','bassano','bassant','bassaragh','bassas','bassatt','basse','bassell','bassen','bassendale','bassendine','bassenger','bassent','basser','basset','bassett','bassett-cross','bassett-jones','bassett-smith','bassettt','bassey','bassford','bassham','bassi','bassie','bassier','bassil','bassilious','bassill','bassily','bassin','bassindale','bassinder','bassingdale','bassinger','bassingham','bassingthwaighte','bassingthwaite','bassington','bassiony','bassiouni','bassir','bassiri','bassit','bassitt','bassman','bassnett','basso','bassoli','bassom','basson','bassot','bassou','bassous','bassr','bassra','bassral','basstoe','bassue','bass-woodcock','bassy','baylass','bedassie','beedassee','beedassy','belassie','bellass','benassi','benhassine','benriassa','blass','blasse','blennerhasset','blennerhassett','bonass','bonassera','bordass','boumerdassi','bourassa','bownass','brass','brassart','brasse','brasseaux','brassel','brassell','brasser','brassett','brasseur','brassey','brassfield','brassil','brassill','brassington','brassinton','brassley','buglass','bullass','bumpass','burdass','burgass','burglass','byass','cabassi','cafasso','calamassi','camrass','canassa','capasso','carass','carassale','carasso','carcass','carmassi','casamassa','cass','cassa','cassady','cassagne','cassam','cassama','cassambai','cassamo','cassamobai','cassan','cassandra','cassandro','cassanell','cassani','cassano','cassanova','cassap','cassapi','cassar','cassaretto','cassata','casse','cassedy','cassee','cassel','casselden','casseldine','cassell','cassella','casselle','casselles','cassells','casselman','cassels','casselton','cassely','cassem','cassemis','cassen','casser','cassera','cassere','casserley','casserly','cassese','cassettare','cassettari','cassey','cassford','cassi','cassia','cassiano','cassiday','cassiddy','cassidey','cassidi','cassidy','cassie','cassiey','cassillis','cassily','cassim','cassimatis','cassin','cassinelli','cassing','cassingena','cassingham','cassini','cassinos','cassis','cassisa','cassisi','cassisy','cassity','cassius','cassles','cassley','cassling','cassman','cassom','cassomini','casson','cassone','cassoni','casson-smith','cassop','casssidy','casstles','cassule','casswell','cassy','chandradass','chassagnette','chassar','chasseaud','chassebi','chassels','chasser','chassin','chavasse','cherkassky','chevassut','chiassaro','chiasson','christtmass','claassen','claassens','class','classen','classens','classey','classic','classick','classon','colliass','compass','corlass','corrass','cortopassi','crass','crasswell','crassweller','creasser','croudass','crudass','currass','dalmasso','dass','dassa','dassama','dassanaike','dassanayake','dassani','dassaur','dasseville','dassler','dasso','dasson','dassonville','dassow','dassu','dassut','dassy','d''brass','de assis','de grasse','de pass','degrasse','degrassi','del basso','depass','depasse','devassy','devassykutty','diarrassouba','diassona','dilasser','djelassi','d''lasselle','dos passos','douglass','dowglass','dracass','du casse','ducasse','dugasse','duglass','dundass','eassie','eassom','easson','el fassi','el hassan','el-assaad','elassal','elfassi','elfassy','elhassan','el-hassan','elhassani','eliassen','eliasson','el-kassir','elmhassani','elyassi','espinasse','faassen','fairbass','fairbrass','falwasser','fass','fassam','fassan','fassbender','fasseau','fassenfeld','fassenfelt','fasser','fassett','fassihi','fassinger','fassio','fassioms','fassis','fassler','fassnidge','fassom','fassoms','fasson','fassum','fassy','fewlass','fieldgrass','finglass','fracassi','fracasso','frasson','frassoni','furnass','gabbitass','gaddass','galassi','galasso','gass','gassama','gassan','gassar','gasse','gasser','gassick','gasside','gassis','gassman','gassmann','gassner','gasson','gassor','gasston','gassy','gebreselassie','gebreslassie','ghassan','ghassemi','ghassemian','ghiassi','gilgrass','gillgrass','glass','glassar','glassberg','glassborow','glassbrook','glassby','glassco','glasscock','glasscoe','glasscoo','glasse','glassell','glassenbury','glasser','glassett','glassey','glassfield','glassford','glassgow','glassington','glassman','glassock','glasson','glassonbury','glasspell','glasspole','glasspool','glasspoole','glasstone','glassup','glassup-smith','glasswell','goldwasser','goodlass','grass','grassa','grassam','grassby','grasse','grasset','grassham','grassi','grassick','grassie','grassing','grassington','grassini','grasske','grasso','grassom','grasson','grassroots','greenglass','greengrass','grossnass','habassi','habteselassie','hadassi','haileselassie','hajivassiliou','halpass','hass','hassa','hassaan','hassaballa','hassabu','hassack','hassad','hassain','hassaine','hassal','hassall','hassalls','hassam','hassan','hassan ali','hassanali','hassan-ali','hassanally','hassane','hassanein','hassani','hassania','hassanian','hassanien','hassanin','hassaniyeh','hassanjee','hassanpour','hassany','hassanyeh','hassanzada','hassanzadeh','hassard','hassay','hassbani','hasse','hassea','hassein','hassel','hasselbach','hasselby','hasselder','hasseldine','hasseler','hasselgren','hassell','hassells','hasselman','hasselmann','hasselt','hassen','hassent','hasser','hasset','hassett','hassey','hassi','hassiakos','hassian','hassib','hassid','hassie','hassim','hassin','hassine','hassing','hassini','hassion','hassiotis','hasslacher','hassle','hassler','hasslett','hassman','hassn','hasso','hassock','hasson','hassoon','hassoun','hassouna','hassouni','hassy','hawkings-byass','hochstrasser','hoodlass','hudlass','hudlass-galley','hvass','ingrassia','jackson-bass','jamnadass','jarass','jass','jassad','jassal','jassam','jassan','jassar','jassat','jasse','jasseh','jassel','jassell','jasser','jassey','jassi','jassie','jassim','jassin','jasso','jasson','jassop','jassy','jelassi','jhass','jonassen','jonasson','kalbassi','kaltwasser','karahassan','karassek','karassellos','karbassi','karrass','kass','kassa','kassab','kassabian','kassah','kassahun','kassai','kassam','kassama','kassamali','kassan','kassanga','kassanis','kassapian','kassar','kassardjian','kassas','kassay','kassaye','kasse','kasseean','kassel','kassell','kasselman','kassem','kassen','kasser','kassey','kassi','kassidy','kassie','kassier','kassim','kassimatis','kassimi','kassin','kassir','kassiram','kassiras','kassiri','kassis','kassler','kassman','kassner','kasson','kassongo','kassouf','kassous','kassrai','kasstan','kassulke','kassy','khamassi','khass','khassal','klaassen','klass','klassa','klassen','klassnik','klasson','knass','kouassi','kounasso','koylass','krass','krasser','krassnitzer','krassos','krassowska','krassowski','kutassy','labassi','labassiere','lachasseigne','larrassey','lass','lassa','lassak','lassalle','lassam','lassan','lasse','lassen','lasser','lasserre','lasserson','lasseter','lassetter','lassey','lassiter','lasslett','lassman','lassmans','lassnig','lasso','lasson','lassoued','lassu','lassus','lawlass','laxton-bass','le gassick','le gassicke','lebrasse','lecrass','legassick','lemass','lemasson','levasseur','lhassani','liassi','liassides','lomass','losasso','lovelass','lowmass','lucass','lucassi','lynass','maass','maassen','macassey','magassa','mallpass','malpass','manasse','manasseh','manassian','manassie','mandon-gassman','mass','massa','massaccesi','massad','massah','massaio','massalay','massall','massally','massam','massamba','massan','massanet','massaquoi','massar','massara','massarano','massard','massarella','massarelli','massari','massaro','massart','massawe','massay','massbery','masscy','masse','massee','massei','massel','masselis','massell','massen','massender','massengo','massenhove','masser','masserella','masseri','masseroli','masset','massett','massetti','massey','massey-chase','masshar','masshedar','massheder','massi','massia','massiah','massias','massicks','massicott','massicotte','massidda','massie','massie-taylor','massih','massimi','massimiliano','massimino','massimo','massin','massing','massingale','massingberd','massingberd-mundy','massingham','massinghan','massini','massink','massion','massironi','massiter','massmann','masso','massocchi','massod','massom','masson','massone','massood','massop','massos','massot','massotti','massoud','massoudi','massoudinia','massouh','massoumi','massoumian','massoura','massouras','massow','massri','masssey','massudi','massum','massumi','massy','massy-collier','massyn','matassa','matassi','matthiasson','mattrass','mayassi','mcassey','mcglasson','mcnasser','menassa','middlemass','minassian','moass','mobasser','mobasseri','modasser','mohades-kassai','montasser','morhtassi','motavassel','mouqtassid','mouyiassi','movassagh','movassaghi','mudassar','mudasser','mudassir','mullasseril','munasser','muntasser','nambi-lasseko','nass','nassa','nassab','nassali','nassan','nassanga','nassar','nassari','nassaris','nassau','nasse','nasseem','nassef','nassehi','nassem','nasser','nasseraldeen','nassereddine','nasseri','nassery','nasseur','nassey','nassi','nassib','nassie','nassif','nassim','nassir','nassiri','nassir-pour','nassiry','nasskau','nasso','nassolo','nasson','nassor','nassour','nassr','nassralla','nassrat','nassuna','nassuphis','nassur','natrass','nattrass','negassi','neiass','nekrassov','ngassa','nicholass','nicklasson','niklasson','nyass','nyassi','onassis','osei-assibey','ouassine','overmass','pallagrass','pallass','papavassiliou','pass','passa','passafonti','passalacqua','passam','passan','passano','passant','passantino','passap','passaportis','passard','passarelli','passarello','passariello','passaris','passaro','passas','passat','passaway','passby','passchier','passco','passe','passee','passell','passells','passenger','passer','passera','passerello','passeri','passerini','passes','passet','passett','passey','passfield','passhore','passi','passiatore','passingham','passinghan','passley','passman','passmoor','passmoore','passmore','passon','passoni','passons','passos','passow','passwala','passway','passy','pawass','payassis','pendegrass','petrassi','petrasso','peyrasse','picasso','pintassilgo','pitassi','plass','plassard','plasse','plassing','pleass','polglass','poonwassie','portass','pragassen','prassas','prassede','prasser','purgass','qassem','qassemi','qassim','qassin','quassim','quatermass','rabassa','rabasse','ramadass','ramasso','ramdass','rashbass','rass','rassa','rassad','rassam','rassan','rassekh','rassel','rassell','rasser','rassi','rassid','rassim','rassiter','rasson','rassool','rassouli','rassul','regassa','rohrbasser','rouass','rungassamy','salmassian','sanassee','sanassy','sancassani','sant-cassia','sass','sassa','sassano','sassarini','sasse','sassella','sassen','sasserath','sassi','sassienie','sasso','sasson','sassone','sassone-corsi','sassons','sassoon','sassu','schmassmann','scott-masson','seeneevassen','selassie','sepassi','shallcrass','shanassy','shankardass','shaughnassy','shere-massey','simonassi','slassor','smargiassi','snodgrass','spassov','spassova','stallabrass','stallebrass','stallibrass','stallybrass','stass','stassen','stassi','stassiouk','strass','strassacappa','strassen','strasser','strassheim','strasshine','sunassee','sunnassee','syass','tabassam','tabassum','tabassun','tahmassebi','tamassy','targrass','tass','tassa','tassabehji','tassadaq','tassaker','tassan','tassano','tassara','tassart','tassawar','tasse','tassel','tassell','tasselli','tassi','tassie','tassier','tassiker','tassinari','tasso','tassone','tassou','tavassoli','tesfaselassie','thassim','thomass','thomassen','thomasset','thomassin','thomasson','thoulass','tirabasso','titmass','tobiassen','tomass','tomassen','tomassi','tomassini','tomasso','tomasson','toplass','trapasso','travasso','travassos','treppass','trippass','trivass','ul hassan','ulhassan','ul-hassan','valassis','van assen','van hasselt','vanassche','vangasse','vass','vassa','vassal','vassall','vassalli','vassallo','vassalos','vassan','vassantlal','vassar','vassaramo','vassay','vasse','vasseghi','vassel','vasselin','vassell','vassello','vassen','vasser','vasseur','vassey','vassi','vassib','vassie','vassil','vassila','vassilakis','vassilas','vassileiou','vassilev','vassileva','vassili','vassiliades','vassiliadis','vassiliev','vassilieva','vassiliou','vassilis','vassiljev','vassiljeva','vassilopoulos','vassiloulis','vasso','vasson','vassoodaven','vassos','vassou','vettasseri','vigrass','vincatassin','vlassis','vlassov','wanlass','wass','wassal','wassall','wassan','wasse','wassef','wassel','wassell','wassem','wassenaar','wasser','wasserberg','wasserman','wassermann','wasserstein','wassi','wassie','wassiee','wassif','wassili','wassim','wassing','wassink','wassmer','wasson','wasswa','wattass','willgrass','windass','windgassen','windrass','wiseglass','woldeselassie','woodmass','woolass','wrong assistant','xassan','yass','yassa','yassar','yasseen','yassen','yasser','yassi','yassien','yassim','yassin','yassine','yassini','yassir','yassrebi','zachariassen')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') in ('ass','asshole')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*ballsack.*'       and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bastard.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bitch.*'          and lower(pet_name_split) not in ('babitcheva','bitcha','bitchakdjian','bitcham','bitchanka','bitchard','bitchass','bitchburn','bitchel','bitchell','bitchen','bitchener','bitchenkova','bitcheno','bitchenor','bitcher','bitcherla','bitchers','bitchfield','bitchford','dembitchi','subitcha')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*biatch.*'         and lower(pet_name_split) not in ('biatchoe','biatchon','mbiatchou','mbiatchou-nya')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bloody.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*blowjob.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bollock.*'        and lower(lower(pet_name_split)) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bollok.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bollox.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*boner.*'          and lower(pet_name_split) not in ('amboner','bonera','bonera-callan','boner-cambell','bonere','boneret','bonerhygena','boneri','bonerjea','bonerpairet','bonerr','carboner','carbonera','carboneras','carbonere','carboneri','carbonero','eboner','kabonero','ortiz carboneres','osboner','rabonerabone','rathboner','rathboners')\n                 or       lower(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'BOOBEAR',''),'BOOBOO','')) regexp '.*boob.*'           and lower(pet_name_split) not in ('aboobacker','aboobakar','aboobaker','aboobucker','boobbyer','boobis','mahboob','mahboobani','mehboob','mohoboob')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bugger.*'         and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'BUMBLE',''),'BINGBUM','')) regexp '.*bum.*'            and lower(pet_name_split) not in ('album','babumba','bumatay','bumba','bumbra','bumble','bumby','bumford','bumfrey','bumpas','bumpstead','bumpsteed','bumpus','bumrah','mbumba')\n                 or       lower(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'BUTTON',''),'BUTTER','')) regexp '.*butt.*'           and lower(pet_name_split) not in ('albutt','allbutt','archbutt','baybutt','bhabutta','butt','buttaci','buttall','buttar','buttarazzi','buttarelli','buttars','buttel','buttell','butten','buttenshaw','butter','buttercase','butterell','butterfeild','butterfield','butterfiled','butterfill','butterfly','butterick','butterill','butteris','butteriss','butterley','butterly','butters','buttersworth','butterton','butterwick','butterwith','butterwood','butterworth','butterwoth','buttery','buttfield','butti','buttice','buttifant','buttifint','buttigieg','buttimer','buttimore','buttiner','butting','buttinger','buttivant','buttle','buttleman','buttler','buttley','buttling','buttner','buttolph','button','buttons','button-stephens','buttress','buttrey','buttrick','buttrill','buttriss','buttrum','butts','buttwell','buttworth','callbutt','carbutt','ebbutt','gabbutt','garbutt','gorbutt','gurbutt','harbutt','holbutt','hurlbutt','lebutt','mabbutt','ollenbuttel','parbutt','sarbutt','sarbutts','sbuttoni','sobutta','sowerbutts','stuart-buttle','talbutt','tarbutt','tebbutt','tebutt','tibbutt','tobutt','turbutt','wallbutton','warbutton')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*clitoris.*'       and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'PEACOCK',''),'COCKAPOO',''),'HITCHCOCK',''),'COCKER','')) regexp '.*cock.*'           and lower(pet_name_split) not in ('cockram','adcock','adcocks','addcock','alcock','alecock','allcock','allicock','ancock','aucock','awcock','aycock','babcock','barcock','batcock','battcock','baycock','beacock','beercock','bilcock','bocock','boocock','bowcock','bulcock','bullcock','cockain','cockar','cockarill','cockayne','cockbain','cockbaine','cockbill','cockborn','cockburn','cockcroft','cocke','cockel','cockell','cocken','cocker','cockerall','cockeram','cockeran','cockerell','cockerham','cockerhan','cockerhill','cockeril','cockerill','cockerline','cockersell','cockersole','cockerton','cockett','cockette','cockfield','cockford','cockhill','cockill','cockin','cockland','cockle','cocklin','cockling','cockran','cockrane','cockrel','cockrell','cockrem','cockren','cockrill','cockrin','cockroft','cocksedge','cocksey','cockshull','cockshutt','cockson','cocksworth','cockton','cockwell','cockwill','crocock','dancock','dancocks','deacock','decock','didcock','dilcock','eacock','ecock','edgecock','elcock','elcocks','ellcock','ellicock','filcock','grewcock','grocock','groocock','growcock','hacock','hadcock','haincock','hallcock','hamcock','hancock','hancocke','hancocks','handcock','hankcock','hanncock','harcock','hawcock','haycock','haycocks','heacock','heathcock','hedgcock','hedgecock','heircock','hencock','hercock','heycock','hichcock','highcock','hillcock','hircock','hiscock','hiscocks','hitchcock','hitchcocks','hitcock','hithcock','hudson-peacock','jeacock','jeacocke','jeycock','johncock','lacock','lawcock','laycock','leacock','lewcock','leycock','locock','lowcock','luccock','luckcock','lucock','lurcock','maycock','meacock','milcock','miscock','mocock','moorcock','morecock','mulcock','mycock','nancock','ocock','paecock','peacock','peacocke','peacocks','peakcock','pecock','peecock','philcock','pidcock','pitcock','pocock','purcocks','pycock','radford-hancock','raincock','sandercock','saundercock','shellcock','shilcock','shillcock','silcock','silcocks','sillcock','simcock','simcocks','sincock','slocock','slucock','symcock','tancock','tilcock','tillcock','tocock','trebilcock','trebillcock','twocock','veacock','wadcock','walcock','wallcock','westcock','whadcock','wilcock','wilcocks','wilcockson','willcock','willcocks','willcockson','woocock','woodcock','wookcock','woolcock','woolcocks')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*coon.*'           and lower(pet_name_split) not in ('coonagh','coonan','coonar','coonber','coonbes','coonbs','coone','cooner','coonerty','coones','cooney','coong','coonick','coonie','coonor','ocooner','ocoonor','scoon','scoones','scoons')\n                 or       lower(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'SCRAP','')) regexp '.*crap.*'           and lower(pet_name_split) not in ('scrap')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*cunt.*'           and lower(pet_name_split) not in ('scunthorpe')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*damn.*'           and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'DICKSON',''),'DICKENS','')) regexp '.*dick.*'           and lower(pet_name_split) not in ('benedick','benedickter','biddick','boldick','braddick','bradick','briddick','brodick','bundick','burdick','caddick','chiddick','chiddicks','cobbledick','condick','craddick','cradick','cundick','dickason','dickaty','dicke','dickel','dicken','dickens','dickenson','dicker','dickers','dickerson','dickes','dickeson','dicketts','dickey','dickham','dickie','dickin','dickings','dickingson','dickins','dickinson','dickinson-smith','dickison','dickle','dickon','dickons','dickonson','dickov','dicksee','dickson','dicksons','dicky','fendick','forsdick','forsdicke','fosdick','fredick','frosdick','grimsdick','haddick','haedicke','hedicker','hildick','hildick-smith','kaddick','kendick','landick','ludick','luedicke','maddick','maddicks','mccordick','mcdicken','mcdickson','meddick','meddicks','paddick','pundick','reddick','rhodick','riddick','riddicks','roddick','rodick','ruddick','rudick','sadick','sandick','shaddick','shadick','siddick','suddick','thorndick','vodicka','waddicker','weadick','wedick','widdick','widdicks','zserdicky')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*dildo.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&','') = 'DYKE'           --and lower(pet_name_split) not in ('dyker','fendyke','forsdyke','thorndyke','van dyke','vandyke')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*erect.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&','') in ('FAG','FAGGOT','FAGOT','FAGGOTS','FAGGOTCAT')            --and lower(pet_name_split) not in ('alfageme','fagade','fagaly','fagan','fagandini','fagbemi','fagbenle','fagbenro','fagbohun','fagbohungbe','fagbola','fagboyegun','fagbure','fage','fagelman','fagelson','fagen','fagence','fagents','fager','fagerlund','fages','faggetter','faggin','faghany','faghihi','faghirzadeh','faghy','fagin','fagioli','fagnani','fagon','fagundes','fagunwa','fagura','graffagnino','mcfagan','tesfagaber','zolfaghari')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*fatass.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*feck.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*fellate.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*fellatio.*'       and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*felching.*'       and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*fuck.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*fudgepack.*'      and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*flange.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*goddamn.*'        and lower(pet_name_split) not in ('')\n                 --or       replace(replace(replace(replace(pet_name_split,'''',''),' ',''),'-',''),'&','') regexp 'hell'           and lower(pet_name_split) not in ('abethell','archell','bachell','barichello','backshell','batcheller','batchellor','battershell','beachell','bearchell','bechelli','beckhelling','bethell','bexhell','bhella','birchell','bishell','bithell','boshell','boshelle','bowshell','bratchell','buchell','bulheller','burchell','bushell','bythell','cashell','chell','chella','chelladurai','chellam','chellamuthu','chellappah','chellappan','chellar','chelle','chellen','chellew','chelley','chelliah','chellingsworth','chellingworth','chellis','chellum','coshell','critchell','cuthell','dichello','etchell','etchells','ethell','formichella','getchell','ghelle','hanschell','hatchell','hella','hellaby','hellal','hellam','hellan','helland','hellard','hellary','hellas','hellawell','hellberg','helle','hellebrand','hellel','hellen','hellend','hellens','heller','hellerman','hellery','hellett','helleur','hellewell','helley','hellgren','helliar','hellicar','hellier','helliker','hellin','helling','hellinger','hellings','hellingsworth','hellis','hellish','helliwell','hellman','hellmann','hellmers','hellmich','hellmuth','hellon','hellor','hellors','hellowell','hellsten','hellstrom','hellwell','hellwig','hellwing','helly','hellyar','hellyer','hellyn','hellywell','hempshell','henshell','herschell','hitchell','houchell','ithell','kearney-mitchell','kemshell','ketchell','khella','kinchella','kitchell','larochelle','licchelli','llewhellin','llewhellyn','lythell','machell','maitchell','marchell','marshell','matchell','maychell','mcmitchell','mechell','michell','michelle','michelli','mictchell','micthell','mighell','mihell','minchell','minchella','minghella','minshell','mirchell','mitchell','mitchell-davis','mitchell-dawson','mitchelle','mitchell-gears','mitchell-harris','mitchell-innes','mitchelll','mitchellmore','mitchells','mitchell-smith','mitchellson','mithchell','mithell','mittchell','monachello','mtchell','mutchell','neachell','nethell','nichells','nihell','nitchell','ochello','page-mitchell','patchell','peachell','pechell','petchell','phellas','phellps','pitchell','purchell','rachell','rachelle','renshell','richell','rochell','rochelle','rotchell','rothell','satchell','satchelle','schell','schellekens','schellenberg','scheller','senchell','setchell','seychell','shell','shellabear','shellam','shellan','shellard','shellbourne','shellcock','shellcross','shelldon','shelldrake','shellem','shellens','sheller','shelley','shellhorn','shellie','shellien','shelliker','shellim','shelling','shellis','shellito','shellock','shells','shellshear','shellswell','shellton','shellum','shelly','smithells','stitchell','tatchell','tempest-mitchell','thellman','thellmann','thellusson','titchell','tortoishell','trewhella','trushell','twitchell','vachell','vencatachellum','weighell','whell','whellam','whellams','whellan','whellans','wheller','whelligan','whichello','whitchell','witchell','withell','zucchelli')     \n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') = 'hell'       \n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*homo.*'           and lower(pet_name_split) not in ('homoki','homoky','homola','homolka','homoncik','mojakhomo','odhomor','sohomow','thomond','thomopson','thomos','thomoson')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*illegal.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*immigrant.*'      and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*jerk.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*jizz.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*labia.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*lardass.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*lmao.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*lmfao.*'          and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'MUFFIN','')) regexp '.*muff.*'           and lower(pet_name_split) not in ('muffat','muffet','muffett','muffin','muffitt','mufford')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*nigga.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*nigger.*'         and lower(pet_name_split) not in ('')\n                 --or       replace(replace(replace(replace(pet_name_split,'''',''),' ',''),'-',''),'&','') regexp 'nob'            and lower(pet_name_split) not in ('agwunobi','akzo nobel','annobil','anunobi','asinobi','conoboy','czarnobaj','danobrega','de nobrega','de nobriga','denobrega','denobriga','dinobi','dodd-noble','donoban','enobakhare','igbinoba','knobb','knobbs','knobel','knoblauch','knoble','knobloch','nobakht','nobari','nobb','nobble','nobbs','nobe','nobeebaccus','nobeen','nobel','noberts','nobertson','nobes','nobi','nobile','nobin','nobinson','noble','noble-nesbitt','nobles','noblet','noblett','noblin','nobo','noboa','nobody','nobre','nobrega','nobson','nwadinobi','obanobi','onobrauche','pronobis','sinobad','snober','stride-noble','sznober')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') = 'nob'      \n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*penis.*'          and lower(pet_name_split) not in ('penistan','peniston','penistone','')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*piss.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*poof.*'           and lower(pet_name_split) not in ('')\n                 --POOP not in use for pet name swear words\n                 --or       replace(replace(replace(replace(pet_name_split,'''',''),' ',''),'-',''),'&','') regexp 'poop'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*prick.*'          and lower(pet_name_split) not in ('prickett')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*pube.*'           and lower(pet_name_split) not in ('')\n                 --PUFF not in use for pet name swear words\n                 --or       replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'LOVEPUFF',''),'HUFFLEPUFF','') regexp 'puff'           and lower(pet_name_split) not in ('puffer','puffett','puffitt','spuffard')                \n                 or       replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&','') in ('PUSSYFLAP','PUSSYFLAPS','YOURPUSSY','PERVERTEDPUSSYCAT','PUSSYDESTROYER')          --and lower(pet_name_split) not in ('') and pet_name_split not regexp 'pussycat'\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*scrotum.*'        and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'ESSEX',''),'SUSSEX','')) regexp '.*sex.*'            and lower(pet_name_split) not in ('bessex','bissex','essex','essex-crosby','sexby','sexon','sexstone','sexton','sussex','wessex')\n                --SHAG not in use for pet name swear words\n                --or       replace(replace(replace(replace(pet_name_split,'''',''),' ',''),'-',''),'&','') regexp 'shag'           and lower(pet_name_split) not in ('ashagbe','eshag','shagari','shagaya','shaghaghi')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*shit.*'           and lower(pet_name_split) not in ('ashitey','feshitan','kinoshita','mashiter','matsushita','miyashita','morishita','mwashita','oshitola','rakshit','rashit','rushiti','shith','shitta-bey','shittabey','shittu','shitu','yamashita')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*slag.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*slut.*'           and lower(pet_name_split) not in ('sluter')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*smegma.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*spunk.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*smelly.*'         and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'HONEYSUCKLE','')) regexp '.*suck.*'           and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*suicide.*'        and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*terrorist.*'      and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*testical.*'       and lower(pet_name_split) not in ('')\n                 --or          replace(replace(replace(replace(pet_name_split,'''',''),' ',''),'-',''),'&','') regexp 'tit'            and lower(pet_name_split) not in ('footitt','titcombe','bultitude','daintith','dentith','footit','foottit','futtit','grittith','grittiths','laetitia','le petit','lepetit','le-petit','lostitch','loutit','louttit','mititelu','mutiti','muttitt','otite','otitoju','pentith','petit','petite','petitjean','petitpierre','petitt','pettit','pettite','pettitt','ptitchard','satite','stitch','stitchell','stitcher','stitchman','stitfall','stitkovac','stitou','stitson','stitt','stittle','tita','titan','titchard','titchell','titchen','titchener','titchin','titchiner','titchmarsh','titchner','tite','titera','titerickx','titford','tithecott','tither','titheradge','titheridge','titherington','titherley','titherly','titi','titilayo','titiloye','titjen','title','titler','titley','titlow','titmarsh','titmas','titmass','titmus','titmuss','tito','titorenko','titov','titova','titre','titshall','titt','tittensor','titterington','titterrell','tittershill','titterton','tittle','tittley','titton','tittonis','tituana','titus','titus-glover','titze','whittit')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') = 'tit'            \n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*tosser.*'         and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*turd.*'           and lower(pet_name_split) not in ('sturdee','sturdey','sturdgess','sturdivant','sturdy')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*twat.*'           and lower(pet_name_split) not in ('attwater','attwaters','atwater','westwater')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*vagina.*'         and lower(pet_name_split) not in ('')\n                 or       lower(replace(replace(replace(replace(replace(upper(pet_name_split),'''',''),' ',''),'-',''),'&',''),'TWANKEY','')) regexp '.*wank.*'           and lower(pet_name_split) not in ('mufwankolo','nwankpa','nwankwo','nwankwor','nwankwu','schwank','swankie','wanklyn','wankowicz')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*whore.*'          and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*bottomlicker.*'   and lower(pet_name_split) not in ('')\n                 or       replace(replace(replace(replace(lower(pet_name_split),'''',''),' ',''),'-',''),'&','') regexp '.*spannerpants.*'   and lower(pet_name_split) not in ('')\n                then 1 else 0\n        end as swear_flag\n        ,case when length(pet_name_split) > 100 then 1 else 0 end as max_length_flag\n        ,case \n            when length(replace(replace(replace(lower(pet_name_split),' ',''),'-',''),'&','')) = 1 then 1 \n            else 0 \n        end as min_length_flag\n        ,case \n            when lower(pet_name_split) not regexp '.*[a-zA-Z].*' or lower(pet_name) not regexp '.*[a-zA-Z].*' then 1 \n            else 0 \n        end no_alphabetic_flag\n        ,case \n            when lower(pet_name_split) regexp '(.*)(no name|unknown|not known|new cat|not named yet|see below|unamed|unnamed|not decided|not yet named|to be named|decided|not chosen)(.*)' then 1 --List of clearly bad names\n            when lower(pet_name_split) regexp '(.*)(sister|white|cat|dog|yes|brother)(.*)' and  pet_name_split regexp '.*\\\\).*' then 1 --List from searching for close brackets left over\n            when pet_name_split regexp '.*[0-9].*' and pet_name_split regexp '.*\\\\).*' then 1 --Identifies names that contain a number and a close bracket\n            when lower(pet_name_split) regexp '(.*)( years old|years old|0atis|0liver|0lly|0pel|0scar|0z|1 max. 2 pippa|1 poppy 2 dottie|1. vasska 2. sherman|10 years|12 cats|14 others|15 boy|1sheba|2 cats  barry|2 cats  demi|2 catsbrahma|2 dogs|2 dogs  coco|2 dogs coco|2 honey|2 kerry|2 s|2 siamese cats jasmin|2 x dogs star|3 cats|3 cats eve|3 cats oldest garfield|3 jack|3 moggie|3 others|3 s|34c25|3d|3hree|4 cats|4 cats bingo|5 cats|5 kittens|6 cats  lucy|7even|8 cats owned|9yrs|''bea''|''bertha simmering light|cant name them yet|cat 1|cat 2|cat 3|cat 4|cat a|cat name|cat1|cat1 tom|cat12|cat13|cat1bentley|cat2|cat3|''cea|''cooper'' magic pulse|do not have one|dog 1|dog 2|dog 3|dog 4|dog 5|dog1|dog11|dog2|dog3|dont have any|dont have names yet|dont have one|don''t know|dont know yet|don''t know yet|''dre|dunno|dunno yet|éva|gaylord|have 5 cats|have 6 cats|have not named them|havent chosen yet|havent named them|havent named yet|i have 11|i have 2 maisie|i have 2 micky|i have 3 cats|i have 3 twinkle|i have 4 cats|i have 5|i have 5 cats|i have 5 cat''s|i have lots|i have six molly|i havent got one|ive got 24 cats|i''ve got 4 cats|ive got 6 mia|just born|just born2|''kc''|no cat|no idea|no kittens|no more|no.1|no.2|no1 no2 no3 no|not given yet|not got adult|not keeping|not named|not named as yet|not named her yet|not picked on yet|not sure|not sure new kitten|not sure yet|not yet|not yet chose one|not yey named|nothing yet|''olly|only 1 dog|out door cat|pup1|pup2|pup3|puppies 10|puppies x 10|puppy 1|puppy 2|puppy 3|puss 1|puss 2|still thinking of name|still to name them|\uD83C\uDF40 clover|used to this)(.*)' \n                      and NOT(lower(pet_name_split) ilike any ('%dunnock%','%snowcat amber%','%kenynten say no more%','%kentixen no more drama%','%worry no more%','%dream no more%')) then 1 --bad names requested by CS to be blanked\n            else 0 end as invalid_name_flag\n        ,case\n            when length(pet_name_split) > 15 and (length(pet_name_split) - length(replace(replace(pet_name_split,' ',''),'-',''))) = 0 then 1\n            when length(split_part(replace(pet_name_split,'-',' '),' ',1)) > 15 then 1\n            when length(split_part(replace(pet_name_split,'-',' '),' ',2)) > 15 then 1\n            when length(split_part(replace(pet_name_split,'-',' '),' ',3)) > 15 then 1\n            when length(split_part(replace(pet_name_split,'-',' '),' ',4)) > 15 then 1\n            when length(split_part(replace(pet_name_split,'-',' '),' ',5)) > 15 then 1\n        else 0 end as long_name_flag\n        ,case when length(pet_name_split) - length(replace(pet_name_split,' ','')) > 3 then 1 else 0 end as multi_word_flag\n    from ${Database}.temp.all_pet_names\n)\nselect  \n    pet_name\n    ,case \n        when swear_flag = 1 or max_length_flag = 1 or min_length_flag = 1 or no_alphabetic_flag = 1 or invalid_name_flag = 1 or long_name_flag = 1 then '' \n        else replace(pet_name_split,')','') \n    end as pet_name_cleaned\n    ,swear_flag\n    ,max_length_flag\n    ,min_length_flag\n    ,no_alphabetic_flag\n    ,invalid_name_flag\n    ,long_name_flag\n    ,multi_word_flag\n    ,cast(0 as tinyint) as deceased_flag\nfrom flags\n;\n\n--Add deceased marker to pet suppression markers\nupdate ${Database}.live.pet_name_lookup\nset deceased_flag = 1\nwhere upper(pet_name) in\n(\nselect upper(pet_name)\nfrom ${Database}.temp.deceased_name\n)\n;\n\n\n--Work out suppressions from supps_pet table\ndrop table if exists ${Database}.temp.supps_pets;\ncreate or replace table ${Database}.temp.supps_pets\nas\nselect distinct\n    deceased_urn\nfrom (\n         select distinct\n              upper(x2.name_urn||'|'||trim(sp.pet_name)) as deceased_urn\n         from ${Database}.db.supps_pet sp\n         inner join ${Database}.live.xref_name_urn x1 on lower(x1.email) = lower(trim(sp.email))\n         inner join ${Database}.live.xref_name_urn x2 on x2.cid = x1.cid\n         where trim(sp.email) > ''\n         union all\n         select distinct\n              upper(x2.name_urn||'|'||trim(sp.pet_name)) as deceased_urn\n         from ${Database}.db.supps_pet sp\n         inner join ${Database}.live.xref_name_urn x1 on x1.name_urn = trim(sp.source_urn)\n         inner join ${Database}.live.xref_name_urn x2 on x2.cid = x1.cid\n     ) s;\n\n\n--Create full version of pet information (will be deduped later)\ndrop table if exists ${Database}.temp.cid_pet_temp;\nCREATE OR REPLACE TABLE ${Database}.temp.cid_pet_temp as\nselect\n    cid\n    ,name_urn\n    ,pet_type\n    ,pet_breed\n    ,nvl(pet_gender,'') as pet_gender\n    ,upper(nvl(pet_size,'')) as pet_size\n    ,pet_indoor_outdoor\n    ,pet_colour\n    ,nvl(pet_name_cleaned,'') as pet_name_cleaned\n    ,case\n        when pet_dob is not null then pet_dob --CIAM actual DOB\n        when pet_age_years is not null and pet_age_months is not null then add_months(pet_dob_first_data_date, -((pet_age_years*12)+pet_age_months)) --CIAM pet age years or months\n        when pet_birth_month is not null and pet_birth_year is not null\n            then case\n                     when try_to_date(cast(pet_birth_year as varchar)||'-'||pet_birth_month||'-'||to_char(pet_dob_first_data_date,'DD')) is not null\n                         then cast(cast(pet_birth_year as varchar)||'-'||pet_birth_month||'-'||to_char(pet_dob_first_data_date,'DD') as date)\n                     else last_day(cast(cast(pet_birth_year as varchar)||'-'||pet_birth_month||'-'||'01' as date))\n                 end --Birthday email \n        when pet_age_years is not null and pet_birth_month is not null\n            then case\n                     when try_to_date(cast(cast(to_char(pet_dob_first_data_date,'YYYY') as int) - cast(pet_age_years as int) - case when pet_birth_month_int <= month(pet_dob_first_data_date) then 0 else 1 end as varchar)||'-'||pet_birth_month||'-'||to_char(pet_dob_first_data_date,'DD')) is not null\n                         then cast(cast(cast(to_char(pet_dob_first_data_date,'YYYY') as int) - cast(pet_age_years as int) - case when pet_birth_month_int <= month(pet_dob_first_data_date) then 0 else 1 end as varchar)||'-'||pet_birth_month||'-'||to_char(pet_dob_first_data_date,'DD') as date)\n                     else last_day(cast(cast(cast(to_char(pet_dob_first_data_date,'YYYY') as int) - cast(pet_age_years as int) - case when pet_birth_month_int <= month(pet_dob_first_data_date) then 0 else 1 end as varchar)||'-'||pet_birth_month||'-'||'01' as date))\n                 end --Winalot campaign and eCRM 'sorry' email\n        when pet_age_weeks is not null then (pet_dob_first_data_date - (pet_age_weeks*7)) --Purina GP signup (age given in weeks)\n        when pet_age_months is not null then add_months(pet_dob_first_data_date, -pet_age_months) --Purina GP signup (age given in months)\n    end as derived_pet_dob\n    ,case\n        when pet_dob is not null then 'Actual pet DOB'\n        when pet_age_years is not null and pet_age_months is not null then 'Pet age years and months'\n        when pet_birth_month is not null and pet_birth_year is not null then 'Pet birth month and year'\n        when pet_age_years is not null and pet_birth_month is not null then 'Pet age years and pet birth month'\n        when pet_age_weeks is not null then 'Pet age weeks'\n        when pet_age_months is not null then 'Pet age months'  \n        else 'No DOB details'\n    end as dob_type\n    ,pet_life_stage\n    ,avatarid\n    ,source\n    ,pet_dob_last_data_date\n    ,data_date\nfrom\n    (\n    select distinct\n        cid\n        ,x.name_urn\n        ,case \n        when lower(p.pet_type) regexp '.*cat.*' then 'Cat'\n        when lower(p.pet_type) regexp '.*dog.*' then 'Dog'\n        else initcap(trim(p.pet_type)) end as pet_type\n        ,trim(coalesce(pbc.clean_breed_name,'')) as pet_breed\n        ,trim(pet_gender) as pet_gender\n        ,trim(pet_size) as pet_size\n        ,trim(pet_indoor_outdoor) as pet_indoor_outdoor\n        ,coalesce(trim(cl.purina_colour),trim(p.pet_colour)) as pet_colour\n        ,case when l.multi_word_flag = 1 and left(upper(x.name_urn),6) <> 'REG_KC' then '' else pet_name_cleaned end as pet_name_cleaned\n        ,pet_dob\n        ,lpad(to_char(pet_birth_month),2,'0') as pet_birth_month\n        ,pet_birth_month as pet_birth_month_int\n        ,pet_birth_year\n        ,pet_age_years\n        ,pet_age_months\n        ,pet_age_weeks\n      \t,pet_life_stage\n        ,trim(avatarid) as avatarid\t\t\t\t\t--Added NPP08750\n        ,trim(p.source) as source\n        ,least(p.data_date,source_date) as data_date\n        ,first_value(least(p.data_date,source_date)) over (partition by cid,case when lower(p.pet_type) regexp '.*cat.*' then 'Cat' when lower(collate(p.pet_type,'')) regexp 'dog' then 'Dog' else initcap(p.pet_type) end,pet_name_cleaned,pet_dob,pet_birth_month,pet_age_years,pet_age_months,pet_age_weeks order by least(p.data_date,source_date) asc) as pet_dob_first_data_date\n        ,first_value(least(p.data_date,source_date)) over (partition by cid,case when lower(p.pet_type) regexp '.*cat.*' then 'Cat' when lower(collate(p.pet_type,'')) regexp 'dog' then 'Dog' else initcap(p.pet_type) end,pet_name_cleaned,pet_dob,pet_birth_month,pet_age_years,pet_age_months,pet_age_weeks order by least(p.data_date,source_date) desc) as pet_dob_last_data_date\n    from ${Database}.live.xref_name_urn x\n    inner join ${Database}.db.pet p on x.name_urn = p.name_urn\n    left join ${Database}.live.pet_name_lookup l on upper(trim(p.pet_name)) = upper(l.pet_name)\n    left join ${Database}.db.ref_pet_breeds_clean pbc on lower(trim(pbc.breed_name)) = lower(trim(p.pet_breed))\n                                                and lower(trim(pbc.pet_type)) = lower(trim(p.pet_type))\nleft join ${Database}.db.pet_avatar_colour_lookup cl on upper(trim(p.pet_breed)) = upper(trim(cl.breed))\n                                                    and upper(trim(p.pet_colour)) = upper(trim(cl.passed_colour))\n    where nvl(l.deceased_flag,0) = 0\n    and upper(x.name_urn||'|'||trim(p.pet_name)) not in\n    (\n        select \n            deceased_urn\n        from ${Database}.temp.supps_pets\n    )\n    ) t\n;\n\n\n--Create deduped table of pet names with information\ndrop table if exists ${Database}.live.cid_pet;\nCREATE OR REPLACE TABLE ${Database}.live.cid_pet as\nselect \n    row_number() over (partition by cid order by case when nvl(pet_name,'') > '' then 1 else 0 end desc,pet_dob asc,case when nvl(pet_breed,'') > '' then 1 else 0 end desc,case when nvl(pet_gender,'') > '' then 1 else 0 end desc,name_urn desc,pet_name asc) as pet_number\n    ,* \nfrom\n(\nselect *\n       ,  case when pet_name > '' then pet_name\n               when pet_name = '' and lead(pet_name, 1) over(partition by cid, pet_type order by pet_name asc) > '' \n                                  and pet_data_date < lead(pet_data_date, 1) over(partition by cid, pet_type order by pet_data_date asc) then 'new name added' \n            else pet_name end as new_pets\nfrom\n(\nselect \n    cid\n    ,name_urn\n  \t,cast('' as varchar(50)) as pet_id\n    ,pet_type\n    ,pet_name_cleaned as pet_name\n    ,pet_breed\n    ,pet_gender\n    ,first_value(derived_pet_dob) over (partition by cid,pet_type,pet_name_cleaned order by case when derived_pet_dob is null then 0 else 1 end desc,pet_dob_last_data_date desc,derived_pet_dob desc) as pet_dob\n    ,first_value(dob_type) over (partition by cid,pet_type,pet_name_cleaned order by case when derived_pet_dob is null then 0 else 1 end desc,pet_dob_last_data_date desc,derived_pet_dob desc,dob_type desc) as pet_dob_type\n    ,coalesce(trim(lk.size),pt.pet_size) as pet_size\n    ,pet_indoor_outdoor\n    ,trim(pt.pet_colour) as pet_colour\n    ,pet_dob_last_data_date as pet_data_date\n    ,case\n  \t\twhen pet_life_stage > '' then pet_life_stage\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-12)  and coalesce(lk.size,pt.pet_size) in ('T','S')          then 'Puppy'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-24)  and coalesce(lk.size,pt.pet_size) in ('L','XL')         then 'Puppy'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-120) and coalesce(lk.size,pt.pet_size) in ('T','S')          then 'Adult'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-60)  and coalesce(lk.size,pt.pet_size) in ('L','XL')         then 'Adult'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-156) and coalesce(lk.size,pt.pet_size) in ('T','S','L','XL') then 'Senior'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-12)                                                          then 'Puppy'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-84)                                                          then 'Adult'\n        when pet_type = 'Dog' and derived_pet_dob >  add_months(current_date,-156)                                                         then 'Senior'\n        when pet_type = 'Dog' and derived_pet_dob <= add_months(current_date,-156)                                                         then 'Older'\n        when pet_type = 'Cat' and derived_pet_dob >  add_months(current_date,-12)                                                          then 'Kitten'\n        when pet_type = 'Cat' and derived_pet_dob >  add_months(current_date,-84)                                                          then 'Adult'\n        when pet_type = 'Cat' and derived_pet_dob >  add_months(current_date,-192)                                                         then 'Senior'\n        when pet_type = 'Cat' and derived_pet_dob <= add_months(current_date,-192)                                                         then 'Older'\n        else 'Unknown'\n    end as pet_life_stage\n    ,cast(0 as int) as pdc_gender_link_update\n    ,cast(0 as int) as pdc_breed_link_update\n    ,cast(0 as int) as pdc_colour_link_update\n    ,cast(0 as int) as pdc_outdoor_link_update\n    ,first_value(avatarid) over (partition by cid,pet_type,pet_name_cleaned order by case when avatarid is null then 0 else 1 end desc,data_date desc) as avatarid\n    ,source\n    ,row_number() over (partition by cid,pet_type,pet_name_cleaned order by data_date desc,pet_dob_last_data_date desc,derived_pet_dob desc,pet_size desc,pet_indoor_outdoor desc,pet_gender desc,pet_breed desc) as rownum\nfrom ${Database}.temp.cid_pet_temp pt\nleft join ${Database}.db.dog_breed_size_lookup lk on upper(pt.pet_breed) =  upper(trim(lk.breed))\nwhere pet_type in ('Cat','Dog')\n) t\nwhere rownum = 1\nand\n    (\n        (\n            pet_type = 'Dog' \n            and pet_dob > add_months(current_date, -240) --Dogs must be under 20\n        )\n        or \n        (\n            pet_type = 'Cat' \n            and pet_dob > add_months(current_date, -360) --Cats must be under 30\n        )\n        or\n        (\n            pet_type in ('Dog', 'Cat') --remove anything other than cat/dog\n            and pet_data_date >= add_months(current_date, -12) --everything captured in the last 12 months is valid\n        )\n    )\nand name_urn not in (\n                    select distinct c.name_urn\n                    from ${Database}.temp.cid_pet_temp c\n                    inner join ${Database}.temp.cid_pet_temp c2 on c.cid = c2.cid \n                                                          and c.pet_type = c2.pet_type \n                                                          and c2.source = 'RESP_REV_DAILY'\n                    where c.pet_name_cleaned = ''\n                    ) \n) np \nwhere new_pets <> 'new name added'\n;\n                        \ninsert into ${Database}.db.build_log \nselect \n    'nestle_pets_rollups',\n    '${Database}.live.cid_pet',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz \nfrom ${Database}.live.cid_pet;\n\n--merge pdc ages\nmerge into ${Database}.live.cid_pet pt\nusing (\n          select\n              xr.cid,\n              ae.npp_ecrm_pdc_age as pet_name,\n              case when lower(link_url) ilike '%utm_content=twoyears%' then cast(add_months(event_timestamp, -24) as date)\n                   when lower(link_url) ilike '%utm_content=fiveyears%' then cast(add_months(event_timestamp, -60) as date)\n                   when lower(link_url) ilike '%utm_content=eightyears%' then cast(add_months(event_timestamp, -96) as date)\n                   when lower(link_url) ilike '%utm_content=tenyears%' then cast(add_months(event_timestamp, -120) as date)\n                   end as pet_dob,\n              cast(event_timestamp as date) as data_date,\n              row_number() over(partition by xr.cid, ae.npp_ecrm_pdc_age order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ae.name_urn\n          where lower(event_name) regexp '.*click.*'\n          and link_label = 'PDC | Service | PDC'\n          and link_url ilike any  (\n                                  '%utm_content=twoyears%',\n                                  '%utm_content=fiveyears%',\n                                  '%utm_content=eightyears%',\n                                  '%utm_content=tenyears%'\n                                 )\n          --and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population))\n      ) ax on ax.cid = pt.cid\n          and lower(ax.pet_name) = lower(pt.pet_name)\n          and ax.rn = 1\n          and ax.pet_dob <> pt.pet_dob\nwhen matched and ax.data_date > pt.pet_data_date  then update\nset pt.pet_dob = ax.pet_dob,\n    pt.PET_DOB_TYPE = 'PDC click',\n    pt.pet_data_date = ax.data_date;\n\n\n--merge pdc breeds\nmerge into ${Database}.live.cid_pet pt\nusing (\n          select\n              xr.cid,\n              ae.npp_ecrm_pdc_breed as pet_name,\n              case when lower(link_url) ilike '%utm_content=crossbreed%' then 'Cross Breed'\n                   when lower(link_url) ilike '%utm_content=labrador%' then 'Retriever (Labrador)'\n                   when lower(link_url) ilike '%utm_content=collie%' then 'Border Collie'\n                   when lower(link_url) ilike '%utm_ content=cocker%' then 'Spaniel (Cocker)'\n                   when lower(link_url) ilike '%utm_content=french%' then 'French Bulldog'\n                   end as pet_breed,\n              cast(event_timestamp as date) as data_date,\n              row_number() over(partition by xr.cid, ae.npp_ecrm_pdc_breed order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ae.name_urn\n          where lower(event_name) regexp '.*click.*'\n          and link_label = 'PDC | Service | PDC' --check\n          and link_url ilike any  (\n                                  '%utm_content=crossbreed%', \n                                  '%utm_content=labrador%',\n                                  '%utm_content=collie%',\n                                  '%utm_content=cocker%',\n                                  '%utm_content=french%'\n                                 )\n          --and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population))\n      ) ax on ax.cid = pt.cid\n          and lower(ax.pet_name) = lower(pt.pet_name)\n          and ax.rn = 1\n          and ax.pet_breed <> pt.pet_breed\nwhen matched and ax.data_date > pt.pet_data_date and pet_type = 'Dog' then update\nset pt.pet_breed = ax.pet_breed,\n    pt.pdc_breed_link_update = 1,\n    pt.pet_data_date = ax.data_date;\n;\n\n--merge pdc colours\nmerge into ${Database}.live.cid_pet pt\nusing (\n          select\n              xr.cid,\n              ae.npp_ecrm_pdc_colour as pet_name,\n              case when lower(link_url) ilike '%utm_content=white%' then 'White'\n                   when lower(link_url) ilike '%utm_content=blackwhite%'  then 'Black & White'\n                   when lower(link_url) ilike '%utm_content=black%'  then 'Black'\n                   when lower(link_url) ilike '%utm_content=tabby%' then 'Tabby'\n                   when lower(link_url) ilike '%utm_content=ginger%' then 'Ginger'\n                   when lower(link_url) ilike '%utm_content=multi%' then 'Multi'\n                   when lower(link_url) ilike '%utm_content=brown%' then 'Brown'\n                   when lower(link_url) ilike '%utm_content=grey%' then 'Grey'\n                   when lower(link_url) ilike '%utm_content=hairless%' then 'Hairless'\n                   end as pet_colour,\n              cast(event_timestamp as date) as data_date,\n              row_number() over(partition by xr.cid, ae.npp_ecrm_pdc_colour order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ae.name_urn\n          where lower(event_name) regexp '.*click.*'\n          and link_label = 'PDC | Service | PDC' --check\n          and link_url ilike any  (\n                                  '%utm_content=white%',\n                                  '%utm_content=blackwhite%',\n                                  '%utm_content=black%' ,\n                                  '%utm_content=tabby%',\n                                  '%utm_content=ginger%',\n                                  '%utm_content=multi%',\n                                  '%utm_content=brown%',\n                                  '%utm_content=grey%',\n                                  '%utm_content=hairless%'\n                                 )\n          --and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population))\n      ) ax on ax.cid = pt.cid\n          and lower(ax.pet_name) = lower(pt.pet_name)\n          and ax.rn = 1\n          and ax.pet_colour <> pt.pet_colour\nwhen matched and ax.data_date > pt.pet_data_date and pet_type = 'Cat' then update\nset pt.pet_colour = ax.pet_colour,\n    pt.pdc_colour_link_update = 1,\n    pt.pet_data_date = ax.data_date;\n;\n    \n--merge pdc npp_ecrm_pdc_outdoor\nmerge into ${Database}.live.cid_pet pt\nusing (\n          select\n              xr.cid,\n              ae.npp_ecrm_pdc_outdoor as pet_name,\n              case when lower(link_url) ilike '%utm_content=indoor%' then 'I'\n                   when lower(link_url) ilike '%utm_content=outdoor%'  then 'O'\n                   end as PET_INDOOR_OUTDOOR,\n              cast(event_timestamp as date) as data_date,\n              row_number() over(partition by xr.cid, ae.npp_ecrm_pdc_outdoor order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ae.name_urn\n          where lower(event_name) regexp '.*click.*'\n          and link_label = 'PDC | Service | PDC' --check\n          and link_url ilike any  (\n                                  '%utm_content=indoor%',\n                                  '%utm_content=outdoor%'\n                                 )\n          --and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population))\n      ) ax on ax.cid = pt.cid\n          and lower(ax.pet_name) = lower(pt.pet_name)\n          and ax.rn = 1\n          and ax.PET_INDOOR_OUTDOOR <> pt.PET_INDOOR_OUTDOOR\nwhen matched and ax.data_date > pt.pet_data_date and pet_type = 'Cat' then update\nset pt.PET_INDOOR_OUTDOOR = ax.PET_INDOOR_OUTDOOR,\n    pt.pdc_outdoor_link_update = 1,\n    pt.pet_data_date = ax.data_date;\n;\n\n--merge pdc genders\n--gender merged directly from adestra event to live cid pet, some links were missing (purina-pdc.tbw-apps.net)\nmerge into ${Database}.live.cid_pet pt\nusing (\n          select\n              xr.cid,\n              ae.npp_ecrm_pdc_gender as pet_name,\n              case when lower(link_url) regexp '.*=female.*' then 'Female'\n                   when lower(link_url) regexp '.*=male.*' then 'Male' \n                   end as pet_gender,\n              cast(event_timestamp as date) as data_date,\n              row_number() over(partition by xr.cid, ae.npp_ecrm_pdc_gender order by event_timestamp desc) as rn\n          from ${Database}.db.adestra_events ae\n          inner join ${Database}.live.xref_name_urn xr on xr.name_urn = ae.name_urn\n          where lower(event_name) regexp '.*click.*'\n          and link_label = 'PDC | Service | PDC'\n          and link_url ilike any (\n                            '%utm_content=female%',\n                            '%utm_content=male%'\n                          )\n          --and ae.email not in (select email from ${Database}.db.names where bbw_urn in (select bbw_urn from ${Database}.db.pdc_population))\n      ) ax on ax.cid = pt.cid\n          and lower(ax.pet_name) = lower(pt.pet_name)\n          and ax.rn = 1\n          and pt.pet_gender <> ax.pet_gender\nwhen matched and ax.data_date > pt.pet_data_date then update\nset pt.pet_gender = ax.pet_gender,\n    pt.pdc_gender_link_update = 1,\n    pt.pet_data_date = ax.data_date;\n;\n\n\n-- Insert new pets into pet id table\nmerge into ${Database}.db.ref_pet_id rp\nusing (\n          select\n              bbw_urn,\n              pet_type,\n              pet_name,\n              date_code||'-'||unique_code||'-'||pet_type_code||'-'||bbw_urn_code as pet_id\n          from (\n                   select\n                       xr.bbw_urn,\n                       pt.pet_type,\n                       lower(pt.pet_name) as pet_name,\n\t\t\t\t\t   --Note that the bit below will only work as long as the length of hte Hex string doesn't exceed 8 characters\n                       replace(to_char(to_char(current_date(),'YYYYMMDD')::integer,'XXXXXXXX'),' ','0') as date_code,\n                       replace(to_char(row_number() over (order by 1),'XXXXXX'),' ','0') as unique_code,\n\t\t\t\t\t   --Not totally sure why the hex isn't hard coded here?\n                       replace(to_char(case when pet_type = 'Cat' then 3120 else 4157 end,'XXXX'),' ','0') as pet_type_code,\n                       replace(to_char(xr.bbw_urn,'XXXXXXXXXXXX'),' ','0') as bbw_urn_code\n                   from ${Database}.live.cid_pet pt\n                   inner join (\n                                  select\n                                      cid,\n                                      min(bbw_urn) as bbw_urn\n                                  from ${Database}.live.xref_name_urn\n                                  group by 1\n                              ) xr on xr.cid = pt.cid\n               ) p\n      ) id on id.bbw_urn = rp.bbw_urn\n          and id.pet_type = rp.pet_type\n          and id.pet_name = rp.pet_name\nwhen not matched then insert\n(\n    bbw_urn,\n    pet_type,\n    pet_name,\n    pet_id,\n    data_date\n)\nvalues\n(\n    id.bbw_urn,\n    id.pet_type,\n    id.pet_name,\n    id.pet_id,\n    current_date\n);\n\ninsert into ${Database}.db.build_log \nselect\n    'nestle_pets_rollups',\n    '${Database}.db.ref_pet_id',\n    'new records',\n    cast(count(*) as varchar),\n    current_timestamp \nfrom ${Database}.db.ref_pet_id\nwhere data_date = current_date;\n\n\n-- Set pet_id in live pet table\nmerge into ${Database}.live.cid_pet pt\nusing (\n          select\n              xr.cid,\n              rp.pet_id,\n              rp.pet_type,\n              rp.pet_name,\n              row_number() over(partition by xr.cid, rp.pet_type, rp.pet_name order by rp.bbw_urn) as rn\n          from ${Database}.db.ref_pet_id rp\n          inner join ${Database}.live.xref_name_urn xr on xr.bbw_urn = rp.bbw_urn\n      ) rp on rp.cid = pt.cid\n          and rp.pet_type = pt.pet_type\n          and lower(rp.pet_name) = lower(pt.pet_name)\n          and rp.rn = 1\nwhen matched then update\nset pt.pet_id = rp.pet_id;\n\n--CREATE cid_Litter table\ndrop table if exists ${Database}.live.cid_litter;\nCREATE OR REPLACE TABLE ${Database}.live.cid_litter\nas\nselect\n    cid,\n    coalesce(sire_name,'') as sire_name,\n    coalesce(dam_name,'') as dam_name,\n    litter_type,\n    litter_dob,\n    case when litter_size = 'T' then 'S'\n               when litter_size = '' then Size\n               else litter_size end as litter_size,\n    litter_breed,\n    litter_puppies_kittens,\n    litter_kennel,\n    data_date,\n    source,\n    source_file,\n    source_urn,\n    source_date\nfrom (\n         select\n             xr.cid,\n  \t\t\ttrim(lt.name_urn) as NAME_URN,\n\t\t\ttrim(lt.sire_name) as SIRE_NAME,\n\t\t\ttrim(lt.dam_name) as DAM_NAME,\n\t\t\ttrim(lt.litter_type) as LITTER_TYPE,\n\t\t\tlt.litter_dob,\n\t\t\ttrim(lt.litter_size) as LITTER_SIZE,\n\t\t\ttrim(lt.litter_breed) as LITTER_BREED,\n\t\t\tlitter_puppies_kittens,\n\t\t\ttrim(litter_kennel) as LITTER_KENNEL,\n\t\t\tlt.data_date,\n\t\t\ttrim(lt.source) as SOURCE,\n\t\t\ttrim(lt.source_file) as SOURCE_FILE,\n\t\t\ttrim(lt.source_urn) as SOURCE_URN,\n\t\t\tlt.source_date,\n             row_number() over\n             (\n                 partition by \n                     xr.cid,\n                     trim(lt.sire_name),\n                     trim(lt.dam_name),\n                     trim(lt.litter_type),\n                     lt.litter_dob,\n                     trim(lt.litter_size),\n                     trim(lt.litter_breed),\n                     lt.litter_puppies_kittens,\n                     trim(lt.litter_kennel)\n                 order by \n                     lt.data_date desc nulls last,\n                     lt.source_date desc nulls last\n             ) as row_num\n         from ${Database}.live.xref_name_urn xr\n         inner join ${Database}.db.litter lt on trim(lt.name_urn) = xr.name_urn\n     ) dlt\n     left outer join ${Database}.db.DOG_BREED_SIZE_LOOKUP sl on lower(left(dlt.Litter_breed,15)) = lower(left(trim(sl.breed),15))\nwhere row_num = 1;\n\ninsert into ${Database}.db.build_log \nselect\n    'nestle_pets_rollups',\n    '${Database}.live.cid_litter',\n    'total records',\n    cast(count(*) as varchar),\n    current_timestamp \nfrom ${Database}.live.cid_litter\nwhere data_date = current_date;\n\n\n\n/******************************************************************************************\n                                       FINISH PROC\n******************************************************************************************/\n\ninsert into ${Database}.db.build_log \nselect \n    'nestle_pets_rollups',\n    '*************************',\n    '*************************',\n    'end of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;  \n  \n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"197177":{"id":197177,"sourceID":197179,"targetID":197178}},"failureConnectors":{},"unconditionalConnectors":{"197176":{"id":197176,"sourceID":197172,"targetID":197179}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{"197173":{"id":197173,"x":-70,"y":-84,"width":360,"height":75,"text":"This create consumer pets tables used primarily in Purina campaigns.\n\nSee top rows of Rollups SQL script for list of tables created.\n","colour":"00ce4f"}},"variables":{},"grids":{}},"info":{"name":"Proc12_Pets","description":"Proc12 Pets","type":"ORCHESTRATION","tag":"bfdfecf2-b172-4b90-929a-c4c59a0f0b4a"}}