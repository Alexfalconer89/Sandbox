{"job":{"components":{"197160":{"id":197160,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-80,"y":176,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of Proc 9 Supps"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nMatillion Program  : Nestle Names Suppressions\nAuthor             : Lindsay Timms\nClient Name        : Nestle\nUpdate Job Numbers : NUK08617(01/22)\nStandard Machine   : Snowflake\nAmendment History  : v01 Kog - LT 20161220 - Created\n                     v01 SF - LukeD\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \n******************************************************************************************/\n\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 9 Suppressions'\n, \t\t'SCRIPT'\n, \t\t'STARTED'\n;\n\n/******************************************************************************************\n                                   NAMES SUPPRESSIONS\n******************************************************************************************/\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_names_suppressions',\n    '*************************',\n    '*************************',\n    'start of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\nalter warehouse set warehouse_size = 'Large';\n\n--bit of a fudge on irish mailable data\nupdate ${Database}.temp.names_tmp\nset add1      = case when lower(add1)     = 'n/a' then '' else add1 end,\n    add2      = case when lower(add2)     = 'n/a' then '' else add2 end,\n    add3      = case when lower(add3)     = 'n/a' then '' else add3 end,\n    add4      = case when lower(add4)     = 'n/a' then '' else add4 end,\n    add5      = case when lower(add5)     = 'n/a' then '' else add5 end,\n    city      = case when lower(city)     = 'n/a' then '' else city end,\n    state     = case when lower(state)    = 'n/a' then '' else state end,\n    postcode  = case when lower(postcode) = 'n/a' then '' else postcode end\nwhere lower(cc_iso)  = 'ie';\n\nupdate ${Database}.temp.names_tmp set add1 = ''     where lower(cc_iso) = 'ie' and add1 regexp '.*0{2,20}.*'     and lower(add1) not regexp '.*[1-9a-z].*';\nupdate ${Database}.temp.names_tmp set add2 = ''     where lower(cc_iso) = 'ie' and add2 regexp '.*0{2,20}.*'     and lower(add2) not regexp '.*[1-9a-z].*';\nupdate ${Database}.temp.names_tmp set add3 = ''     where lower(cc_iso) = 'ie' and add3 regexp '.*0{2,20}.*'     and lower(add3) not regexp '.*[1-9a-z].*';\nupdate ${Database}.temp.names_tmp set add4 = ''     where lower(cc_iso) = 'ie' and add4 regexp '.*0{2,20}.*'     and lower(add4) not regexp '.*[1-9a-z].*';\nupdate ${Database}.temp.names_tmp set add5 = ''     where lower(cc_iso) = 'ie' and add5 regexp '.*0{2,20}.*'     and lower(add5) not regexp '.*[1-9a-z].*';\nupdate ${Database}.temp.names_tmp set postcode = '' where lower(cc_iso) = 'ie' and postcode regexp '.*0{2,20}.*' and lower(postcode) not regexp '.*[1-9a-z].*';\n\nupdate ${Database}.temp.names_tmp\nset city = add3, add3 = ''\nwhere lower(cc_iso) = 'ie'\n    and add3 <> ''\n    and city <> add3\n\tand regexp_replace(replace(add3,city,''), '0123456789 ') = ''\n    and regexp_replace(add3,'0123456789 ') <> '';\n\nupdate ${Database}.temp.names_tmp\nset state = city, city = ''\nwhere lower(cc_iso) = 'ie'\n    and city <> ''\n    and state <> city\n    and regexp_replace(replace(city,state,''), '0123456789 ') = ''\n    and regexp_replace(city,'0123456789 ') <> '';\n\nupdate ${Database}.temp.names_tmp\nset add2 = ''\nwhere lower(cc_iso) = 'ie'\n    and add2 = city;\n\nupdate ${Database}.temp.names_tmp\nset add3 = ''\nwhere lower(cc_iso) = 'ie'\n    and add3 = city;\n\nupdate ${Database}.temp.names_tmp\nset city = ''\nwhere lower(cc_iso) = 'ie'\n    and city = state;\n    \n--master name urn table\ndrop table if exists ${Database}.temp.build_supps_prep_name_urn;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_prep_name_urn\nas\nselect\n    cid,\n    hid,\n    name_urn,\n    source_data_controller_id,\n    source_brand_id,\n    source_date,\n    data_date,\n    email,\n    phone_home,\n    phone_work,\n    phone_mobile,\n    add1\nfrom ${Database}.temp.names_tmp;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_prep_name_urn',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_prep_name_urn;\n\n\n/******************************************************************************************\n                                     DATA PROTECTION\n******************************************************************************************/\n\n\ndrop table if exists ${Database}.temp.build_dp_1_prep;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_dp_1_prep\nas\nselect\n    nmt.cid,\n    nmt.hid,\n    nmt.name_urn,\n    nmt.email,\n    dp.data_controller_id, --dc for opt ins\n    dp.brand_id, --brand is for opt in brand rather than source\n    dp.dp_date,\n    dp.dp_mailable,\n    dp.dp_emailable,\n    dp.dp_phoneable,\n    dp.dp_smsable,\n    dp.dp_newsletter,\n    dp.source_date,\n    dp.data_date,\n    dp.source as dp_source,   \n    to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') as month_start_dt\nfrom ${Database}.temp.build_supps_prep_name_urn nmt\ninner join ${Database}.db.names_dp dp on trim(nmt.name_urn) = trim(dp.name_urn)\nwhere --must have at least 1 permission\n    dp.dp_mailable is not null\n    or dp.dp_emailable is not null\n    or dp.dp_phoneable is not null\n    or dp.dp_smsable is not null\n    or dp.dp_newsletter is not null;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_dp_1_prep',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_dp_1_prep;\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_roll_base;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_roll_base\nas\nselect distinct\n    email,\n    cid,\n    data_controller_id, --if no brand then we need the dc to work out permissions\n    brand_id,\n    first_value(dp_date) over\n        (\n            partition by cid, data_controller_id, brand_id\n            order by dp_date desc nulls last\n        ) \t\t\t\t\t\t\t\t\t\t\t\t\t\tas dp_last_date,\n    first_value(case when source_date < month_start_dt then dp_date else cast(null as date) end) over\n        (\n            partition by cid, data_controller_id, brand_id\n            order by case when source_date < month_start_dt then 1 else 0 end desc,\n                dp_date desc nulls last\n        ) \t\t\t\t\t\t\t\t\t\t\t\t\t\tas dp_last_date_lm,   \n    first_value(dp_source) over\n        (\n            partition by cid, data_controller_id, brand_id\n            order by dp_date desc nulls last, data_date desc\n        )                                                       as dp_last_source,  \n    first_value(dp_date) over\n        (\n            partition by cid, data_controller_id , brand_id\n            order by dp_date nulls last, data_date\n        )                                                       as dp_first_date,  \n    first_value(dp_source) over\n        (\n            partition by cid, data_controller_id, brand_id\n            order by dp_date nulls last, data_date \n        )                                                       as dp_first_source\nfrom ${Database}.temp.build_dp_1_prep;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_roll_positive;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_roll_positive\nas\nselect distinct\n    cid,\n    data_controller_id,\n    brand_id,\n    first_value(case when dp_emailable = 1 or dp_mailable = 1 or dp_newsletter = 1 then dp_date else cast(null as date) end) over\n        (\n            partition by cid, data_controller_id, brand_id\n            order by\n                case when dp_emailable = 1 or dp_mailable = 1 or dp_newsletter = 1 then 1 else 0 end desc,\n                dp_date desc nulls last,\n                data_date desc nulls last,\n                source_date desc nulls last\n        )  as dp_last_positive_date,\n    first_value(case when source_date < month_start_dt and (dp_emailable = 1 or dp_mailable = 1 or dp_newsletter = 1) then dp_date else cast(null as date) end) over\n        (\n            partition by cid, data_controller_id, brand_id\n            order by\n                case when source_date < month_start_dt then 1 else 0 end desc,\n                case when dp_emailable = 1 or dp_mailable = 1 or dp_newsletter = 1 then 1 else 0 end desc,\n                dp_date desc nulls last,\n                data_date desc nulls last,\n                source_date desc nulls last\n        ) as dp_last_positive_date_lm,\n    first_value(case when dp_emailable = 1 or dp_mailable = 1 or dp_newsletter = 1 then dp_source else null end) over\n        (\n            partition by cid, data_controller_id, brand_id\n            order by\n                case when dp_emailable = 1 or dp_mailable = 1 or dp_newsletter = 1 then 1 else 0 end desc,\n                dp_date desc nulls last,\n                data_date desc nulls last,\n                source_date desc nulls last\n        )  as dp_last_positive_source\nfrom ${Database}.temp.build_dp_1_prep;\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_roll_positive_email;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_roll_positive_email\nas\nselect\n    email,\n    data_controller_id,\n    brand_id,\n    dp_last_positive_emailable_date,\n    dp_last_positive_emailable_source\nfrom (\n         select\n             email,\n             data_controller_id,\n             brand_id,\n             case when dp_emailable = 1 then dp_date else cast(null as date) end as dp_last_positive_emailable_date,\n             case when dp_emailable = 1 then dp_source else null end as dp_last_positive_emailable_source,\n             row_number() over\n                 (\n                     partition by email, data_controller_id, brand_id\n                     order by\n                         dp_emailable desc nulls last,\n                         dp_date desc nulls last,\n                         data_date desc nulls last,\n                         source_date desc nulls last\n                 ) as row_num\n         from ${Database}.temp.build_dp_1_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_roll_positive_email_lm;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_roll_positive_email_lm\nas\nselect\n    email,\n    data_controller_id,\n    brand_id,\n    dp_last_positive_emailable_date_lm\nfrom (\n         select\n             email,\n             data_controller_id,\n             brand_id,\n             case when source_date < month_start_dt and dp_emailable = 1 then dp_date else cast(null as date) end as dp_last_positive_emailable_date_lm,\n             case when source_date < month_start_dt and dp_emailable = 1 then dp_source else null end as dp_last_positive_emailable_source_lm,\n             row_number() over\n                 (\n                     partition by email, data_controller_id, brand_id\n                     order by\n                         case when source_date < month_start_dt then 1 else 0 end desc,\n                         dp_emailable desc nulls last,\n                         dp_date desc nulls last,\n                         data_date desc nulls last,\n                         source_date desc nulls last\n                 ) as row_num\n         from ${Database}.temp.build_dp_1_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_roll_mail;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_roll_mail\nas\nselect\n    cid,\n    data_controller_id, --if no brand then we need the dc to work out permissions\n    brand_id,\n    dp_mailable,\n    dp_last_mailable_date,\n    dp_last_mailable_source\nfrom (\n         select\n             cid,\n             data_controller_id,\n             brand_id,\n             dp_mailable,\n             dp_date as dp_last_mailable_date,\n             dp_source as dp_last_mailable_source,\n             row_number() over\n                 (\n                     partition by cid, data_controller_id, brand_id\n                     order by\n                         case when dp_mailable is null then 0 else 1 end desc,\n                         dp_date desc nulls last,\n                         data_date desc nulls last,\n                         source_date desc nulls last,\n                         dp_mailable nulls last\n                 ) as row_num\n         from ${Database}.temp.build_dp_1_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_roll_email;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_roll_email\nas\nselect\n    email,\n    data_controller_id, --if no brand then we need the dc to work out permissions\n    brand_id,\n    dp_emailable,\n    dp_last_emailable_date,\n    dp_last_emailable_source\nfrom (\n         select\n             email,\n             data_controller_id,\n             brand_id,\n             dp_emailable,\n             dp_date as dp_last_emailable_date,\n             dp_source as dp_last_emailable_source,  \n             row_number() over\n                 (\n                     partition by email, data_controller_id, brand_id --for gigya/gdpr we now need to permission by email address\n                     order by\n                         case when dp_emailable is null then 0 else 1 end desc,\n                         dp_date desc nulls last,\n                         data_date desc nulls last,\n                         source_date desc nulls last,\n                         dp_emailable nulls last, \n                         data_controller_id\n                 ) as row_num\n         from ${Database}.temp.build_dp_1_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_roll_newsletter;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_roll_newsletter\nas\nselect\n    email,\n    data_controller_id, --if no brand then we need the dc to work out permissions\n    brand_id,\n    dp_newsletter,\n    dp_last_newsletter_date\nfrom (\n         select\n             email,\n             data_controller_id,\n             brand_id,\n             dp_newsletter,\n             dp_date as dp_last_newsletter_date,\n             row_number() over\n                 (\n                     partition by email, data_controller_id, brand_id --for gigya/gdpr we now need to permission by email address\n                     order by\n                         case when dp_newsletter is null then 0 else 1 end desc,\n                         dp_date desc nulls last,\n                         data_date desc nulls last,\n                         source_date desc nulls last,\n                         dp_newsletter nulls last, \n                         data_controller_id\n                 ) as row_num\n         from ${Database}.temp.build_dp_1_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_roll_email_lm;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_roll_email_lm\nas\nselect\n    email,\n    data_controller_id, --if no brand then we need the dc to work out permissions\n    brand_id,\n    dp_emailable_lm,\n    dp_last_emailable_date_lm\nfrom (\n         select\n             email,\n             data_controller_id,\n             brand_id,\n             case when source_date < month_start_dt then dp_emailable else cast(null as int) end as dp_emailable_lm,\n             case when source_date < month_start_dt then dp_date else cast(null as date) end as dp_last_emailable_date_lm,\n             row_number() over\n                 (\n                     partition by email, data_controller_id, brand_id --for gigya/gdpr we now need to permission by email address\n                     order by\n                         case when source_date < month_start_dt then 1 else 0 end desc,\n                         case when dp_emailable is null then 0 else 1 end desc,\n                         dp_date desc nulls last,\n                         data_date desc nulls last,\n                         source_date desc nulls last,\n                         dp_emailable nulls last\n                 ) as row_num\n         from ${Database}.temp.build_dp_1_prep\n     ) dp\nwhere row_num = 1;\t\t\t\t\t\t\t \n\ndrop table if exists ${Database}.temp.build_supps_names_dp_roll;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_roll\nas\nselect distinct\n    ba.email,\n    ba.cid,\n    ba.data_controller_id, --if no brand then we need the dc to work out permissions\n    ba.brand_id,\n    ma.dp_mailable,\n    em.dp_emailable,\n    el.dp_emailable_lm,\n    ne.dp_newsletter,\n    ma.dp_last_mailable_date,\n    em.dp_last_emailable_date,\n    pe.dp_last_positive_emailable_date,\n    el.dp_last_emailable_date_lm,\n    pl.dp_last_positive_emailable_date_lm,\n    ne.dp_last_newsletter_date,\n    ba.dp_last_date,\n    ba.dp_last_date_lm,\n    po.dp_last_positive_date,\n    po.dp_last_positive_date_lm,\n    --sources\n    ma.dp_last_mailable_source,\n    em.dp_last_emailable_source,\n    pe.dp_last_positive_emailable_source,\n    --ne.dp_last_newsletter_source,\n    ba.dp_last_source,\n    po.dp_last_positive_source,\n    --acquisition\n    ba.dp_first_date,\n    ba.dp_first_source\nfrom ${Database}.temp.build_supps_names_dp_roll_base ba\nleft join ${Database}.temp.build_supps_names_dp_roll_positive po on po.cid = ba.cid\n                                                           and po.data_controller_id = ba.data_controller_id\n                                                           and coalesce(po.brand_id,0) = coalesce(ba.brand_id,0)\nleft join ${Database}.temp.build_supps_names_dp_roll_positive_email pe on lower(trim(pe.email)) = lower(trim(ba.email))\n                                                                 and pe.data_controller_id = ba.data_controller_id\n                                                                 and coalesce(pe.brand_id,0) = coalesce(ba.brand_id,0)\nleft join ${Database}.temp.build_supps_names_dp_roll_positive_email_lm pl on lower(trim(pl.email)) = lower(trim(ba.email))\n                                                                     and pl.data_controller_id = ba.data_controller_id\n                                                                     and coalesce(pl.brand_id,0) = coalesce(ba.brand_id,0)\nleft join ${Database}.temp.build_supps_names_dp_roll_email em on lower(trim(em.email)) = lower(trim(ba.email))\n                                                        and em.data_controller_id = ba.data_controller_id\n                                                        and coalesce(em.brand_id,0) = coalesce(ba.brand_id,0)\nleft join ${Database}.temp.build_supps_names_dp_roll_mail ma on ma.cid = ba.cid\n                                                       and ma.data_controller_id = ba.data_controller_id\n                                                       and coalesce(ma.brand_id,0) = coalesce(ba.brand_id,0)\nleft join ${Database}.temp.build_supps_names_dp_roll_newsletter ne on lower(trim(ne.email)) = lower(trim(ba.email))\n                                                             and ne.data_controller_id = ba.data_controller_id\n                                                             and coalesce(ne.brand_id,0) = coalesce(ba.brand_id,0)\nleft join ${Database}.temp.build_supps_names_dp_roll_email_lm el on lower(trim(el.email)) = lower(trim(ba.email))\n                                                           and el.data_controller_id = ba.data_controller_id\n                                                           and coalesce(el.brand_id,0) = coalesce(ba.brand_id,0);\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_roll',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_roll;\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_roll_base;\n--drop table if exists ${Database}.temp.build_supps_names_dp_roll_positive;\n--drop table if exists ${Database}.temp.build_supps_names_dp_roll_positive_email;\n--drop table if exists ${Database}.temp.build_supps_names_dp_roll_positive_email_lm;\n--drop table if exists ${Database}.temp.build_supps_names_dp_roll_email;\n--drop table if exists ${Database}.temp.build_supps_names_dp_roll_mail;\n--drop table if exists ${Database}.temp.build_supps_names_dp_roll_newsletter;\n--drop table if exists ${Database}.temp.build_supps_names_dp_roll_email_lm;\n--drop table if exists ${Database}.temp.build_dp_1_prep;\n\n\n--build the cross ref on the fly\n--build the reverse live lookup - dc/brand combos = business unit\n--be aware of same brand under different dc - both need to inherit the latest permission per brand\n\ndrop table if exists ${Database}.temp.build_ref_data_controller_division_xref;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_ref_data_controller_division_xref\nas\nselect\n    di.data_controller_id,\n    di.division_id,\n    br.brand_id\nfrom ${Database}.db.ref_data_controller_division_xref di\ninner join ${Database}.db.ref_brand br on di.division_id = br.division_id;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_ref_data_controller_division_xref',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_ref_data_controller_division_xref;\n\n--Main business level reference table (eventually will replace the above 'build_ref_data_controller_division_xref' table)\ndrop table if exists ${Database}.live.xref_business_level;\n\nCREATE OR REPLACE TABLE ${Database}.live.xref_business_level\nas\nselect\n    data_controller_id,\n    business_unit_id,\n    division_id,\n    brand_id,\n    case when rn = 1 then rn end as primary_division_map,\n    case when rn2 = 1 then rn2 end as primary_brand_map\nfrom\n    (select\n        x.data_controller_id,\n        case\n            when di.business_unit_id is not null then di.business_unit_id\n            else br.brand_id + (select max(data_controller_id) from ${Database}.db.ref_data_controller) --insert the missing ones with fake bu's\n        end as business_unit_id,\n        di.division_id,\n        br.brand_id,\n        row_number() over (partition by di.division_id order by case when x.data_controller_id = (select data_controller_id from ${Database}.db.ref_data_controller where data_controller ilike 'Nestl_ (Ireland) Ltd') then 0 else data_controller_id end desc, br.brand_id) rn,\n        row_number() over (partition by br.brand_id    order by case when x.data_controller_id = (select data_controller_id from ${Database}.db.ref_data_controller where data_controller ilike 'Nestl_ (Ireland) Ltd') then 0 else data_controller_id end desc, di.division_id) rn2\n    from ${Database}.db.ref_brand br\n    left join ${Database}.db.ref_data_controller_division_xref x on x.division_id = br.division_id\n    left join ${Database}.db.ref_division di on x.division_id = di.division_id)\n;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.live.xref_business_level',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.xref_business_level;\n\n\n------------------------------------------------------------\n--mail permissions by cid\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result\nas\nselect distinct\n    cid,\n    email,\n    brand_id,\n    dp_mailable,\n    dp_last_mailable_date,\n    dp_last_date,\n    dp_last_positive_date,\n    dp_last_date_lm,\n    dp_last_positive_date_lm\nfrom ${Database}.temp.build_supps_names_dp_roll\nwhere brand_id is not null;\n\ninsert into ${Database}.db.build_log\nselect 'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_result',\n    'total records (with brand)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_result;\n\n\n\n--work out all the possible brand opt ins unsing the xref\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_1_prep;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_1_prep\nas\nselect distinct\n    rl.cid,\n    rl.email,\n    xref.brand_id,\n    rl.dp_mailable,\n    rl.dp_last_mailable_date,\n    rl.dp_last_date,\n    rl.dp_last_positive_date,\n    rl.dp_last_date_lm,\n    rl.dp_last_positive_date_lm\nfrom ${Database}.temp.build_supps_names_dp_roll rl\ninner join ${Database}.temp.build_ref_data_controller_division_xref xref on rl.data_controller_id = xref.data_controller_id\nwhere rl.brand_id is null;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_result_no_brand_1_prep',\n    'total records (no brand)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_result_no_brand_1_prep;\n\n\n--find the latest per brand to take care of multi permisions per brand\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_mail;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_mail\nas\nselect\n    cid,\n    brand_id,\n    dp_mailable,\n    dp_last_mailable_date\nfrom (\n         select\n             cid,\n             brand_id,\n             dp_mailable,\n             dp_last_mailable_date,\n             row_number() over\n                 (\n                     partition by cid, brand_id\n                     order by\n                         case when dp_mailable is null then 0 else 1 end desc,\n                         dp_last_mailable_date desc nulls last,\n                         dp_mailable nulls last\n                 ) as row_num\n         from ${Database}.temp.build_supps_names_dp_result_no_brand_1_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_dates;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_dates\nas\nselect\n    cid,\n    brand_id,\n    max(dp_last_date) as dp_last_date,\n    max(dp_last_positive_date) as dp_last_positive_date,\n    max(dp_last_date_lm) as dp_last_date_lm,\n    max(dp_last_positive_date_lm) as dp_last_positive_date_lm\nfrom ${Database}.temp.build_supps_names_dp_result_no_brand_1_prep\ngroup by cid, brand_id;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_1;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_1\nas\nselect\n    pr.cid,\n    pr.email,\n    pr.brand_id,\n    ma.dp_mailable,\n    ma.dp_last_mailable_date,\n    da.dp_last_date,\n    da.dp_last_positive_date,\n    da.dp_last_date_lm,\n    da.dp_last_positive_date_lm\nfrom (\n         select distinct\n             cid,\n             email,\n             brand_id\n         from ${Database}.temp.build_supps_names_dp_result_no_brand_1_prep\n     ) pr\nleft join ${Database}.temp.build_supps_names_dp_result_no_brand_mail ma on ma.cid = pr.cid\n                                                                  and ma.brand_id = pr.brand_id\nleft join ${Database}.temp.build_supps_names_dp_result_no_brand_dates da on da.cid = pr.cid\n                                                                  and da.brand_id = pr.brand_id;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_result_no_brand_1',\n    'total records (no brand)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_result_no_brand_1;\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_mail;\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_dates;\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_1_prep;\n\n\n--insert dp for all brands under a data controller (if no brand id specified)\nmerge into ${Database}.temp.build_supps_names_dp_result dpbr\nusing ${Database}.temp.build_supps_names_dp_result_no_brand_1 mg on mg.cid = dpbr.cid\n                                                         and lower(trim(mg.email)) = lower(trim(dpbr.email))\n                                                         and mg.brand_id = dpbr.brand_id --brand specific opt ins always have priority\nwhen not matched then insert\n(\n    cid,\n    email,\n    brand_id,\n    dp_mailable,\n    dp_last_mailable_date,\n    dp_last_date,\n    dp_last_positive_date,\n    dp_last_date_lm,\n    dp_last_positive_date_lm\n)\nvalues\n(\n    mg.cid,\n    mg.email,\n    mg.brand_id,\n    mg.dp_mailable,\n    mg.dp_last_mailable_date,\n    mg.dp_last_date,\n    mg.dp_last_positive_date,\n    mg.dp_last_date_lm,\n    mg.dp_last_positive_date_lm\n);\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_result',\n    'total records (with dp)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_result;\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_1;\n\n\n--insert all the records with missing/null dp\nmerge into ${Database}.temp.build_supps_names_dp_result dpbr\nusing (\n          select distinct\n              cid,\n              email,\n              source_brand_id\n          from ${Database}.temp.build_supps_prep_name_urn\n          where source_brand_id is not null\n      ) mg on mg.cid = dpbr.cid\n          and mg.email = dpbr.email\n          and mg.source_brand_id = dpbr.brand_id\nwhen not matched then insert\n(\n    cid,\n    email,\n    brand_id\n)\nvalues\n(\n    mg.cid,\n    mg.email,\n    mg.source_brand_id\n);\n\n\nmerge into ${Database}.temp.build_supps_names_dp_result dpbr\nusing (\n          select distinct\n              prep.cid,\n              prep.email,\n              xref.brand_id\n          from ${Database}.temp.build_supps_prep_name_urn prep\n          inner join ${Database}.temp.build_ref_data_controller_division_xref xref on prep.source_data_controller_id = xref.data_controller_id\n          where prep.source_brand_id is null\n      ) mg on mg.cid = dpbr.cid\n          and lower(trim(mg.email)) = lower(trim(dpbr.email))\n          and mg.brand_id = dpbr.brand_id\nwhen not matched then insert\n(\n    cid,\n    email,\n    brand_id\n)\nvalues\n(\n    mg.cid,\n    mg.email,\n    mg.brand_id\n);\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_result',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_result;\n\n\n------------------------------------------------------------\n--same again but for email address\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_email;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_email\nas\nselect distinct\n    email,\n    brand_id,\n    dp_emailable,\n    dp_emailable_lm,\n    dp_newsletter,\n    dp_last_emailable_date,\n    dp_last_positive_emailable_date,\n    dp_last_emailable_date_lm,\n    dp_last_positive_emailable_date_lm,\n    dp_last_newsletter_date\nfrom ${Database}.temp.build_supps_names_dp_roll\nwhere brand_id is not null\n    and email > ''\n    and (\n            dp_emailable is not null\n            or dp_newsletter is not null\n        );\n\ninsert into ${Database}.db.build_log\nselect 'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_result_email',\n    'total records (with brand)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_result_email;\n\n\n--work out all the possible brand opt ins unsing the xref\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_2_prep;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_2_prep\nas\nselect distinct\n    rl.email,\n    xref.brand_id,\n    rl.dp_emailable,\n    rl.dp_emailable_lm,\n    rl.dp_newsletter,\n    rl.dp_last_emailable_date,\n    rl.dp_last_positive_emailable_date,\n    rl.dp_last_emailable_date_lm,\n    rl.dp_last_positive_emailable_date_lm,\n    rl.dp_last_newsletter_date\nfrom ${Database}.temp.build_supps_names_dp_roll rl\ninner join ${Database}.temp.build_ref_data_controller_division_xref xref on rl.data_controller_id = xref.data_controller_id\nwhere rl.brand_id is null\n    and email > ''\n    and (\n            rl.dp_emailable is not null\n            or rl.dp_newsletter is not null\n        );\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_result_no_brand_2_prep',\n    'total records (no brand)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_result_no_brand_2_prep;\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_roll;\n\n\n--find the latest per brand to take care of multi permisions per brand\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_email;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_email\nas\nselect\n    email,\n    brand_id,\n    dp_emailable,\n    dp_last_emailable_date\nfrom (\n         select\n             email,\n             brand_id,\n             dp_emailable,\n             dp_last_emailable_date,\n             row_number() over\n                 (\n                     partition by email, brand_id\n                     order by\n                         case when dp_emailable is null then 0 else 1 end desc,\n                         dp_last_emailable_date desc nulls last,\n                         dp_emailable nulls last\n                 ) as row_num\n         from ${Database}.temp.build_supps_names_dp_result_no_brand_2_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_email_lm;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_email_lm\nas\nselect\n    email,\n    brand_id,\n    dp_emailable_lm,\n    dp_last_emailable_date_lm\nfrom (\n         select\n             email,\n             brand_id,\n             dp_emailable_lm,\n             dp_last_emailable_date_lm,\n             row_number() over\n                 (\n                     partition by email, brand_id\n                     order by\n                         case when dp_emailable_lm is null then 0 else 1 end desc,\n                         dp_last_emailable_date_lm desc nulls last,\n                         dp_emailable_lm nulls last\n                 ) as row_num\n         from ${Database}.temp.build_supps_names_dp_result_no_brand_2_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_email2;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_email2\nas\nselect\n    em.email,\n    em.brand_id,\n    em.dp_emailable,\n    el.dp_emailable_lm,\n    em.dp_last_emailable_date,\n    el.dp_last_emailable_date_lm\nfrom ${Database}.temp.build_supps_names_dp_result_no_brand_email em\nleft join ${Database}.temp.build_supps_names_dp_result_no_brand_email_lm el on lower(trim(el.email)) = lower(trim(em.email))\n                                                                      and el.brand_id = em.brand_id;\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_email;\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_email_lm;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_newsletter;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_newsletter\nas\nselect\n    email,\n    brand_id,\n    dp_newsletter,\n    dp_last_newsletter_date\nfrom (\n         select\n             email,\n             brand_id,\n             dp_newsletter,\n             dp_last_newsletter_date,\n             row_number() over\n                 (\n                     partition by email, brand_id\n                     order by\n                         case when dp_newsletter is null then 0 else 1 end desc,\n                         dp_last_newsletter_date desc nulls last,\n                         dp_newsletter nulls last\n                 ) as row_num\n         from ${Database}.temp.build_supps_names_dp_result_no_brand_2_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_email3;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_email3\nas\nselect\n    em.email,\n    em.brand_id,\n    em.dp_emailable,\n    em.dp_emailable_lm,\n    ne.dp_newsletter,\n    em.dp_last_emailable_date,\n    em.dp_last_emailable_date_lm,\n    ne.dp_last_newsletter_date\nfrom ${Database}.temp.build_supps_names_dp_result_no_brand_email2 em\nleft join ${Database}.temp.build_supps_names_dp_result_no_brand_newsletter ne on lower(trim(ne.email)) = lower(trim(em.email))\n                                                                        and ne.brand_id = em.brand_id;\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_email2;\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_newsletter;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_positive;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_positive\nas\nselect\n    email,\n    brand_id,\n    dp_last_positive_emailable_date\nfrom (\n         select\n             email,\n             brand_id,\n             dp_last_positive_emailable_date,\n             row_number() over\n                 (\n                     partition by email, brand_id\n                     order by\n                         case when dp_emailable is null then 0 else 1 end desc,\n                         dp_last_positive_emailable_date desc nulls last\n                 ) as row_num\n         from ${Database}.temp.build_supps_names_dp_result_no_brand_2_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_email4;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_email4\nas\nselect\n    em.email,\n    em.brand_id,\n    em.dp_emailable,\n    em.dp_emailable_lm,\n    em.dp_newsletter,\n    em.dp_last_emailable_date,\n    po.dp_last_positive_emailable_date,\n    em.dp_last_emailable_date_lm,\n    em.dp_last_newsletter_date\nfrom ${Database}.temp.build_supps_names_dp_result_no_brand_email3 em\nleft join ${Database}.temp.build_supps_names_dp_result_no_brand_positive po on lower(trim(po.email)) = lower(trim(em.email))\n                                                                      and po.brand_id = em.brand_id;\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_email3;\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_positive;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_positive_lm;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_positive_lm\nas\nselect\n    email,\n    brand_id,\n    dp_last_positive_emailable_date_lm\nfrom (\n         select\n             email,\n             brand_id,\n             dp_last_positive_emailable_date_lm,\n             row_number() over\n                 (\n                     partition by email, brand_id\n                     order by\n                         case when dp_emailable_lm is null then 0 else 1 end desc,\n                         dp_last_positive_emailable_date_lm desc nulls last\n                 ) as row_num\n         from ${Database}.temp.build_supps_names_dp_result_no_brand_2_prep\n     ) dp\nwhere row_num = 1;\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_2_prep;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_2;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_2\nas\nselect\n    em.email,\n    em.brand_id,\n    em.dp_emailable,\n    em.dp_emailable_lm,\n    em.dp_newsletter,\n    em.dp_last_emailable_date,\n    em.dp_last_positive_emailable_date,\n    em.dp_last_emailable_date_lm,\n    pl.dp_last_positive_emailable_date_lm,\n    em.dp_last_newsletter_date\nfrom ${Database}.temp.build_supps_names_dp_result_no_brand_email4 em\nleft join ${Database}.temp.build_supps_names_dp_result_no_brand_positive_lm pl on lower(trim(pl.email)) = lower(trim(em.email))\n                                                                         and pl.brand_id = em.brand_id;\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_email4;\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_positive_lm;\n\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_result_no_brand_2',\n    'total records (no brand)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_result_no_brand_2;\n\n\n--insert dp for all brands under a data controller (if no brand id specified)\nmerge into ${Database}.temp.build_supps_names_dp_result_email dpbr\nusing ${Database}.temp.build_supps_names_dp_result_no_brand_2 mg on lower(trim(mg.email)) = lower(trim(dpbr.email))\n                                                         and mg.brand_id = dpbr.brand_id --brand specific opt ins always have priority\nwhen not matched then insert\n(\n    email,\n    brand_id,\n    dp_emailable,\n    dp_emailable_lm,\n    dp_newsletter,\n    dp_last_emailable_date,\n    dp_last_positive_emailable_date,\n    dp_last_emailable_date_lm,\n    dp_last_positive_emailable_date_lm,\n    dp_last_newsletter_date\n)\nvalues\n(\n    mg.email,\n    mg.brand_id,\n    mg.dp_emailable,\n    mg.dp_emailable_lm,\n    mg.dp_newsletter,\n    mg.dp_last_emailable_date,\n    mg.dp_last_positive_emailable_date,\n    mg.dp_last_emailable_date_lm,\n    mg.dp_last_positive_emailable_date_lm,\n    mg.dp_last_newsletter_date\n);\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_result_email',\n    'total records (with dp)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_result_email;\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_2;\n\n\n/********************************************************************************************\n*                                     BAD QUALITY DATA                                        *\n*********************************************************************************************/\n\ndrop table if exists ${Database}.temp.build_supps_names_supps_quality;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_quality\nas\nselect\n    name_urn,\n    phone_home_score,\n    phone_work_score,\n    phone_mobile_score,\n    case when email = '0' or lower(email) regexp '.*[^-a-z0-9_@\\+\\\\.&].*' then -1 else email_score end as email_score,\n    case when email_score = 1 then cast(null as date) else data_date end as first_supp_email_date,\n    -- some pass paf but have completely wrong org allocated so fail them\n    -- will need more work for overseas\n    -- irish rule as well\n    case\n        when lower(address_quality) in ('paf standard (v)','paf standard (c)')\n            and paf_organisation > '' and cap_org_match = 'n'\n            and not --special case sma/hcp\n                (\n                    lower(paf_organisation) regexp '(.*)(hospital|trust|medical|pct|p c t|pharmacy|surgery|nhs|infirmary|doctors|health|chemist|nursery|sure start|surestart|practice|children|dr)(.*)'\n                    or (lower(email_domain) regexp '.*\\.ac\\..*' and lower(collate(paf_organisation,'')) regexp '(.*)(university|college)(.*)')\n                )\n            then -1\n        --special hcp rule for irish addresses\n        when lower(cc_iso) = 'ie'\n            and\n            (\n                lower(add1) regexp '(.*)(pm[0-9]|pm [0-9]|parcel motel|store it|storeit)(.*)'\n                or  lower(firstname||' '||lastname) like '%urgent%'\n                or lower(firstname||' '||lastname) like '%removed%'\n                or lower(firstname||' '||lastname) like '%customer%'\n                or add1 regexp '.*[0-9]{6}.*'\n                or add2 regexp '.*[0-9]{6}.*'\n                or add3 regexp '.*[0-9]{6}.*'\n                or add4 regexp '.*[0-9]{6}.*'\n                or add5 regexp '.*[0-9]{6}.*'\n            )\n            then -1\n        when lower(cc_iso) = 'ie' and\n            case when add1 > '' and lower(add1) <> 'eire' and lower(add1) <> 'n/a' then 1 else 0 end +\n            case when add2 > '' and lower(add2) <> 'eire' and lower(add2) <> 'n/a' then 1 else 0 end +\n            case when add3 > '' and lower(add3) <> 'eire' and lower(add3) <> 'n/a' then 1 else 0 end +\n            case when add4 > '' and lower(add4) <> 'eire' and lower(add4) <> 'n/a' then 1 else 0 end +\n            case when city > '' and lower(city) <> 'eire' and lower(city) <> 'n/a' then 1 else 0 end +\n            case when state > '' and lower(state) <> 'eire' and lower(state) <> 'n/a' then 1 else 0 end > 2\n            then 1\n        -- temp fix for dates in addresses passing address clean\n        when\n            lower(add1||add2) regexp '.*-jan.*' or lower(add1||add2) regexp '.*-feb.*' or lower(add1||add2) regexp '.*-mar.*' or lower(add1||add2) regexp '.*-apr.*' or\n            lower(add1||add2) regexp '.*-may.*' or lower(add1||add2) regexp '.*-jun.*' or lower(add1||add2) regexp '.*-jul.*' or lower(add1||add2) regexp '.*-aug.*' or\n            lower(add1||add2) regexp '.*-sep.*' or lower(add1||add2) regexp '.*-oct.*' or lower(add1||add2) regexp '.*-nov.*' or lower(add1||add2) regexp '.*-dec.*'\n            then -1\n        else address_score\n    end as address_score,\n    -- get rid of test records\n    case when firstname regexp '.*@.*' then -1 else name_score end as name_score\nfrom ${Database}.temp.ram_names;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_quality',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_quality;\n\n/******************************************************************************************\n*                                     MANUAL SUPPRESSION\n******************************************************************************************/\n\n\n-- email - any person whose email address is on the manual file should be suppressed for ever\ndrop table if exists ${Database}.temp.build_supps_names_supps_manual_email;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_manual_email\nas\nselect\n    lower(rn.email) as email,\n    1 as manual_channel_email,\n    min(sm.data_date) as first_supp_manual_date\nfrom ${Database}.temp.ram_names rn\ninner join ${Database}.db.supps_manual sm on split_part(rn.name_urn,'-',-1) = cast(sm.supp_urn as varchar)\nwhere rn.email > ''\n    and rn.email_score = 1\n    and lower(rn.source) = 'manual'\n    and manual_channel_email = 1\ngroup by lower(rn.email);\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_manual_email',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_manual_email;\n\n-- phone number matches\n-- phone and mobile number and person whos home or mobile number appears on the manual file should be suppressed\ndrop table if exists ${Database}.temp.build_supps_names_supps_manual_phone_temp;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_manual_phone_temp\nas\nselect\n    rn.phone_home as phone,\n    1 as manual_channel_phone\nfrom     ${Database}.temp.ram_names rn\ninner join ${Database}.db.supps_manual sm on split_part(rn.name_urn,'-',-1) = cast(sm.supp_urn as varchar)\nwhere rn.phone_home > ''\n    and rn.phone_home_score = 1\n    and lower(rn.source) = 'manual'\n    and manual_channel_phone = 1\ngroup by rn.phone_home;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_manual_phone_temp',\n    'total records (home)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_manual_phone_temp;\n\ninsert into ${Database}.temp.build_supps_names_supps_manual_phone_temp\nselect rn.phone_mobile as phone,\n    1 as manual_channel_phone\nfrom ${Database}.temp.ram_names rn\ninner join ${Database}.db.supps_manual sm on split_part(rn.name_urn,'-',-1) = cast(sm.supp_urn as varchar)\nwhere rn.phone_mobile > ''\n    and rn.phone_mobile_score = 1\n    and lower(rn.source) = 'manual'\n    and manual_channel_phone = 1\ngroup by rn.phone_mobile;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_manual_phone_temp',\n    'total records (home and mobile)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_manual_phone_temp;\n\ninsert into ${Database}.temp.build_supps_names_supps_manual_phone_temp\nselect rn.phone_work as phone,\n    1 as manual_channel_phone\nfrom ${Database}.temp.ram_names rn\ninner join ${Database}.db.supps_manual sm on split_part(rn.name_urn,'-',-1)  = cast(sm.supp_urn as varchar)\nwhere rn.phone_work > ''\n    and rn.phone_work_score = 1\n    and lower(rn.source) = 'manual'\n    and manual_channel_phone = 1\ngroup by rn.phone_work;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_manual_phone_temp',\n    'total records (home and mobile and work)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_manual_phone_temp;\n\n-- create distinct list of valid numbers to screen against database\ndrop table if exists ${Database}.temp.build_supps_names_supps_manual_phone;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_manual_phone\nas\nselect phone,\n    max(manual_channel_phone) as manual_channel_phone\nfrom ${Database}.temp.build_supps_names_supps_manual_phone_temp\ngroup by phone;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_manual_phone',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_manual_phone;\n\n--drop table if exists ${Database}.temp.build_supps_names_supps_manual_phone_temp;\n\n\n-- address matches\ndrop table if exists ${Database}.temp.build_supps_names_supps_manual_hh_id;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_manual_hh_id\nas\nselect\n    coalesce(rn.hh_id,rn.bbw_urn) as hid,\n    1 as manual_channel_mail\nfrom ${Database}.temp.ram_names rn\ninner join ${Database}.db.supps_manual sm on split_part(rn.name_urn,'-',-1)  = cast(sm.supp_urn as varchar)\nwhere lower(rn.source) = 'manual'\n    and manual_channel_mail = 1\ngroup by coalesce(rn.hh_id,rn.bbw_urn);\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_manual_hh_id',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_manual_hh_id;\n\n\n/******************************************************************************************\n                                     UNSUBSCRIBE SUPPRESSION\n******************************************************************************************/\n\n-- Attribute campaigns to unsubscribes\nmerge into ${Database}.db.supps_unsubscribe su\nusing (\n          select\n              su.supp_urn,\n              ae.campaign_name,\n              ae.event_name,\n              ae.event_timestamp,\n              row_number() over\n                  (\n                      partition by su.supp_urn\n                      order by\n                          case when lower(ae.link_url) regexp '.*unsub.*' then 1 else 0 end desc,\n                          ae.event_timestamp desc\n                  ) as rn\n          from ${Database}.db.supps_unsubscribe su\n          inner join ${Database}.db.adestra_events ae on lower(trim(ae.email)) = lower(trim(su.email))\n                                                and cast(ae.event_timestamp as date) >= (su.data_date - 7)\n                                                and cast(ae.event_timestamp as date) <= su.data_date\n          where trim(su.source) in ('SUPP_PRAG_1|nestlecouk','SUPP_PRAG_1|purina','SUPP_PRAG_1|Purina','SUPP_PRAG_1|Purina.')\n              and su.data_date >= (current_date - 5)\n              and su.unsub_campaign = ''\n              and lower(ae.event_name) regexp '(.*)(click|read)(.*)'\n      ) ae on ae.supp_urn = su.supp_urn\n          and ae.rn = 1\nwhen matched then update\nset su.unsub_campaign = ae.campaign_name,\n    su.unsub_event = ae.event_name,\n    su.unsub_timestamp = ae.event_timestamp;\n\n\nmerge into ${Database}.db.supps_unsubscribe su\nusing (\n          select\n              su.supp_urn,\n              ae.campaign_name,\n              ae.event_name,\n              ae.event_timestamp,\n              row_number() over\n                  (\n                      partition by su.supp_urn\n                      order by\n                          case when lower(ae.link_url) regexp '.*unsub.*' then 1 else 0 end desc,\n                          ae.event_timestamp desc\n                  ) as rn\n          from ${Database}.db.supps_unsubscribe su\n          inner join ${Database}.db.adestra_events_sma ae on lower(trim(ae.email)) = lower(trim(su.email))\n                                                         and cast(ae.event_timestamp as date) >= (su.data_date - 7)\n                                                         and cast(ae.event_timestamp as date) <= su.data_date\n          where trim(su.source) = 'SUPP_PRAG_1|sma'\n              and su.data_date >= (current_date - 5)\n              and su.unsub_campaign = ''\n              and lower(ae.event_name) regexp '(.*)(click|read)(.*)'\n      ) ae on ae.supp_urn = su.supp_urn\n          and ae.rn = 1\nwhen matched then update\nset su.unsub_campaign = ae.campaign_name,\n    su.unsub_event = ae.event_name,\n    su.unsub_timestamp = ae.event_timestamp;\n\n\n--  email - any person whose email address is on the unsubscribe file should be suppressed by brand\ndrop table if exists ${Database}.temp.build_supps_names_supps_unsubscribe_email;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_unsubscribe_email\nas\nselect\n    rn.email,\n    su.brand_id,\n    max(su.data_date) as unsubscribe_channel_email_date,\n    min(su.data_date) as first_supp_unsub_date\nfrom ${Database}.live.xref_name_urn rn\ninner join ${Database}.db.supps_unsubscribe su on split_part(rn.name_urn,'-',-1)  = cast(su.supp_urn as varchar)\nwhere rn.email > ''\n    and lower(rn.source) = 'unsub'\n    and su.unsubscribe_channel_email = 1\ngroup by\n    rn.email,\n    su.brand_id;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_unsubscribe_email',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_unsubscribe_email;\n\n--add the unsubs for every brand for the dc's for ease of joining later...\ndrop table if exists ${Database}.temp.build_supps_names_supps_unsubscribe_email_brand;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_unsubscribe_email_brand\nas\nselect\n    email,\n    brand_id,\n    unsubscribe_channel_email_date,\n    first_supp_unsub_date\nfrom ${Database}.temp.build_supps_names_supps_unsubscribe_email\nwhere brand_id is not null; --if they have a brand then they mean to be opted out of this brand\n\ninsert into ${Database}.temp.build_supps_names_supps_unsubscribe_email_brand\n    select\n        su.email,\n        br.brand_id,\n        su.unsubscribe_channel_email_date,\n        su.first_supp_unsub_date\n    from ${Database}.temp.build_supps_names_supps_unsubscribe_email su\n    --inner join ${Database}.temp.build_ref_data_controller_division_xref xref on su.data_controller_id = xref.data_controller_id\n    cross join ${Database}.db.ref_brand br\n    where su.brand_id is null --if they have no brand then we exclude them from everything\nand su.email||'|'||to_char(br.brand_id) not in--brand specific opt outs have priority\n(\nselect email||'|'||to_char(brand_id)\nfrom ${Database}.temp.build_supps_names_supps_unsubscribe_email_brand\n)\n;\n    \ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_unsubscribe_email_brand',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_unsubscribe_email_brand;\n\n--drop table if exists ${Database}.temp.build_supps_names_supps_unsubscribe_email;\n\n\n--  region address matches\ndrop table if exists ${Database}.temp.build_supps_names_supps_unsubscribe_c_id;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_unsubscribe_c_id\nas\nselect\n    rn.cid as cid,\n    su.brand_id,\n    max(su.data_date) as unsubscribe_channel_mail_date\nfrom ${Database}.live.xref_name_urn rn\ninner join ${Database}.db.supps_unsubscribe su on split_part(rn.name_urn,'-',-1)  = cast(su.supp_urn as varchar)\nwhere lower(rn.source) = 'unsub'\n    and unsubscribe_channel_mail = 1\ngroup by\n    rn.cid,\n    su.brand_id;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_unsubscribe_c_id',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_unsubscribe_c_id;\n\n--add the unsubs for every brand for the dc's for ease of joining later...\ndrop table if exists ${Database}.temp.build_supps_names_supps_unsubscribe_cid_brand;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_unsubscribe_cid_brand\nas\nselect\n    cid,\n    brand_id,\n    unsubscribe_channel_mail_date\nfrom ${Database}.temp.build_supps_names_supps_unsubscribe_c_id\nwhere brand_id is not null; --if they have a brand then they mean to be opted out of this brand\n\ninsert into ${Database}.temp.build_supps_names_supps_unsubscribe_cid_brand\n    select\n        su.cid,\n        br.brand_id,\n        su.unsubscribe_channel_mail_date\n    from ${Database}.temp.build_supps_names_supps_unsubscribe_c_id su\n    --inner join ${Database}.temp.build_ref_data_controller_division_xref xref on su.data_controller_id = xref.data_controller_id\n    cross join ${Database}.db.ref_brand br\n    where su.brand_id is null --if they have no brand then we exclude them from everything\nand to_char(su.cid)||'|'||to_char(br.brand_id) not in\n    (\n    select\n        to_char(cid)||'|'||to_char(brand_id)\n    from ${Database}.temp.build_supps_names_supps_unsubscribe_cid_brand\n    )\n    ;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_unsubscribe_cid_brand',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_unsubscribe_cid_brand;\n\n--drop table if exists ${Database}.temp.build_supps_names_supps_unsubscribe_c_id;\n--drop table if exists ${Database}.temp.build_ref_data_controller_division_xref;\n\n\n/******************************************************************************************\n*                                      DEAD SUPPRESSION\n******************************************************************************************/\n\n-- dead supressions\ndrop table if exists ${Database}.temp.build_supps_names_supps_dead_cid;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_dead_cid\nas\nselect\n    cid    as cid,\n    1       as dead_cid,\n    min(data_date) as first_supp_dead_date\nfrom ${Database}.live.xref_name_urn\nwhere lower(source) = 'dead'\ngroup by cid;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_dead_cid',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_dead_cid;\n\n/******************************************************************************************\n*                                    GONEAWAY SUPPRESSION\n******************************************************************************************/\n\n-- goneaway supressions\ndrop table if exists ${Database}.temp.build_supps_names_supps_goneaway_cid;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_goneaway_cid\nas\nselect\n    cid,\n    hid,\n    1                       as gone_cid\nfrom ${Database}.live.xref_name_urn\nwhere lower(source) = 'gone'\ngroup by cid, hid;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_goneaway_cid',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_goneaway_cid;\n\n/******************************************************************************************\n                                         CHILDREN\n******************************************************************************************/\n\ndrop table if exists ${Database}.temp.build_supps_names_supps_child;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_child\nas\nselect\n    c_id as cid,\n    1    as child_cid,\n    min(data_date) as first_supp_child_date\nfrom ${Database}.temp.ram_names\nwhere\n    (\n        dob between dateadd(year,-16,current_date) and current_date\n        or lower(title) in ('master','mstr','mast')\n    )\n    and dob <> '2001-01-01' --some default date for some reason\ngroup by c_id;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_child',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_child;\n\n\n/******************************************************************************************\n                                       EMAIL BOUNCE\n******************************************************************************************/\n\n\n-- email bounces\ndrop table if exists ${Database}.temp.build_supps_names_supps_bounce_email;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_bounce_email\nas\nselect\n    lower(trim(email)) as email,\n    max(case when trim(bounce_type) in ('known_bounce','suppressed_global') then 1 else 0 end) as bounce_email,\n    max(case when trim(bounce_type) not in ('known_bounce','suppressed_global') then 1 else 0 end) as old_bounce_email,\n    max(data_date) as bounce_date,\n    min(data_date) as first_supp_bounce_date\nfrom ${Database}.db.supps_bounce\nwhere trim(email) > ''\ngroup by lower(trim(email));\n\n\n--flame needs 3 x flames in last 2 months\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_adestra_events_supps_roll\nas\nselect\n    lower(trim(email)) as email,\n    max(event_timestamp) as flame_date,\n    count(*) as num_flame\nfrom ${Database}.db.adestra_events\nwhere trim(event_name) = 'inbound_flame'\n    and event_timestamp >= add_months(current_date, -2)\ngroup by 1;\n\ninsert into ${Database}.temp.build_supps_names_supps_bounce_email\nselect distinct\n    email,\n    1 as bounce_email,\n    0 as old_bounce_email,\n    flame_date as bounce_date,\n    flame_date as first_supp_bounce_date\nfrom ${Database}.temp.build_adestra_events_supps_roll\nwhere num_flame > 2\n    and email not in (select email from ${Database}.temp.build_supps_names_supps_bounce_email);\n\n--drop table if exists ${Database}.temp.build_adestra_events_supps_roll;\n\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_bounce_email',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_bounce_email;\n\n\n/******************************************************************************************\n                                       OFFSHORE\n******************************************************************************************/\n\n-- offshore\ndrop table if exists ${Database}.temp.build_supps_offshore;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_offshore\nas\nselect\n    distinct coalesce(hh_id,bbw_urn) as hid,\n    1                                as offshore\nfrom ${Database}.temp.ram_names\nwhere lower(postcode) like 'je%'\n    or lower(postcode) like 'gy%'\n    or lower(postcode) like 'im%';\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_offshore',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_offshore;\n\n\n/******************************************************************************************\n                                       Business\n******************************************************************************************/\n\n--not currently required\n\n\n/******************************************************************************************\n                                       BabyMPS\n******************************************************************************************/\n\n--not currently required\n\n\n/******************************************************************************************\n                                     DATA RETENTION\n******************************************************************************************/\n\n-- NOTE TO BE REMOVED: This has moved up to be available for use with the email engagement section. Moved the other ref tables from rollups too.\n\n------------------------------------------------------------\n-- REF TABLES\n\n--build new xref for business units\ndrop table if exists ${Database}.temp.build_ref_data_controller_bus_unit_xref;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_ref_data_controller_bus_unit_xref\nas\nselect\n    case\n        when di.business_unit_id is not null then di.business_unit_id\n        else br.brand_id + (select max(data_controller_id) from ${Database}.db.ref_data_controller) --insert the missing ones with fake bu's\n    end as business_unit_id,\n    di.division_id,\n    br.brand_id\nfrom ${Database}.db.ref_brand br\ninner join ${Database}.db.ref_division di on di.division_id = br.division_id;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_ref_data_controller_bus_unit_xref',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_ref_data_controller_bus_unit_xref;\n\n\ndrop table if exists ${Database}.live.ref_brand;\n\nCREATE OR REPLACE TABLE ${Database}.live.ref_brand\nas\nselect\n    br.brand_id,\n    trim(br.brand) as brand,\n    trim(br.brand_pet_type) as brand_pet_type,\n    di.division_id,\n    trim(di.division) as division\nfrom ${Database}.db.ref_brand br\ninner join ${Database}.db.ref_division di on di.division_id = br.division_id;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.live.ref_brand',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.ref_brand;\n\n\ndrop table if exists ${Database}.live.ref_division;\n\nCREATE OR REPLACE TABLE ${Database}.live.ref_division\nas\nselect\n    division_id,\n    trim(division) as division\nfrom ${Database}.db.ref_division;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.live.ref_division',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.ref_division;\n\n\ndrop table if exists ${Database}.live.ref_data_controller;\n\nCREATE OR REPLACE TABLE ${Database}.live.ref_data_controller\nas\nselect\n    data_controller_id,\n    trim(data_controller) as data_controller,\n    trim(nestle_country) as nestle_country\nfrom ${Database}.db.ref_data_controller;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.live.ref_data_controller',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.ref_data_controller;\n\n\ndrop table if exists ${Database}.live.ref_business_unit;\n\nCREATE OR REPLACE TABLE ${Database}.live.ref_business_unit\nas\nselect distinct\n    xref.business_unit_id,\n    case when dc.data_controller_id is null then br.brand else dc.data_controller end as business_unit\nfrom ${Database}.temp.build_ref_data_controller_bus_unit_xref xref\nleft join ${Database}.live.ref_data_controller dc on dc.data_controller_id = xref.business_unit_id\ninner join ${Database}.live.ref_brand br on br.brand_id = xref.brand_id;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.live.ref_business_unit',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.ref_business_unit;\n\n\ndrop table if exists ${Database}.live.ref_business_unit_brand;\n\nCREATE OR REPLACE TABLE ${Database}.live.ref_business_unit_brand\nas\nselect\n    bu.business_unit_id,\n    bu.business_unit,\n    br.brand_id,\n    br.brand\nfrom ${Database}.temp.build_ref_data_controller_bus_unit_xref xref\ninner join ${Database}.live.ref_business_unit bu on bu.business_unit_id = xref.business_unit_id\ninner join ${Database}.live.ref_brand br on br.brand_id = xref.brand_id;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.live.ref_business_unit_brand',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.ref_business_unit_brand;\n\n\nalter warehouse set warehouse_size = 'Xlarge';\n\n------------------------------------------------------------\n-- EMAIL ENGAGEMENT\n\ndrop table if exists ${Database}.temp.build_supps_email_engagement;\n\n-- Nestle Adestra\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_email_engagement\nas\nselect\n    lower(trim(ae.email)) as email,\n    case\n        when bu.business_unit_id is not null then bu.business_unit_id\n        when chl.data_controller_id is not null then chl.data_controller_id\n        when lower(trim(ae.campaign_name)) regexp '^npp.*' then (select business_unit_id from ${Database}.live.ref_business_unit where trim(business_unit) like 'Nestl_ Purina Petcare (UK) Ltd')\n        else (select business_unit_id from ${Database}.live.ref_business_unit where trim(business_unit) like 'Nestl_ UK Ltd')\n    end as business_unit_id,\n    max(cast(ae.event_timestamp as date)) as last_open_date,\n    max(case when ae.source_date < date_trunc('MONTH', current_date-1) then cast(ae.event_timestamp as date) else cast(null as date) end) as last_open_date_lm,\n    max(case\n            when lower(ae.event_name) regexp '(.*)(open|read)(.*)' and cast(ae.event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            else cast(ae.event_timestamp as date)\n        end) as last_open_date_ios15,\n    max(case\n            when lower(ae.event_name) regexp '(.*)(open|read)(.*)' and cast(ae.event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            when ae.source_date < date_trunc('MONTH', current_date-1) then cast(ae.event_timestamp as date)\n            else cast(null as date)\n        end) as last_open_date_ios15_lm\nfrom ${Database}.db.adestra_events ae\nleft join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(ae.campaign_name) = lower(xr.adestra_campaign_name)\nleft join ${Database}.db.comms_hist_lookup chl on lower(chl.campaign_id) = lower(xr.ch_campaign_id)\n                                          or lower(chl.campaign_id) = lower(case when trim(ae.campaign_name) ilike '%_MTE_%' then split_part(trim(ae.campaign_name),'_',3) else split_part(trim(ae.campaign_name),'_',1) end)\nleft join ${Database}.live.ref_business_unit_brand bu on bu.brand_id = chl.brand_id\nwhere lower(trim(ae.event_name)) regexp '(.*)(click|open|read|shared|submit)(.*)'\n    and lower(trim(ae.link_url)) not regexp '.*unsub.*'\n    and lower(trim(ae.email)) > ''\ngroup by 1,2;\n\nalter warehouse set warehouse_size = 'Large';\n\n-- Nestle Mapp\ninsert into ${Database}.temp.build_supps_email_engagement\nselect\n    lower(trim(mp.user_email)) as email,\n    case\n        when bu.business_unit_id is not null then bu.business_unit_id\n        when chl.data_controller_id is not null then chl.data_controller_id\n        when lower(trim(mp.message_name)) regexp '^npp.*' then (select business_unit_id from ${Database}.live.ref_business_unit where trim(business_unit) like 'Nestl_ Purina Petcare (UK) Ltd')\n        else (select business_unit_id from ${Database}.live.ref_business_unit where trim(business_unit) like 'Nestl_ UK Ltd')\n    end as business_unit_id,\n    max(mp.record_timestamp) as last_open_date,\n    max(case when mp.source_date < date_trunc('MONTH', dateadd(day,-1,current_date())) then cast(mp.record_timestamp as date) else cast(null as date) end) as last_open_date_lm,\n    max(case\n            when lower(mp.record_type) regexp '.*render.*' and cast(mp.record_timestamp as date) >= '2021-09-20' then cast(null as date)\n            else cast(mp.record_timestamp as date)\n        end) as last_open_date_ios15,\n    max(case\n            when lower(mp.record_type) regexp '.*render.*' and cast(mp.record_timestamp as date) >= '2021-09-20' then cast(null as date)\n            when mp.source_date < date_trunc('MONTH', dateadd(day,-1,current_date())) then cast(mp.record_timestamp as date)\n            else cast(null as date)\n        end) as last_open_date_ios15_lm\nfrom ${Database}.db.mapp_events mp\nleft join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(trim(mp.message_name)) = lower(trim(xr.mapp_message_name))\nleft join ${Database}.db.comms_hist_lookup chl on lower(trim(chl.campaign_id)) = lower(trim(xr.ch_campaign_id))\n                                          or lower(trim(chl.campaign_id)) = lower(case when trim(mp.message_name) ilike '%_MTE_%' then split_part(trim(mp.message_name),'_',3) else split_part(trim(mp.message_name),'_',1) end)\nleft join ${Database}.live.ref_business_unit_brand bu on bu.brand_id = chl.brand_id\nwhere lower(trim(mp.record_type)) regexp '.*click.*|.*render.*'\n    and lower(trim(mp.click_link_url)) not regexp '.*unsub.*'\n    and lower(trim(mp.user_email)) > ''\ngroup by 1,2;\n\n\n\n-- SMA Adestra\ninsert into ${Database}.temp.build_supps_email_engagement\nselect\n    lower(trim(email)) as email,\n    (select business_unit_id from ${Database}.live.ref_business_unit where lower(trim(business_unit)) = 'sma') as business_unit_id,\n    max(cast(event_timestamp as date)) as last_open_date,\n    max(case when source_date < date_trunc('MONTH', current_date-1) then cast(event_timestamp as date) else cast(null as date) end) as last_open_date_lm,\n    max(case\n            when lower(event_name) regexp '(.*)(open|read)(.*)' and cast(event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            else cast(event_timestamp as date)\n        end) as last_open_date_ios15,\n    max(case\n            when lower(event_name) regexp '(.*)(open|read)(.*)' and cast(event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            when source_date < date_trunc('MONTH', current_date-1) then cast(event_timestamp as date)\n            else cast(null as date)\n        end) as last_open_date_ios15_lm\nfrom ${Database}.db.adestra_events_sma\nwhere lower(event_name) regexp '(.*)(click|open|read|shared|submit)(.*)'\n    and lower(trim(link_url)) not regexp '.*unsub.*'\n    and lower(trim(email)) > ''\n    and lower(trim(workspace_name)) not regexp '.*cerelac.*'\ngroup by 1,2;\n\n\n-- Cerelac Adestra\ninsert into ${Database}.temp.build_supps_email_engagement\nselect\n    lower(trim(email)) as email,\n    (select business_unit_id from ${Database}.live.ref_business_unit where lower(trim(business_unit)) = 'cerelac') as business_unit_id,\n    max(cast(event_timestamp as date)) as last_open_date,\n    max(case when source_date < date_trunc('MONTH', current_date-1) then cast(event_timestamp as date) else cast(null as date) end) as last_open_date_lm,\n    max(case\n            when lower(event_name) regexp '(.*)(open|read)(.*)' and cast(event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            else cast(event_timestamp as date)\n        end) as last_open_date_ios15,\n    max(case\n            when lower(event_name) regexp '(.*)(open|read)(.*)' and cast(event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            when source_date < date_trunc('MONTH', current_date-1) then cast(event_timestamp as date)\n            else cast(null as date)\n        end) as last_open_date_ios15_lm\nfrom ${Database}.db.adestra_events_sma\nwhere lower(event_name) regexp '(.*)(click|open|read|shared|submit)(.*)'\n    and lower(trim(link_url)) not regexp '.*unsub.*'\n    and lower(trim(email)) > ''\n    and lower(trim(workspace_name)) regexp '.*cerelac.*'\ngroup by 1,2;\n\n\n\n-- HCP Adestra\ninsert into ${Database}.temp.build_supps_email_engagement\nselect\n    lower(trim(email)) as email,\n    (select business_unit_id from ${Database}.live.ref_business_unit where lower(trim(business_unit)) = 'hcp') as business_unit_id,\n    max(cast(event_timestamp as date)) as last_open_date,\n    max(case when source_date < date_trunc('MONTH', current_date-1) then cast(event_timestamp as date) else cast(null as date) end) as last_open_date_lm,\n    max(case\n            when lower(event_name) regexp '(.*)(open|read)(.*)' and cast(event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            else cast(event_timestamp as date)\n        end) as last_open_date_ios15,\n    max(case\n            when lower(event_name) regexp '(.*)(open|read)(.*)' and cast(event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            when source_date < date_trunc('MONTH', current_date-1) then cast(event_timestamp as date)\n            else cast(null as date)\n        end) as last_open_date_ios15_lm\nfrom ${Database}.db.adestra_events_hcp\nwhere lower(trim(event_name)) regexp '(.*)(click|open|read|shared|submit)(.*)'\n    and lower(trim(link_url)) not regexp '.*unsub.*'\n    and lower(trim(email)) > ''\ngroup by 1,2;\n\n\n\n------------------------------------------------------------\n-- ACCOUNT ENGAGEMENT\n\ndrop table if exists ${Database}.temp.build_dp_2_prep;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_dp_2_prep\nas\nselect\n    nmt.cid,\n    nmt.hid,\n    nmt.name_urn,\n    nmt.email,\n    dp.data_controller_id, --dc for opt ins\n    dp.brand_id, --brand is for opt in brand rather than source\n    dp.dp_date,\n    dp.dp_mailable,\n    dp.dp_emailable,\n    dp.dp_phoneable,\n    dp.dp_smsable,\n    dp.dp_newsletter,\n    dp.source_date,\n    dp.data_date,\n    date_trunc('MONTH', dateadd(day,-1,current_date())) as month_start_dt\nfrom ${Database}.temp.build_supps_prep_name_urn nmt\ninner join ${Database}.db.names_dp dp on nmt.name_urn = trim(dp.name_urn)\nwhere --must have at least 1 permission\n    dp.dp_mailable is not null\n    or dp.dp_emailable is not null\n    or dp.dp_phoneable is not null\n    or dp.dp_smsable is not null\n    or dp.dp_newsletter is not null;\n\n\ndrop table if exists ${Database}.temp.build_supps_last_login;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_last_login\nas\nselect\n    xr.cid,\n    case\n        when bu.business_unit_id is not null then bu.business_unit_id\n        else wh.data_controller_id\n    end as business_unit_id,\n    max(cast(wh.browser_date as date)) as last_login_date,\n    max(case when wh.source_date < date_trunc('MONTH', current_date-1) then cast(wh.browser_date as date) else cast(null as date) end) as last_login_date_lm\nfrom ${Database}.db.web_browser_hist wh\ninner join ${Database}.live.xref_name_urn xr on xr.name_urn = trim(wh.name_urn)\ninner join ${Database}.live.ref_business_unit_brand bu on bu.brand_id = wh.brand_id\nleft join ${Database}.temp.build_dp_2_prep dp on dp.name_urn = wh.name_urn\n                                      and dp.data_controller_id = wh.data_controller_id\n                                      and dp.dp_date = cast(wh.browser_date as date)\n                                      and dp.dp_mailable = 0\n                                      and dp.dp_emailable = 0\nwhere dp.name_urn is null\n    and trim(wh.source) <> 'REG_GIG_Initial_Load'\ngroup by 1,2;\n\n--drop table if exists ${Database}.temp.build_dp_2_prep;\n\ndrop table if exists ${Database}.temp.build_supps_first_reg;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_first_reg\nas\nselect\n    xr.cid,\n    case\n        when bu.business_unit_id is not null then bu.business_unit_id\n        else nm.source_data_controller_id\n    end as business_unit_id,\n    min(nm.reg_date) as first_reg_date,\n    min(case when nm.source_date < date_trunc('MONTH', current_date-1) then nm.reg_date else cast(null as date) end) as first_reg_date_lm\nfrom ${Database}.db.names nm\ninner join ${Database}.live.xref_name_urn xr on xr.name_urn = trim(nm.name_urn)\ninner join ${Database}.live.ref_business_unit_brand bu on bu.brand_id = nm.source_brand_id\ngroup by 1,2;\n\n\n\n/******************************************************************************************\n*                                      Final Suppressions Tables\n******************************************************************************************/\n\n-- preserve names supps\ndrop table if exists ${Database}.live.names_supps;\n\nCREATE OR REPLACE TABLE ${Database}.live.names_supps\nas\nselect\n    pr.name_urn,\n    pr.cid,\n    --        data quality flags - if the record has a bad record then flag them as a suppression\n    coalesce(case when sso.address_score      = 1 then 0 else 1 end,1) as supp_bad_address,\n    coalesce(case when sso.name_score         = 1 then 0 else 1 end,1) as supp_bad_name,\n    coalesce(case when sso.phone_home_score   = 1 then 0 else 1 end,1) as supp_bad_phone_home,\n    coalesce(case when sso.phone_mobile_score = 1 then 0 else 1 end,1) as supp_bad_phone_mobile,\n    coalesce(case when sso.phone_work_score   = 1 then 0 else 1 end,1) as supp_bad_phone_work,\n    coalesce(case when sso.email_score        = 1 then 0 else 1 end,1) as supp_bad_email,\n    --        manual suppressions - if the household, phone number or email appears in the manual supps file then flag as a suppression\n    coalesce(smsg.manual_channel_mail,0)        as supp_manual_channel_mail,\n    coalesce(sme.manual_channel_email,0)        as supp_manual_channel_email,\n    greatest\n    (\n        coalesce(smpsg.manual_channel_phone,0),\n        coalesce(smpsue.manual_channel_phone,0),\n        coalesce(smpw.manual_channel_phone,0)\n    )                                           as supp_manual_channel_phone,\n    --        deads and goneaways from suppression matching above\n    coalesce(sd.dead_cid,0)                     as supp_dead,\n    coalesce(sg.gone_cid,0)                     as supp_goneaway,\n    coalesce(sc.child_cid,0)                    as supp_child,\n    --        email bounces\n    case\n        when sb.bounce_email = 1 then 1\n        when sb.old_bounce_email = 1 and pr.data_date <= sb.bounce_date then 1\n        else 0\n    end                                         as supp_bounce,\n    coalesce(so.offshore      ,0)               as supp_offshore,\n    sso.first_supp_email_date,\n    sme.first_supp_manual_date,\n    sb.first_supp_bounce_date,\n    sd.first_supp_dead_date,\n    sc.first_supp_child_date,\n    pr.add1,\n    pr.email,\n    pr.phone_home,\n    pr.phone_mobile,\n    pr.phone_work\nfrom ${Database}.temp.build_supps_prep_name_urn pr\nleft join ${Database}.temp.build_supps_names_supps_quality            sso    on pr.name_urn     = sso.name_urn\nleft join ${Database}.temp.build_supps_names_supps_manual_hh_id       smsg   on pr.hid          = smsg.hid\nleft join ${Database}.temp.build_supps_names_supps_manual_email       sme    on lower(trim(pr.email))        = lower(trim(sme.email))\nleft join ${Database}.temp.build_supps_names_supps_manual_phone       smpsg  on pr.phone_home   = smpsg.phone\nleft join ${Database}.temp.build_supps_names_supps_manual_phone       smpsue on pr.phone_mobile = smpsue.phone\nleft join ${Database}.temp.build_supps_names_supps_manual_phone       smpw   on pr.phone_work   = smpw.phone\nleft join ${Database}.temp.build_supps_names_supps_goneaway_cid       sg     on pr.cid          = sg.cid        and pr.hid = sg.hid\nleft join ${Database}.temp.build_supps_names_supps_dead_cid           sd     on pr.cid          = sd.cid\nleft join ${Database}.temp.build_supps_names_supps_child              sc     on pr.cid          = sc.cid\nleft join ${Database}.temp.build_supps_names_supps_bounce_email       sb     on lower(trim(pr.email))        = lower(trim(sb.email))\nleft join ${Database}.temp.build_supps_offshore                       so     on pr.hid          = so.hid;\n\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.live.names_supps',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.names_supps;\n\n-- tidy a bit\n--drop table if exists ${Database}.temp.build_supps_offshore;\n--drop table if exists ${Database}.temp.build_supps_names_supps_quality;\n--drop table if exists ${Database}.temp.build_supps_names_supps_manual_phone;\n--drop table if exists ${Database}.temp.build_supps_names_supps_manual_hh_id;\n--drop table if exists ${Database}.temp.build_supps_names_supps_manual_email;\n--drop table if exists ${Database}.temp.build_supps_names_supps_goneaway_cid;\n--drop table if exists ${Database}.temp.build_supps_names_supps_dead_cid;\n--drop table if exists ${Database}.temp.build_supps_names_supps_child;\n--drop table if exists ${Database}.temp.build_supps_names_supps_bounce_email;\n--drop table if exists ${Database}.temp.build_supps_prep_name_urn;\n\n\ndrop table if exists ${Database}.temp.build_supps_email;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_email\nas\nselect\n    email,\n    max(supp_bad_email) as supp_bad_email,\n    max(supp_manual_channel_email) as supp_manual_channel_email,\n    max(supp_bounce) as supp_bounce,\n    min(first_supp_email_date) as first_supp_email_date,\n    min(first_supp_manual_date) as first_supp_manual_date,\n    min(first_supp_bounce_date) as first_supp_bounce_date\nfrom ${Database}.live.names_supps\nwhere email > ''\ngroup by email;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_email',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_email;\n\n\ndrop table if exists ${Database}.temp.build_supps_cid;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_cid\nas\nselect\n    cid,\n    max(supp_dead) as supp_dead,\n    max(supp_child) as supp_child,\n    min(first_supp_dead_date) as first_supp_dead_date,\n    min(first_supp_child_date) as first_supp_child_date\nfrom ${Database}.live.names_supps\ngroup by cid;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_cid',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_cid;\n\n\n\n-----------------------------------------------------------\n\n-- create contact flags table\ndrop table if exists ${Database}.temp.build_names_contact_flags;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_names_contact_flags\nas\nselect\n    name_urn,\n    cid,\n    case\n        when\n            supp_bad_address                         = 0 and\n            supp_manual_channel_mail                 = 0 and\n            supp_goneaway                            = 0 and\n            supp_dead                                = 0 and\n            supp_child                               = 0 and\n            add1                                     > ''\n        then 1\n        else 0\n    end as mailable_ignoring_dp,\n    case\n        when\n            supp_manual_channel_mail                 = 0 and\n            supp_goneaway                            = 0 and\n            supp_dead                                = 0 and\n            supp_child                               = 0\n        then 1\n        else 0\n    end as mailable_ignoring_dp_address,\n    case\n        when\n            supp_bad_email                           = 0 and\n            supp_manual_channel_email                = 0 and\n            supp_bounce                              = 0 and\n            supp_dead                                = 0 and\n            supp_child                               = 0 and\n            email                                    > ''\n        then 1\n        else 0\n    end as emailable_ignoring_dp,\n    case\n        when\n            (\n                supp_bad_phone_home = 0\n                or supp_bad_phone_work = 0\n            )                                            and\n            supp_manual_channel_phone                = 0 and\n            supp_goneaway                            = 0 and\n            supp_dead                                = 0 and\n            supp_child                               = 0 and\n            (phone_home > '' or phone_work > '')\n        then 1\n        else 0\n    end as phoneable_ignoring_dp,\n    case\n        when\n            supp_bad_phone_mobile                    = 0 and\n            supp_manual_channel_phone                = 0 and\n            supp_dead                                = 0 and\n            supp_child                               = 0 and\n            phone_mobile                             > ''\n        then 1\n        else 0\n    end as smsable_ignoring_dp\nfrom ${Database}.live.names_supps;\n\n-----------------------------------------------------------\n\n-- Create table for SMA youngest child\ndrop table if exists ${Database}.temp.names_supps_dp_brand_sma;\n\nCREATE OR REPLACE TABLE ${Database}.temp.names_supps_dp_brand_sma\nas\nselect distinct\n    (select brand_id from ${Database}.live.ref_brand where lower(brand) = 'sma') as brand_id,\n    coalesce(nt.cid,dea.cid) as cid,\n    first_value(coalesce(dea.dob,nt.reg_date)) over\n        (\n            partition by coalesce(nt.cid,dea.cid)\n            order by coalesce(dea.dob,nt.reg_date) desc nulls last\n        ) as m_dob\nfrom ${Database}.temp.names_tmp nt\nfull outer join ${Database}.live.dependant dea on dea.cid = nt.cid\n                                         and dea.valid = 1\nwhere lower(nt.source) regexp '.*reg_umb.*'\n    or dea.cid is not null;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.names_supps_dp_brand_sma',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.names_supps_dp_brand_sma;\n\nalter warehouse set warehouse_size = 'Xlarge';\n\ndrop table if exists ${Database}.live.names_supps_dp_brand_email;\n\nCREATE OR REPLACE TABLE ${Database}.live.names_supps_dp_brand_email\nas\nselect\n    dp.cid,\n    dp.email,\n    xref.business_unit_id,\n    xref.division_id,\n    dp.brand_id,\n    coalesce(dpe.dp_last_emailable_date,dp.dp_last_date) as dp_last_date,\n    coalesce(dpe.dp_last_positive_emailable_date,dp.dp_last_positive_date) as dp_last_positive_date,\n    coalesce(dpe.dp_last_emailable_date_lm,dp.dp_last_date_lm) as dp_last_date_lm,\n    coalesce(dpe.dp_last_positive_emailable_date_lm,dp.dp_last_positive_date_lm) as dp_last_positive_date_lm,\n    sma.m_dob as sma_m_dob,\n    ee.last_open_date,\n    ee.last_open_date_lm,\n    ee.last_open_date_ios15,\n    ee.last_open_date_ios15_lm,\n    lo.last_login_date,\n    lo.last_login_date_lm,\n    fr.first_reg_date,\n    fr.first_reg_date_lm,\n    case\n        when dpe.dp_last_positive_emailable_date is null\n            and dp.dp_last_positive_date is null\n            and ee.last_open_date is null\n            and lo.last_login_date is null\n            and fr.first_reg_date is null then cast(null as date)\n        else greatest\n                 (\n                     coalesce(dpe.dp_last_positive_emailable_date,dp.dp_last_positive_date,cast('1900-01-01' as date)),\n                     coalesce(ee.last_open_date,cast('1900-01-01' as date)),\n                     coalesce(lo.last_login_date,cast('1900-01-01' as date)),\n                     coalesce(fr.first_reg_date,cast('1900-01-01' as date))\n                 )\n    end as customer_retention_date,\n    case\n        when dpe.dp_last_positive_emailable_date_lm is null\n            and dp.dp_last_positive_date_lm is null\n            and ee.last_open_date_lm is null\n            and lo.last_login_date_lm is null\n            and fr.first_reg_date_lm is null then cast(null as date)\n        else greatest\n                 (\n                     coalesce(dpe.dp_last_positive_emailable_date_lm,dp.dp_last_positive_date_lm,cast('1900-01-01' as date)),\n                     coalesce(ee.last_open_date_lm,cast('1900-01-01' as date)),\n                     coalesce(lo.last_login_date_lm,cast('1900-01-01' as date)),\n                     coalesce(fr.first_reg_date_lm,cast('1900-01-01' as date))\n                 )\n    end as customer_retention_date_lm,\n    case\n        when dpe.dp_last_positive_emailable_date is null\n            and dp.dp_last_positive_date is null\n            and ee.last_open_date_ios15 is null\n            and lo.last_login_date is null\n            and fr.first_reg_date is null then cast(null as date)\n        else greatest\n                 (\n                     coalesce(dpe.dp_last_positive_emailable_date,dp.dp_last_positive_date,cast('1900-01-01' as date)),\n                     coalesce(ee.last_open_date_ios15,cast('1900-01-01' as date)),\n                     coalesce(lo.last_login_date,cast('1900-01-01' as date)),\n                     coalesce(fr.first_reg_date,cast('1900-01-01' as date))\n                 )\n    end as customer_retention_date_ios15,\n    case\n        when dpe.dp_last_positive_emailable_date_lm is null\n            and dp.dp_last_positive_date_lm is null\n            and ee.last_open_date_ios15_lm is null\n            and lo.last_login_date_lm is null\n            and fr.first_reg_date_lm is null then cast(null as date)\n        else greatest\n                 (\n                     coalesce(dpe.dp_last_positive_emailable_date_lm,dp.dp_last_positive_date_lm,cast('1900-01-01' as date)),\n                     coalesce(ee.last_open_date_ios15_lm,cast('1900-01-01' as date)),\n                     coalesce(lo.last_login_date_lm,cast('1900-01-01' as date)),\n                     coalesce(fr.first_reg_date_lm,cast('1900-01-01' as date))\n                 )\n    end as customer_retention_date_ios15_lm,\n    dp.dp_mailable,\n    coalesce(dpe.dp_emailable,0) as dp_emailable,\n    coalesce(dpe.dp_emailable_lm,0) as dp_emailable_lm,\n    coalesce(dpe.dp_newsletter,0) as dp_newsletter,\n    case when suc.unsubscribe_channel_mail_date >= dp.dp_last_mailable_date - 1 then 1 else 0 end as supp_unsubscribe_channel_mail,\n    case\n        when sue.unsubscribe_channel_email_date >= dpe.dp_last_emailable_date - 1 then 1\n        when sue.unsubscribe_channel_email_date >= dpe.dp_last_newsletter_date - 1 then 1\n        else 0\n    end as supp_unsubscribe_channel_email,\n    coalesce(es.supp_bad_email,1) as supp_bad_email,\n    coalesce(es.supp_manual_channel_email,0) as supp_manual_channel_email,\n    coalesce(es.supp_bounce,0) as supp_bounce,\n    coalesce(cs.supp_dead,0) as supp_dead,\n    coalesce(cs.supp_child,0) as supp_child,\n    case\n        when dp.brand_id = (select brand_id from ${Database}.live.ref_brand where lower(brand) = 'sma')\n            and (coalesce(dpe.dp_last_emailable_date_lm, dp.dp_last_date_lm) is null or coalesce(dpe.dp_last_emailable_date_lm, dp.dp_last_date_lm) < add_months(current_date,-33))\n            and coalesce(dpe.dp_last_emailable_date, dp.dp_last_date) >= to_date(to_char(current_date,'YYYYMM01'),'YYYYMMDD') then 0\n        when dp.brand_id = (select brand_id from ${Database}.live.ref_brand where lower(brand) = 'sma')\n            and sma.m_dob >= add_months(current_date-7,-36) then 0\n        when dp.brand_id = (select brand_id from ${Database}.live.ref_brand where lower(brand) = 'sma') then 1\n        when coalesce(dpe.dp_last_positive_emailable_date,dp.dp_last_positive_date) >= add_months(current_date,-24)\n            or ee.last_open_date >= add_months(current_date,-24)\n            or lo.last_login_date >= add_months(current_date,-24)\n            or fr.first_reg_date >= add_months(current_date,-24) then 0\n        else 1\n    end as supp_engagement,\n    sue.first_supp_unsub_date,\n    es.first_supp_email_date,\n    es.first_supp_manual_date,\n    es.first_supp_bounce_date,\n    cs.first_supp_dead_date,\n    cs.first_supp_child_date\nfrom ${Database}.temp.build_supps_names_dp_result dp\ninner join ${Database}.temp.build_ref_data_controller_bus_unit_xref xref on xref.brand_id = dp.brand_id\nleft join ${Database}.temp.build_supps_names_dp_result_email dpe on lower(trim(dpe.email)) = lower(trim(dp.email))\n                                                           and dpe.brand_id = dp.brand_id\nleft join ${Database}.temp.build_supps_names_supps_unsubscribe_cid_brand suc on suc.cid = dp.cid\n                                                                       and suc.brand_id = dp.brand_id\nleft join ${Database}.temp.build_supps_names_supps_unsubscribe_email_brand sue on lower(trim(sue.email)) = lower(trim(dp.email))\n                                                                         and sue.brand_id = dp.brand_id\nleft join ${Database}.temp.build_supps_cid cs on cs.cid = dp.cid\nleft join ${Database}.temp.build_supps_email es on lower(trim(es.email)) = lower(trim(dp.email))\nleft join ${Database}.temp.build_supps_email_engagement ee on lower(trim(ee.email)) = lower(trim(dp.email))\n                                                     and ee.business_unit_id = xref.business_unit_id\nleft join ${Database}.temp.build_supps_last_login lo on lo.cid = dp.cid\n                                               and lo.business_unit_id = xref.business_unit_id\nleft join ${Database}.temp.build_supps_first_reg fr on fr.cid = dp.cid\n                                              and fr.business_unit_id = xref.business_unit_id\nleft join ${Database}.temp.names_supps_dp_brand_sma sma on sma.cid = dp.cid\n                                                  and sma.brand_id = dp.brand_id;\n\nalter warehouse set warehouse_size = 'Large';\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_result;\n--drop table if exists ${Database}.temp.build_ref_data_controller_bus_unit_xref;\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_email;\n--drop table if exists ${Database}.temp.build_supps_names_supps_unsubscribe_cid_brand;\n--drop table if exists ${Database}.temp.build_supps_names_supps_unsubscribe_email_brand;\n--drop table if exists ${Database}.temp.build_supps_email;\n--drop table if exists ${Database}.temp.build_supps_cid;\n--drop table if exists ${Database}.temp.build_supps_email_engagement;\n--drop table if exists ${Database}.temp.build_supps_last_login;\n--drop table if exists ${Database}.temp.build_supps_first_reg;\n--drop table if exists ${Database}.temp.names_supps_dp_brand_sma;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.live.names_supps_dp_brand_email',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.names_supps_dp_brand_email;\n\n\n-- create email contact flags table\ndrop table if exists ${Database}.temp.build_email_brand_contact_flags;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_email_brand_contact_flags\nas\nselect\n    *\nfrom (\n         select\n             cid,\n             email,\n             business_unit_id,\n             division_id,\n             brand_id,\n             dp_last_date,\n             last_open_date,\n             last_open_date_ios15,\n             case\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where brand = 'SMA') then sma_m_dob\n                 when customer_retention_date = '1900-01-01' then cast(null as date)\n                 else customer_retention_date\n             end as customer_retention_group_date,\n             case\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where brand = 'SMA') then sma_m_dob\n                 when customer_retention_date_ios15 = '1900-01-01' then cast(null as date)\n                 else customer_retention_date_ios15\n             end as customer_retention_group_date_ios15,\n             case\n                 --SMA specific - start\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and dp_last_date_lm between add_months(current_date,-36) and add_months(current_date,-33)\n                     and dp_last_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') then 2 --reactivated\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and (dp_last_date_lm is null or dp_last_date_lm < add_months(current_date,-36))\n                     and dp_last_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') then 3 --new\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months(current_date,-33) then 1 --safe base\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months(current_date,-35) then 4  --at risk base\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months(current_date-7,-36) then 5  --data orphan\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months(current_date,-37) then 6  --Gone this month\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma') then 7 --Gone gone - or no dob\n                 --SMA specific - end\n                 when customer_retention_date_lm between add_months(current_date,-24) and add_months(current_date,-21)\n                     and customer_retention_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') then 2 --reactivated\n                 when (customer_retention_date_lm is null or customer_retention_date_lm < add_months(current_date,-24))\n                     and customer_retention_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') then 3 --new\n                 when customer_retention_date >= add_months(current_date,-21) then 1  --safe base\n                 when customer_retention_date >= add_months(current_date,-23) then 4  --at risk base\n                 when customer_retention_date >= add_months(current_date,-24) then 5  --data orphans\n                 when customer_retention_date >= add_months(current_date,-25) then 6  --gone this month\n                 when customer_retention_date is not null then 7 --gone ever\n                 else 8 --no opted in/out\n             end as customer_retention_group_base,\n             case\n                 --SMA specific - start\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and dp_last_date_lm between add_months(current_date,-36) and add_months(current_date,-33)\n                     and dp_last_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') then 2 --reactivated\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and (dp_last_date_lm is null or dp_last_date_lm < add_months(current_date,-36))\n                     and dp_last_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') then 3 --new\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months(current_date,-33) then 1 --safe base\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months(current_date,-35) then 4  --at risk base\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months(current_date-7,-36) then 5  --data orphan\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months(current_date,-37) then 6  --Gone this month\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma') then 7 --Gone gone - or no dob\n                 --SMA specific - end\n                 when customer_retention_date_ios15_lm between add_months(current_date,-24) and add_months(current_date,-21)\n                     and customer_retention_date_ios15 >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') then 2 --reactivated\n                 when (customer_retention_date_ios15_lm is null or customer_retention_date_ios15_lm < add_months(current_date,-24))\n                     and customer_retention_date_ios15 >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') then 3 --new\n                 when customer_retention_date_ios15 >= add_months(current_date,-21) then 1  --safe base\n                 when customer_retention_date_ios15 >= add_months(current_date,-23) then 4  --at risk base\n                 when customer_retention_date_ios15 >= add_months(current_date,-24) then 5  --data orphans\n                 when customer_retention_date_ios15 >= add_months(current_date,-25) then 6  --gone this month\n                 when customer_retention_date_ios15 is not null then 7 --gone ever\n                 else 8 --no opted in/out\n             end as customer_retention_group_base_ios15,\n             case\n                 when first_supp_dead_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') and supp_dead = 1 then 1 --dead this month\n                 when supp_dead = 1 then 2\n                 when first_supp_manual_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') and supp_manual_channel_email = 1 then 3\n                 when supp_manual_channel_email = 1 then 4\n                 when first_supp_bounce_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') and supp_bounce = 1 then 5\n                 when supp_bounce = 1 then 6\n                 when first_supp_unsub_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') and supp_unsubscribe_channel_email = 1 then 7\n                 when supp_unsubscribe_channel_email = 1 then 8\n                 when dp_emailable_lm = 1 and dp_emailable = 0 then 9\n                 when dp_emailable = 0 then 10\n                 when supp_engagement = 1 then 11\n                 else 12\n             end as customer_suppression_group_base,\n             case\n                 when\n                     dp_mailable                              = 1 and\n                     supp_unsubscribe_channel_mail            = 0 and\n                     supp_dead                                = 0 and\n                     supp_child                               = 0 and\n                     supp_engagement                          = 0\n                 then 1\n                 else 0\n             end as mailable,\n             case\n                 when\n                     dp_emailable                             = 1 and\n                     supp_unsubscribe_channel_email           = 0 and\n                     supp_engagement                          = 0 and\n                     supp_bad_email                           = 0 and\n                     supp_manual_channel_email                = 0 and\n                     supp_bounce                              = 0 and\n                     supp_dead                                = 0 and\n                     supp_child                               = 0 and\n                     email                                    > ''\n                 then 1\n                 else 0\n             end as emailable,\n             case\n                 when\n                     dp_newsletter                            = 1 and\n                     supp_unsubscribe_channel_email           = 0 and\n                     supp_engagement                          = 0 and\n                     supp_bad_email                           = 0 and\n                     supp_manual_channel_email                = 0 and\n                     supp_bounce                              = 0 and\n                     supp_dead                                = 0 and\n                     supp_child                               = 0 and\n                     email                                    > ''\n                 then 1\n                 else 0\n             end as emailable_newsletter,\n             case\n                 when\n                     supp_unsubscribe_channel_mail            = 0 and\n                     supp_dead                                = 0 and\n                     supp_child                               = 0 and\n                     supp_engagement                          = 0\n                 then 1\n                 else 0\n             end as mailable_ignoring_dp,\n             case\n                 when\n                     supp_unsubscribe_channel_email           = 0 and\n                     supp_engagement                          = 0 and\n                     supp_bad_email                           = 0 and\n                     supp_manual_channel_email                = 0 and\n                     supp_bounce                              = 0 and\n                     supp_dead                                = 0 and\n                     supp_child                               = 0 and\n                     email                                    > ''\n                 then 1\n                 else 0\n             end as emailable_ignoring_dp\n         from ${Database}.live.names_supps_dp_brand_email\n     ) supp\nwhere customer_retention_group_base < 7\n    or brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma');\n\nalter warehouse set warehouse_size = 'Xsmall';\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_email_brand_contact_flags',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_email_brand_contact_flags;\n\n\n/******************************************************************************************\n*                                         End Procedure\n******************************************************************************************/\n\nupdate   ${Database}.db.build_dates\nset      nestle_names_suppressions = CURRENT_TIMESTAMP::timestamp_ntz\nwhere    trim(build_flag) = 'C';\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '*************************',\n    '*************************',\n    'end of script',\n    CURRENT_TIMESTAMP::timestamp_ntz ;\n\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 9 Suppressions'\n, \t\t'SCRIPT'\n, \t\t'FINISHED'\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"197161":{"id":197161,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-240,"y":-16,"width":32,"height":32,"inputConnectorIDs":[197167],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Proc9 Supps"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nMatillion Component  : Nestle Names Suppressions\nAuthor               : Lindsay Timms\nClient Name          : Nestle\nUpdate Job Numbers   : NUK08617(0122)\nStandard Machine     : Snowflake\nAmendment History    : v01 Kog - LT 20161220 - Created\n                      v01 SF - LukeD\n                     v02 SF - LeeW 28022022 Tidied up a bit, additional source field temp.build_dp_prep and follow through\n                       v03 SF - MarkW 02 08 2022 Added in process to fix SMA pack id and code issues in db tables\n******************************************************************************************/\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 9 Suppressions'\n, \t\t'SCRIPT'\n, \t\t'STARTED'\n;\n\n/******************************************************************************************\n                                   SMA Temporary fix to Adestra and Cascade DB tables\n                                   Done due to copying of packs\n******************************************************************************************/\n\ninsert into ${Database}.db.build_log\nselect\n    'temp_fix_of_sma_packs',\n    '*************************',\n    '*************************',\n    'start of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\nalter warehouse set warehouse_size = 'Medium';\n\ncreate or replace table ${Database}.temp.sma_cascade_comms_lookup as select * from ${Database}.db.sma_cascade_comms_lookup;\n\nupdate ${Database}.db.sma_cascade_comms_lookup\nset pack_code = pack_id\nwhere pack_id != pack_code;\n\ncreate or replace table ${Database}.temp.adestra_events_sma as select * from ${Database}.db.adestra_events_sma;\n\nupdate ${Database}.db.adestra_events_sma \nset pack_id = '2732'\nwhere pack_name = 'SMA10139 Pro Legends Liquid Email UK FOM';\n\nupdate ${Database}.db.adestra_events_sma \nset pack_id = '2733'\nwhere pack_name = 'SMA10139 Pro Legends Liquid Email UK GUM';\n\nupdate ${Database}.db.adestra_events_sma \nset pack_id = '2729'\nwhere pack_name = 'SMA09981 Second Trigger Advanced';\n\nupdate ${Database}.db.adestra_events_sma \nset pack_id = '2730'\nwhere pack_name = 'SMA09981 Second Trigger Pro';\n\nupdate ${Database}.db.adestra_events_sma \nset pack_id = '2731'\nwhere pack_name = 'SMA09981 Third Trigger Pro';\n\ninsert into ${Database}.db.build_log\nselect\n    'fix_db_adestra_events_sma',\n    '${Database}.db.adestra_events_sma',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.db.adestra_events_sma;\n\nalter warehouse set warehouse_size = 'XSmall';\n\n/******************************************************************************************\n                                   NAMES SUPPRESSIONS\n******************************************************************************************/\n\ninsert into ${Database}.db.build_log\nselect\n    'nestle_names_suppressions',\n    '*************************',\n    '*************************',\n    'start of script',\n    CURRENT_TIMESTAMP::timestamp_ntz;\n\nalter warehouse set warehouse_size = 'Large';\n\n--bit of a fudge on irish mailable data\nupdate ${Database}.temp.names_tmp\nset add1      = case when lower(add1)     = 'n/a' then '' else add1 end,\n    add2      = case when lower(add2)     = 'n/a' then '' else add2 end,\n    add3      = case when lower(add3)     = 'n/a' then '' else add3 end,\n    add4      = case when lower(add4)     = 'n/a' then '' else add4 end,\n    add5      = case when lower(add5)     = 'n/a' then '' else add5 end,\n    city      = case when lower(city)     = 'n/a' then '' else city end,\n    state     = case when lower(state)    = 'n/a' then '' else state end,\n    postcode  = case when lower(postcode) = 'n/a' then '' else postcode end\nwhere lower(cc_iso)  = 'ie';\n\nupdate ${Database}.temp.names_tmp set add1 = ''     where lower(cc_iso) = 'ie' and add1 regexp '.*0{2,20}.*'     and lower(add1) not regexp '.*[1-9a-z].*';\nupdate ${Database}.temp.names_tmp set add2 = ''     where lower(cc_iso) = 'ie' and add2 regexp '.*0{2,20}.*'     and lower(add2) not regexp '.*[1-9a-z].*';\nupdate ${Database}.temp.names_tmp set add3 = ''     where lower(cc_iso) = 'ie' and add3 regexp '.*0{2,20}.*'     and lower(add3) not regexp '.*[1-9a-z].*';\nupdate ${Database}.temp.names_tmp set add4 = ''     where lower(cc_iso) = 'ie' and add4 regexp '.*0{2,20}.*'     and lower(add4) not regexp '.*[1-9a-z].*';\nupdate ${Database}.temp.names_tmp set add5 = ''     where lower(cc_iso) = 'ie' and add5 regexp '.*0{2,20}.*'     and lower(add5) not regexp '.*[1-9a-z].*';\nupdate ${Database}.temp.names_tmp set postcode = '' where lower(cc_iso) = 'ie' and postcode regexp '.*0{2,20}.*' and lower(postcode) not regexp '.*[1-9a-z].*';\n\nupdate ${Database}.temp.names_tmp\nset city = add3, add3 = ''\nwhere lower(cc_iso) = 'ie'\n    and add3 <> ''\n    and city <> add3\n\tand regexp_replace(replace(add3,city,''), '0123456789 ') = ''\n    and regexp_replace(add3,'0123456789 ') <> '';\n\nupdate ${Database}.temp.names_tmp\nset state = city, city = ''\nwhere lower(cc_iso) = 'ie'\n    and city <> ''\n    and state <> city\n    and regexp_replace(replace(city,state,''), '0123456789 ') = ''\n    and regexp_replace(city,'0123456789 ') <> '';\n\nupdate ${Database}.temp.names_tmp\nset add2 = ''\nwhere lower(cc_iso) = 'ie'\n    and add2 = city;\n\nupdate ${Database}.temp.names_tmp\nset add3 = ''\nwhere lower(cc_iso) = 'ie'\n    and add3 = city;\n\nupdate ${Database}.temp.names_tmp\nset city = ''\nwhere lower(cc_iso) = 'ie'\n    and city = state;\n    \n--master name urn table\ndrop table if exists ${Database}.temp.build_supps_prep_name_urn;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_prep_name_urn\nas\nselect\n    cid,\n    hid,\n    name_urn,\n    source_data_controller_id,\n    source_brand_id,\n    source_date,\n    data_date,\n    email,\n    phone_home,\n    phone_work,\n    phone_mobile,\n    add1\nfrom ${Database}.temp.names_tmp;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_prep_name_urn',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_prep_name_urn;\n\n\n/******************************************************************************************\n                                     DATA PROTECTION\n******************************************************************************************/\n\n\ndrop table if exists ${Database}.temp.build_dp_1_prep;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_dp_1_prep\nas\nselect\n    nmt.cid,\n    nmt.hid,\n    nmt.name_urn,\n    nmt.email,\n    dp.data_controller_id, --dc for opt ins\n    dp.brand_id, --brand is for opt in brand rather than source\n    dp.dp_date,\n    dp.dp_mailable,\n    dp.dp_emailable,\n    dp.dp_phoneable,\n    dp.dp_smsable,\n    dp.dp_newsletter,\n    dp.source_date,\n    dp.data_date,\n    dp.source as dp_source,\n    to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') as month_start_dt\nfrom ${Database}.temp.build_supps_prep_name_urn nmt\ninner join ${Database}.db.names_dp dp on trim(nmt.name_urn) = trim(dp.name_urn)\nwhere --must have at least 1 permission\n    dp.dp_mailable is not null\n    or dp.dp_emailable is not null\n    or dp.dp_phoneable is not null\n    or dp.dp_smsable is not null\n    or dp.dp_newsletter is not null;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_dp_1_prep',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_dp_1_prep;\n\nalter warehouse set warehouse_size = 'Large';\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_roll_base;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_roll_base\nas\nselect distinct\n    email,\n    cid,\n    data_controller_id, --if no brand then we need the dc to work out permissions\n    brand_id,\n    first_value(dp_date) over\n        (\n            partition by cid, data_controller_id, brand_id\n            order by dp_date desc nulls last, data_date desc\n        )                                                       as dp_last_date,\n    first_value(case when source_date < month_start_dt then dp_date else cast(null as date) end) over\n        (\n            partition by cid, data_controller_id, brand_id\n            order by case when source_date < month_start_dt then 1 else 0 end desc,\n                dp_date desc nulls last, data_date desc\n        )                                                       as dp_last_date_lm,   \n    first_value(dp_source) over\n        (\n            partition by cid, data_controller_id, brand_id\n            order by dp_date desc nulls last, data_date desc, name_urn desc\n        )                                                       as dp_last_source,  \n    first_value(dp_date) over\n        (\n            partition by cid, data_controller_id , brand_id\n            order by dp_date nulls last, data_date\n        )                                                       as dp_first_date,  \n    first_value(dp_source) over\n        (\n            partition by cid, data_controller_id, brand_id\n            order by dp_date nulls last, data_date, name_urn \n        )                                                       as dp_first_source\nfrom ${Database}.temp.build_dp_1_prep;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_roll_positive;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_roll_positive\nas\nselect distinct\n    cid,\n    data_controller_id,\n    brand_id,\n    first_value(case when dp_emailable = 1 or dp_mailable = 1 or dp_newsletter = 1 then dp_date else cast(null as date) end) over\n        (\n            partition by cid, data_controller_id, brand_id\n            order by\n                case when dp_emailable = 1 or dp_mailable = 1 or dp_newsletter = 1 then 1 else 0 end desc,\n                dp_date desc nulls last,\n                data_date desc nulls last,\n                source_date desc nulls last\n        )  as dp_last_positive_date,\n    first_value(case when source_date < month_start_dt and (dp_emailable = 1 or dp_mailable = 1 or dp_newsletter = 1) then dp_date else cast(null as date) end) over\n        (\n            partition by cid, data_controller_id, brand_id\n            order by\n                case when source_date < month_start_dt then 1 else 0 end desc,\n                case when dp_emailable = 1 or dp_mailable = 1 or dp_newsletter = 1 then 1 else 0 end desc,\n                dp_date desc nulls last,\n                data_date desc nulls last,\n                source_date desc nulls last\n        ) as dp_last_positive_date_lm,\n    first_value(case when dp_emailable = 1 or dp_mailable = 1 or dp_newsletter = 1 then dp_source else null end) over\n        (\n            partition by cid, data_controller_id, brand_id\n            order by\n                case when dp_emailable = 1 or dp_mailable = 1 or dp_newsletter = 1 then 1 else 0 end desc,\n                dp_date desc nulls last,\n                data_date desc nulls last,\n                source_date desc nulls last\n        )  as dp_last_positive_source\nfrom ${Database}.temp.build_dp_1_prep;\n\nalter warehouse set warehouse_size = 'Medium';\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_roll_positive_email;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_roll_positive_email\nas\nselect\n    email,\n    data_controller_id,\n    brand_id,\n    dp_last_positive_emailable_date,\n    dp_last_positive_emailable_source\nfrom (\n         select\n             email,\n             data_controller_id,\n             brand_id,\n             case when dp_emailable = 1 then dp_date else cast(null as date) end as dp_last_positive_emailable_date,\n             case when dp_emailable = 1 then dp_source else null end as dp_last_positive_emailable_source,\n             row_number() over\n                 (\n                     partition by email, data_controller_id, brand_id\n                     order by\n                         dp_emailable desc nulls last,\n                         dp_date desc nulls last,\n                         data_date desc nulls last,\n                         source_date desc nulls last\n                 ) as row_num\n         from ${Database}.temp.build_dp_1_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_roll_positive_email_lm;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_roll_positive_email_lm\nas\nselect\n    email,\n    data_controller_id,\n    brand_id,\n    dp_last_positive_emailable_date_lm\nfrom (\n         select\n             email,\n             data_controller_id,\n             brand_id,\n             case when source_date < month_start_dt and dp_emailable = 1 then dp_date else cast(null as date) end as dp_last_positive_emailable_date_lm,\n             case when source_date < month_start_dt and dp_emailable = 1 then dp_source else null end as dp_last_positive_emailable_source_lm,\n             row_number() over\n                 (\n                     partition by email, data_controller_id, brand_id\n                     order by\n                         case when source_date < month_start_dt then 1 else 0 end desc,\n                         dp_emailable desc nulls last,\n                         dp_date desc nulls last,\n                         data_date desc nulls last,\n                         source_date desc nulls last\n                 ) as row_num\n         from ${Database}.temp.build_dp_1_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_roll_mail;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_roll_mail\nas\nselect\n    cid,\n    data_controller_id, --if no brand then we need the dc to work out permissions\n    brand_id,\n    dp_mailable,\n    dp_last_mailable_date,\n    dp_last_mailable_source\nfrom (\n         select\n             cid,\n             data_controller_id,\n             brand_id,\n             dp_mailable,\n             dp_date as dp_last_mailable_date,\n             dp_source as dp_last_mailable_source,\n             row_number() over\n                 (\n                     partition by cid, data_controller_id, brand_id\n                     order by\n                         case when dp_mailable is null then 0 else 1 end desc,\n                         dp_date desc nulls last,\n                         data_date desc nulls last,\n                         source_date desc nulls last,\n                         dp_mailable nulls last\n                 ) as row_num\n         from ${Database}.temp.build_dp_1_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_roll_email;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_roll_email\nas\nselect\n    email,\n    data_controller_id, --if no brand then we need the dc to work out permissions\n    brand_id,\n    dp_emailable,\n    dp_last_emailable_date,\n    dp_last_emailable_source\nfrom (\n         select\n             email,\n             data_controller_id,\n             brand_id,\n             dp_emailable,\n             dp_date as dp_last_emailable_date,\n             dp_source as dp_last_emailable_source,\n             row_number() over\n                 (\n                     partition by email, data_controller_id, brand_id --for gigya/gdpr we now need to permission by email address\n                     order by\n                         case when dp_emailable is null then 0 else 1 end desc,\n                         dp_date desc nulls last,\n                         data_date desc nulls last,\n                         source_date desc nulls last,\n                         dp_emailable nulls last, \n                         data_controller_id\n                 ) as row_num\n         from ${Database}.temp.build_dp_1_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_roll_newsletter;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_roll_newsletter\nas\nselect\n    email,\n    data_controller_id, --if no brand then we need the dc to work out permissions\n    brand_id,\n    dp_newsletter,\n    dp_last_newsletter_date\nfrom (\n         select\n             email,\n             data_controller_id,\n             brand_id,\n             dp_newsletter,\n             dp_date as dp_last_newsletter_date,\n             row_number() over\n                 (\n                     partition by email, data_controller_id, brand_id --for gigya/gdpr we now need to permission by email address\n                     order by\n                         case when dp_newsletter is null then 0 else 1 end desc,\n                         dp_date desc nulls last,\n                         data_date desc nulls last,\n                         source_date desc nulls last,\n                         dp_newsletter nulls last, \n                         data_controller_id\n                 ) as row_num\n         from ${Database}.temp.build_dp_1_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_roll_email_lm;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_roll_email_lm\nas\nselect\n    email,\n    data_controller_id, --if no brand then we need the dc to work out permissions\n    brand_id,\n    dp_emailable_lm,\n    dp_last_emailable_date_lm\nfrom (\n         select\n             email,\n             data_controller_id,\n             brand_id,\n             case when source_date < month_start_dt then dp_emailable else cast(null as int) end as dp_emailable_lm,\n             case when source_date < month_start_dt then dp_date else cast(null as date) end as dp_last_emailable_date_lm,\n             row_number() over\n                 (\n                     partition by email, data_controller_id, brand_id --for gigya/gdpr we now need to permission by email address\n                     order by\n                         case when source_date < month_start_dt then 1 else 0 end desc,\n                         case when dp_emailable is null then 0 else 1 end desc,\n                         dp_date desc nulls last,\n                         data_date desc nulls last,\n                         source_date desc nulls last,\n                         dp_emailable nulls last, \n                         data_controller_id\n                 ) as row_num\n         from ${Database}.temp.build_dp_1_prep\n     ) dp\nwhere row_num = 1;\n\nalter warehouse set warehouse_size = 'Large';\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_roll;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_roll\nas\nselect distinct\n    ba.email,\n    ba.cid,\n    ba.data_controller_id, --if no brand then we need the dc to work out permissions\n    ba.brand_id,\n    ma.dp_mailable,\n    em.dp_emailable,\n    el.dp_emailable_lm,\n    ne.dp_newsletter,\n    ma.dp_last_mailable_date,\n    em.dp_last_emailable_date,\n    pe.dp_last_positive_emailable_date,\n    el.dp_last_emailable_date_lm,\n    pl.dp_last_positive_emailable_date_lm,\n    ne.dp_last_newsletter_date,\n    ba.dp_last_date,\n    ba.dp_last_date_lm,\n    po.dp_last_positive_date,\n    po.dp_last_positive_date_lm,\n    --sources\n    ma.dp_last_mailable_source,\n    em.dp_last_emailable_source,\n    pe.dp_last_positive_emailable_source,\n    --ne.dp_last_newsletter_source,\n    ba.dp_last_source,\n    po.dp_last_positive_source,\n    --acquisition\n    ba.dp_first_date,\n    ba.dp_first_source\nfrom ${Database}.temp.build_supps_names_dp_roll_base ba\nleft join ${Database}.temp.build_supps_names_dp_roll_positive po on po.cid = ba.cid\n                                                           and po.data_controller_id = ba.data_controller_id\n                                                           and coalesce(po.brand_id,0) = coalesce(ba.brand_id,0)\nleft join ${Database}.temp.build_supps_names_dp_roll_positive_email pe on lower(trim(pe.email)) = lower(trim(ba.email))\n                                                                 and pe.data_controller_id = ba.data_controller_id\n                                                                 and coalesce(pe.brand_id,0) = coalesce(ba.brand_id,0)\nleft join ${Database}.temp.build_supps_names_dp_roll_positive_email_lm pl on lower(trim(pl.email)) = lower(trim(ba.email))\n                                                                     and pl.data_controller_id = ba.data_controller_id\n                                                                     and coalesce(pl.brand_id,0) = coalesce(ba.brand_id,0)\nleft join ${Database}.temp.build_supps_names_dp_roll_email em on lower(trim(em.email)) = lower(trim(ba.email))\n                                                        and em.data_controller_id = ba.data_controller_id\n                                                        and coalesce(em.brand_id,0) = coalesce(ba.brand_id,0)\nleft join ${Database}.temp.build_supps_names_dp_roll_mail ma on ma.cid = ba.cid\n                                                       and ma.data_controller_id = ba.data_controller_id\n                                                       and coalesce(ma.brand_id,0) = coalesce(ba.brand_id,0)\nleft join ${Database}.temp.build_supps_names_dp_roll_newsletter ne on lower(trim(ne.email)) = lower(trim(ba.email))\n                                                             and ne.data_controller_id = ba.data_controller_id\n                                                             and coalesce(ne.brand_id,0) = coalesce(ba.brand_id,0)\nleft join ${Database}.temp.build_supps_names_dp_roll_email_lm el on lower(trim(el.email)) = lower(trim(ba.email))\n                                                           and el.data_controller_id = ba.data_controller_id\n                                                           and coalesce(el.brand_id,0) = coalesce(ba.brand_id,0);\n\nalter warehouse set warehouse_size = 'Medium';\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_roll',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_roll;\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_roll_base;\n--drop table if exists ${Database}.temp.build_supps_names_dp_roll_positive;\n--drop table if exists ${Database}.temp.build_supps_names_dp_roll_positive_email;\n--drop table if exists ${Database}.temp.build_supps_names_dp_roll_positive_email_lm;\n--drop table if exists ${Database}.temp.build_supps_names_dp_roll_email;\n--drop table if exists ${Database}.temp.build_supps_names_dp_roll_mail;\n--drop table if exists ${Database}.temp.build_supps_names_dp_roll_newsletter;\n--drop table if exists ${Database}.temp.build_supps_names_dp_roll_email_lm;\n--drop table if exists ${Database}.temp.build_dp_1_prep;\n\n\n--build the cross ref on the fly\n--build the reverse live lookup - dc/brand combos = business unit\n--be aware of same brand under different dc - both need to inherit the latest permission per brand\n\ndrop table if exists ${Database}.temp.build_ref_data_controller_division_xref;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_ref_data_controller_division_xref\nas\nselect\n    di.data_controller_id,\n    di.division_id,\n    br.brand_id\nfrom ${Database}.db.ref_data_controller_division_xref di\ninner join ${Database}.db.ref_brand br on di.division_id = br.division_id;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_ref_data_controller_division_xref',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_ref_data_controller_division_xref;\n\n--Main business level reference table (eventually will replace the above 'build_ref_data_controller_division_xref' table)\ndrop table if exists ${Database}.live.xref_business_level;\n\nCREATE OR REPLACE TABLE ${Database}.live.xref_business_level\nas\nselect\n    data_controller_id,\n    business_unit_id,\n    division_id,\n    brand_id,\n    case when rn = 1 then rn end as primary_division_map,\n    case when rn2 = 1 then rn2 end as primary_brand_map\nfrom\n    (select\n        x.data_controller_id,\n        case\n            when di.business_unit_id is not null then di.business_unit_id\n            else br.brand_id + (select max(data_controller_id) from ${Database}.db.ref_data_controller) --insert the missing ones with fake bu's\n        end as business_unit_id,\n        di.division_id,\n        br.brand_id,\n        row_number() over (partition by di.division_id order by case when x.data_controller_id = (select data_controller_id from ${Database}.db.ref_data_controller where data_controller ilike 'Nestl_ (Ireland) Ltd') then 0 else data_controller_id end desc, br.brand_id) rn,\n        row_number() over (partition by br.brand_id    order by case when x.data_controller_id = (select data_controller_id from ${Database}.db.ref_data_controller where data_controller ilike 'Nestl_ (Ireland) Ltd') then 0 else data_controller_id end desc, di.division_id) rn2\n    from ${Database}.db.ref_brand br\n    left join ${Database}.db.ref_data_controller_division_xref x on x.division_id = br.division_id\n    left join ${Database}.db.ref_division di on x.division_id = di.division_id)\n;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.live.xref_business_level',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.xref_business_level;\n\n\n------------------------------------------------------------\n--mail permissions by cid\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result\nas\nselect distinct\n    cid,\n    email,\n    brand_id,\n    dp_mailable,\n    dp_last_mailable_date,\n    dp_last_date,\n    dp_last_positive_date,\n    dp_last_date_lm,\n    dp_last_positive_date_lm,\n    --sources\n    dp_last_mailable_source,\n    dp_last_source,\n    dp_last_positive_source,\n    --acquisition\n    dp_first_date,\n    dp_first_source\nfrom ${Database}.temp.build_supps_names_dp_roll\nwhere brand_id is not null;\n\ninsert into ${Database}.db.build_log\nselect 'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_result',\n    'total records (with brand)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_result;\n\n\nalter warehouse set warehouse_size = 'Large';\n\n--work out all the possible brand opt ins unsing the xref\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_1_prep;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_1_prep\nas\nselect distinct\n    rl.cid,\n    rl.email,\n    xref.brand_id,\n    rl.dp_mailable,\n    rl.dp_last_mailable_date,\n    rl.dp_last_date,\n    rl.dp_last_positive_date,\n    rl.dp_last_date_lm,\n    rl.dp_last_positive_date_lm,\n    --sources\n    rl.dp_last_mailable_source,\n    rl.dp_last_source,\n    rl.dp_last_positive_source,\n    --acquisition\n    rl.dp_first_date,\n    rl.dp_first_source\nfrom ${Database}.temp.build_supps_names_dp_roll rl\ninner join ${Database}.live.xref_business_level xref on rl.data_controller_id = xref.data_controller_id\nwhere rl.brand_id is null;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_result_no_brand_1_prep',\n    'total records (no brand)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_result_no_brand_1_prep;\n\n\n--find the latest per brand to take care of multi permisions per brand\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_mail;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_mail\nas\nselect\n    cid,\n    brand_id,\n    dp_mailable,\n    dp_last_mailable_date,\n    dp_last_mailable_source\nfrom (\n         select\n             cid,\n             brand_id,\n             dp_mailable,\n             dp_last_mailable_date,\n             dp_last_mailable_source,\n             row_number() over\n                 (\n                     partition by cid, brand_id\n                     order by\n                         case when dp_mailable is null then 0 else 1 end desc,\n                         dp_last_mailable_date desc nulls last,\n                         dp_mailable nulls last\n                 ) as row_num\n         from ${Database}.temp.build_supps_names_dp_result_no_brand_1_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_dates;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_dates\nas\nselect\n    cid,\n    brand_id,\n    max(dp_last_date) as dp_last_date,\n    max(dp_last_positive_date) as dp_last_positive_date,\n    max(dp_last_date_lm) as dp_last_date_lm,\n    max(dp_last_positive_date_lm) as dp_last_positive_date_lm,\n    min(dp_first_date) as dp_first_date\nfrom ${Database}.temp.build_supps_names_dp_result_no_brand_1_prep\ngroup by cid, brand_id;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_sources;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_sources\nas\nselect distinct\n    cid,\n    brand_id,\n    first_value(dp_last_source)          over (partition by cid, brand_id order by dp_last_date desc nulls last, dp_last_source)        as dp_last_source,\n    first_value(dp_last_positive_source) over (partition by cid, brand_id order by dp_last_positive_date desc nulls last, dp_last_date desc nulls last, dp_last_positive_source) as dp_last_positive_source,\n    first_value(dp_first_source)         over (partition by cid, brand_id order by dp_last_date nulls last, dp_first_source)            as dp_first_source\nfrom ${Database}.temp.build_supps_names_dp_result_no_brand_1_prep\n;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_1;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_1\nas\nselect\n    pr.cid,\n    pr.email,\n    pr.brand_id,\n    ma.dp_mailable,\n    ma.dp_last_mailable_date,\n    da.dp_last_date,\n    da.dp_last_positive_date,\n    da.dp_last_date_lm,\n    da.dp_last_positive_date_lm,\n    --sources\n    ma.dp_last_mailable_source,\n    sc.dp_last_source,\n    sc.dp_last_positive_source,\n    --acquisition\n    da.dp_first_date,\n    sc.dp_first_source\nfrom (\n         select distinct\n             cid,\n             email,\n             brand_id\n         from ${Database}.temp.build_supps_names_dp_result_no_brand_1_prep\n     ) pr\nleft join ${Database}.temp.build_supps_names_dp_result_no_brand_mail ma on ma.cid = pr.cid\n                                                                  and ma.brand_id = pr.brand_id\nleft join ${Database}.temp.build_supps_names_dp_result_no_brand_dates da on da.cid = pr.cid\n                                                                  and da.brand_id = pr.brand_id\nleft join ${Database}.temp.build_supps_names_dp_result_no_brand_sources sc on sc.cid = pr.cid\n                                                                  and sc.brand_id = pr.brand_id;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_result_no_brand_1',\n    'total records (no brand)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_result_no_brand_1;\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_mail;\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_dates;\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_sources;\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_1_prep;\n\n\n--insert dp for all brands under a data controller (if no brand id specified)\nmerge into ${Database}.temp.build_supps_names_dp_result dpbr\nusing ${Database}.temp.build_supps_names_dp_result_no_brand_1 mg on mg.cid = dpbr.cid\n                                                         and lower(trim(mg.email)) = lower(trim(dpbr.email))\n                                                         and mg.brand_id = dpbr.brand_id --brand specific opt ins always have priority\nwhen not matched then insert\n(\n    cid,\n    email,\n    brand_id,\n    dp_mailable,\n    dp_last_mailable_date,\n    dp_last_date,\n    dp_last_positive_date,\n    dp_last_date_lm,\n    dp_last_positive_date_lm,\n    --sources\n    dp_last_mailable_source,\n    dp_last_source,\n    dp_last_positive_source,\n    --acquisition\n    dp_first_date,\n    dp_first_source\n)\nvalues\n(\n    mg.cid,\n    mg.email,\n    mg.brand_id,\n    mg.dp_mailable,\n    mg.dp_last_mailable_date,\n    mg.dp_last_date,\n    mg.dp_last_positive_date,\n    mg.dp_last_date_lm,\n    mg.dp_last_positive_date_lm,\n    --sources\n    mg.dp_last_mailable_source,\n    mg.dp_last_source,\n    mg.dp_last_positive_source,\n    --acquisition\n    mg.dp_first_date,\n    mg.dp_first_source\n);\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_result',\n    'total records (with dp)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_result;\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_1;\n\n\n--insert all the records with missing/null dp\nmerge into ${Database}.temp.build_supps_names_dp_result dpbr\nusing (\n          select distinct\n              cid,\n              email,\n              source_brand_id\n          from ${Database}.temp.build_supps_prep_name_urn\n          where source_brand_id is not null\n      ) mg on mg.cid = dpbr.cid\n          and mg.email = dpbr.email\n          and mg.source_brand_id = dpbr.brand_id\nwhen not matched then insert\n(\n    cid,\n    email,\n    brand_id\n)\nvalues\n(\n    mg.cid,\n    mg.email,\n    mg.source_brand_id\n);\n\n\nmerge into ${Database}.temp.build_supps_names_dp_result dpbr\nusing (\n          select distinct\n              prep.cid,\n              prep.email,\n              xref.brand_id\n          from ${Database}.temp.build_supps_prep_name_urn prep\n          inner join ${Database}.live.xref_business_level xref on prep.source_data_controller_id = xref.data_controller_id\n          where prep.source_brand_id is null\n      ) mg on mg.cid = dpbr.cid\n          and lower(trim(mg.email)) = lower(trim(dpbr.email))\n          and mg.brand_id = dpbr.brand_id\nwhen not matched then insert\n(\n    cid,\n    email,\n    brand_id\n)\nvalues\n(\n    mg.cid,\n    mg.email,\n    mg.brand_id\n);\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_result',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_result;\n\n\n------------------------------------------------------------\n--same again but for email address\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_email;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_email\nas\nselect distinct\n    email,\n    brand_id,\n    dp_emailable,\n    dp_emailable_lm,\n    dp_newsletter,\n    dp_last_emailable_date,\n    dp_last_positive_emailable_date,\n    dp_last_emailable_date_lm,\n    dp_last_positive_emailable_date_lm,\n    dp_last_newsletter_date,\n    --sources\n    dp_last_emailable_source,\n    dp_last_positive_emailable_source,\n    data_controller_id\nfrom ${Database}.temp.build_supps_names_dp_roll\nwhere brand_id is not null\n    and email > ''\n    and (\n            dp_emailable is not null\n            or dp_newsletter is not null\n        );\n\ninsert into ${Database}.db.build_log\nselect 'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_result_email',\n    'total records (with brand)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_result_email;\n\n\n--work out all the possible brand opt ins unsing the xref\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_2_prep;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_2_prep\nas\nselect distinct\n    rl.email,\n    xref.brand_id,\n    rl.dp_emailable,\n    rl.dp_emailable_lm,\n    rl.dp_newsletter,\n    rl.dp_last_emailable_date,\n    rl.dp_last_positive_emailable_date,\n    rl.dp_last_emailable_date_lm,\n    rl.dp_last_positive_emailable_date_lm,\n    rl.dp_last_newsletter_date,\n    --sources\n    rl.dp_last_emailable_source,\n    rl.dp_last_positive_emailable_source,\n    rl.data_controller_id\nfrom ${Database}.temp.build_supps_names_dp_roll rl\ninner join ${Database}.live.xref_business_level xref on rl.data_controller_id = xref.data_controller_id\nwhere rl.brand_id is null\n    and email > ''\n    and (\n            rl.dp_emailable is not null\n            or rl.dp_newsletter is not null\n        );\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_result_no_brand_2_prep',\n    'total records (no brand)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_result_no_brand_2_prep;\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_roll;\n\n\n--find the latest per brand to take care of multi permisions per brand\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_email;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_email\nas\nselect\n    email,\n    brand_id,\n    dp_emailable,\n    dp_last_emailable_date,\n    dp_last_emailable_source\nfrom (\n         select\n             email,\n             brand_id,\n             dp_emailable,\n             dp_last_emailable_date,\n             dp_last_emailable_source,\n             row_number() over\n                 (\n                     partition by email, brand_id\n                     order by\n                         case when dp_emailable is null then 0 else 1 end desc,\n                         dp_last_emailable_date desc nulls last,\n                         dp_emailable nulls last\n                 ) as row_num\n         from ${Database}.temp.build_supps_names_dp_result_no_brand_2_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_email_lm;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_email_lm\nas\nselect\n    email,\n    brand_id,\n    dp_emailable_lm,\n    dp_last_emailable_date_lm\nfrom (\n         select\n             email,\n             brand_id,\n             dp_emailable_lm,\n             dp_last_emailable_date_lm,\n             row_number() over\n                 (\n                     partition by email, brand_id\n                     order by\n                         case when dp_emailable_lm is null then 0 else 1 end desc,\n                         dp_last_emailable_date_lm desc nulls last,\n                         dp_emailable_lm nulls last\n                 ) as row_num\n         from ${Database}.temp.build_supps_names_dp_result_no_brand_2_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_newsletter;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_newsletter\nas\nselect\n    email,\n    brand_id,\n    dp_newsletter,\n    dp_last_newsletter_date\nfrom (\n         select\n             email,\n             brand_id,\n             dp_newsletter,\n             dp_last_newsletter_date,\n             row_number() over\n                 (\n                     partition by email, brand_id\n                     order by\n                         case when dp_newsletter is null then 0 else 1 end desc,\n                         dp_last_newsletter_date desc nulls last,\n                         dp_newsletter nulls last\n                 ) as row_num\n         from ${Database}.temp.build_supps_names_dp_result_no_brand_2_prep\n     ) dp\nwhere row_num = 1;\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_positive;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_positive\nas\nselect\n    email,\n    brand_id,\n    dp_last_positive_emailable_date,\n    dp_last_positive_emailable_source\nfrom (\n         select\n             email,\n             brand_id,\n             dp_last_positive_emailable_date,\n             dp_last_positive_emailable_source,\n             row_number() over\n                 (\n                     partition by email, brand_id\n                     order by\n                         case when dp_emailable is null then 0 else 1 end desc,\n                         dp_last_positive_emailable_date desc nulls last\n                 ) as row_num\n         from ${Database}.temp.build_supps_names_dp_result_no_brand_2_prep\n     ) dp\nwhere row_num = 1;\n\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_positive_lm;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_positive_lm\nas\nselect\n    email,\n    brand_id,\n    dp_last_positive_emailable_date_lm\nfrom (\n         select\n             email,\n             brand_id,\n             dp_last_positive_emailable_date_lm,\n             row_number() over\n                 (\n                     partition by email, brand_id\n                     order by\n                         case when dp_emailable_lm is null then 0 else 1 end desc,\n                         dp_last_positive_emailable_date_lm desc nulls last\n                 ) as row_num\n         from ${Database}.temp.build_supps_names_dp_result_no_brand_2_prep\n     ) dp\nwhere row_num = 1;\n\n\nalter warehouse set warehouse_size = 'Large';\n\ndrop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_2;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_dp_result_no_brand_2\nas\nselect\n    em.email,\n    em.brand_id,\n    em.dp_emailable,\n    el.dp_emailable_lm,\n    ne.dp_newsletter,\n    em.dp_last_emailable_date,\n    po.dp_last_positive_emailable_date,\n    el.dp_last_emailable_date_lm,\n    pl.dp_last_positive_emailable_date_lm,\n    ne.dp_last_newsletter_date,\n    --sources\n    em.dp_last_emailable_source,\n    po.dp_last_positive_emailable_source\nfrom ${Database}.temp.build_supps_names_dp_result_no_brand_email em\nleft join ${Database}.temp.build_supps_names_dp_result_no_brand_email_lm el on lower(trim(el.email)) = lower(trim(em.email))\n                                                                      and el.brand_id = em.brand_id\nleft join ${Database}.temp.build_supps_names_dp_result_no_brand_newsletter ne on lower(trim(ne.email)) = lower(trim(em.email))\n                                                                        and ne.brand_id = em.brand_id\nleft join ${Database}.temp.build_supps_names_dp_result_no_brand_positive po on lower(trim(po.email)) = lower(trim(em.email))\n                                                                      and po.brand_id = em.brand_id\nleft join ${Database}.temp.build_supps_names_dp_result_no_brand_positive_lm pl on lower(trim(pl.email)) = lower(trim(em.email))\n                                                                         and pl.brand_id = em.brand_id;\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_2_prep;\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_email;\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_email_lm;\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_newsletter;\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_positive;\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_positive_lm;\n\nalter warehouse set warehouse_size = 'Medium';\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_result_no_brand_2',\n    'total records (no brand)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_result_no_brand_2;\n\n\n--insert dp for all brands under a data controller (if no brand id specified)\nmerge into ${Database}.temp.build_supps_names_dp_result_email dpbr\nusing ${Database}.temp.build_supps_names_dp_result_no_brand_2 mg on lower(trim(mg.email)) = lower(trim(dpbr.email))\n                                                         and mg.brand_id = dpbr.brand_id --brand specific opt ins always have priority\nwhen not matched then insert\n(\n    email,\n    brand_id,\n    dp_emailable,\n    dp_emailable_lm,\n    dp_newsletter,\n    dp_last_emailable_date,\n    dp_last_positive_emailable_date,\n    dp_last_emailable_date_lm,\n    dp_last_positive_emailable_date_lm,\n    dp_last_newsletter_date,\n    --sources\n    dp_last_emailable_source,\n    dp_last_positive_emailable_source\n)\nvalues\n(\n    mg.email,\n    mg.brand_id,\n    mg.dp_emailable,\n    mg.dp_emailable_lm,\n    mg.dp_newsletter,\n    mg.dp_last_emailable_date,\n    mg.dp_last_positive_emailable_date,\n    mg.dp_last_emailable_date_lm,\n    mg.dp_last_positive_emailable_date_lm,\n    mg.dp_last_newsletter_date,\n    --sources\n    mg.dp_last_emailable_source,\n    mg.dp_last_positive_emailable_source\n);\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_dp_result_email',\n    'total records (with dp)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_dp_result_email;\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_no_brand_2;\n\n\n/********************************************************************************************\n*                                     BAD QUALITY DATA                                        *\n*********************************************************************************************/\n\ndrop table if exists ${Database}.temp.build_supps_names_supps_quality;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_quality\nas\nselect\n    name_urn,\n    phone_home_score,\n    phone_work_score,\n    phone_mobile_score,\n    case when email = '0' or lower(email) regexp '.*[^-a-z0-9_@\\+\\\\.&].*' then -1 else email_score end as email_score,\n    case when email_score = 1 then cast(null as date) else data_date end as first_supp_email_date,\n    -- some pass paf but have completely wrong org allocated so fail them\n    -- will need more work for overseas\n    -- irish rule as well\n    case\n        when lower(address_quality) in ('paf standard (v)','paf standard (c)')\n            and paf_organisation > '' and cap_org_match = 'n'\n            and not --special case sma/hcp\n                (\n                    lower(paf_organisation) regexp '(.*)(hospital|trust|medical|pct|p c t|pharmacy|surgery|nhs|infirmary|doctors|health|chemist|nursery|sure start|surestart|practice|children|dr)(.*)'\n                    or (lower(email_domain) regexp '.*\\.ac\\..*' and lower(collate(paf_organisation,'')) regexp '(.*)(university|college)(.*)')\n                )\n            then -1\n        --special hcp rule for irish addresses\n        when lower(cc_iso) = 'ie'\n            and\n            (\n                lower(add1) regexp '(.*)(pm[0-9]|pm [0-9]|parcel motel|store it|storeit)(.*)'\n                or  lower(firstname||' '||lastname) like '%urgent%'\n                or lower(firstname||' '||lastname) like '%removed%'\n                or lower(firstname||' '||lastname) like '%customer%'\n                or add1 regexp '.*[0-9]{6}.*'\n                or add2 regexp '.*[0-9]{6}.*'\n                or add3 regexp '.*[0-9]{6}.*'\n                or add4 regexp '.*[0-9]{6}.*'\n                or add5 regexp '.*[0-9]{6}.*'\n            )\n            then -1\n        when lower(cc_iso) = 'ie' and\n            case when add1 > '' and lower(add1) <> 'eire' and lower(add1) <> 'n/a' then 1 else 0 end +\n            case when add2 > '' and lower(add2) <> 'eire' and lower(add2) <> 'n/a' then 1 else 0 end +\n            case when add3 > '' and lower(add3) <> 'eire' and lower(add3) <> 'n/a' then 1 else 0 end +\n            case when add4 > '' and lower(add4) <> 'eire' and lower(add4) <> 'n/a' then 1 else 0 end +\n            case when city > '' and lower(city) <> 'eire' and lower(city) <> 'n/a' then 1 else 0 end +\n            case when state > '' and lower(state) <> 'eire' and lower(state) <> 'n/a' then 1 else 0 end > 2\n            then 1\n        -- temp fix for dates in addresses passing address clean\n        when\n            lower(add1||add2) regexp '.*-jan.*' or lower(add1||add2) regexp '.*-feb.*' or lower(add1||add2) regexp '.*-mar.*' or lower(add1||add2) regexp '.*-apr.*' or\n            lower(add1||add2) regexp '.*-may.*' or lower(add1||add2) regexp '.*-jun.*' or lower(add1||add2) regexp '.*-jul.*' or lower(add1||add2) regexp '.*-aug.*' or\n            lower(add1||add2) regexp '.*-sep.*' or lower(add1||add2) regexp '.*-oct.*' or lower(add1||add2) regexp '.*-nov.*' or lower(add1||add2) regexp '.*-dec.*'\n            then -1\n        else address_score\n    end as address_score,\n    -- get rid of test records\n    case when firstname regexp '.*@.*' then -1 else name_score end as name_score\nfrom ${Database}.temp.ram_names;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_quality',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_quality;\n\n/******************************************************************************************\n*                                     MANUAL SUPPRESSION\n******************************************************************************************/\n\n\n-- email - any person whose email address is on the manual file should be suppressed for ever\ndrop table if exists ${Database}.temp.build_supps_names_supps_manual_email;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_manual_email\nas\nselect\n    lower(rn.email) as email,\n    1 as manual_channel_email,\n    min(sm.data_date) as first_supp_manual_date\nfrom ${Database}.temp.ram_names rn\ninner join ${Database}.db.supps_manual sm on split_part(rn.name_urn,'-',-1) = cast(sm.supp_urn as varchar)\nwhere rn.email > ''\n    and rn.email_score = 1\n    and lower(rn.source) = 'manual'\n    and manual_channel_email = 1\ngroup by lower(rn.email);\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_manual_email',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_manual_email;\n\n-- phone number matches\n-- phone and mobile number and person whos home or mobile number appears on the manual file should be suppressed\ndrop table if exists ${Database}.temp.build_supps_names_supps_manual_phone_temp;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_manual_phone_temp\nas\nselect\n    rn.phone_home as phone,\n    1 as manual_channel_phone\nfrom     ${Database}.temp.ram_names rn\ninner join ${Database}.db.supps_manual sm on split_part(rn.name_urn,'-',-1) = cast(sm.supp_urn as varchar)\nwhere rn.phone_home > ''\n    and rn.phone_home_score = 1\n    and lower(rn.source) = 'manual'\n    and manual_channel_phone = 1\ngroup by rn.phone_home;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_manual_phone_temp',\n    'total records (home)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_manual_phone_temp;\n\ninsert into ${Database}.temp.build_supps_names_supps_manual_phone_temp\nselect rn.phone_mobile as phone,\n    1 as manual_channel_phone\nfrom ${Database}.temp.ram_names rn\ninner join ${Database}.db.supps_manual sm on split_part(rn.name_urn,'-',-1) = cast(sm.supp_urn as varchar)\nwhere rn.phone_mobile > ''\n    and rn.phone_mobile_score = 1\n    and lower(rn.source) = 'manual'\n    and manual_channel_phone = 1\ngroup by rn.phone_mobile;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_manual_phone_temp',\n    'total records (home and mobile)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_manual_phone_temp;\n\ninsert into ${Database}.temp.build_supps_names_supps_manual_phone_temp\nselect rn.phone_work as phone,\n    1 as manual_channel_phone\nfrom ${Database}.temp.ram_names rn\ninner join ${Database}.db.supps_manual sm on split_part(rn.name_urn,'-',-1)  = cast(sm.supp_urn as varchar)\nwhere rn.phone_work > ''\n    and rn.phone_work_score = 1\n    and lower(rn.source) = 'manual'\n    and manual_channel_phone = 1\ngroup by rn.phone_work;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_manual_phone_temp',\n    'total records (home and mobile and work)',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_manual_phone_temp;\n\n-- create distinct list of valid numbers to screen against database\ndrop table if exists ${Database}.temp.build_supps_names_supps_manual_phone;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_manual_phone\nas\nselect phone,\n    max(manual_channel_phone) as manual_channel_phone\nfrom ${Database}.temp.build_supps_names_supps_manual_phone_temp\ngroup by phone;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_manual_phone',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_manual_phone;\n\n--drop table if exists ${Database}.temp.build_supps_names_supps_manual_phone_temp;\n\n\n-- address matches\ndrop table if exists ${Database}.temp.build_supps_names_supps_manual_hh_id;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_manual_hh_id\nas\nselect\n    coalesce(rn.hh_id,rn.bbw_urn) as hid,\n    1 as manual_channel_mail\nfrom ${Database}.temp.ram_names rn\ninner join ${Database}.db.supps_manual sm on split_part(rn.name_urn,'-',-1)  = cast(sm.supp_urn as varchar)\nwhere lower(rn.source) = 'manual'\n    and manual_channel_mail = 1\ngroup by coalesce(rn.hh_id,rn.bbw_urn);\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_manual_hh_id',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_manual_hh_id;\n\n\n/******************************************************************************************\n                                     UNSUBSCRIBE SUPPRESSION\n******************************************************************************************/\n\n-- Attribute campaigns to unsubscribes\nmerge into ${Database}.db.supps_unsubscribe su\nusing (\n          select\n              su.supp_urn,\n              ae.campaign_name,\n              ae.event_name,\n              ae.event_timestamp,\n              row_number() over\n                  (\n                      partition by su.supp_urn\n                      order by\n                          case when lower(ae.link_url) regexp '.*unsub.*' then 1 else 0 end desc,\n                          ae.event_timestamp desc\n                  ) as rn\n          from ${Database}.db.supps_unsubscribe su\n          inner join ${Database}.db.adestra_events ae on lower(trim(ae.email)) = lower(trim(su.email))\n                                                and cast(ae.event_timestamp as date) >= (su.data_date - 7)\n                                                and cast(ae.event_timestamp as date) <= su.data_date\n          where trim(su.source) in ('SUPP_PRAG_1|nestlecouk','SUPP_PRAG_1|purina','SUPP_PRAG_1|Purina','SUPP_PRAG_1|Purina.')\n              and su.data_date >= (current_date - 5)\n              and su.unsub_campaign = ''\n              and lower(ae.event_name) regexp '(.*)(click|read)(.*)'\n      ) ae on ae.supp_urn = su.supp_urn\n          and ae.rn = 1\nwhen matched then update\nset su.unsub_campaign = ae.campaign_name,\n    su.unsub_event = ae.event_name,\n    su.unsub_timestamp = ae.event_timestamp;\n\n\nmerge into ${Database}.db.supps_unsubscribe su\nusing (\n          select\n              su.supp_urn,\n              ae.campaign_name,\n              ae.event_name,\n              ae.event_timestamp,\n              row_number() over\n                  (\n                      partition by su.supp_urn\n                      order by\n                          case when lower(ae.link_url) regexp '.*unsub.*' then 1 else 0 end desc,\n                          ae.event_timestamp desc\n                  ) as rn\n          from ${Database}.db.supps_unsubscribe su\n          inner join ${Database}.db.adestra_events_sma ae on lower(trim(ae.email)) = lower(trim(su.email))\n                                                         and cast(ae.event_timestamp as date) >= (su.data_date - 7)\n                                                         and cast(ae.event_timestamp as date) <= su.data_date\n          where trim(su.source) = 'SUPP_PRAG_1|sma'\n              and su.data_date >= (current_date - 5)\n              and su.unsub_campaign = ''\n              and lower(ae.event_name) regexp '(.*)(click|read)(.*)'\n      ) ae on ae.supp_urn = su.supp_urn\n          and ae.rn = 1\nwhen matched then update\nset su.unsub_campaign = ae.campaign_name,\n    su.unsub_event = ae.event_name,\n    su.unsub_timestamp = ae.event_timestamp;\n\n\n--  email - any person whose email address is on the unsubscribe file should be suppressed by brand\ndrop table if exists ${Database}.temp.build_supps_names_supps_unsubscribe_email;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_unsubscribe_email\nas\nselect\n    rn.email,\n    su.brand_id,\n    max(su.data_date) as unsubscribe_channel_email_date,\n    min(su.data_date) as first_supp_unsub_date\nfrom ${Database}.live.xref_name_urn rn\ninner join ${Database}.db.supps_unsubscribe su on split_part(rn.name_urn,'-',-1)  = cast(su.supp_urn as varchar)\nwhere rn.email > ''\n    and lower(rn.source) = 'unsub'\n    and su.unsubscribe_channel_email = 1\ngroup by\n    rn.email,\n    su.brand_id;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_unsubscribe_email',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_unsubscribe_email;\n\n--add the unsubs for every brand for the dc's for ease of joining later...\ndrop table if exists ${Database}.temp.build_supps_names_supps_unsubscribe_email_brand;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_unsubscribe_email_brand\nas\nselect\n    email,\n    brand_id,\n    unsubscribe_channel_email_date,\n    first_supp_unsub_date\nfrom ${Database}.temp.build_supps_names_supps_unsubscribe_email\nwhere brand_id is not null; --if they have a brand then they mean to be opted out of this brand\n\ninsert into ${Database}.temp.build_supps_names_supps_unsubscribe_email_brand\n    select\n        su.email,\n        br.brand_id,\n        su.unsubscribe_channel_email_date,\n        su.first_supp_unsub_date\n    from ${Database}.temp.build_supps_names_supps_unsubscribe_email su\n    --inner join ${Database}.live.xref_business_level xref on su.data_controller_id = xref.data_controller_id and xref.primary_brand_map = 1\n    cross join ${Database}.db.ref_brand br\n    where su.brand_id is null --if they have no brand then we exclude them from everything\nand su.email||'|'||to_char(br.brand_id) not in--brand specific opt outs have priority\n(\nselect email||'|'||to_char(brand_id)\nfrom ${Database}.temp.build_supps_names_supps_unsubscribe_email_brand\n)\n;\n    \ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_unsubscribe_email_brand',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_unsubscribe_email_brand;\n\n--drop table if exists ${Database}.temp.build_supps_names_supps_unsubscribe_email;\n\n\n--  region address matches\ndrop table if exists ${Database}.temp.build_supps_names_supps_unsubscribe_c_id;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_unsubscribe_c_id\nas\nselect\n    rn.cid as cid,\n    su.brand_id,\n    max(su.data_date) as unsubscribe_channel_mail_date\nfrom ${Database}.live.xref_name_urn rn\ninner join ${Database}.db.supps_unsubscribe su on split_part(rn.name_urn,'-',-1)  = cast(su.supp_urn as varchar)\nwhere lower(rn.source) = 'unsub'\n    and unsubscribe_channel_mail = 1\ngroup by\n    rn.cid,\n    su.brand_id;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_unsubscribe_c_id',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_unsubscribe_c_id;\n\n--add the unsubs for every brand for the dc's for ease of joining later...\ndrop table if exists ${Database}.temp.build_supps_names_supps_unsubscribe_cid_brand;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_unsubscribe_cid_brand\nas\nselect\n    cid,\n    brand_id,\n    unsubscribe_channel_mail_date\nfrom ${Database}.temp.build_supps_names_supps_unsubscribe_c_id\nwhere brand_id is not null; --if they have a brand then they mean to be opted out of this brand\n\ninsert into ${Database}.temp.build_supps_names_supps_unsubscribe_cid_brand\n    select\n        su.cid,\n        br.brand_id,\n        su.unsubscribe_channel_mail_date\n    from ${Database}.temp.build_supps_names_supps_unsubscribe_c_id su\n    --inner join ${Database}.live.xref_business_level xref on su.data_controller_id = xref.data_controller_id and xref.primary_brand_map = 1\n    cross join ${Database}.db.ref_brand br\n    where su.brand_id is null --if they have no brand then we exclude them from everything\nand to_char(su.cid)||'|'||to_char(br.brand_id) not in\n    (\n    select\n        to_char(cid)||'|'||to_char(brand_id)\n    from ${Database}.temp.build_supps_names_supps_unsubscribe_cid_brand\n    )\n    ;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_unsubscribe_cid_brand',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_unsubscribe_cid_brand;\n\n--drop table if exists ${Database}.temp.build_supps_names_supps_unsubscribe_c_id;\n--drop table if exists ${Database}.temp.build_ref_data_controller_division_xref;\n\n\n/******************************************************************************************\n*                                      DEAD SUPPRESSION\n******************************************************************************************/\n\n-- dead supressions\ndrop table if exists ${Database}.temp.build_supps_names_supps_dead_cid;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_dead_cid\nas\nselect\n    cid    as cid,\n    1       as dead_cid,\n    min(data_date) as first_supp_dead_date\nfrom ${Database}.live.xref_name_urn\nwhere lower(source) = 'dead'\ngroup by cid;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_dead_cid',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_dead_cid;\n\n/******************************************************************************************\n*                                    GONEAWAY SUPPRESSION\n******************************************************************************************/\n\n-- goneaway supressions\ndrop table if exists ${Database}.temp.build_supps_names_supps_goneaway_cid;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_goneaway_cid\nas\nselect\n    cid,\n    hid,\n    1                       as gone_cid\nfrom ${Database}.live.xref_name_urn\nwhere lower(source) = 'gone'\ngroup by cid, hid;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_goneaway_cid',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_goneaway_cid;\n\n/******************************************************************************************\n                                         CHILDREN\n******************************************************************************************/\n\ndrop table if exists ${Database}.temp.build_supps_names_supps_child;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_child\nas\nselect\n    c_id as cid,\n    1    as child_cid,\n    min(data_date) as first_supp_child_date\nfrom ${Database}.temp.ram_names\nwhere\n    (\n        dob between dateadd(year,-16,current_date) and current_date\n        or lower(title) in ('master','mstr','mast')\n    )\n    and dob <> '2001-01-01' --some default date for some reason\ngroup by c_id;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_child',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_child;\n\n\n/******************************************************************************************\n                                       EMAIL BOUNCE\n******************************************************************************************/\n\n\n-- email bounces\ndrop table if exists ${Database}.temp.build_supps_names_supps_bounce_email;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_names_supps_bounce_email\nas\nselect\n    lower(trim(email)) as email,\n    max(case when trim(bounce_type) in ('known_bounce','suppressed_global') then 1 else 0 end) as bounce_email,\n    max(case when trim(bounce_type) not in ('known_bounce','suppressed_global') then 1 else 0 end) as old_bounce_email,\n    max(data_date) as bounce_date,\n    min(data_date) as first_supp_bounce_date\nfrom ${Database}.db.supps_bounce\nwhere trim(email) > ''\ngroup by lower(trim(email));\n\n\n--flame needs 3 x flames in last 2 months\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_adestra_events_supps_roll\nas\nselect\n    lower(trim(email)) as email,\n    max(event_timestamp) as flame_date,\n    count(*) as num_flame\nfrom ${Database}.db.adestra_events\nwhere trim(event_name) = 'inbound_flame'\n    and event_timestamp >= add_months(current_date, -2)\ngroup by 1;\n\ninsert into ${Database}.temp.build_supps_names_supps_bounce_email\nselect distinct\n    email,\n    1 as bounce_email,\n    0 as old_bounce_email,\n    flame_date as bounce_date,\n    flame_date as first_supp_bounce_date\nfrom ${Database}.temp.build_adestra_events_supps_roll\nwhere num_flame > 2\n    and email not in (select email from ${Database}.temp.build_supps_names_supps_bounce_email);\n\n--drop table if exists ${Database}.temp.build_adestra_events_supps_roll;\n\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_names_supps_bounce_email',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_names_supps_bounce_email;\n\n\n/******************************************************************************************\n                                       OFFSHORE\n******************************************************************************************/\n\n-- offshore\ndrop table if exists ${Database}.temp.build_supps_offshore;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_offshore\nas\nselect\n    distinct coalesce(hh_id,bbw_urn) as hid,\n    1                                as offshore\nfrom ${Database}.temp.ram_names\nwhere lower(postcode) like 'je%'\n    or lower(postcode) like 'gy%'\n    or lower(postcode) like 'im%';\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_offshore',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_offshore;\n\n\n/******************************************************************************************\n                                       Business\n******************************************************************************************/\n\n--not currently required\n\n\n/******************************************************************************************\n                                       BabyMPS\n******************************************************************************************/\n\n--not currently required\n\n\n/******************************************************************************************\n                                     DATA RETENTION\n******************************************************************************************/\n\n-- NOTE TO BE REMOVED: This has moved up to be available for use with the email engagement section. Moved the other ref tables from rollups too.\n\n------------------------------------------------------------\n-- REF TABLES\n\n--build new xref for business units\ndrop table if exists ${Database}.temp.build_ref_data_controller_bus_unit_xref;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_ref_data_controller_bus_unit_xref\nas\nselect\n    case\n        when di.business_unit_id is not null then di.business_unit_id\n        else br.brand_id + (select max(data_controller_id) from ${Database}.db.ref_data_controller) --insert the missing ones with fake bu's\n    end as business_unit_id,\n    di.division_id,\n    br.brand_id\nfrom ${Database}.db.ref_brand br\ninner join ${Database}.db.ref_division di on di.division_id = br.division_id;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_ref_data_controller_bus_unit_xref',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_ref_data_controller_bus_unit_xref;\n\n\ndrop table if exists ${Database}.live.ref_brand;\n\nCREATE OR REPLACE TABLE ${Database}.live.ref_brand\nas\nselect\n    br.brand_id,\n    trim(br.brand) as brand,\n    trim(br.brand_pet_type) as brand_pet_type,\n    di.division_id,\n    trim(di.division) as division\nfrom ${Database}.db.ref_brand br\ninner join ${Database}.db.ref_division di on di.division_id = br.division_id;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.live.ref_brand',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.ref_brand;\n\n\ndrop table if exists ${Database}.live.ref_division;\n\nCREATE OR REPLACE TABLE ${Database}.live.ref_division\nas\nselect\n    division_id,\n    trim(division) as division\nfrom ${Database}.db.ref_division;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.live.ref_division',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.ref_division;\n\n\ndrop table if exists ${Database}.live.ref_data_controller;\n\nCREATE OR REPLACE TABLE ${Database}.live.ref_data_controller\nas\nselect\n    data_controller_id,\n    trim(data_controller) as data_controller,\n    trim(nestle_country) as nestle_country\nfrom ${Database}.db.ref_data_controller;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.live.ref_data_controller',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.ref_data_controller;\n\n\ndrop table if exists ${Database}.live.ref_business_unit;\n\nCREATE OR REPLACE TABLE ${Database}.live.ref_business_unit\nas\nselect distinct\n    xref.business_unit_id,\n    case when dc.data_controller_id is null then br.brand else dc.data_controller end as business_unit\nfrom ${Database}.temp.build_ref_data_controller_bus_unit_xref xref\nleft join ${Database}.live.ref_data_controller dc on dc.data_controller_id = xref.business_unit_id\ninner join ${Database}.live.ref_brand br on br.brand_id = xref.brand_id;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.live.ref_business_unit',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.ref_business_unit;\n\n\ndrop table if exists ${Database}.live.ref_business_unit_brand;\n\nCREATE OR REPLACE TABLE ${Database}.live.ref_business_unit_brand\nas\nselect\n    bu.business_unit_id,\n    bu.business_unit,\n    br.brand_id,\n    br.brand\nfrom ${Database}.temp.build_ref_data_controller_bus_unit_xref xref\ninner join ${Database}.live.ref_business_unit bu on bu.business_unit_id = xref.business_unit_id\ninner join ${Database}.live.ref_brand br on br.brand_id = xref.brand_id;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.live.ref_business_unit_brand',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.ref_business_unit_brand;\n\n\nalter warehouse set warehouse_size = 'Xlarge';\n\n------------------------------------------------------------\n-- EMAIL ENGAGEMENT\n\ndrop table if exists ${Database}.temp.build_supps_email_engagement;\n\n-- Nestle Adestra\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_email_engagement\nas\nselect\n    lower(trim(ae.email)) as email,\n    case\n        when bu.business_unit_id is not null then bu.business_unit_id\n        when chl.data_controller_id is not null then chl.data_controller_id\n        when lower(trim(ae.campaign_name)) regexp '^npp.*' then (select business_unit_id from ${Database}.live.ref_business_unit where trim(business_unit) like 'Nestl_ Purina Petcare (UK) Ltd')\n        else (select business_unit_id from ${Database}.live.ref_business_unit where trim(business_unit) like 'Nestl_ UK Ltd')\n    end as business_unit_id,\n    max(cast(ae.event_timestamp as date)) as last_open_date,\n    max(case when ae.source_date < date_trunc('MONTH', current_date-1) then cast(ae.event_timestamp as date) else cast(null as date) end) as last_open_date_lm,\n    max(case\n            when lower(ae.event_name) regexp '(.*)(open|read)(.*)' and cast(ae.event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            else cast(ae.event_timestamp as date)\n        end) as last_open_date_ios15,\n    max(case\n            when lower(ae.event_name) regexp '(.*)(open|read)(.*)' and cast(ae.event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            when ae.source_date < date_trunc('MONTH', current_date-1) then cast(ae.event_timestamp as date)\n            else cast(null as date)\n        end) as last_open_date_ios15_lm\nfrom ${Database}.db.adestra_events ae\nleft join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(ae.campaign_name) = lower(xr.adestra_campaign_name)\nleft join ${Database}.db.comms_hist_lookup chl on lower(chl.campaign_id) = lower(xr.ch_campaign_id)\n                                          or lower(chl.campaign_id) = lower(case when trim(ae.campaign_name) ilike '%_MTE_%' then split_part(trim(ae.campaign_name),'_',3) else split_part(trim(ae.campaign_name),'_',1) end)\nleft join ${Database}.live.ref_business_unit_brand bu on bu.brand_id = chl.brand_id\nwhere lower(trim(ae.event_name)) regexp '(.*)(click|open|read|shared|submit)(.*)'\n    and lower(trim(ae.link_url)) not regexp '.*unsub.*'\n    and lower(trim(ae.email)) > ''\ngroup by 1,2;\n\nalter warehouse set warehouse_size = 'Large';\n\n-- Nestle Mapp\ninsert into ${Database}.temp.build_supps_email_engagement\nselect\n    lower(trim(mp.user_email)) as email,\n    case\n        when bu.business_unit_id is not null then bu.business_unit_id\n        when chl.data_controller_id is not null then chl.data_controller_id\n        when lower(trim(mp.message_name)) regexp '^npp.*' then (select business_unit_id from ${Database}.live.ref_business_unit where trim(business_unit) like 'Nestl_ Purina Petcare (UK) Ltd')\n        else (select business_unit_id from ${Database}.live.ref_business_unit where trim(business_unit) like 'Nestl_ UK Ltd')\n    end as business_unit_id,\n    max(mp.record_timestamp) as last_open_date,\n    max(case when mp.source_date < date_trunc('MONTH', dateadd(day,-1,current_date())) then cast(mp.record_timestamp as date) else cast(null as date) end) as last_open_date_lm,\n    max(case\n            when lower(mp.record_type) regexp '.*render.*' and cast(mp.record_timestamp as date) >= '2021-09-20' then cast(null as date)\n            else cast(mp.record_timestamp as date)\n        end) as last_open_date_ios15,\n    max(case\n            when lower(mp.record_type) regexp '.*render.*' and cast(mp.record_timestamp as date) >= '2021-09-20' then cast(null as date)\n            when mp.source_date < date_trunc('MONTH', dateadd(day,-1,current_date())) then cast(mp.record_timestamp as date)\n            else cast(null as date)\n        end) as last_open_date_ios15_lm\nfrom ${Database}.db.mapp_events mp\nleft join ${Database}.db.ref_response_events_comms_hist_xref xr on lower(trim(mp.message_name)) = lower(trim(xr.mapp_message_name))\nleft join ${Database}.db.comms_hist_lookup chl on lower(trim(chl.campaign_id)) = lower(trim(xr.ch_campaign_id))\n                                          or lower(trim(chl.campaign_id)) = lower(case when trim(mp.message_name) ilike '%_MTE_%' then split_part(trim(mp.message_name),'_',3) else split_part(trim(mp.message_name),'_',1) end)\nleft join ${Database}.live.ref_business_unit_brand bu on bu.brand_id = chl.brand_id\nwhere lower(trim(mp.record_type)) regexp '.*click.*|.*render.*'\n    and lower(trim(mp.click_link_url)) not regexp '.*unsub.*'\n    and lower(trim(mp.user_email)) > ''\ngroup by 1,2;\n\n\n\n-- SMA Adestra\ninsert into ${Database}.temp.build_supps_email_engagement\nselect\n    lower(trim(email)) as email,\n    (select business_unit_id from ${Database}.live.ref_business_unit where lower(trim(business_unit)) = 'sma') as business_unit_id,\n    max(cast(event_timestamp as date)) as last_open_date,\n    max(case when source_date < date_trunc('MONTH', current_date-1) then cast(event_timestamp as date) else cast(null as date) end) as last_open_date_lm,\n    max(case\n            when lower(event_name) regexp '(.*)(open|read)(.*)' and cast(event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            else cast(event_timestamp as date)\n        end) as last_open_date_ios15,\n    max(case\n            when lower(event_name) regexp '(.*)(open|read)(.*)' and cast(event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            when source_date < date_trunc('MONTH', current_date-1) then cast(event_timestamp as date)\n            else cast(null as date)\n        end) as last_open_date_ios15_lm\nfrom ${Database}.db.adestra_events_sma\nwhere lower(event_name) regexp '(.*)(click|open|read|shared|submit)(.*)'\n    and lower(trim(link_url)) not regexp '.*unsub.*'\n    and lower(trim(email)) > ''\n    and lower(trim(workspace_name)) not regexp '.*cerelac.*'\ngroup by 1,2;\n\n\n-- Cerelac Adestra\ninsert into ${Database}.temp.build_supps_email_engagement\nselect\n    lower(trim(email)) as email,\n    (select business_unit_id from ${Database}.live.ref_business_unit where lower(trim(business_unit)) = 'cerelac') as business_unit_id,\n    max(cast(event_timestamp as date)) as last_open_date,\n    max(case when source_date < date_trunc('MONTH', current_date-1) then cast(event_timestamp as date) else cast(null as date) end) as last_open_date_lm,\n    max(case\n            when lower(event_name) regexp '(.*)(open|read)(.*)' and cast(event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            else cast(event_timestamp as date)\n        end) as last_open_date_ios15,\n    max(case\n            when lower(event_name) regexp '(.*)(open|read)(.*)' and cast(event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            when source_date < date_trunc('MONTH', current_date-1) then cast(event_timestamp as date)\n            else cast(null as date)\n        end) as last_open_date_ios15_lm\nfrom ${Database}.db.adestra_events_sma\nwhere lower(event_name) regexp '(.*)(click|open|read|shared|submit)(.*)'\n    and lower(trim(link_url)) not regexp '.*unsub.*'\n    and lower(trim(email)) > ''\n    and lower(trim(workspace_name)) regexp '.*cerelac.*'\ngroup by 1,2;\n\n\n\n-- HCP Adestra\ninsert into ${Database}.temp.build_supps_email_engagement\nselect\n    lower(trim(email)) as email,\n    (select business_unit_id from ${Database}.live.ref_business_unit where lower(trim(business_unit)) = 'hcp') as business_unit_id,\n    max(cast(event_timestamp as date)) as last_open_date,\n    max(case when source_date < date_trunc('MONTH', current_date-1) then cast(event_timestamp as date) else cast(null as date) end) as last_open_date_lm,\n    max(case\n            when lower(event_name) regexp '(.*)(open|read)(.*)' and cast(event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            else cast(event_timestamp as date)\n        end) as last_open_date_ios15,\n    max(case\n            when lower(event_name) regexp '(.*)(open|read)(.*)' and cast(event_timestamp as date) >= '2021-09-20' then cast(null as date)\n            when source_date < date_trunc('MONTH', current_date-1) then cast(event_timestamp as date)\n            else cast(null as date)\n        end) as last_open_date_ios15_lm\nfrom ${Database}.db.adestra_events_hcp\nwhere lower(trim(event_name)) regexp '(.*)(click|open|read|shared|submit)(.*)'\n    and lower(trim(link_url)) not regexp '.*unsub.*'\n    and lower(trim(email)) > ''\ngroup by 1,2;\n\n\n\n------------------------------------------------------------\n-- ACCOUNT ENGAGEMENT\n\ndrop table if exists ${Database}.temp.build_dp_2_prep;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_dp_2_prep\nas\nselect\n    nmt.cid,\n    nmt.hid,\n    nmt.name_urn,\n    nmt.email,\n    dp.data_controller_id, --dc for opt ins\n    dp.brand_id, --brand is for opt in brand rather than source\n    dp.dp_date,\n    dp.dp_mailable,\n    dp.dp_emailable,\n    dp.dp_phoneable,\n    dp.dp_smsable,\n    dp.dp_newsletter,\n    dp.source_date,\n    dp.data_date,\n    date_trunc('MONTH', dateadd(day,-1,current_date())) as month_start_dt\nfrom ${Database}.temp.build_supps_prep_name_urn nmt\ninner join ${Database}.db.names_dp dp on nmt.name_urn = trim(dp.name_urn)\nwhere --must have at least 1 permission\n    dp.dp_mailable is not null\n    or dp.dp_emailable is not null\n    or dp.dp_phoneable is not null\n    or dp.dp_smsable is not null\n    or dp.dp_newsletter is not null;\n\n\ndrop table if exists ${Database}.temp.build_supps_last_login;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_last_login\nas\nselect\n    xr.cid,\n    case\n        when bu.business_unit_id is not null then bu.business_unit_id\n        else wh.data_controller_id\n    end as business_unit_id,\n    max(cast(wh.browser_date as date)) as last_login_date,\n    max(case when wh.source_date < date_trunc('MONTH', current_date-1) then cast(wh.browser_date as date) else cast(null as date) end) as last_login_date_lm\nfrom ${Database}.db.web_browser_hist wh\ninner join ${Database}.live.xref_name_urn xr on xr.name_urn = trim(wh.name_urn)\ninner join ${Database}.live.ref_business_unit_brand bu on bu.brand_id = wh.brand_id\nleft join ${Database}.temp.build_dp_2_prep dp on dp.name_urn = wh.name_urn\n                                      and dp.data_controller_id = wh.data_controller_id\n                                      and dp.dp_date = cast(wh.browser_date as date)\n                                      and dp.dp_mailable = 0\n                                      and dp.dp_emailable = 0\nwhere dp.name_urn is null\n    and trim(wh.source) <> 'REG_GIG_Initial_Load'\ngroup by 1,2;\n\n--drop table if exists ${Database}.temp.build_dp_2_prep;\n\ndrop table if exists ${Database}.temp.build_supps_first_reg;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_first_reg\nas\nselect\n    xr.cid,\n    case\n        when bu.business_unit_id is not null then bu.business_unit_id\n        else nm.source_data_controller_id\n    end as business_unit_id,\n    min(nm.reg_date) as first_reg_date,\n    min(case when nm.source_date < date_trunc('MONTH', current_date-1) then nm.reg_date else cast(null as date) end) as first_reg_date_lm\nfrom ${Database}.db.names nm\ninner join ${Database}.live.xref_name_urn xr on xr.name_urn = trim(nm.name_urn)\ninner join ${Database}.live.ref_business_unit_brand bu on bu.brand_id = nm.source_brand_id\ngroup by 1,2;\n\n\n\n/******************************************************************************************\n*                                      Final Suppressions Tables\n******************************************************************************************/\n\n-- preserve names supps\ndrop table if exists ${Database}.live.names_supps;\n\nCREATE OR REPLACE TABLE ${Database}.live.names_supps\nas\nselect\n    pr.name_urn,\n    pr.cid,\n    --        data quality flags - if the record has a bad record then flag them as a suppression\n    coalesce(case when sso.address_score      = 1 then 0 else 1 end,1) as supp_bad_address,\n    coalesce(case when sso.name_score         = 1 then 0 else 1 end,1) as supp_bad_name,\n    coalesce(case when sso.phone_home_score   = 1 then 0 else 1 end,1) as supp_bad_phone_home,\n    coalesce(case when sso.phone_mobile_score = 1 then 0 else 1 end,1) as supp_bad_phone_mobile,\n    coalesce(case when sso.phone_work_score   = 1 then 0 else 1 end,1) as supp_bad_phone_work,\n    coalesce(case when sso.email_score        = 1 then 0 else 1 end,1) as supp_bad_email,\n    --        manual suppressions - if the household, phone number or email appears in the manual supps file then flag as a suppression\n    coalesce(smsg.manual_channel_mail,0)        as supp_manual_channel_mail,\n    coalesce(sme.manual_channel_email,0)        as supp_manual_channel_email,\n    greatest\n    (\n        coalesce(smpsg.manual_channel_phone,0),\n        coalesce(smpsue.manual_channel_phone,0),\n        coalesce(smpw.manual_channel_phone,0)\n    )                                           as supp_manual_channel_phone,\n    --        deads and goneaways from suppression matching above\n    coalesce(sd.dead_cid,0)                     as supp_dead,\n    coalesce(sg.gone_cid,0)                     as supp_goneaway,\n    coalesce(sc.child_cid,0)                    as supp_child,\n    --        email bounces\n    case\n        when sb.bounce_email = 1 then 1\n        when sb.old_bounce_email = 1 and pr.data_date <= sb.bounce_date then 1\n        else 0\n    end                                         as supp_bounce,\n    coalesce(so.offshore      ,0)               as supp_offshore,\n    sso.first_supp_email_date,\n    sme.first_supp_manual_date,\n    sb.first_supp_bounce_date,\n    sd.first_supp_dead_date,\n    sc.first_supp_child_date,\n    pr.add1,\n    pr.email,\n    pr.phone_home,\n    pr.phone_mobile,\n    pr.phone_work\nfrom ${Database}.temp.build_supps_prep_name_urn pr\nleft join ${Database}.temp.build_supps_names_supps_quality            sso    on pr.name_urn     = sso.name_urn\nleft join ${Database}.temp.build_supps_names_supps_manual_hh_id       smsg   on pr.hid          = smsg.hid\nleft join ${Database}.temp.build_supps_names_supps_manual_email       sme    on lower(trim(pr.email))        = lower(trim(sme.email))\nleft join ${Database}.temp.build_supps_names_supps_manual_phone       smpsg  on pr.phone_home   = smpsg.phone\nleft join ${Database}.temp.build_supps_names_supps_manual_phone       smpsue on pr.phone_mobile = smpsue.phone\nleft join ${Database}.temp.build_supps_names_supps_manual_phone       smpw   on pr.phone_work   = smpw.phone\nleft join ${Database}.temp.build_supps_names_supps_goneaway_cid       sg     on pr.cid          = sg.cid        and pr.hid = sg.hid\nleft join ${Database}.temp.build_supps_names_supps_dead_cid           sd     on pr.cid          = sd.cid\nleft join ${Database}.temp.build_supps_names_supps_child              sc     on pr.cid          = sc.cid\nleft join ${Database}.temp.build_supps_names_supps_bounce_email       sb     on lower(trim(pr.email))        = lower(trim(sb.email))\nleft join ${Database}.temp.build_supps_offshore                       so     on pr.hid          = so.hid;\n\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.live.names_supps',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.names_supps;\n\n-- tidy a bit\n--drop table if exists ${Database}.temp.build_supps_offshore;\n--drop table if exists ${Database}.temp.build_supps_names_supps_quality;\n--drop table if exists ${Database}.temp.build_supps_names_supps_manual_phone;\n--drop table if exists ${Database}.temp.build_supps_names_supps_manual_hh_id;\n--drop table if exists ${Database}.temp.build_supps_names_supps_manual_email;\n--drop table if exists ${Database}.temp.build_supps_names_supps_goneaway_cid;\n--drop table if exists ${Database}.temp.build_supps_names_supps_dead_cid;\n--drop table if exists ${Database}.temp.build_supps_names_supps_child;\n--drop table if exists ${Database}.temp.build_supps_names_supps_bounce_email;\n--drop table if exists ${Database}.temp.build_supps_prep_name_urn;\n\n\ndrop table if exists ${Database}.temp.build_supps_email;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_email\nas\nselect\n    email,\n    max(supp_bad_email) as supp_bad_email,\n    max(supp_manual_channel_email) as supp_manual_channel_email,\n    max(supp_bounce) as supp_bounce,\n    min(first_supp_email_date) as first_supp_email_date,\n    min(first_supp_manual_date) as first_supp_manual_date,\n    min(first_supp_bounce_date) as first_supp_bounce_date\nfrom ${Database}.live.names_supps\nwhere email > ''\ngroup by email;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_email',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_email;\n\n\ndrop table if exists ${Database}.temp.build_supps_cid;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_supps_cid\nas\nselect\n    cid,\n    max(supp_dead) as supp_dead,\n    max(supp_child) as supp_child,\n    min(first_supp_dead_date) as first_supp_dead_date,\n    min(first_supp_child_date) as first_supp_child_date\nfrom ${Database}.live.names_supps\ngroup by cid;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_supps_cid',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_supps_cid;\n\n\n\n-----------------------------------------------------------\n\n-- create contact flags table\ndrop table if exists ${Database}.temp.build_names_contact_flags;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_names_contact_flags\nas\nselect\n    name_urn,\n    cid,\n    case\n        when\n            supp_bad_address                         = 0 and\n            supp_manual_channel_mail                 = 0 and\n            supp_goneaway                            = 0 and\n            supp_dead                                = 0 and\n            supp_child                               = 0 and\n            add1                                     > ''\n        then 1\n        else 0\n    end as mailable_ignoring_dp,\n    case\n        when\n            supp_manual_channel_mail                 = 0 and\n            supp_goneaway                            = 0 and\n            supp_dead                                = 0 and\n            supp_child                               = 0\n        then 1\n        else 0\n    end as mailable_ignoring_dp_address,\n    case\n        when\n            supp_bad_email                           = 0 and\n            supp_manual_channel_email                = 0 and\n            supp_bounce                              = 0 and\n            supp_dead                                = 0 and\n            supp_child                               = 0 and\n            email                                    > ''\n        then 1\n        else 0\n    end as emailable_ignoring_dp,\n    case\n        when\n            (\n                supp_bad_phone_home = 0\n                or supp_bad_phone_work = 0\n            )                                            and\n            supp_manual_channel_phone                = 0 and\n            supp_goneaway                            = 0 and\n            supp_dead                                = 0 and\n            supp_child                               = 0 and\n            (phone_home > '' or phone_work > '')\n        then 1\n        else 0\n    end as phoneable_ignoring_dp,\n    case\n        when\n            supp_bad_phone_mobile                    = 0 and\n            supp_manual_channel_phone                = 0 and\n            supp_dead                                = 0 and\n            supp_child                               = 0 and\n            phone_mobile                             > ''\n        then 1\n        else 0\n    end as smsable_ignoring_dp\nfrom ${Database}.live.names_supps;\n\n-----------------------------------------------------------\n\n-- Create table for SMA youngest child\ndrop table if exists ${Database}.temp.names_supps_dp_brand_sma;\n\nCREATE OR REPLACE TABLE ${Database}.temp.names_supps_dp_brand_sma\nas\nselect distinct\n    (select brand_id from ${Database}.live.ref_brand where lower(brand) = 'sma') as brand_id,\n    coalesce(nt.cid,dea.cid) as cid,\n    first_value(coalesce(dea.dob,nt.reg_date)) over\n        (\n            partition by coalesce(nt.cid,dea.cid)\n            order by coalesce(dea.dob,nt.reg_date) desc nulls last\n        ) as m_dob\nfrom ${Database}.temp.names_tmp nt\nfull outer join ${Database}.live.dependant dea on dea.cid = nt.cid\n                                         and dea.valid = 1\nwhere lower(nt.source) regexp '.*reg_umb.*'\n    or dea.cid is not null;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.names_supps_dp_brand_sma',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.names_supps_dp_brand_sma;\n\nalter warehouse set warehouse_size = 'Xlarge';\n\ndrop table if exists ${Database}.live.names_supps_dp_brand_email;\n\nCREATE OR REPLACE TABLE ${Database}.live.names_supps_dp_brand_email\nas\nselect\n    dp.cid,\n    dp.email,\n    xref.business_unit_id,\n    xref.division_id,\n    dp.brand_id,\n    dp.dp_first_date,\n    coalesce(dpe.dp_last_emailable_date,dp.dp_last_date) as dp_last_date,\n\tdp_last_mailable_date,\n\tdp_last_emailable_date,\n    coalesce(dpe.dp_last_positive_emailable_date,dp.dp_last_positive_date) as dp_last_positive_date,\n\tdp_last_positive_date as dp_last_positive_mailable_date,\n\tdp_last_positive_emailable_date,\n    coalesce(dpe.dp_last_emailable_date_lm,dp.dp_last_date_lm) as dp_last_date_lm,\n\tdp_last_date_lm as dp_last_mailable_date_lm,\n\tdp_last_emailable_date_lm,\n    coalesce(dpe.dp_last_positive_emailable_date_lm,dp.dp_last_positive_date_lm) as dp_last_positive_date_lm,\n\tdp_last_positive_date_lm as dp_last_positive_mailable_date_lm,\n\tdp_last_positive_emailable_date_lm,\n    sma.m_dob as sma_m_dob,\n    ee.last_open_date,\n    ee.last_open_date_lm,\n    ee.last_open_date_ios15,\n    ee.last_open_date_ios15_lm,\n    lo.last_login_date,\n    lo.last_login_date_lm,\n    fr.first_reg_date,\n    fr.first_reg_date_lm,\n    case\n        when dpe.dp_last_positive_emailable_date is null\n            and dp.dp_last_positive_date is null\n            and ee.last_open_date is null\n            and lo.last_login_date is null\n            and fr.first_reg_date is null then cast(null as date)\n        else greatest\n                 (\n                     coalesce(dpe.dp_last_positive_emailable_date,dp.dp_last_positive_date,cast('1900-01-01' as date)),\n                     coalesce(ee.last_open_date,cast('1900-01-01' as date)),\n                     coalesce(lo.last_login_date,cast('1900-01-01' as date)),\n                     coalesce(fr.first_reg_date,cast('1900-01-01' as date))\n                 )\n    end as customer_retention_date,\n    case\n        when dpe.dp_last_positive_emailable_date_lm is null\n            and dp.dp_last_positive_date_lm is null\n            and ee.last_open_date_lm is null\n            and lo.last_login_date_lm is null\n            and fr.first_reg_date_lm is null then cast(null as date)\n        else greatest\n                 (\n                     coalesce(dpe.dp_last_positive_emailable_date_lm,dp.dp_last_positive_date_lm,cast('1900-01-01' as date)),\n                     coalesce(ee.last_open_date_lm,cast('1900-01-01' as date)),\n                     coalesce(lo.last_login_date_lm,cast('1900-01-01' as date)),\n                     coalesce(fr.first_reg_date_lm,cast('1900-01-01' as date))\n                 )\n    end as customer_retention_date_lm,\n    case\n        when dpe.dp_last_positive_emailable_date is null\n            and dp.dp_last_positive_date is null\n            and ee.last_open_date_ios15 is null\n            and lo.last_login_date is null\n            and fr.first_reg_date is null then cast(null as date)\n        else greatest\n                 (\n                     coalesce(dpe.dp_last_positive_emailable_date,dp.dp_last_positive_date,cast('1900-01-01' as date)),\n                     coalesce(ee.last_open_date_ios15,cast('1900-01-01' as date)),\n                     coalesce(lo.last_login_date,cast('1900-01-01' as date)),\n                     coalesce(fr.first_reg_date,cast('1900-01-01' as date))\n                 )\n    end as customer_retention_date_ios15,\n    case\n        when dpe.dp_last_positive_emailable_date_lm is null\n            and dp.dp_last_positive_date_lm is null\n            and ee.last_open_date_ios15_lm is null\n            and lo.last_login_date_lm is null\n            and fr.first_reg_date_lm is null then cast(null as date)\n        else greatest\n                 (\n                     coalesce(dpe.dp_last_positive_emailable_date_lm,dp.dp_last_positive_date_lm,cast('1900-01-01' as date)),\n                     coalesce(ee.last_open_date_ios15_lm,cast('1900-01-01' as date)),\n                     coalesce(lo.last_login_date_lm,cast('1900-01-01' as date)),\n                     coalesce(fr.first_reg_date_lm,cast('1900-01-01' as date))\n                 )\n    end as customer_retention_date_ios15_lm,\n    dp.dp_mailable,\n    coalesce(dpe.dp_emailable,0) as dp_emailable,\n    coalesce(dpe.dp_emailable_lm,0) as dp_emailable_lm,\n    coalesce(dpe.dp_newsletter,0) as dp_newsletter,\n    case when suc.unsubscribe_channel_mail_date >= dp.dp_last_mailable_date - 1 then 1 else 0 end as supp_unsubscribe_channel_mail,\n    case\n        when sue.unsubscribe_channel_email_date >= dpe.dp_last_emailable_date - 1 then 1\n        when sue.unsubscribe_channel_email_date >= dpe.dp_last_newsletter_date - 1 then 1\n        else 0\n    end as supp_unsubscribe_channel_email,\n    coalesce(es.supp_bad_email,1) as supp_bad_email,\n    coalesce(es.supp_manual_channel_email,0) as supp_manual_channel_email,\n    coalesce(es.supp_bounce,0) as supp_bounce,\n    coalesce(cs.supp_dead,0) as supp_dead,\n    coalesce(cs.supp_child,0) as supp_child,\n    case\n        when dp.brand_id = (select brand_id from ${Database}.live.ref_brand where lower(brand) = 'sma')\n            and (coalesce(dpe.dp_last_emailable_date_lm, dp.dp_last_date_lm) is null or coalesce(dpe.dp_last_emailable_date_lm, dp.dp_last_date_lm) < add_months(current_date,-33))\n            and coalesce(dpe.dp_last_emailable_date, dp.dp_last_date) >= to_date(to_char(current_date,'YYYYMM01'),'YYYYMMDD') then 0\n        when dp.brand_id = (select brand_id from ${Database}.live.ref_brand where lower(brand) = 'sma')\n            and sma.m_dob >= add_months(current_date-7,-36) then 0\n        when dp.brand_id = (select brand_id from ${Database}.live.ref_brand where lower(brand) = 'sma') then 1\n        when coalesce(dpe.dp_last_positive_emailable_date,dp.dp_last_positive_date) >= add_months(current_date,-24)\n            or ee.last_open_date >= add_months(current_date,-24)\n            or lo.last_login_date >= add_months(current_date,-24)\n            or fr.first_reg_date >= add_months(current_date,-24) then 0\n        else 1\n    end as supp_engagement,\n    sue.first_supp_unsub_date,\n    es.first_supp_email_date,\n    es.first_supp_manual_date,\n    es.first_supp_bounce_date,\n    cs.first_supp_dead_date,\n    cs.first_supp_child_date,\n    --sources\n    dp.dp_first_source,\n    coalesce(dpe.dp_last_emailable_source,dp.dp_last_source) as dp_last_source,\n    dp.dp_last_mailable_source,\n    dp.dp_last_positive_source as dp_last_positive_mailable_source,\n    dpe.dp_last_emailable_source,\n    dpe.dp_last_positive_emailable_source\nfrom ${Database}.temp.build_supps_names_dp_result dp\ninner join ${Database}.temp.build_ref_data_controller_bus_unit_xref xref on xref.brand_id = dp.brand_id\nleft join ${Database}.temp.build_supps_names_dp_result_email dpe on lower(trim(dpe.email)) = lower(trim(dp.email))\n                                                           and dpe.brand_id = dp.brand_id\nleft join ${Database}.temp.build_supps_names_supps_unsubscribe_cid_brand suc on suc.cid = dp.cid\n                                                                       and suc.brand_id = dp.brand_id\nleft join ${Database}.temp.build_supps_names_supps_unsubscribe_email_brand sue on lower(trim(sue.email)) = lower(trim(dp.email))\n                                                                         and sue.brand_id = dp.brand_id\nleft join ${Database}.temp.build_supps_cid cs on cs.cid = dp.cid\nleft join ${Database}.temp.build_supps_email es on lower(trim(es.email)) = lower(trim(dp.email))\nleft join ${Database}.temp.build_supps_email_engagement ee on lower(trim(ee.email)) = lower(trim(dp.email))\n                                                     and ee.business_unit_id = xref.business_unit_id\nleft join ${Database}.temp.build_supps_last_login lo on lo.cid = dp.cid\n                                               and lo.business_unit_id = xref.business_unit_id\nleft join ${Database}.temp.build_supps_first_reg fr on fr.cid = dp.cid\n                                              and fr.business_unit_id = xref.business_unit_id\nleft join ${Database}.temp.names_supps_dp_brand_sma sma on sma.cid = dp.cid\n                                                  and sma.brand_id = dp.brand_id;\n\nalter warehouse set warehouse_size = 'Large';\n\n--drop table if exists ${Database}.temp.build_supps_names_dp_result;\n--drop table if exists ${Database}.temp.build_ref_data_controller_bus_unit_xref;\n--drop table if exists ${Database}.temp.build_supps_names_dp_result_email;\n--drop table if exists ${Database}.temp.build_supps_names_supps_unsubscribe_cid_brand;\n--drop table if exists ${Database}.temp.build_supps_names_supps_unsubscribe_email_brand;\n--drop table if exists ${Database}.temp.build_supps_email;\n--drop table if exists ${Database}.temp.build_supps_cid;\n--drop table if exists ${Database}.temp.build_supps_email_engagement;\n--drop table if exists ${Database}.temp.build_supps_last_login;\n--drop table if exists ${Database}.temp.build_supps_first_reg;\n--drop table if exists ${Database}.temp.names_supps_dp_brand_sma;\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.live.names_supps_dp_brand_email',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.live.names_supps_dp_brand_email;\n\n\n-- create email contact flags table\ndrop table if exists ${Database}.temp.build_email_brand_contact_flags;\n\nCREATE OR REPLACE TABLE ${Database}.temp.build_email_brand_contact_flags\nas\nselect\n    *\nfrom (\n         select\n             cid,\n             email,\n             business_unit_id,\n             division_id,\n             brand_id,\n             dp_first_date,\n             dp_last_date,\n            --mail\n\t\t\t dp_last_mailable_date,\n\t\t\t dp_last_positive_mailable_date,\n\t\t\t dp_last_mailable_date_lm,\n\t\t\t dp_last_positive_mailable_date_lm,\n            --email\n\t\t\t dp_last_emailable_date,\n\t\t\t dp_last_positive_emailable_date,\n\t\t\t dp_last_emailable_date_lm,\n\t\t\t dp_last_positive_emailable_date_lm,\n             last_open_date,\n             last_open_date_ios15,\n             case\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where brand = 'SMA') then sma_m_dob\n                 when customer_retention_date = '1900-01-01' then cast(null as date)\n                 else customer_retention_date\n             end as customer_retention_group_date,\n             case\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where brand = 'SMA') then sma_m_dob\n                 when customer_retention_date_ios15 = '1900-01-01' then cast(null as date)\n                 else customer_retention_date_ios15\n             end as customer_retention_group_date_ios15,\n             case\n                 --SMA specific - start\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and dp_last_date_lm between add_months(current_date,-36) and add_months(current_date,-33)\n                     and dp_last_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') then 2 --reactivated\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and (dp_last_date_lm is null or dp_last_date_lm < add_months(current_date,-36))\n                     and dp_last_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') then 3 --new\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months(current_date,-33) then 1 --safe base\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months(current_date,-35) then 4  --at risk base\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months(current_date-7,-36) then 5  --data orphan\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months(current_date,-37) then 6  --Gone this month\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma') then 7 --Gone gone - or no dob\n                 --SMA specific - end\n                 when customer_retention_date_lm between add_months(current_date,-24) and add_months(current_date,-21)\n                     and customer_retention_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') then 2 --reactivated\n                 when (customer_retention_date_lm is null or customer_retention_date_lm < add_months(current_date,-24))\n                     and customer_retention_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') then 3 --new\n                 when customer_retention_date >= add_months(current_date,-21) then 1  --safe base\n                 when customer_retention_date >= add_months(current_date,-23) then 4  --at risk base\n                 when customer_retention_date >= add_months(current_date,-24) then 5  --data orphans\n                 when customer_retention_date >= add_months(current_date,-25) then 6  --gone this month\n                 when customer_retention_date is not null then 7 --gone ever\n                 else 8 --no opted in/out\n             end as customer_retention_group_base,\n             case\n                 --SMA specific - start\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and dp_last_date_lm between add_months(current_date,-36) and add_months(current_date,-33)\n                     and dp_last_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') then 2 --reactivated\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and (dp_last_date_lm is null or dp_last_date_lm < add_months(current_date,-36))\n                     and dp_last_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') then 3 --new\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months(current_date,-33) then 1 --safe base\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months(current_date,-35) then 4  --at risk base\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months(current_date-7,-36) then 5  --data orphan\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma')\n                     and sma_m_dob >= add_months(current_date,-37) then 6  --Gone this month\n                 when brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma') then 7 --Gone gone - or no dob\n                 --SMA specific - end\n                 when customer_retention_date_ios15_lm between add_months(current_date,-24) and add_months(current_date,-21)\n                     and customer_retention_date_ios15 >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') then 2 --reactivated\n                 when (customer_retention_date_ios15_lm is null or customer_retention_date_ios15_lm < add_months(current_date,-24))\n                     and customer_retention_date_ios15 >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') then 3 --new\n                 when customer_retention_date_ios15 >= add_months(current_date,-21) then 1  --safe base\n                 when customer_retention_date_ios15 >= add_months(current_date,-23) then 4  --at risk base\n                 when customer_retention_date_ios15 >= add_months(current_date,-24) then 5  --data orphans\n                 when customer_retention_date_ios15 >= add_months(current_date,-25) then 6  --gone this month\n                 when customer_retention_date_ios15 is not null then 7 --gone ever\n                 else 8 --no opted in/out\n             end as customer_retention_group_base_ios15,\n             case\n                 when first_supp_dead_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') and supp_dead = 1 then 1 --dead this month\n                 when supp_dead = 1 then 2\n                 when first_supp_manual_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') and supp_manual_channel_email = 1 then 3\n                 when supp_manual_channel_email = 1 then 4\n                 when first_supp_bounce_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') and supp_bounce = 1 then 5\n                 when supp_bounce = 1 then 6\n                 when first_supp_unsub_date >= to_date(to_char((current_date-1),'YYYYMM01'), 'YYYYMMDD') and supp_unsubscribe_channel_email = 1 then 7\n                 when supp_unsubscribe_channel_email = 1 then 8\n                 when dp_emailable_lm = 1 and dp_emailable = 0 then 9\n                 when dp_emailable = 0 then 10\n                 when supp_engagement = 1 then 11\n                 else 12\n             end as customer_suppression_group_base,\n             case\n                 when\n                     dp_mailable                              = 1 and\n                     supp_unsubscribe_channel_mail            = 0 and\n                     supp_dead                                = 0 and\n                     supp_child                               = 0 and\n                     supp_engagement                          = 0\n                 then 1\n                 else 0\n             end as mailable,\n             case\n                 when\n                     dp_emailable                             = 1 and\n                     supp_unsubscribe_channel_email           = 0 and\n                     supp_engagement                          = 0 and\n                     supp_bad_email                           = 0 and\n                     supp_manual_channel_email                = 0 and\n                     supp_bounce                              = 0 and\n                     supp_dead                                = 0 and\n                     supp_child                               = 0 and\n                     email                                    > ''\n                 then 1\n                 else 0\n             end as emailable,\n             case\n                 when\n                     dp_newsletter                            = 1 and\n                     supp_unsubscribe_channel_email           = 0 and\n                     supp_engagement                          = 0 and\n                     supp_bad_email                           = 0 and\n                     supp_manual_channel_email                = 0 and\n                     supp_bounce                              = 0 and\n                     supp_dead                                = 0 and\n                     supp_child                               = 0 and\n                     email                                    > ''\n                 then 1\n                 else 0\n             end as emailable_newsletter,\n             case\n                 when\n                     supp_unsubscribe_channel_mail            = 0 and\n                     supp_dead                                = 0 and\n                     supp_child                               = 0 and\n                     supp_engagement                          = 0\n                 then 1\n                 else 0\n             end as mailable_ignoring_dp,\n             case\n                 when\n                     supp_unsubscribe_channel_email           = 0 and\n                     supp_engagement                          = 0 and\n                     supp_bad_email                           = 0 and\n                     supp_manual_channel_email                = 0 and\n                     supp_bounce                              = 0 and\n                     supp_dead                                = 0 and\n                     supp_child                               = 0 and\n                     email                                    > ''\n                 then 1\n                 else 0\n             end as emailable_ignoring_dp,\n             --sources\n             dp_first_source,\n             dp_last_source,\n            --mail\n             dp_last_mailable_source,\n             dp_last_positive_mailable_source,\n            --email\n             dp_last_emailable_source,\n             dp_last_positive_emailable_source\n         from ${Database}.live.names_supps_dp_brand_email\n     ) supp\nwhere customer_retention_group_base < 7\n    or brand_id = (select brand_id from ${Database}.db.ref_brand where lower(brand) = 'sma');\n\nalter warehouse set warehouse_size = 'Xsmall';\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '${Database}.temp.build_email_brand_contact_flags',\n    'total records',\n    cast(count(*) as varchar),\n    CURRENT_TIMESTAMP::timestamp_ntz\nfrom ${Database}.temp.build_email_brand_contact_flags;\n\n\n/******************************************************************************************\n*                                         End Procedure\n******************************************************************************************/\n\nupdate   ${Database}.db.build_dates\nset      nestle_names_suppressions = CURRENT_TIMESTAMP::timestamp_ntz\nwhere    trim(build_flag) = 'C';\n\ninsert into ${Database}.db.build_log\nselect\n    'db_names_suppressions',\n    '*************************',\n    '*************************',\n    'end of script',\n    CURRENT_TIMESTAMP::timestamp_ntz ;\n\n\ninsert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect \tcurrent_timestamp::timestamp_ntz\n, \t\t'${Database}'\n,\t\t'BUILD'\n,\t\t'Proc 9 Suppressions'\n, \t\t'SCRIPT'\n, \t\t'FINISHED'\n;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"197162":{"id":197162,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-464,"y":-16,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[197167],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Start","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{},"failureConnectors":{},"unconditionalConnectors":{"197167":{"id":197167,"sourceID":197162,"targetID":197161}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{"197163":{"id":197163,"x":-244,"y":135,"width":368,"height":117,"text":"Backup of original Proc9 (10/5/2022)","colour":"e6e63c"}},"variables":{},"grids":{}},"info":{"name":"Proc9 Supps","description":"Proc9 Supps","type":"ORCHESTRATION","tag":"b183effe-0257-4975-8ca0-156d46e68128"}}