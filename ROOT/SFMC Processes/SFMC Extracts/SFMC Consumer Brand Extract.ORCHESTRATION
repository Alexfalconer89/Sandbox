{"job":{"components":{"197328":{"id":197328,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-592,"y":0,"width":32,"height":32,"inputConnectorIDs":[197337],"outputSuccessConnectorIDs":[197339],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Consumer Brand Extract"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/******************************************************************************************\nProgram           : SFMC Consumer Brand Extract\nAuthor            : Chris Bamford\nClient Name       : Nestle\nStandard Machine  : Snowflake\nAmendment History : v01 - CB 20220718 - Created\n******************************************************************************************/\n\n\ndrop view if exists ${Database}.db.consumer_brand_daily_extract;\ncreate or replace view ${Database}.db.consumer_brand_daily_extract\nas\nselect distinct \n    c.hid as hid,\n    trim(to_char(cb.brand_id))||'-'||trim(to_char(cb.cid)) as cid_brand,\n    cb.cid,\n    cast(tbw.db.strchop(cb.cid_brand_urn,'-',1,1) as int) as bbw_urn,\n    cb.cid_brand_urn as brand_bbw_urn,\n    cb.division_id,\n    cb.brand_id,\n    case when ca.cid is null then 'N' else 'Y' end as CIAM_account,\n    case when ca.cid is not null then ca.CIAM_id else '' end as CIAM_ID,\n    case when ca.cid is not null then to_char(ca.brand_id) else '' end as CIAM_BRAND_ID,\n\n    case \n        when ca.cid is null then 'N' \n        when ca.cid is not null and profiler.cid is not null  then 'YPC' \n        when ca.cid is not null and profiler.cid is null then 'YPNC' \n        else '' end as nescafe_ciam_profiler,\n\n    case\n        when length(cd.firstname) = 1 then ''\n        when substring(cd.firstname,2,1) = ' ' and length(cd.firstname) < 4 then ''\n        when length(cd.firstname) <13 then cd.firstname end as hero_name,\n    cd.title,\n    cd.firstname,\n    cd.lastname,\n    cd.add1,\n    cd.add2,\n    cd.add3,\n    cd.add4,\n    cd.add5,\n    cd.town,\n    cd.county,\n    cd.country,\n    cd.postcode,\n    --cb.email_brand as email,\n    --'blueberrywavetest+SFMC@gmail.com' as email,\n    case when cb.email_brand = '' then '' else concat('xxxx_',cb.email_brand) end as email,\n    cd.phone_home,\n    cd.phone_work,\n    cd.phone_mobile,\n    c.gender,\n    c.dob,\n    c.have_cat,\n    c.have_dog,\n    c.number_of_cats,\n    c.number_of_dogs,\n    c.purina_engagement_score,\n    c.purina_lapse_risk_segment,\n    case when lower(cd.country) = 'united kingdom' then 'UK'\n        when lower(cd.country) = 'ireland' then 'IE'\n        else '' end as ie_uk,\n        \n    cast(case\n         when lower(cb.customer_retention_group_brand) regexp '.*data orphan.*' then 'Expiring'\n         else cb.customer_retention_group_brand\n     end as varchar(25)) as customer_retention_group,\n\n    cb.customer_retention_date_brand as customer_retention_date,\n    case\n        when cb.customer_retention_date_brand >= add_months(current_date, -3)                                                                     then 'A: 0 - 3 Months'\n        when cb.customer_retention_date_brand >= add_months(current_date, -6) and cb.customer_retention_date_brand < add_months(current_date,-3)  then 'B: 4 - 6 Months'\n        when cb.customer_retention_date_brand >= add_months(current_date, -9) and cb.customer_retention_date_brand < add_months(current_date,-6)  then 'C: 7 - 9 Months'\n        when cb.customer_retention_date_brand >= add_months(current_date,-12) and cb.customer_retention_date_brand < add_months(current_date,-9)  then 'D: 10 - 12 Months'\n        when cb.customer_retention_date_brand >= add_months(current_date,-15) and cb.customer_retention_date_brand < add_months(current_date,-12) then 'E: 13 - 15 Months'\n        when cb.customer_retention_date_brand >= add_months(current_date,-18) and cb.customer_retention_date_brand < add_months(current_date,-15) then 'F: 16 - 18 Months'\n        when cb.customer_retention_date_brand >= add_months(current_date,-21) and cb.customer_retention_date_brand < add_months(current_date,-18) then 'G: 19 - 21 Months'\n        when cb.customer_retention_date_brand >= add_months(current_date,-24) and cb.customer_retention_date_brand < add_months(current_date,-21) then 'H: 22 - 24 Months'\n        else 'J: 24+ Months'\n    end as customer_retention_date_band,    \n\n    case \n        when cb.first_date_brand >= add_months(current_date,  -6)                                                             then 'A: 0 - 6 Months'\n        when cb.first_date_brand >= add_months(current_date, -12) and cb.first_date_brand < add_months(current_date,  -6) then 'B: 7 - 12 Months'\n        when cb.first_date_brand >= add_months(current_date, -24) and cb.first_date_brand < add_months(current_date, -12) then 'C: 13 - 24 Months'\n        when cb.first_date_brand >= add_months(current_date, -36) and cb.first_date_brand < add_months(current_date, -24) then 'D: 25 - 36 Months'\n        when cb.first_date_brand >= add_months(current_date, -48) and cb.first_date_brand < add_months(current_date, -36) then 'E: 37 - 48 Months'\n        when cb.first_date_brand >= add_months(current_date, -60) and cb.first_date_brand < add_months(current_date, -48) then 'F: 49 - 60 Months'\n        when cb.first_date_brand >= add_months(current_date,-120) and cb.first_date_brand < add_months(current_date, -60) then 'G: 6 - 10 Years'\n        when cb.first_date_brand >= add_months(current_date,-180) and cb.first_date_brand < add_months(current_date,-120) then 'H: 11 - 15 Years'\n        else 'J: Over 15 Years'\n    end as tenure_group,\n    cb.last_email_open_date_brand as last_email_open_date,\n    cb.first_date_brand as first_date,\n    cb.brand_preference,\n    cb.brand_engagement,\n    cb.brand_campaignable,\n    case \n        when cb.customer_suppression_group_brand > '' then cb.customer_suppression_group_brand\n        when cb.customer_retention_date_brand < add_months(current_date,-24) then 'Consent Expired'\n        else ''\n    end as customer_suppression_group,\n    case when ces.cid is not null then 'Y' else '' end as purina_ces_contact,\n    case when cs.cid is not null then cs.mailable else cb.mailable end as mailable,\n    case \n        when cs.cid is not null then cs.emailable \n        when cb.division_id in (select division_id from ${Database}.live.ref_division where division ilike '%carnation%') then cb.emailable_newsletter\n        else cb.emailable end as emailable,\n    case \n        when cb.emailable_first_date >= add_months(current_date,  -6)                                                        then 'A: 0 - 6 Months'\n        when cb.emailable_first_date >= add_months(current_date, -12) and cb.emailable_first_date < add_months(current_date,  -6) then 'B: 7 - 12 Months'\n        when cb.emailable_first_date >= add_months(current_date, -24) and cb.emailable_first_date < add_months(current_date, -12) then 'C: 13 - 24 Months'\n        when cb.emailable_first_date >= add_months(current_date, -36) and cb.emailable_first_date < add_months(current_date, -24) then 'D: 25 - 36 Months'\n        when cb.emailable_first_date >= add_months(current_date, -48) and cb.emailable_first_date < add_months(current_date, -36) then 'E: 37 - 48 Months'\n        when cb.emailable_first_date >= add_months(current_date, -60) and cb.emailable_first_date < add_months(current_date, -48) then 'F: 49 - 60 Months'\n        when cb.emailable_first_date >= add_months(current_date,-120) and cb.emailable_first_date < add_months(current_date, -60) then 'G: 6 - 10 Years'\n        when cb.emailable_first_date >= add_months(current_date,-180) and cb.emailable_first_date < add_months(current_date,-120) then 'H: 11 - 15 Years'\n        else 'J: Over 15 Years'\n    end as emailable_tenure_group,\n    cb.emailable_first_date,\n    cb.emailable_first_source,\n    cb.emailable_last_date,\n    cb.emailable_last_source,\n    cb.emailable_newsletter,\n    cs.mailable_ignoring_name_address as sma_mailable_ignoring_address,\n    case when cs.cid is not null then cs.mailable_ignoring_dp else cb.mailable_ignoring_dp end as mailable_ignoring_dp,\n    case when cs.cid is not null then cs.emailable_ignoring_dp else cb.emailable_ignoring_dp end as emailable_ignoring_dp,\n    case when lower(cs.live_joinedsource) regexp '(.*)(roi|mummypages|babyfairie)(.*)' or cs.country = 'Ireland' then cs.mailable else 0 end as sma_mailable_ie,\n    cs.member as sma_member,\n    cs.thirdparty as sma_thirdparty,\n    cs.source_nestle,\n    cs.source_moac,\n    cs.source_moac_date,\n    cs.first_regdate as sma_first_regdate,\n    cs.live_regdate as sma_live_regdate,\n    cs.child_under_27w,\n    cs.children_under_3,\n    cs.stage_indicator,\n    cs.shopmium_stage_indicator,\n    cs.email_cluster as sma_email_cluster,\n    cs.due_date_char,\n    cs.pregnancy_status,\n    cs.partnersite as sma_partnersite,\n    cs.password_reset as sma_password_reset,\n    cs.subject_line as sma_subject_line,\n    cs.welcome_pack_claimdate as sma_welcome_pack_claimdate,\n    substr(cs.thirdparty_url,1,255) as sma_thirdparty_url_a,\n    substr(cs.thirdparty_url,256,255) as sma_thirdparty_url_b,\n    substr(cs.thirdparty_url,511,255) as sma_thirdparty_url_c,\n    substr(cs.thirdparty_url,766,255) as sma_thirdparty_url_d,\n    de.comms_duedate as sma_comms_duedate,\n    de.comms_programme_description as sma_comms_programme_description,\n    coalesce(sh.fo_products,'') as sma_fo_product,\n    coalesce(sh.gum_products,'') as sma_gum_product\n\nfrom ${Database}.live.cid_brand cb\njoin ${Database}.live.cid c on c.cid = cb.cid --and c.churn_flag = ''\njoin ${Database}.live.cid_details cd on cd.cid = cb.cid\nleft join ${Database}.live.cid_sma cs on cs.cid = cb.cid \n                                    and cb.brand_id = (select brand_id from ${Database}.live.ref_brand where brand = 'SMA')--32\n                                    and cs.member = 1\nleft join ${Database}.live.dependant de on de.cid = cb.cid\n                                      and de.comms_duedate is not null\nleft join ${Database}.live.sma_shopmium_rewards sh on sh.cid = cs.cid\nleft join (select distinct\n                    xn.cid\n                    , n.email\n                    ,n.source_brand_id as brand_id\n                    ,first_value(n.data_date)over(partition by xn.cid, n.source_brand_id order by n.data_date desc) as data_date\n                    ,first_value(n.source_urn)over(partition by xn.cid, n.source_brand_id order by n.data_date desc) as ciam_id\n           from ${Database}.db.names n\n           join ${Database}.live.xref_name_urn xn on trim(n.name_urn) = xn.name_urn\n            where n.source = 'REG_GIG' --have a gigya/ciam account\n            and lower(n.source_file) not regexp '.*json.*'\n            and source_file <> '9999'\n          ) ca on ca.cid = cb.cid and ca.brand_id = cb.brand_id\nleft join  (select distinct cid            \n            from ${Database}.live.CID_brand_question cbq\n            join \t${Database}.live.ref_brand rb on rb.brand_id = cbq.brand_id\n            where  cbq.question_id = (select question_id from ${Database}.db.ref_question where question = 'What time of day do you drink your coffee')\n            and     rb.brand ilike '%nescafe%' \n           ) profiler on profiler.cid = c.cid\nleft join (select distinct --exclude ces contacts within last 3 months\n                        xr.cid\n                    from ${Database}.live.xref_name_urn xr\n                    where name_urn in  (\n                                          select\n                                              name_urn\n                                          from ${Database}.db.npp_ces_contacts\n                                          where cast(contact_date as date) > add_months(current_date,-3)\n                                          union all\n                                          select\n                                              name_urn\n                                          from ${Database}.db.npp_ces_contacts_and_surveys\n                                          where cast(contact_date as date) > add_months(current_date,-3)\n                                      ) \n           ) ces on cb.cid = ces.cid\nwhere  (\n    --Nestle/Purina (not SMA)\n        ( (  cb.customer_retention_date_brand      >= add_months(current_date,-25)\n         or cb.customer_retention_date_brand_ios15 >= add_months(current_date,-25)\n         )   and cs.cid is null \n             and cb.brand_campaignable = 1\n       )\n     or\n    --SMA\n      ( (  cb.customer_retention_date_brand        >= add_months(current_date,-37)\n         or cb.customer_retention_date_brand_ios15 >= add_months(current_date,-37)\n         )   and cs.cid is not null\n       )\n        )\n    --Exclusions\n    and cb.division_id not in (select division_id \n                                 from ${Database}.live.ref_division \n                                where division in ('Lactalis','Nespresso','Deleted')) --these divisions are not required for reporting or campaigning\n--restrict who we are selecting\nand cb.brand_id in (select brand_id from ${Database}.db.sfmc_brand_extract_lookup)\nand cb.brand_campaignable = 1\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"197332":{"id":197332,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-288,"y":0,"width":32,"height":32,"inputConnectorIDs":[197338],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Log End"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"insert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect\nCURRENT_TIMESTAMP::timestamp_ntz\n,'${Database}'\n,'BUILD'\n,'SFMC'\n,'SFMC CONSUMER EXTRACT'\n,'END'\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"197333":{"id":197333,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-704,"y":80,"width":32,"height":32,"inputConnectorIDs":[197336],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Log Start"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"insert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect\nCURRENT_TIMESTAMP::timestamp_ntz\n,'${Database}'\n,'BUILD'\n,'SFMC'\n,'SFMC CONSUMER EXTRACT'\n,'START'\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"197334":{"id":197334,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-448,"y":0,"width":32,"height":32,"inputConnectorIDs":[197339],"outputSuccessConnectorIDs":[197338],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy to S3"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"insert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect\n    current_timestamp::timestamp_ntz,\n    '${Database}',\n    'BUILD',\n    'SFMC',\n    'SFMC consumer brand copy to s3',\n    'STARTED';\n\n--Extract Script for Consumer Brand File, using ${Database}.db.consumer_brand_daily_extract view.\n-- To be output to S3 in a CSV file\n\ncopy into 's3://${Bucket}/sfmc/from_bbw/consumer_brand_${sfmc_file_date.now().format(\"dd_MM_yyyy\")}.csv'\nfrom (select \nhid,\nbbw_urn,\nbrand_bbw_urn,\nbrand_id as brand,\ndivision_id as division,\ncid,\nciam_id,\nciam_brand_id as ciam_id_brand,\nnescafe_ciam_profiler,\nhero_name,\ntitle,\nfirstname,\nlastname,\nadd1,\nadd2,\nadd3,\nadd4,\nadd5,\ntown,\ncounty,\ncountry,\npostcode,\nemail,\nphone_home,\nphone_work,\nphone_mobile,\ngender,\ndob,\nhave_cat,\nhave_dog,\nnumber_of_cats,\nnumber_of_dogs,\npurina_engagement_score as engagement_score,\npurina_lapse_risk_segment as lapse_risk_segment,\nie_uk,\ncustomer_retention_group,\ncustomer_retention_date,\ncustomer_retention_date_band,\ntenure_group,\nlast_email_open_date,\nfirst_date,\nbrand_preference,\nbrand_engagement,\nbrand_campaignable,\npurina_ces_contact,\ncustomer_suppression_group,         \nemailable_first_source,\nemailable_last_date,\nemailable_last_source,\nmailable,\nemailable,\nemailable_tenure_group,\nemailable_first_date,\nemailable_newsletter,\nCIAM_account as ciam_account,\nsma_member,\nsma_thirdparty,\nsource_nestle,\nsource_moac,\nsource_moac_date,\nsma_first_regdate,\nsma_live_regdate,\nchild_under_27w,\nsma_email_cluster,\npregnancy_status,\nsma_partnersite,\nsma_welcome_pack_claimdate,\nsma_thirdparty_url_a,\nsma_thirdparty_url_b,\nsma_thirdparty_url_c,\nsma_thirdparty_url_d,\nsma_comms_duedate,\nsma_comms_programme_description,\nsma_fo_product,\nsma_gum_product\nfrom \n${Database}.db.consumer_brand_daily_extract\n     )\nstorage_integration = ${Database}_S3_SI\nfile_format = (type=CSV\ncompression = NONE\nRECORD_DELIMITER='\\r\\n',\nFIELD_DELIMITER=',',\nFIELD_OPTIONALLY_ENCLOSED_BY = '\"',\nDATE_FORMAT='YYYY-MM-DD',\nTIME_FORMAT='HH:NN:SS',\nTIMESTAMP_FORMAT='YYYY-MM-DD HH24:MI:SS',\nEMPTY_FIELD_AS_NULL = FALSE,\nNULL_IF=(''),\nENCODING='UTF8')\noverwrite = TRUE\nsingle = TRUE\nheader = TRUE\nMAX_FILE_SIZE=5368709120\n;\n\n/*\n    log rows selected for export - consumer brand\n*/\ninsert into ${Database}.db.SFMC_extracts_daily_counts_log\n(\n  select \n    'copy to s3 - table count',\n    current_date,\n    current_timestamp,\n    'consumer_brand_'||TO_CHAR(current_date(),'DD_MM_YYYY')||'.csv',\n    count( *)\nfrom  ${Database}.db.consumer_brand_daily_extract\n);\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"197335":{"id":197335,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-704,"y":0,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[197336,197337],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Start","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"197338":{"id":197338,"sourceID":197334,"targetID":197332},"197339":{"id":197339,"sourceID":197328,"targetID":197334}},"failureConnectors":{},"unconditionalConnectors":{"197336":{"id":197336,"sourceID":197335,"targetID":197333},"197337":{"id":197337,"sourceID":197335,"targetID":197328}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{},"variables":{},"grids":{}},"info":{"name":"SFMC Consumer Brand Extract","description":"Consumer Brand Daily Extract File","type":"ORCHESTRATION","tag":"318893a5-204d-4c05-b822-3da081b15c37"}}