{"job":{"components":{"196816":{"id":196816,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":192,"y":0,"width":32,"height":32,"inputConnectorIDs":[196835],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Logging End"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"insert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect\nCURRENT_TIMESTAMP::timestamp_ntz\n,'${Database}'\n,'BUILD'\n,'READ SUPPRESSIONS'\n,'READ SUPPRESSIONS'\n,'FINISHED'\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196817":{"id":196817,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-1040,"y":0,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[196837],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Start","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196820":{"id":196820,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186829,"x":-912,"y":0,"width":32,"height":32,"inputConnectorIDs":[196837],"outputSuccessConnectorIDs":[196833],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Determine week day and day number"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print (myvar)\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print (context.getGridVariable('mygridvar'))\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\nfrom datetime import datetime\ntoday = datetime.now()\nprint(today)\n\n# get the day of the week (Monday = 0 , Sunday = 6)\nday_of_week = int( today.weekday() )\nprint(day_of_week)\n\ncontext.updateVariable(\"dayOfWeek\",day_of_week)\n\nday_of_month = today.strftime(\"%d\")\nprint(day_of_month)\n\ncontext.updateVariable(\"dayOfMonth\",day_of_month)"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true},"5":{"slot":5,"name":"User","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Restricted"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196821":{"id":196821,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":-320,"y":80,"width":32,"height":32,"inputConnectorIDs":[196834],"outputSuccessConnectorIDs":[196828],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Read_API EXPMORT Call"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Read_API EXPMORT Call"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196822":{"id":196822,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-464,"y":0,"width":32,"height":32,"inputConnectorIDs":[196838],"outputSuccessConnectorIDs":[196834],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Data Prep for Suppressions"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"-- /************************************************************************************/\n-- VERSION HISTORY\n-- 1.0  Angela Eadie  19/05/2022    System Improvements - Automate Monthly Cleaning\n--\n-- /************************************************************************************/\n\n-- Get initial data set\ncreate or replace table  ${Database}.temp.nestle_aio_cleanse as\nselect    bu.cid\n,         c.name_urn\n,         case \n              when business_unit ilike '%Nestlé UK Ltd%'then '01 - Nestlé UK Ltd' \n              when business_unit ilike '%purina%'       then '02 - Purina'\n              when business_unit ilike '%sma%'          then '03 - SMA'\n              when business_unit ilike '%cerelac%'      then '04 - Cerelac' \n              when business_unit ilike '%hcp%'          then '05 - HCP'\n              when business_unit ilike '%carnation%'    then '06 - Carnation'\n              when business_unit ilike '%cereal%'       then '07 - Cereal Partners'   \n              when business_unit ilike '%waters%'       then '08 - Nestle Waters'\n              when business_unit ilike '%nespresso%'    then '09 - Nespresso'\n              when business_unit ilike '%lactalis%'     then '10 - Lactalis' \n              when business_unit ilike '%vitaflo%'      then '11 - Vitaflo' \n              when business_unit ilike '%Nestlé International Brands%' then '12 - Nestlé International Brands'\n              else '13 - other' \n          end as business_unit\n, \tcase\n              when customer_retention_date_business_unit >= add_months(current_date, -1) then '01 - Last Month'\n              when customer_retention_date_business_unit > add_months(current_date, -12) and customer_retention_date_business_unit <= add_months(current_date, -2)  then '02 - 2-12 Months'            \n              when customer_retention_date_business_unit > add_months(current_date, -24) and customer_retention_date_business_unit <= add_months(current_date, -12) then '03 - 13-24 Months'\n              when customer_retention_date_business_unit > add_months(current_date, -36) and customer_retention_date_business_unit <= add_months(current_date, -24) then '04 - 25-36 Months'\n              when customer_retention_date_business_unit > add_months(current_date, -48) and customer_retention_date_business_unit <= add_months(current_date, -36) then '05 - 37-48 Months'                      \n              else '06 - 49+ Months'\n          end as retention_date\n,         case--carnation has a different email optin: emailable_newsletter\n              when  max(bu.mailable)  = 1 and (max(bu.emailable) = 0 and max(emailable_newsletter) = 0)then  '3 - Mail only'\n              when (max(bu.emailable) = 1 or max(emailable_newsletter) = 1) and max(bu.mailable)  = 0 then  '2 - Email only'\n              when (max(bu.emailable) = 1 or max(emailable_newsletter) = 1) and max(bu.mailable)  = 1 then  '1 - Mail and Email'\n              when (max(bu.emailable) = 0 and max(emailable_newsletter) = 0) and max(bu.mailable)  = 0 then  '4 - Uncontactable'\n          end as contact_status\nfrom      ${Database}.live.cid_business_unit bu\njoin      ${Database}.live.ref_business_unit rbu on bu.business_unit_id = rbu.business_unit_id\njoin      ${Database}.live.cid c on bu.cid = c.cid\ngroup by  1,2,3,4;\n\n-- Dedupe that data set\ncreate or replace table ${Database}.temp.nestle_aio_cleanse_dedupe as \nselect    distinct cid\n,         name_urn\n,         first_value (business_unit) over (partition by cid order by contact_status, business_unit, retention_date) as business_unit\n,         first_value (contact_status) over (partition by cid order by contact_status, business_unit, retention_date) as contact_status\n,         first_value (retention_date) over (partition by cid order by contact_status, business_unit, retention_date) as last_interaction_date\nfrom      ${Database}.temp.nestle_aio_cleanse;\n\n-- Now determine which records will be used for send to cleaning to REaD api for this run\ncreate or replace table ${Database}.temp.nestle_aio_cleanse_out_to_read as \nselect  cast(date_part(epoch_second, current_timestamp)||lpad(row_number() over (order by a.cid),12,0)as int) as new_ref\n,\t\ta.name_urn  \n,       cd.title\n,       cd.firstname\n,       cd.lastname\n,       cc.add1\n,       cc.add2\n,       cc.add3\n,       case when cc.add4 >'' then cc.add4 else cc.town end as add4\n,       case when cc.add5 >'' then cc.add5 else cc.county end as add5\n,       cc.postcode\n,       'bu'||left(business_unit,4)||'ldate'||left(last_interaction_date,4)||'contact'||left(contact_status,2) as cell\n-- The following 2 fields start as null and will be updated as each type of screen is done\n-- to ensure we dont include people once already screened out.\n,\t\tcast('' as varchar(1)) as deceased_flag\n,\t\tcast('' as varchar(50)) as deceased_flag_source\nfrom    ${Database}.temp.nestle_aio_cleanse_dedupe a\njoin    ${Database}.live.cid_details cd on a.cid = cd.cid\njoin ( select cid,\n--replacement value added\n             replace(add1,',', ' ') as add1\n    ,        replace(add2,',', ' ') as add2\n    ,        replace(add3,',', ' ') as add3\n      ,        replace(add4,',', ' ') as add4\n      ,        replace(add1,',', ' ') as add5\n      , replace (town, ',', ' ') as town\n      , replace (county, ',', ' ') as county\n      , replace (postcode, ',', ' ') as postcode\n      from ${Database}.live.cid_details) cc on a.cid = cc.cid\n\nwhere   cc.postcode > ''\nand     cc.add1 > ''\nand     cc.add1 <> 'uk'\nand     cc.add1 <> 'united kingdom'\nand     contact_status like any ('%1%','%2%')\nand     cd.title||cd.firstname||cd.lastname > ''\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196823":{"id":196823,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-624,"y":0,"width":32,"height":32,"inputConnectorIDs":[196832],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[196838],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Completed At","mapTo":"Error_CompletedAt"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"Error_Component"},"3":{"slot":3,"fromId":null,"fromName":"Duration","mapTo":"Error_Duration"},"4":{"slot":4,"fromId":null,"fromName":"Message","mapTo":"Error_Message"},"5":{"slot":5,"fromId":null,"fromName":"Row Count","mapTo":"Error_RowCount"},"6":{"slot":6,"fromId":null,"fromName":"Started At","mapTo":"Error_StartedAt"},"7":{"slot":7,"fromId":null,"fromName":"Status","mapTo":"Error_Status"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Logging Start"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"insert into tbw.db.monitoring\n(monitoring_timestamp,client,process,description,sub_description,value)\nselect\nCURRENT_TIMESTAMP::timestamp_ntz\n,'${Database}'\n,'BUILD'\n,'READ SUPPRESSIONS'\n,'READ SUPPRESSIONS'\n,'STARTED'\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196824":{"id":196824,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":-216,"y":-61,"width":32,"height":32,"inputConnectorIDs":[196828],"outputSuccessConnectorIDs":[196830],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Read_API MORT Call"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Read_API MORT Call"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196825":{"id":196825,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":-112,"y":80,"width":32,"height":32,"inputConnectorIDs":[196830],"outputSuccessConnectorIDs":[196829],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Read_API BR Call"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Read_API BR Call"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196826":{"id":196826,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1946388514,"x":-784,"y":128,"width":32,"height":32,"inputConnectorIDs":[196839],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End Success 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196827":{"id":196827,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":-784,"y":0,"width":32,"height":32,"inputConnectorIDs":[196833],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[196832],"outputFalseConnectorIDs":[196839],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Run Process?"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Simple"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"dayOfMonth"},"2":{"slot":2,"type":"STRING","value":"Is"},"3":{"slot":3,"type":"STRING","value":"Less than or equal to"},"4":{"slot":4,"type":"STRING","value":"7"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"STRING","value":"dayOfWeek"},"2":{"slot":2,"type":"STRING","value":"Is"},"3":{"slot":3,"type":"STRING","value":"Equal to"},"4":{"slot":4,"type":"STRING","value":"0"}}}},"visible":true},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"196831":{"id":196831,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":48,"y":0,"width":32,"height":32,"inputConnectorIDs":[196829],"outputSuccessConnectorIDs":[196835],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Send Screening Stats Report"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Send Screening Stats Report"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"196828":{"id":196828,"sourceID":196821,"targetID":196824},"196829":{"id":196829,"sourceID":196825,"targetID":196831},"196830":{"id":196830,"sourceID":196824,"targetID":196825},"196833":{"id":196833,"sourceID":196820,"targetID":196827},"196834":{"id":196834,"sourceID":196822,"targetID":196821},"196835":{"id":196835,"sourceID":196831,"targetID":196816}},"failureConnectors":{},"unconditionalConnectors":{"196837":{"id":196837,"sourceID":196817,"targetID":196820},"196838":{"id":196838,"sourceID":196823,"targetID":196822}},"trueConnectors":{"196832":{"id":196832,"sourceID":196827,"targetID":196823}},"falseConnectors":{"196839":{"id":196839,"sourceID":196827,"targetID":196826}},"iterationConnectors":{},"noteConnectors":{},"notes":{"196818":{"id":196818,"x":-1144,"y":-245,"width":310,"height":204,"text":"-- V1.0 ACE 13/05/2022 Automate Suppressions\nThis Job will be run monthly to automate the REaD suppression process for Nestle\n\nEM = Experian Mortality\nBR = The Bereavement Register\nMORT = Mortascreen\n\nJob should run on 1st monday of each month","colour":"e6e63c"}},"variables":{"dayOfMonth":{"definition":{"name":"dayOfMonth","type":"DECIMAL","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"dayOfWeek":{"definition":{"name":"dayOfWeek","type":"DECIMAL","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""}},"grids":{}},"info":{"name":"Nestle Monthly Suppressions REaD Processing","description":"","type":"ORCHESTRATION","tag":"3605b64a-e3f9-45c7-b9a6-c6156b074a7e"}}